{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Feature\n */\n\n\nimport BaseObject from './Object.js';\nimport EventType from './events/EventType.js';\nimport { assert } from './asserts.js';\nimport { listen, unlistenByKey } from './events.js';\n/**\n * @typedef {typeof Feature|typeof import(\"./render/Feature.js\").default} FeatureClass\n */\n\n/**\n * @typedef {Feature|import(\"./render/Feature.js\").default} FeatureLike\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:geometry', import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types\n *     |'change:geometry', Return>} FeatureOnSignature\n */\n\n/***\n * @template Geometry\n * @typedef {Object<string, *> & { geometry?: Geometry }} ObjectWithGeometry\n */\n\n/**\n * @classdesc\n * A vector object for geographic features with a geometry and other\n * attribute properties, similar to the features in vector file formats like\n * GeoJSON.\n *\n * Features can be styled individually with `setStyle`; otherwise they use the\n * style of their vector layer.\n *\n * Note that attribute properties are set as {@link module:ol/Object~BaseObject} properties on\n * the feature object, so they are observable, and have get/set accessors.\n *\n * Typically, a feature has a single geometry property. You can set the\n * geometry using the `setGeometry` method and get it with `getGeometry`.\n * It is possible to store more than one geometry on a feature using attribute\n * properties. By default, the geometry used for rendering is identified by\n * the property name `geometry`. If you want to use another geometry property\n * for rendering, use the `setGeometryName` method to change the attribute\n * property associated with the geometry for the feature.  For example:\n *\n * ```js\n *\n * import Feature from 'ol/Feature';\n * import Polygon from 'ol/geom/Polygon';\n * import Point from 'ol/geom/Point';\n *\n * var feature = new Feature({\n *   geometry: new Polygon(polyCoords),\n *   labelPoint: new Point(labelCoords),\n *   name: 'My Polygon'\n * });\n *\n * // get the polygon geometry\n * var poly = feature.getGeometry();\n *\n * // Render the feature as a point using the coordinates from labelPoint\n * feature.setGeometryName('labelPoint');\n *\n * // get the point geometry\n * var point = feature.getGeometry();\n * ```\n *\n * @api\n * @template {import(\"./geom/Geometry.js\").default} [Geometry=import(\"./geom/Geometry.js\").default]\n */\n\nvar Feature =\n/** @class */\nfunction (_super) {\n  __extends(Feature, _super);\n  /**\n   * @param {Geometry|ObjectWithGeometry<Geometry>} [opt_geometryOrProperties]\n   *     You may pass a Geometry object directly, or an object literal containing\n   *     properties. If you pass an object literal, you may include a Geometry\n   *     associated with a `geometry` key.\n   */\n\n\n  function Feature(opt_geometryOrProperties) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {FeatureOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @private\n     * @type {number|string|undefined}\n     */\n\n    _this.id_ = undefined;\n    /**\n     * @type {string}\n     * @private\n     */\n\n    _this.geometryName_ = 'geometry';\n    /**\n     * User provided style.\n     * @private\n     * @type {import(\"./style/Style.js\").StyleLike}\n     */\n\n    _this.style_ = null;\n    /**\n     * @private\n     * @type {import(\"./style/Style.js\").StyleFunction|undefined}\n     */\n\n    _this.styleFunction_ = undefined;\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n\n    _this.geometryChangeKey_ = null;\n\n    _this.addChangeListener(_this.geometryName_, _this.handleGeometryChanged_);\n\n    if (opt_geometryOrProperties) {\n      if (typeof\n      /** @type {?} */\n      opt_geometryOrProperties.getSimplifiedGeometry === 'function') {\n        var geometry =\n        /** @type {Geometry} */\n        opt_geometryOrProperties;\n\n        _this.setGeometry(geometry);\n      } else {\n        /** @type {Object<string, *>} */\n        var properties = opt_geometryOrProperties;\n\n        _this.setProperties(properties);\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * Clone this feature. If the original feature has a geometry it\n   * is also cloned. The feature id is not set in the clone.\n   * @return {Feature<Geometry>} The clone.\n   * @api\n   */\n\n\n  Feature.prototype.clone = function () {\n    var clone =\n    /** @type {Feature<Geometry>} */\n    new Feature(this.hasProperties() ? this.getProperties() : null);\n    clone.setGeometryName(this.getGeometryName());\n    var geometry = this.getGeometry();\n\n    if (geometry) {\n      clone.setGeometry(\n      /** @type {Geometry} */\n      geometry.clone());\n    }\n\n    var style = this.getStyle();\n\n    if (style) {\n      clone.setStyle(style);\n    }\n\n    return clone;\n  };\n  /**\n   * Get the feature's default geometry.  A feature may have any number of named\n   * geometries.  The \"default\" geometry (the one that is rendered by default) is\n   * set when calling {@link module:ol/Feature~Feature#setGeometry}.\n   * @return {Geometry|undefined} The default geometry for the feature.\n   * @api\n   * @observable\n   */\n\n\n  Feature.prototype.getGeometry = function () {\n    return (\n      /** @type {Geometry|undefined} */\n      this.get(this.geometryName_)\n    );\n  };\n  /**\n   * Get the feature identifier.  This is a stable identifier for the feature and\n   * is either set when reading data from a remote source or set explicitly by\n   * calling {@link module:ol/Feature~Feature#setId}.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n\n\n  Feature.prototype.getId = function () {\n    return this.id_;\n  };\n  /**\n   * Get the name of the feature's default geometry.  By default, the default\n   * geometry is named `geometry`.\n   * @return {string} Get the property name associated with the default geometry\n   *     for this feature.\n   * @api\n   */\n\n\n  Feature.prototype.getGeometryName = function () {\n    return this.geometryName_;\n  };\n  /**\n   * Get the feature's style. Will return what was provided to the\n   * {@link module:ol/Feature~Feature#setStyle} method.\n   * @return {import(\"./style/Style.js\").StyleLike|undefined} The feature style.\n   * @api\n   */\n\n\n  Feature.prototype.getStyle = function () {\n    return this.style_;\n  };\n  /**\n   * Get the feature's style function.\n   * @return {import(\"./style/Style.js\").StyleFunction|undefined} Return a function\n   * representing the current style of this feature.\n   * @api\n   */\n\n\n  Feature.prototype.getStyleFunction = function () {\n    return this.styleFunction_;\n  };\n  /**\n   * @private\n   */\n\n\n  Feature.prototype.handleGeometryChange_ = function () {\n    this.changed();\n  };\n  /**\n   * @private\n   */\n\n\n  Feature.prototype.handleGeometryChanged_ = function () {\n    if (this.geometryChangeKey_) {\n      unlistenByKey(this.geometryChangeKey_);\n      this.geometryChangeKey_ = null;\n    }\n\n    var geometry = this.getGeometry();\n\n    if (geometry) {\n      this.geometryChangeKey_ = listen(geometry, EventType.CHANGE, this.handleGeometryChange_, this);\n    }\n\n    this.changed();\n  };\n  /**\n   * Set the default geometry for the feature.  This will update the property\n   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\n   * @param {Geometry|undefined} geometry The new geometry.\n   * @api\n   * @observable\n   */\n\n\n  Feature.prototype.setGeometry = function (geometry) {\n    this.set(this.geometryName_, geometry);\n  };\n  /**\n   * Set the style for the feature to override the layer style.  This can be a\n   * single style object, an array of styles, or a function that takes a\n   * resolution and returns an array of styles. To unset the feature style, call\n   * `setStyle()` without arguments or a falsey value.\n   * @param {import(\"./style/Style.js\").StyleLike} [opt_style] Style for this feature.\n   * @api\n   * @fires module:ol/events/Event~BaseEvent#event:change\n   */\n\n\n  Feature.prototype.setStyle = function (opt_style) {\n    this.style_ = opt_style;\n    this.styleFunction_ = !opt_style ? undefined : createStyleFunction(opt_style);\n    this.changed();\n  };\n  /**\n   * Set the feature id.  The feature id is considered stable and may be used when\n   * requesting features or comparing identifiers returned from a remote source.\n   * The feature id can be used with the\n   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\n   * @param {number|string|undefined} id The feature id.\n   * @api\n   * @fires module:ol/events/Event~BaseEvent#event:change\n   */\n\n\n  Feature.prototype.setId = function (id) {\n    this.id_ = id;\n    this.changed();\n  };\n  /**\n   * Set the property name to be used when getting the feature's default geometry.\n   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\n   * this name will be returned.\n   * @param {string} name The property name of the default geometry.\n   * @api\n   */\n\n\n  Feature.prototype.setGeometryName = function (name) {\n    this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);\n    this.geometryName_ = name;\n    this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\n    this.handleGeometryChanged_();\n  };\n\n  return Feature;\n}(BaseObject);\n/**\n * Convert the provided object into a feature style function.  Functions passed\n * through unchanged.  Arrays of Style or single style objects wrapped\n * in a new feature style function.\n * @param {!import(\"./style/Style.js\").StyleFunction|!Array<import(\"./style/Style.js\").default>|!import(\"./style/Style.js\").default} obj\n *     A feature style function, a single style, or an array of styles.\n * @return {import(\"./style/Style.js\").StyleFunction} A style function.\n */\n\n\nexport function createStyleFunction(obj) {\n  if (typeof obj === 'function') {\n    return obj;\n  } else {\n    /**\n     * @type {Array<import(\"./style/Style.js\").default>}\n     */\n    var styles_1;\n\n    if (Array.isArray(obj)) {\n      styles_1 = obj;\n    } else {\n      assert(typeof\n      /** @type {?} */\n      obj.getZIndex === 'function', 41); // Expected an `import(\"./style/Style.js\").Style` or an array of `import(\"./style/Style.js\").Style`\n\n      var style =\n      /** @type {import(\"./style/Style.js\").default} */\n      obj;\n      styles_1 = [style];\n    }\n\n    return function () {\n      return styles_1;\n    };\n  }\n}\nexport default Feature;","map":{"version":3,"mappings":"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","names":["BaseObject","EventType","assert","listen","unlistenByKey","__extends","opt_geometryOrProperties","_super","_this","on","once","un","id_","undefined","geometryName_","style_","styleFunction_","geometryChangeKey_","addChangeListener","handleGeometryChanged_","getSimplifiedGeometry","geometry","setGeometry","properties","setProperties","Feature","clone","hasProperties","getProperties","setGeometryName","getGeometryName","getGeometry","style","getStyle","setStyle","get","changed","CHANGE","handleGeometryChange_","set","opt_style","createStyleFunction","id","name","removeChangeListener","obj","styles_1","Array","isArray","getZIndex"],"sourceRoot":"","sources":["src/Feature.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}