{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.map.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/PinchRotate\n */\n\n\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { disable } from '../rotationconstraint.js';\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\n\nvar PinchRotate =\n/** @class */\nfunction (_super) {\n  __extends(PinchRotate, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function PinchRotate(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    var pointerOptions =\n    /** @type {import(\"./Pointer.js\").Options} */\n    options;\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    _this = _super.call(this, pointerOptions) || this;\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n\n    _this.anchor_ = null;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.lastAngle_ = undefined;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.rotating_ = false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.rotationDelta_ = 0.0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.duration_ = options.duration !== undefined ? options.duration : 250;\n    return _this;\n  }\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n\n\n  PinchRotate.prototype.handleDragEvent = function (mapBrowserEvent) {\n    var rotationDelta = 0.0;\n    var touch0 = this.targetPointers[0];\n    var touch1 = this.targetPointers[1]; // angle between touches\n\n    var angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);\n\n    if (this.lastAngle_ !== undefined) {\n      var delta = angle - this.lastAngle_;\n      this.rotationDelta_ += delta;\n\n      if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\n        this.rotating_ = true;\n      }\n\n      rotationDelta = delta;\n    }\n\n    this.lastAngle_ = angle;\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n\n    if (view.getConstraints().rotation === disable) {\n      return;\n    } // rotate anchor point.\n    // FIXME: should be the intersection point between the lines:\n    //     touch0,touch1 and previousTouch0,previousTouch1\n\n\n    var viewportPosition = map.getViewport().getBoundingClientRect();\n    var centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixelInternal(centroid); // rotate\n\n    if (this.rotating_) {\n      map.render();\n      view.adjustRotationInternal(rotationDelta, this.anchor_);\n    }\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  PinchRotate.prototype.handleUpEvent = function (mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      view.endInteraction(this.duration_);\n      return false;\n    } else {\n      return true;\n    }\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  PinchRotate.prototype.handleDownEvent = function (mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      var map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastAngle_ = undefined;\n      this.rotating_ = false;\n      this.rotationDelta_ = 0.0;\n\n      if (!this.handlingDownUpSequence) {\n        map.getView().beginInteraction();\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return PinchRotate;\n}(PointerInteraction);\n\nexport default PinchRotate;","map":{"version":3,"mappings":"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","names":["PointerInteraction","centroid","centroidFromPointers","FALSE","disable","__extends","opt_options","options","pointerOptions","stopDown","_super","_this","anchor_","lastAngle_","undefined","rotating_","rotationDelta_","threshold_","threshold","duration_","duration","PinchRotate","mapBrowserEvent","rotationDelta","touch0","targetPointers","touch1","angle","Math","atan2","clientY","clientX","delta","abs","map","view","getView","getConstraints","rotation","viewportPosition","getViewport","getBoundingClientRect","left","top","getCoordinateFromPixelInternal","render","adjustRotationInternal","length","endInteraction","handlingDownUpSequence","beginInteraction"],"sourceRoot":"","sources":["../src/interaction/PinchRotate.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}