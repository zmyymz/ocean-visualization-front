{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\n * @module ol/format/GeoJSON\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { assert } from '../asserts.js';\nimport { assign, isEmpty } from '../obj.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */\n\nvar GeoJSON =\n/** @class */\nfunction (_super) {\n  __extends(GeoJSON, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function GeoJSON(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this) || this;\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n    _this.dataProjection = getProjection(options.dataProjection ? options.dataProjection : 'EPSG:4326');\n\n    if (options.featureProjection) {\n      /**\n       * @type {import(\"../proj/Projection.js\").default}\n       */\n      _this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n\n\n    _this.geometryName_ = options.geometryName;\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n\n    _this.extractGeometryName_ = options.extractGeometryName;\n    _this.supportedMediaTypes = ['application/geo+json', 'application/vnd.geo+json'];\n    return _this;\n  }\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  GeoJSON.prototype.readFeatureFromObject = function (object, opt_options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    var geoJSONFeature = null;\n\n    if (object['type'] === 'Feature') {\n      geoJSONFeature =\n      /** @type {GeoJSONFeature} */\n      object;\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry':\n        /** @type {GeoJSONGeometry} */\n        object,\n        'properties': null\n      };\n    }\n\n    var geometry = readGeometry(geoJSONFeature['geometry'], opt_options);\n    var feature = new Feature();\n\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (this.extractGeometryName_ && 'geometry_name' in geoJSONFeature !== undefined) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n\n    feature.setGeometry(geometry);\n\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties'], true);\n    }\n\n    return feature;\n  };\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n\n\n  GeoJSON.prototype.readFeaturesFromObject = function (object, opt_options) {\n    var geoJSONObject =\n    /** @type {GeoJSONObject} */\n    object;\n    /** @type {Array<import(\"../Feature.js\").default>} */\n\n    var features = null;\n\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      var geoJSONFeatureCollection =\n      /** @type {GeoJSONFeatureCollection} */\n      object;\n      features = [];\n      var geoJSONFeatures = geoJSONFeatureCollection['features'];\n\n      for (var i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, opt_options)];\n    }\n\n    return features;\n  };\n  /**\n   * @param {GeoJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  GeoJSON.prototype.readGeometryFromObject = function (object, opt_options) {\n    return readGeometry(object, opt_options);\n  };\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  GeoJSON.prototype.readProjectionFromObject = function (object) {\n    var crs = object['crs'];\n    var projection;\n\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else if (crs['type'] === 'EPSG') {\n        projection = getProjection('EPSG:' + crs['properties']['code']);\n      } else {\n        assert(false, 36); // Unknown SRS type\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n\n    return (\n      /** @type {import(\"../proj/Projection.js\").default} */\n      projection\n    );\n  };\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {GeoJSONFeature} Object.\n   * @api\n   */\n\n\n  GeoJSON.prototype.writeFeatureObject = function (feature, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    /** @type {GeoJSONFeature} */\n\n    var object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null\n    };\n    var id = feature.getId();\n\n    if (id !== undefined) {\n      object.id = id;\n    }\n\n    if (!feature.hasProperties()) {\n      return object;\n    }\n\n    var properties = feature.getProperties();\n    var geometry = feature.getGeometry();\n\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, opt_options);\n      delete properties[feature.getGeometryName()];\n    }\n\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n\n    return object;\n  };\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @api\n   */\n\n\n  GeoJSON.prototype.writeFeaturesObject = function (features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var objects = [];\n\n    for (var i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], opt_options));\n    }\n\n    return {\n      type: 'FeatureCollection',\n      features: objects\n    };\n  };\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @api\n   */\n\n\n  GeoJSON.prototype.writeGeometryObject = function (geometry, opt_options) {\n    return writeGeometry(geometry, this.adaptOptions(opt_options));\n  };\n\n  return GeoJSON;\n}(JSONFeature);\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\n\n\nfunction readGeometry(object, opt_options) {\n  if (!object) {\n    return null;\n  }\n  /**\n   * @type {import(\"../geom/Geometry.js\").default}\n   */\n\n\n  var geometry;\n\n  switch (object['type']) {\n    case GeometryType.POINT:\n      {\n        geometry = readPointGeometry(\n        /** @type {GeoJSONPoint} */\n        object);\n        break;\n      }\n\n    case GeometryType.LINE_STRING:\n      {\n        geometry = readLineStringGeometry(\n        /** @type {GeoJSONLineString} */\n        object);\n        break;\n      }\n\n    case GeometryType.POLYGON:\n      {\n        geometry = readPolygonGeometry(\n        /** @type {GeoJSONPolygon} */\n        object);\n        break;\n      }\n\n    case GeometryType.MULTI_POINT:\n      {\n        geometry = readMultiPointGeometry(\n        /** @type {GeoJSONMultiPoint} */\n        object);\n        break;\n      }\n\n    case GeometryType.MULTI_LINE_STRING:\n      {\n        geometry = readMultiLineStringGeometry(\n        /** @type {GeoJSONMultiLineString} */\n        object);\n        break;\n      }\n\n    case GeometryType.MULTI_POLYGON:\n      {\n        geometry = readMultiPolygonGeometry(\n        /** @type {GeoJSONMultiPolygon} */\n        object);\n        break;\n      }\n\n    case GeometryType.GEOMETRY_COLLECTION:\n      {\n        geometry = readGeometryCollectionGeometry(\n        /** @type {GeoJSONGeometryCollection} */\n        object);\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unsupported GeoJSON type: ' + object.type);\n      }\n  }\n\n  return transformGeometryWithOptions(geometry, false, opt_options);\n}\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {GeometryCollection} Geometry collection.\n */\n\n\nfunction readGeometryCollectionGeometry(object, opt_options) {\n  var geometries = object['geometries'].map(\n  /**\n   * @param {GeoJSONGeometry} geometry Geometry.\n   * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   */\n  function (geometry) {\n    return readGeometry(geometry, opt_options);\n  });\n  return new GeometryCollection(geometries);\n}\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\n\n\nfunction readPointGeometry(object) {\n  return new Point(object['coordinates']);\n}\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\n\n\nfunction readLineStringGeometry(object) {\n  return new LineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\n\n\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\n\n\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\n\n\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object['coordinates']);\n}\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\n\n\nfunction readPolygonGeometry(object) {\n  return new Polygon(object['coordinates']);\n}\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeGeometry(geometry, opt_options) {\n  geometry = transformGeometryWithOptions(geometry, true, opt_options);\n  var type = geometry.getType();\n  /** @type {GeoJSONGeometry} */\n\n  var geoJSON;\n\n  switch (type) {\n    case GeometryType.POINT:\n      {\n        geoJSON = writePointGeometry(\n        /** @type {Point} */\n        geometry, opt_options);\n        break;\n      }\n\n    case GeometryType.LINE_STRING:\n      {\n        geoJSON = writeLineStringGeometry(\n        /** @type {LineString} */\n        geometry, opt_options);\n        break;\n      }\n\n    case GeometryType.POLYGON:\n      {\n        geoJSON = writePolygonGeometry(\n        /** @type {Polygon} */\n        geometry, opt_options);\n        break;\n      }\n\n    case GeometryType.MULTI_POINT:\n      {\n        geoJSON = writeMultiPointGeometry(\n        /** @type {MultiPoint} */\n        geometry, opt_options);\n        break;\n      }\n\n    case GeometryType.MULTI_LINE_STRING:\n      {\n        geoJSON = writeMultiLineStringGeometry(\n        /** @type {MultiLineString} */\n        geometry, opt_options);\n        break;\n      }\n\n    case GeometryType.MULTI_POLYGON:\n      {\n        geoJSON = writeMultiPolygonGeometry(\n        /** @type {MultiPolygon} */\n        geometry, opt_options);\n        break;\n      }\n\n    case GeometryType.GEOMETRY_COLLECTION:\n      {\n        geoJSON = writeGeometryCollectionGeometry(\n        /** @type {GeometryCollection} */\n        geometry, opt_options);\n        break;\n      }\n\n    case GeometryType.CIRCLE:\n      {\n        geoJSON = {\n          type: 'GeometryCollection',\n          geometries: []\n        };\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n\n  return geoJSON;\n}\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\n\n\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n  var geometries = geometry.getGeometriesArray().map(function (geometry) {\n    var options = assign({}, opt_options);\n    delete options.featureProjection;\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries\n  };\n}\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiPointGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  var right;\n\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writePointGeometry(geometry, opt_options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n\n\nfunction writePolygonGeometry(geometry, opt_options) {\n  var right;\n\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n\nexport default GeoJSON;","map":{"version":3,"mappings":"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","names":["Feature","GeometryCollection","GeometryType","JSONFeature","LineString","MultiLineString","MultiPoint","MultiPolygon","Point","Polygon","assert","assign","isEmpty","get","getProjection","transformGeometryWithOptions","__extends","opt_options","options","_super","_this","dataProjection","featureProjection","defaultFeatureProjection","geometryName_","geometryName","extractGeometryName_","extractGeometryName","supportedMediaTypes","GeoJSON","object","geoJSONFeature","geometry","readGeometry","feature","setGeometryName","undefined","setGeometry","setId","setProperties","geoJSONObject","features","geoJSONFeatureCollection","geoJSONFeatures","i","ii","length","push","readFeatureFromObject","crs","projection","adaptOptions","properties","id","getId","hasProperties","getProperties","getGeometry","writeGeometry","getGeometryName","objects","writeFeatureObject","type","POINT","readPointGeometry","LINE_STRING","readLineStringGeometry","POLYGON","readPolygonGeometry","MULTI_POINT","readMultiPointGeometry","MULTI_LINE_STRING","readMultiLineStringGeometry","MULTI_POLYGON","readMultiPolygonGeometry","GEOMETRY_COLLECTION","readGeometryCollectionGeometry","Error","geometries","map","getType","geoJSON","writePointGeometry","writeLineStringGeometry","writePolygonGeometry","writeMultiPointGeometry","writeMultiLineStringGeometry","writeMultiPolygonGeometry","writeGeometryCollectionGeometry","CIRCLE","getGeometriesArray","coordinates","getCoordinates","right","rightHanded"],"sourceRoot":"","sources":["../src/format/GeoJSON.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}