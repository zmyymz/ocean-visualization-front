{"ast":null,"code":"import _classCallCheck from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint16-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport BaseDecoder from './basedecoder.js';\nvar MIN_BITS = 9;\nvar CLEAR_CODE = 256; // clear code\n\nvar EOI_CODE = 257; // end of information\n\nvar MAX_BYTELENGTH = 12;\n\nfunction getByte(array, position, length) {\n  var d = position % 8;\n  var a = Math.floor(position / 8);\n  var de = 8 - d;\n  var ef = position + length - (a + 1) * 8;\n  var fg = 8 * (a + 2) - (position + length);\n  var dg = (a + 2) * 8 - position;\n  fg = Math.max(0, fg);\n\n  if (a >= array.length) {\n    console.warn('ran off the end of the buffer before finding EOI_CODE (end on input code)');\n    return EOI_CODE;\n  }\n\n  var chunk1 = array[a] & Math.pow(2, 8 - d) - 1;\n  chunk1 <<= length - de;\n  var chunks = chunk1;\n\n  if (a + 1 < array.length) {\n    var chunk2 = array[a + 1] >>> fg;\n    chunk2 <<= Math.max(0, length - dg);\n    chunks += chunk2;\n  }\n\n  if (ef > 8 && a + 2 < array.length) {\n    var hi = (a + 3) * 8 - (position + length);\n    var chunk3 = array[a + 2] >>> hi;\n    chunks += chunk3;\n  }\n\n  return chunks;\n}\n\nfunction appendReversed(dest, source) {\n  for (var i = source.length - 1; i >= 0; i--) {\n    dest.push(source[i]);\n  }\n\n  return dest;\n}\n\nfunction decompress(input) {\n  var dictionaryIndex = new Uint16Array(4093);\n  var dictionaryChar = new Uint8Array(4093);\n\n  for (var i = 0; i <= 257; i++) {\n    dictionaryIndex[i] = 4096;\n    dictionaryChar[i] = i;\n  }\n\n  var dictionaryLength = 258;\n  var byteLength = MIN_BITS;\n  var position = 0;\n\n  function initDictionary() {\n    dictionaryLength = 258;\n    byteLength = MIN_BITS;\n  }\n\n  function getNext(array) {\n    var byte = getByte(array, position, byteLength);\n    position += byteLength;\n    return byte;\n  }\n\n  function addToDictionary(i, c) {\n    dictionaryChar[dictionaryLength] = c;\n    dictionaryIndex[dictionaryLength] = i;\n    dictionaryLength++;\n    return dictionaryLength - 1;\n  }\n\n  function getDictionaryReversed(n) {\n    var rev = [];\n\n    for (var _i = n; _i !== 4096; _i = dictionaryIndex[_i]) {\n      rev.push(dictionaryChar[_i]);\n    }\n\n    return rev;\n  }\n\n  var result = [];\n  initDictionary();\n  var array = new Uint8Array(input);\n  var code = getNext(array);\n  var oldCode;\n\n  while (code !== EOI_CODE) {\n    if (code === CLEAR_CODE) {\n      initDictionary();\n      code = getNext(array);\n\n      while (code === CLEAR_CODE) {\n        code = getNext(array);\n      }\n\n      if (code === EOI_CODE) {\n        break;\n      } else if (code > CLEAR_CODE) {\n        throw new Error(\"corrupted code at scanline \".concat(code));\n      } else {\n        var val = getDictionaryReversed(code);\n        appendReversed(result, val);\n        oldCode = code;\n      }\n    } else if (code < dictionaryLength) {\n      var _val = getDictionaryReversed(code);\n\n      appendReversed(result, _val);\n      addToDictionary(oldCode, _val[_val.length - 1]);\n      oldCode = code;\n    } else {\n      var oldVal = getDictionaryReversed(oldCode);\n\n      if (!oldVal) {\n        throw new Error(\"Bogus entry. Not in dictionary, \".concat(oldCode, \" / \").concat(dictionaryLength, \", position: \").concat(position));\n      }\n\n      appendReversed(result, oldVal);\n      result.push(oldVal[oldVal.length - 1]);\n      addToDictionary(oldCode, oldVal[oldVal.length - 1]);\n      oldCode = code;\n    }\n\n    if (dictionaryLength + 1 >= Math.pow(2, byteLength)) {\n      if (byteLength === MAX_BYTELENGTH) {\n        oldCode = undefined;\n      } else {\n        byteLength++;\n      }\n    }\n\n    code = getNext(array);\n  }\n\n  return new Uint8Array(result);\n}\n\nvar LZWDecoder = /*#__PURE__*/function (_BaseDecoder) {\n  _inherits(LZWDecoder, _BaseDecoder);\n\n  var _super = _createSuper(LZWDecoder);\n\n  function LZWDecoder() {\n    _classCallCheck(this, LZWDecoder);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LZWDecoder, [{\n    key: \"decodeBlock\",\n    value: function decodeBlock(buffer) {\n      return decompress(buffer, false).buffer;\n    }\n  }]);\n\n  return LZWDecoder;\n}(BaseDecoder);\n\nexport { LZWDecoder as default };","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/geotiff/dist-module/compression/lzw.js"],"names":["BaseDecoder","MIN_BITS","CLEAR_CODE","EOI_CODE","MAX_BYTELENGTH","getByte","array","position","length","d","a","Math","floor","de","ef","fg","dg","max","console","warn","chunk1","chunks","chunk2","hi","chunk3","appendReversed","dest","source","i","push","decompress","input","dictionaryIndex","Uint16Array","dictionaryChar","Uint8Array","dictionaryLength","byteLength","initDictionary","getNext","byte","addToDictionary","c","getDictionaryReversed","n","rev","result","code","oldCode","Error","val","oldVal","undefined","LZWDecoder","buffer"],"mappings":"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","sourcesContent":["import BaseDecoder from './basedecoder.js';\n\nconst MIN_BITS = 9;\nconst CLEAR_CODE = 256; // clear code\nconst EOI_CODE = 257; // end of information\nconst MAX_BYTELENGTH = 12;\n\nfunction getByte(array, position, length) {\n  const d = position % 8;\n  const a = Math.floor(position / 8);\n  const de = 8 - d;\n  const ef = (position + length) - ((a + 1) * 8);\n  let fg = (8 * (a + 2)) - (position + length);\n  const dg = ((a + 2) * 8) - position;\n  fg = Math.max(0, fg);\n  if (a >= array.length) {\n    console.warn('ran off the end of the buffer before finding EOI_CODE (end on input code)');\n    return EOI_CODE;\n  }\n  let chunk1 = array[a] & ((2 ** (8 - d)) - 1);\n  chunk1 <<= (length - de);\n  let chunks = chunk1;\n  if (a + 1 < array.length) {\n    let chunk2 = array[a + 1] >>> fg;\n    chunk2 <<= Math.max(0, (length - dg));\n    chunks += chunk2;\n  }\n  if (ef > 8 && a + 2 < array.length) {\n    const hi = ((a + 3) * 8) - (position + length);\n    const chunk3 = array[a + 2] >>> hi;\n    chunks += chunk3;\n  }\n  return chunks;\n}\n\nfunction appendReversed(dest, source) {\n  for (let i = source.length - 1; i >= 0; i--) {\n    dest.push(source[i]);\n  }\n  return dest;\n}\n\nfunction decompress(input) {\n  const dictionaryIndex = new Uint16Array(4093);\n  const dictionaryChar = new Uint8Array(4093);\n  for (let i = 0; i <= 257; i++) {\n    dictionaryIndex[i] = 4096;\n    dictionaryChar[i] = i;\n  }\n  let dictionaryLength = 258;\n  let byteLength = MIN_BITS;\n  let position = 0;\n\n  function initDictionary() {\n    dictionaryLength = 258;\n    byteLength = MIN_BITS;\n  }\n  function getNext(array) {\n    const byte = getByte(array, position, byteLength);\n    position += byteLength;\n    return byte;\n  }\n  function addToDictionary(i, c) {\n    dictionaryChar[dictionaryLength] = c;\n    dictionaryIndex[dictionaryLength] = i;\n    dictionaryLength++;\n    return dictionaryLength - 1;\n  }\n  function getDictionaryReversed(n) {\n    const rev = [];\n    for (let i = n; i !== 4096; i = dictionaryIndex[i]) {\n      rev.push(dictionaryChar[i]);\n    }\n    return rev;\n  }\n\n  const result = [];\n  initDictionary();\n  const array = new Uint8Array(input);\n  let code = getNext(array);\n  let oldCode;\n  while (code !== EOI_CODE) {\n    if (code === CLEAR_CODE) {\n      initDictionary();\n      code = getNext(array);\n      while (code === CLEAR_CODE) {\n        code = getNext(array);\n      }\n\n      if (code === EOI_CODE) {\n        break;\n      } else if (code > CLEAR_CODE) {\n        throw new Error(`corrupted code at scanline ${code}`);\n      } else {\n        const val = getDictionaryReversed(code);\n        appendReversed(result, val);\n        oldCode = code;\n      }\n    } else if (code < dictionaryLength) {\n      const val = getDictionaryReversed(code);\n      appendReversed(result, val);\n      addToDictionary(oldCode, val[val.length - 1]);\n      oldCode = code;\n    } else {\n      const oldVal = getDictionaryReversed(oldCode);\n      if (!oldVal) {\n        throw new Error(`Bogus entry. Not in dictionary, ${oldCode} / ${dictionaryLength}, position: ${position}`);\n      }\n      appendReversed(result, oldVal);\n      result.push(oldVal[oldVal.length - 1]);\n      addToDictionary(oldCode, oldVal[oldVal.length - 1]);\n      oldCode = code;\n    }\n\n    if (dictionaryLength + 1 >= (2 ** byteLength)) {\n      if (byteLength === MAX_BYTELENGTH) {\n        oldCode = undefined;\n      } else {\n        byteLength++;\n      }\n    }\n    code = getNext(array);\n  }\n  return new Uint8Array(result);\n}\n\nexport default class LZWDecoder extends BaseDecoder {\n  decodeBlock(buffer) {\n    return decompress(buffer, false).buffer;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}