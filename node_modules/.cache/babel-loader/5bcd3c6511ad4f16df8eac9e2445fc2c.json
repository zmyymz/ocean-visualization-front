{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/WKB\n */\n\n\nimport Feature from '../Feature.js';\nimport FeatureFormat, { transformGeometryWithOptions } from './Feature.js';\nimport FormatType from './FormatType.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { get as getProjection } from '../proj.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport { assign } from '../obj.js'; // WKB spec: https://www.ogc.org/standards/sfa\n// EWKB spec: https://raw.githubusercontent.com/postgis/postgis/2.1.0/doc/ZMSgeoms.txt\n\n/**\n * @const\n * @enum {number}\n */\n\nvar WKBGeometryType = {\n  POINT: 1,\n  LINE_STRING: 2,\n  POLYGON: 3,\n  MULTI_POINT: 4,\n  MULTI_LINE_STRING: 5,\n  MULTI_POLYGON: 6,\n  GEOMETRY_COLLECTION: 7,\n\n  /*\n  CIRCULAR_STRING: 8,\n  COMPOUND_CURVE: 9,\n  CURVE_POLYGON: 10,\n     MULTI_CURVE: 11,\n  MULTI_SURFACE: 12,\n  CURVE: 13,\n  SURFACE: 14,\n  */\n  POLYHEDRAL_SURFACE: 15,\n  TIN: 16,\n  TRIANGLE: 17\n};\n\nvar WkbReader =\n/** @class */\nfunction () {\n  /**\n   * @param {DataView} view source to read\n   */\n  function WkbReader(view) {\n    this.view_ = view;\n    this.pos_ = 0;\n    this.initialized_ = false;\n    this.isLittleEndian_ = false;\n    this.hasZ_ = false;\n    this.hasM_ = false;\n    /** @type {number|null} */\n\n    this.srid_ = null;\n    this.layout_ = GeometryLayout.XY;\n  }\n  /**\n   * @return {number} value\n   */\n\n\n  WkbReader.prototype.readUint8 = function () {\n    return this.view_.getUint8(this.pos_++);\n  };\n  /**\n   * @param {boolean} [isLittleEndian] Whether read value as little endian\n   * @return {number} value\n   */\n\n\n  WkbReader.prototype.readUint32 = function (isLittleEndian) {\n    return this.view_.getUint32((this.pos_ += 4) - 4, isLittleEndian !== undefined ? isLittleEndian : this.isLittleEndian_);\n  };\n  /**\n   * @param {boolean} [isLittleEndian] Whether read value as little endian\n   * @return {number} value\n   */\n\n\n  WkbReader.prototype.readDouble = function (isLittleEndian) {\n    return this.view_.getFloat64((this.pos_ += 8) - 8, isLittleEndian !== undefined ? isLittleEndian : this.isLittleEndian_);\n  };\n  /**\n   * @return {import('../coordinate.js').Coordinate} coords for Point\n   */\n\n\n  WkbReader.prototype.readPoint = function () {\n    /** @type import('../coordinate.js').Coordinate */\n    var coords = [];\n    coords.push(this.readDouble());\n    coords.push(this.readDouble());\n\n    if (this.hasZ_) {\n      coords.push(this.readDouble());\n    }\n\n    if (this.hasM_) {\n      coords.push(this.readDouble());\n    }\n\n    return coords;\n  };\n  /**\n   * @return {Array<import('../coordinate.js').Coordinate>} coords for LineString / LinearRing\n   */\n\n\n  WkbReader.prototype.readLineString = function () {\n    var numPoints = this.readUint32();\n    /** @type Array<import('../coordinate.js').Coordinate> */\n\n    var coords = [];\n\n    for (var i = 0; i < numPoints; i++) {\n      coords.push(this.readPoint());\n    }\n\n    return coords;\n  };\n  /**\n   * @return {Array<Array<import('../coordinate.js').Coordinate>>} coords for Polygon like\n   */\n\n\n  WkbReader.prototype.readPolygon = function () {\n    var numRings = this.readUint32();\n    /** @type Array<Array<import('../coordinate.js').Coordinate>> */\n\n    var rings = [];\n\n    for (var i = 0; i < numRings; i++) {\n      rings.push(this.readLineString()); // as a LinearRing\n    }\n\n    return rings;\n  };\n  /**\n   * @param {number} [expectedTypeId] Expected WKB Type ID\n   * @return {number} WKB Type ID\n   */\n\n\n  WkbReader.prototype.readWkbHeader = function (expectedTypeId) {\n    var byteOrder = this.readUint8();\n    var isLittleEndian = byteOrder > 0;\n    var wkbType = this.readUint32(isLittleEndian);\n    var wkbTypeThousandth = Math.floor((wkbType & 0x0fffffff) / 1000);\n    var hasZ = Boolean(wkbType & 0x80000000) || wkbTypeThousandth === 1 || wkbTypeThousandth === 3;\n    var hasM = Boolean(wkbType & 0x40000000) || wkbTypeThousandth === 2 || wkbTypeThousandth === 3;\n    var hasSRID = Boolean(wkbType & 0x20000000);\n    var typeId = (wkbType & 0x0fffffff) % 1000; // Assume 1000 is an upper limit for type ID\n\n    var layout = ['XY', hasZ ? 'Z' : '', hasM ? 'M' : ''].join('');\n    var srid = hasSRID ? this.readUint32(isLittleEndian) : null;\n\n    if (expectedTypeId !== undefined && expectedTypeId !== typeId) {\n      throw new Error('Unexpected WKB geometry type ' + typeId);\n    }\n\n    if (this.initialized_) {\n      // sanity checks\n      if (this.isLittleEndian_ !== isLittleEndian) {\n        throw new Error('Inconsistent endian');\n      }\n\n      if (this.layout_ !== layout) {\n        throw new Error('Inconsistent geometry layout');\n      }\n\n      if (srid && this.srid_ !== srid) {\n        throw new Error('Inconsistent coordinate system (SRID)');\n      }\n    } else {\n      this.isLittleEndian_ = isLittleEndian;\n      this.hasZ_ = hasZ;\n      this.hasM_ = hasM;\n      this.layout_ = layout;\n      this.srid_ = srid;\n      this.initialized_ = true;\n    }\n\n    return typeId;\n  };\n  /**\n   * @param {number} typeId WKB Type ID\n   * @return {any} values read\n   */\n\n\n  WkbReader.prototype.readWkbPayload = function (typeId) {\n    switch (typeId) {\n      case WKBGeometryType.POINT:\n        return this.readPoint();\n\n      case WKBGeometryType.LINE_STRING:\n        return this.readLineString();\n\n      case WKBGeometryType.POLYGON:\n      case WKBGeometryType.TRIANGLE:\n        return this.readPolygon();\n\n      case WKBGeometryType.MULTI_POINT:\n        return this.readMultiPoint();\n\n      case WKBGeometryType.MULTI_LINE_STRING:\n        return this.readMultiLineString();\n\n      case WKBGeometryType.MULTI_POLYGON:\n      case WKBGeometryType.POLYHEDRAL_SURFACE:\n      case WKBGeometryType.TIN:\n        return this.readMultiPolygon();\n\n      case WKBGeometryType.GEOMETRY_COLLECTION:\n        return this.readGeometryCollection();\n\n      default:\n        throw new Error('Unsupported WKB geometry type ' + typeId + ' is found');\n    }\n  };\n  /**\n   * @param {number} expectedTypeId Expected WKB Type ID\n   * @return {any} values read\n   */\n\n\n  WkbReader.prototype.readWkbBlock = function (expectedTypeId) {\n    return this.readWkbPayload(this.readWkbHeader(expectedTypeId));\n  };\n  /**\n   * @param {Function} reader reader function for each item\n   * @param {number} [expectedTypeId] Expected WKB Type ID\n   * @return {any} values read\n   */\n\n\n  WkbReader.prototype.readWkbCollection = function (reader, expectedTypeId) {\n    var num = this.readUint32();\n    var items = [];\n\n    for (var i = 0; i < num; i++) {\n      var result = reader.call(this, expectedTypeId);\n\n      if (result) {\n        items.push(result);\n      }\n    }\n\n    return items;\n  };\n  /**\n   * @return {Array<import('../coordinate.js').Coordinate>} coords for MultiPoint\n   */\n\n\n  WkbReader.prototype.readMultiPoint = function () {\n    return this.readWkbCollection(this.readWkbBlock, WKBGeometryType.POINT);\n  };\n  /**\n   * @return {Array<Array<import('../coordinate.js').Coordinate>>} coords for MultiLineString like\n   */\n\n\n  WkbReader.prototype.readMultiLineString = function () {\n    return this.readWkbCollection(this.readWkbBlock, WKBGeometryType.LINE_STRING);\n  };\n  /**\n   * @return {Array<Array<Array<import('../coordinate.js').Coordinate>>>} coords for MultiPolygon like\n   */\n\n\n  WkbReader.prototype.readMultiPolygon = function () {\n    return this.readWkbCollection(this.readWkbBlock, WKBGeometryType.POLYGON);\n  };\n  /**\n   * @return {Array<import('../geom/Geometry.js').default>} array of geometries\n   */\n\n\n  WkbReader.prototype.readGeometryCollection = function () {\n    return this.readWkbCollection(this.readGeometry);\n  };\n  /**\n   * @return {import('../geom/Geometry.js').default} geometry\n   */\n\n\n  WkbReader.prototype.readGeometry = function () {\n    var typeId = this.readWkbHeader();\n    var result = this.readWkbPayload(typeId);\n\n    switch (typeId) {\n      case WKBGeometryType.POINT:\n        return new Point(\n        /** @type {import('../coordinate.js').Coordinate} */\n        result, this.layout_);\n\n      case WKBGeometryType.LINE_STRING:\n        return new LineString(\n        /** @type {Array<import('../coordinate.js').Coordinate>} */\n        result, this.layout_);\n\n      case WKBGeometryType.POLYGON:\n      case WKBGeometryType.TRIANGLE:\n        return new Polygon(\n        /** @type {Array<Array<import('../coordinate.js').Coordinate>>} */\n        result, this.layout_);\n\n      case WKBGeometryType.MULTI_POINT:\n        return new MultiPoint(\n        /** @type {Array<import('../coordinate.js').Coordinate>} */\n        result, this.layout_);\n\n      case WKBGeometryType.MULTI_LINE_STRING:\n        return new MultiLineString(\n        /** @type {Array<Array<import('../coordinate.js').Coordinate>>} */\n        result, this.layout_);\n\n      case WKBGeometryType.MULTI_POLYGON:\n      case WKBGeometryType.POLYHEDRAL_SURFACE:\n      case WKBGeometryType.TIN:\n        return new MultiPolygon(\n        /** @type {Array<Array<Array<import('../coordinate.js').Coordinate>>>} */\n        result, this.layout_);\n\n      case WKBGeometryType.GEOMETRY_COLLECTION:\n        return new GeometryCollection(\n        /** @type {Array<import('../geom/Geometry.js').default>} */\n        result);\n\n      default:\n        return null;\n    }\n  };\n  /**\n   * @return {number|null} SRID in the EWKB. `null` if not defined.\n   */\n\n\n  WkbReader.prototype.getSrid = function () {\n    return this.srid_;\n  };\n\n  return WkbReader;\n}();\n\nvar WkbWriter =\n/** @class */\nfunction () {\n  /**\n   * @type {object}\n   * @property {string} [layout] geometryLayout\n   * @property {boolean} [littleEndian=true] littleEndian\n   * @property {boolean} [ewkb=true] Whether writes in EWKB format\n   * @property {object} [nodata] NoData value for each axes\n   * @param {object} opts options\n   */\n  function WkbWriter(opts) {\n    opts = opts || {};\n    /** @type {string} */\n\n    this.layout_ = opts.layout;\n    this.isLittleEndian_ = opts.littleEndian !== false;\n    this.isEWKB_ = opts.ewkb !== false;\n    /** @type {Array<Array<number>>} */\n\n    this.writeQueue_ = [];\n    /**\n     * @type {object}\n     * @property {number} X NoData value for X\n     * @property {number} Y NoData value for Y\n     * @property {number} Z NoData value for Z\n     * @property {number} M NoData value for M\n     */\n\n    this.nodata_ = assign({\n      X: 0,\n      Y: 0,\n      Z: 0,\n      M: 0\n    }, opts.nodata);\n  }\n  /**\n   * @param {number} value value\n   */\n\n\n  WkbWriter.prototype.writeUint8 = function (value) {\n    this.writeQueue_.push([1, value]);\n  };\n  /**\n   * @param {number} value value\n   */\n\n\n  WkbWriter.prototype.writeUint32 = function (value) {\n    this.writeQueue_.push([4, value]);\n  };\n  /**\n   * @param {number} value value\n   */\n\n\n  WkbWriter.prototype.writeDouble = function (value) {\n    this.writeQueue_.push([8, value]);\n  };\n  /**\n   * @param {import('../coordinate.js').Coordinate} coords coords\n   * @param {import(\"../geom/GeometryLayout\").default} layout layout\n   */\n\n\n  WkbWriter.prototype.writePoint = function (coords, layout) {\n    /**\n     * @type {object}\n     * @property {number} X NoData value for X\n     * @property {number} Y NoData value for Y\n     * @property {number} [Z] NoData value for Z\n     * @property {number} [M] NoData value for M\n     */\n    var coordsObj = assign.apply(null, layout.split('').map(function (axis, idx) {\n      var _a;\n\n      return _a = {}, _a[axis] = coords[idx], _a;\n    }));\n\n    for (var _i = 0, _a = this.layout_; _i < _a.length; _i++) {\n      var axis = _a[_i];\n      this.writeDouble(axis in coordsObj ? coordsObj[axis] : this.nodata_[axis]);\n    }\n  };\n  /**\n   * @param {Array<import('../coordinate.js').Coordinate>} coords coords\n   * @param {import(\"../geom/GeometryLayout\").default} layout layout\n   */\n\n\n  WkbWriter.prototype.writeLineString = function (coords, layout) {\n    this.writeUint32(coords.length); // numPoints\n\n    for (var i = 0; i < coords.length; i++) {\n      this.writePoint(coords[i], layout);\n    }\n  };\n  /**\n   * @param {Array<Array<import('../coordinate.js').Coordinate>>} rings rings\n   * @param {import(\"../geom/GeometryLayout\").default} layout layout\n   */\n\n\n  WkbWriter.prototype.writePolygon = function (rings, layout) {\n    this.writeUint32(rings.length); // numRings\n\n    for (var i = 0; i < rings.length; i++) {\n      this.writeLineString(rings[i], layout); // as a LinearRing\n    }\n  };\n  /**\n   * @param {number} wkbType WKB Type ID\n   * @param {number} [srid] SRID\n   */\n\n\n  WkbWriter.prototype.writeWkbHeader = function (wkbType, srid) {\n    wkbType %= 1000; // Assume 1000 is an upper limit for type ID\n\n    if (this.layout_.indexOf('Z') >= 0) {\n      wkbType += this.isEWKB_ ? 0x80000000 : 1000;\n    }\n\n    if (this.layout_.indexOf('M') >= 0) {\n      wkbType += this.isEWKB_ ? 0x40000000 : 2000;\n    }\n\n    if (this.isEWKB_ && Number.isInteger(srid)) {\n      wkbType |= 0x20000000;\n    }\n\n    this.writeUint8(this.isLittleEndian_ ? 1 : 0);\n    this.writeUint32(wkbType);\n\n    if (this.isEWKB_ && Number.isInteger(srid)) {\n      this.writeUint32(srid);\n    }\n  };\n  /**\n   * @param {Array<import('../coordinate.js').Coordinate>} coords coords\n   * @param {string} layout layout\n   */\n\n\n  WkbWriter.prototype.writeMultiPoint = function (coords, layout) {\n    this.writeUint32(coords.length); // numItems\n\n    for (var i = 0; i < coords.length; i++) {\n      this.writeWkbHeader(1);\n      this.writePoint(coords[i], layout);\n    }\n  };\n  /**\n   * @param {Array<Array<import('../coordinate.js').Coordinate>>} coords coords\n   * @param {string} layout layout\n   */\n\n\n  WkbWriter.prototype.writeMultiLineString = function (coords, layout) {\n    this.writeUint32(coords.length); // numItems\n\n    for (var i = 0; i < coords.length; i++) {\n      this.writeWkbHeader(2);\n      this.writeLineString(coords[i], layout);\n    }\n  };\n  /**\n   * @param {Array<Array<Array<import('../coordinate.js').Coordinate>>>} coords coords\n   * @param {string} layout layout\n   */\n\n\n  WkbWriter.prototype.writeMultiPolygon = function (coords, layout) {\n    this.writeUint32(coords.length); // numItems\n\n    for (var i = 0; i < coords.length; i++) {\n      this.writeWkbHeader(3);\n      this.writePolygon(coords[i], layout);\n    }\n  };\n  /**\n   * @param {Array<import('../geom/Geometry.js').default>} geometries geometries\n   */\n\n\n  WkbWriter.prototype.writeGeometryCollection = function (geometries) {\n    this.writeUint32(geometries.length); // numItems\n\n    for (var i = 0; i < geometries.length; i++) {\n      this.writeGeometry(geometries[i]);\n    }\n  };\n  /**\n   * @param {import(\"../geom/Geometry.js\").default} geom geometry\n   * @param {import(\"../geom/GeometryLayout.js\").default} [layout] layout\n   * @return {import(\"../geom/GeometryLayout.js\").default} minumum layout made by common axes\n   */\n\n\n  WkbWriter.prototype.findMinimumLayout = function (geom, layout) {\n    if (layout === void 0) {\n      layout = GeometryLayout.XYZM;\n    }\n    /**\n     * @param {import(\"../geom/GeometryLayout.js\").default} a A\n     * @param {import(\"../geom/GeometryLayout.js\").default} b B\n     * @return {import(\"../geom/GeometryLayout.js\").default} minumum layout made by common axes\n     */\n\n\n    var GeometryLayout_min = function (a, b) {\n      if (a === b) {\n        return a;\n      }\n\n      if (a === GeometryLayout.XYZM) {\n        // anything `b` is minimum\n        return b;\n      }\n\n      if (b === GeometryLayout.XYZM) {\n        // anything `a` is minimum\n        return a;\n      } // otherwise, incompatible\n\n\n      return GeometryLayout.XY;\n    };\n\n    if (geom instanceof SimpleGeometry) {\n      return GeometryLayout_min(geom.getLayout(), layout);\n    }\n\n    if (geom instanceof GeometryCollection) {\n      var geoms = geom.getGeometriesArray();\n\n      for (var i = 0; i < geoms.length && layout !== GeometryLayout.XY; i++) {\n        layout = this.findMinimumLayout(geoms[i], layout);\n      }\n    }\n\n    return layout;\n  };\n  /**\n   * @param {import(\"../geom/Geometry.js\").default} geom geometry\n   * @param {number} [srid] SRID\n   */\n\n\n  WkbWriter.prototype.writeGeometry = function (geom, srid) {\n    var _a, _b;\n\n    var wkblut = (_a = {}, _a[GeometryType.POINT] = WKBGeometryType.POINT, _a[GeometryType.LINE_STRING] = WKBGeometryType.LINE_STRING, _a[GeometryType.POLYGON] = WKBGeometryType.POLYGON, _a[GeometryType.MULTI_POINT] = WKBGeometryType.MULTI_POINT, _a[GeometryType.MULTI_LINE_STRING] = WKBGeometryType.MULTI_LINE_STRING, _a[GeometryType.MULTI_POLYGON] = WKBGeometryType.MULTI_POLYGON, _a[GeometryType.GEOMETRY_COLLECTION] = WKBGeometryType.GEOMETRY_COLLECTION, _a);\n    var geomType = geom.getType();\n    var typeId = wkblut[geomType];\n\n    if (!typeId) {\n      throw new Error('GeometryType ' + geomType + ' is not supported');\n    } // first call of writeGeometry() traverse whole geometries to determine its output layout if not specified on constructor.\n\n\n    if (!this.layout_) {\n      this.layout_ = this.findMinimumLayout(geom);\n    }\n\n    this.writeWkbHeader(typeId, srid);\n\n    if (geom instanceof SimpleGeometry) {\n      var writerLUT = (_b = {}, _b[GeometryType.POINT] = this.writePoint, _b[GeometryType.LINE_STRING] = this.writeLineString, _b[GeometryType.POLYGON] = this.writePolygon, _b[GeometryType.MULTI_POINT] = this.writeMultiPoint, _b[GeometryType.MULTI_LINE_STRING] = this.writeMultiLineString, _b[GeometryType.MULTI_POLYGON] = this.writeMultiPolygon, _b);\n      writerLUT[geomType].call(this, geom.getCoordinates(), geom.getLayout());\n    } else if (geom instanceof GeometryCollection) {\n      this.writeGeometryCollection(geom.getGeometriesArray());\n    }\n  };\n\n  WkbWriter.prototype.getBuffer = function () {\n    var _this = this;\n\n    var byteLength = this.writeQueue_.reduce(function (acc, item) {\n      return acc + item[0];\n    }, 0);\n    var buffer = new ArrayBuffer(byteLength);\n    var view = new DataView(buffer);\n    var pos = 0;\n    this.writeQueue_.forEach(function (item) {\n      switch (item[0]) {\n        case 1:\n          view.setUint8(pos, item[1]);\n          break;\n\n        case 4:\n          view.setUint32(pos, item[1], _this.isLittleEndian_);\n          break;\n\n        case 8:\n          view.setFloat64(pos, item[1], _this.isLittleEndian_);\n          break;\n\n        default:\n          break;\n      }\n\n      pos += item[0];\n    });\n    return buffer;\n  };\n\n  return WkbWriter;\n}();\n/**\n * @typedef {Object} Options\n * @property {boolean} [splitCollection=false] Whether to split GeometryCollections into multiple features on reading.\n * @property {boolean} [hex=true] Returns hex string instead of ArrayBuffer for output. This also is used as a hint internally whether it should load contents as text or ArrayBuffer on reading.\n * @property {boolean} [littleEndian=true] Use littleEndian for output.\n * @property {boolean} [ewkb=true] Use EWKB format for output.\n * @property {import(\"../geom/GeometryLayout\").default} [geometryLayout=null] Use specific coordinate layout for output features (null: auto detect)\n * @property {number} [nodataZ=0] If the `geometryLayout` doesn't match with geometry to be output, this value is used to fill missing coordinate value of Z.\n * @property {number} [nodataM=0] If the `geometryLayout` doesn't match with geometry to be output, this value is used to fill missing coordinate value of M.\n * @property {number|boolean} [srid=true] SRID for output. Specify integer value to enforce the value as a SRID. Specify `true` to extract from `dataProjection`. `false` to suppress the output. This option only takes effect when `ewkb` is `true`.\n */\n\n/**\n * @classdesc\n * Geometry format for reading and writing data in the `Well-Known Binary` (WKB) format.\n * Also supports `Extended Well-Known Binary` (EWKB) format, used in PostGIS for example.\n *\n * @api\n */\n\n\nvar WKB =\n/** @class */\nfunction (_super) {\n  __extends(WKB, _super);\n  /**\n   * @param {Options} [opt_options] Optional configuration object.\n   */\n\n\n  function WKB(opt_options) {\n    var _this = _super.call(this) || this;\n\n    var options = opt_options ? opt_options : {};\n    _this.splitCollection = Boolean(options.splitCollection);\n    _this.viewCache_ = null;\n    _this.hex_ = options.hex !== false;\n    _this.littleEndian_ = options.littleEndian !== false;\n    _this.ewkb_ = options.ewkb !== false;\n    _this.layout_ = options.geometryLayout; // null for auto detect\n\n    _this.nodataZ_ = options.nodataZ || 0;\n    _this.nodataM_ = options.nodataM || 0;\n    _this.srid_ = options.srid;\n    return _this;\n  }\n  /**\n   * @return {import(\"./FormatType.js\").default} Format.\n   */\n\n\n  WKB.prototype.getType = function () {\n    return this.hex_ ? FormatType.TEXT : FormatType.ARRAY_BUFFER;\n  };\n  /**\n   * Read a single feature from a source.\n   *\n   * @param {string|ArrayBuffer|ArrayBufferView} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../Feature.js\").FeatureLike} Feature.\n   * @api\n   */\n\n\n  WKB.prototype.readFeature = function (source, opt_options) {\n    return new Feature({\n      geometry: this.readGeometry(source, opt_options)\n    });\n  };\n  /**\n   * Read all features from a source.\n   *\n   * @param {string|ArrayBuffer|ArrayBufferView} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   * @api\n   */\n\n\n  WKB.prototype.readFeatures = function (source, opt_options) {\n    var geometries = [];\n    var geometry = this.readGeometry(source, opt_options);\n\n    if (this.splitCollection && geometry instanceof GeometryCollection) {\n      geometries = geometry.getGeometriesArray();\n    } else {\n      geometries = [geometry];\n    }\n\n    return geometries.map(function (geometry) {\n      return new Feature({\n        geometry: geometry\n      });\n    });\n  };\n  /**\n   * Read a single geometry from a source.\n   *\n   * @param {string|ArrayBuffer|ArrayBufferView} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @api\n   */\n\n\n  WKB.prototype.readGeometry = function (source, opt_options) {\n    var view = getDataView(source);\n\n    if (!view) {\n      return null;\n    }\n\n    var reader = new WkbReader(view);\n    var geometry = reader.readGeometry();\n    this.viewCache_ = view; // cache for internal subsequent call of readProjection()\n\n    var options = this.getReadOptions(source, opt_options);\n    this.viewCache_ = null; // release\n\n    return transformGeometryWithOptions(geometry, false, options);\n  };\n  /**\n   * Read the projection from a source.\n   *\n   * @param {string|ArrayBuffer|ArrayBufferView} source Source.\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n   * @api\n   */\n\n\n  WKB.prototype.readProjection = function (source) {\n    var view = this.viewCache_ || getDataView(source);\n\n    if (!view) {\n      return undefined;\n    }\n\n    var reader = new WkbReader(view);\n    reader.readWkbHeader();\n    return reader.getSrid() && getProjection('EPSG:' + reader.getSrid()) || undefined;\n  };\n  /**\n   * Encode a feature in this format.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   * @api\n   */\n\n\n  WKB.prototype.writeFeature = function (feature, opt_options) {\n    return this.writeGeometry(feature.getGeometry(), opt_options);\n  };\n  /**\n   * Encode an array of features in this format.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   * @api\n   */\n\n\n  WKB.prototype.writeFeatures = function (features, opt_options) {\n    return this.writeGeometry(new GeometryCollection(features.map(function (f) {\n      return f.getGeometry();\n    })), opt_options);\n  };\n  /**\n   * Write a single geometry in this format.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   * @api\n   */\n\n\n  WKB.prototype.writeGeometry = function (geometry, opt_options) {\n    var options = this.adaptOptions(opt_options);\n    var writer = new WkbWriter({\n      layout: this.layout_,\n      littleEndian: this.littleEndian_,\n      ewkb: this.ewkb_,\n      nodata: {\n        Z: this.nodataZ_,\n        M: this.nodataM_\n      }\n    }); // extract SRID from `dataProjection`\n\n    var srid = Number.isInteger(this.srid_) ? Number(this.srid_) : null;\n\n    if (this.srid_ !== false && !Number.isInteger(this.srid_)) {\n      var dataProjection = options.dataProjection && getProjection(options.dataProjection);\n\n      if (dataProjection) {\n        var code = dataProjection.getCode();\n\n        if (code.indexOf('EPSG:') === 0) {\n          srid = Number(code.substring(5));\n        }\n      }\n    }\n\n    writer.writeGeometry(transformGeometryWithOptions(geometry, true, options), srid);\n    var buffer = writer.getBuffer();\n    return this.hex_ ? encodeHexString(buffer) : buffer;\n  };\n\n  return WKB;\n}(FeatureFormat);\n/**\n * @param {ArrayBuffer} buffer source buffer\n * @return {string} encoded hex string\n */\n\n\nfunction encodeHexString(buffer) {\n  var view = new Uint8Array(buffer);\n  return Array.from(view.values()).map(function (x) {\n    return (x < 16 ? '0' : '') + Number(x).toString(16).toUpperCase();\n  }).join('');\n}\n/**\n * @param {string} text source text\n * @return {DataView} decoded binary buffer\n */\n\n\nfunction decodeHexString(text) {\n  var buffer = new Uint8Array(text.length / 2);\n\n  for (var i = 0; i < text.length / 2; i++) {\n    buffer[i] = parseInt(text.substr(i * 2, 2), 16);\n  }\n\n  return new DataView(buffer.buffer);\n}\n/**\n * @param {string | ArrayBuffer | ArrayBufferView} source source\n * @return {DataView} data view\n */\n\n\nfunction getDataView(source) {\n  if (typeof source === 'string') {\n    return decodeHexString(source);\n  } else if (ArrayBuffer.isView(source)) {\n    if (source instanceof DataView) {\n      return source;\n    }\n\n    return new DataView(source.buffer, source.byteOffset, source.byteLength);\n  } else if (source instanceof ArrayBuffer) {\n    return new DataView(source);\n  } else {\n    return null;\n  }\n}\n\nexport default WKB;","map":{"version":3,"mappings":"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","names":["Feature","FeatureFormat","transformGeometryWithOptions","FormatType","GeometryCollection","GeometryLayout","GeometryType","LineString","MultiLineString","MultiPoint","MultiPolygon","Point","Polygon","get","getProjection","SimpleGeometry","assign","WKBGeometryType","POINT","LINE_STRING","POLYGON","MULTI_POINT","MULTI_LINE_STRING","MULTI_POLYGON","GEOMETRY_COLLECTION","POLYHEDRAL_SURFACE","TIN","TRIANGLE","view","view_","pos_","initialized_","isLittleEndian_","hasZ_","hasM_","srid_","layout_","XY","WkbReader","getUint8","isLittleEndian","getUint32","undefined","getFloat64","coords","push","readDouble","numPoints","readUint32","i","readPoint","numRings","rings","readLineString","expectedTypeId","byteOrder","readUint8","wkbType","wkbTypeThousandth","Math","floor","hasZ","Boolean","hasM","hasSRID","typeId","layout","join","srid","Error","readPolygon","readMultiPoint","readMultiLineString","readMultiPolygon","readGeometryCollection","readWkbPayload","readWkbHeader","reader","num","items","result","call","readWkbCollection","readWkbBlock","readGeometry","opts","littleEndian","isEWKB_","ewkb","writeQueue_","nodata_","X","Y","Z","M","nodata","WkbWriter","value","coordsObj","apply","split","map","axis","idx","_a","_i","writeDouble","writeUint32","length","writePoint","writeLineString","indexOf","Number","isInteger","writeUint8","writeWkbHeader","writePolygon","geometries","writeGeometry","geom","XYZM","GeometryLayout_min","a","b","getLayout","geoms","getGeometriesArray","findMinimumLayout","wkblut","geomType","getType","writerLUT","_b","writeMultiPoint","writeMultiLineString","writeMultiPolygon","getCoordinates","writeGeometryCollection","byteLength","reduce","acc","item","buffer","ArrayBuffer","DataView","pos","forEach","setUint8","setUint32","_this","setFloat64","__extends","opt_options","_super","options","splitCollection","viewCache_","hex_","hex","littleEndian_","ewkb_","geometryLayout","nodataZ_","nodataZ","nodataM_","nodataM","WKB","TEXT","ARRAY_BUFFER","source","geometry","getDataView","getReadOptions","getSrid","feature","getGeometry","features","f","adaptOptions","writer","dataProjection","code","getCode","substring","getBuffer","encodeHexString","Uint8Array","Array","from","values","x","toString","toUpperCase","decodeHexString","text","parseInt","substr","isView","byteOffset"],"sourceRoot":"","sources":["../src/format/WKB.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}