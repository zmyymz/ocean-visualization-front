{"ast":null,"code":"import _slicedToArray from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _createForOfIteratorHelper from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { safeIfNeeded, wrap } from \"./_util/arrayIterator.mjs\";\nimport { brand, hasFloat16ArrayBrand } from \"./_util/brand.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport { isArrayBuffer, isCanonicalIntegerIndexString, isNativeBigIntTypedArray, isNativeTypedArray, isObject, isOrdinaryArray, isOrdinaryNativeTypedArray, isSharedArrayBuffer } from \"./_util/is.mjs\";\nimport { ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER, CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT, CANNOT_MIX_BIGINT_AND_OTHER_TYPES, DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH, ITERATOR_PROPERTY_IS_NOT_CALLABLE, OFFSET_IS_OUT_OF_BOUNDS, REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE, SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT, THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY, THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT } from \"./_util/messages.mjs\";\nimport { ArrayBufferIsView, ArrayPrototypeJoin, ArrayPrototypePush, ArrayPrototypeToLocaleString, NativeArrayBuffer, NativeObject, NativeProxy, NativeRangeError, NativeTypeError, NativeUint16Array, NativeWeakMap, NativeWeakSet, NumberIsNaN, ObjectDefineProperty, ObjectFreeze, ObjectHasOwn, ObjectPrototype__lookupGetter__, ReflectApply, ReflectConstruct, ReflectDefineProperty, ReflectGet, ReflectGetOwnPropertyDescriptor, ReflectHas, ReflectOwnKeys, ReflectSet, ReflectSetPrototypeOf, SymbolIterator, SymbolToStringTag, TypedArray, TypedArrayPrototype, TypedArrayPrototypeCopyWithin, TypedArrayPrototypeEntries, TypedArrayPrototypeFill, TypedArrayPrototypeGetBuffer, TypedArrayPrototypeGetByteOffset, TypedArrayPrototypeGetLength, TypedArrayPrototypeKeys, TypedArrayPrototypeReverse, TypedArrayPrototypeSet, TypedArrayPrototypeSlice, TypedArrayPrototypeSort, TypedArrayPrototypeSubarray, TypedArrayPrototypeValues, Uint16ArrayFrom, WeakMapPrototypeGet, WeakMapPrototypeHas, WeakMapPrototypeSet, WeakSetPrototypeAdd, WeakSetPrototypeHas } from \"./_util/primordials.mjs\";\nimport { IsDetachedBuffer, SpeciesConstructor, ToIntegerOrInfinity, ToLength, defaultCompare } from \"./_util/spec.mjs\";\nvar BYTES_PER_ELEMENT = 2;\n/** @typedef {Uint16Array & { __float16bits: never }} Float16BitsArray */\n\n/** @type {WeakMap<Float16Array, Float16BitsArray>} */\n\nvar float16bitsArrays = new NativeWeakMap();\n/**\n * @param {unknown} target\n * @returns {target is Float16Array}\n */\n\nexport function isFloat16Array(target) {\n  return WeakMapPrototypeHas(float16bitsArrays, target) || !ArrayBufferIsView(target) && hasFloat16ArrayBrand(target);\n}\n/**\n * @param {unknown} target\n * @throws {TypeError}\n * @returns {asserts target is Float16Array}\n */\n\nfunction assertFloat16Array(target) {\n  if (!isFloat16Array(target)) {\n    throw NativeTypeError(THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT);\n  }\n}\n/**\n * @param {unknown} target\n * @param {number=} count\n * @throws {TypeError}\n * @returns {asserts target is Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float16Array|Float32Array|Float64Array}\n */\n\n\nfunction assertSpeciesTypedArray(target, count) {\n  var isTargetFloat16Array = isFloat16Array(target);\n  var isTargetTypedArray = isNativeTypedArray(target);\n\n  if (!isTargetFloat16Array && !isTargetTypedArray) {\n    throw NativeTypeError(SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT);\n  }\n\n  if (typeof count === \"number\") {\n    var length;\n\n    if (isTargetFloat16Array) {\n      var float16bitsArray = getFloat16BitsArray(target);\n      length = TypedArrayPrototypeGetLength(float16bitsArray);\n    } else {\n      length = TypedArrayPrototypeGetLength(target);\n    }\n\n    if (length < count) {\n      throw NativeTypeError(DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH);\n    }\n  }\n\n  if (isNativeBigIntTypedArray(target)) {\n    throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n  }\n}\n/**\n * @param {Float16Array} float16\n * @throws {TypeError}\n * @returns {Float16BitsArray}\n */\n\n\nfunction getFloat16BitsArray(float16) {\n  var float16bitsArray = WeakMapPrototypeGet(float16bitsArrays, float16);\n\n  if (float16bitsArray !== undefined) {\n    var _buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n\n    if (IsDetachedBuffer(_buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    return float16bitsArray;\n  } // from another Float16Array instance (a different version?)\n\n\n  var buffer =\n  /** @type {any} */\n  float16.buffer;\n\n  if (IsDetachedBuffer(buffer)) {\n    throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n  }\n\n  var cloned = ReflectConstruct(Float16Array, [buffer,\n  /** @type {any} */\n  float16.byteOffset,\n  /** @type {any} */\n  float16.length], float16.constructor);\n  return WeakMapPrototypeGet(float16bitsArrays, cloned);\n}\n/**\n * @param {Float16BitsArray} float16bitsArray\n * @returns {number[]}\n */\n\n\nfunction copyToArray(float16bitsArray) {\n  var length = TypedArrayPrototypeGetLength(float16bitsArray);\n  var array = [];\n\n  for (var i = 0; i < length; ++i) {\n    array[i] = convertToNumber(float16bitsArray[i]);\n  }\n\n  return array;\n}\n/** @type {WeakSet<Function>} */\n\n\nvar TypedArrayPrototypeGetters = new NativeWeakSet();\n\nvar _iterator = _createForOfIteratorHelper(ReflectOwnKeys(TypedArrayPrototype)),\n    _step;\n\ntry {\n  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n    var key = _step.value;\n\n    // @@toStringTag getter property is defined in Float16Array.prototype\n    if (key === SymbolToStringTag) {\n      continue;\n    }\n\n    var descriptor = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, key);\n\n    if (ObjectHasOwn(descriptor, \"get\") && typeof descriptor.get === \"function\") {\n      WeakSetPrototypeAdd(TypedArrayPrototypeGetters, descriptor.get);\n    }\n  }\n} catch (err) {\n  _iterator.e(err);\n} finally {\n  _iterator.f();\n}\n\nvar handler = ObjectFreeze(\n/** @type {ProxyHandler<Float16BitsArray>} */\n{\n  get: function get(target, key, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return convertToNumber(ReflectGet(target, key));\n    } // %TypedArray%.prototype getter properties cannot called by Proxy receiver\n\n\n    if (WeakSetPrototypeHas(TypedArrayPrototypeGetters, ObjectPrototype__lookupGetter__(target, key))) {\n      return ReflectGet(target, key);\n    }\n\n    return ReflectGet(target, key, receiver);\n  },\n  set: function set(target, key, value, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return ReflectSet(target, key, roundToFloat16Bits(value));\n    }\n\n    return ReflectSet(target, key, value, receiver);\n  },\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, key) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      var descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n      descriptor.value = convertToNumber(descriptor.value);\n      return descriptor;\n    }\n\n    return ReflectGetOwnPropertyDescriptor(target, key);\n  },\n  defineProperty: function defineProperty(target, key, descriptor) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key) && ObjectHasOwn(descriptor, \"value\")) {\n      descriptor.value = roundToFloat16Bits(descriptor.value);\n      return ReflectDefineProperty(target, key, descriptor);\n    }\n\n    return ReflectDefineProperty(target, key, descriptor);\n  }\n});\nexport var Float16Array = /*#__PURE__*/function () {\n  /** @see https://tc39.es/ecma262/#sec-typedarray */\n  function Float16Array(input, _byteOffset, _length) {\n    _classCallCheck(this, Float16Array);\n\n    /** @type {Float16BitsArray} */\n    var float16bitsArray;\n\n    if (isFloat16Array(input)) {\n      float16bitsArray = ReflectConstruct(NativeUint16Array, [getFloat16BitsArray(input)], this instanceof Float16Array ? this.constructor : void 0);\n    } else if (isObject(input) && !isArrayBuffer(input)) {\n      // object without ArrayBuffer\n\n      /** @type {ArrayLike<unknown>} */\n      var list;\n      /** @type {number} */\n\n      var length;\n\n      if (isNativeTypedArray(input)) {\n        // TypedArray\n        list = input;\n        length = TypedArrayPrototypeGetLength(input);\n        var buffer = TypedArrayPrototypeGetBuffer(input);\n        var BufferConstructor = !isSharedArrayBuffer(buffer) ?\n        /** @type {ArrayBufferConstructor} */\n        SpeciesConstructor(buffer, NativeArrayBuffer) : NativeArrayBuffer;\n\n        if (IsDetachedBuffer(buffer)) {\n          throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n        }\n\n        if (isNativeBigIntTypedArray(input)) {\n          throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n        }\n\n        var data = new BufferConstructor(length * BYTES_PER_ELEMENT);\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [data], this instanceof Float16Array ? this.constructor : void 0);\n      } else {\n        var iterator = input[SymbolIterator];\n\n        if (iterator != null && typeof iterator !== \"function\") {\n          throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n        }\n\n        if (iterator != null) {\n          // Iterable (Array)\n          // for optimization\n          if (isOrdinaryArray(input)) {\n            list = input;\n            length = input.length;\n          } else {\n            // eslint-disable-next-line no-restricted-syntax\n            list = _toConsumableArray(\n            /** @type {Iterable<unknown>} */\n            input);\n            length = list.length;\n          }\n        } else {\n          // ArrayLike\n          list =\n          /** @type {ArrayLike<unknown>} */\n          input;\n          length = ToLength(list.length);\n        }\n\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [length], this instanceof Float16Array ? this.constructor : void 0);\n      } // set values\n\n\n      for (var i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(list[i]);\n      }\n    } else {\n      // primitive, ArrayBuffer\n      float16bitsArray = ReflectConstruct(NativeUint16Array, arguments, this instanceof Float16Array ? this.constructor : void 0);\n    }\n    /** @type {Float16Array} */\n\n\n    var proxy =\n    /** @type {any} */\n    new NativeProxy(float16bitsArray, handler); // proxy private storage\n\n    WeakMapPrototypeSet(float16bitsArrays, proxy, float16bitsArray);\n    return proxy;\n  }\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.from\n   */\n\n\n  _createClass(Float16Array, [{\n    key: \"keys\",\n    value:\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys */\n    function keys() {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      return TypedArrayPrototypeKeys(float16bitsArray);\n    }\n    /**\n     * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n     *\n     * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.values\n     */\n\n  }, {\n    key: \"values\",\n    value: function values() {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      return wrap( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _iterator2, _step2, val;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // eslint-disable-next-line no-restricted-syntax\n                _iterator2 = _createForOfIteratorHelper(TypedArrayPrototypeValues(float16bitsArray));\n                _context.prev = 1;\n\n                _iterator2.s();\n\n              case 3:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context.next = 9;\n                  break;\n                }\n\n                val = _step2.value;\n                _context.next = 7;\n                return convertToNumber(val);\n\n              case 7:\n                _context.next = 3;\n                break;\n\n              case 9:\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](1);\n\n                _iterator2.e(_context.t0);\n\n              case 14:\n                _context.prev = 14;\n\n                _iterator2.f();\n\n                return _context.finish(14);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 11, 14, 17]]);\n      })());\n    }\n    /**\n     * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n     *\n     * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries\n     */\n\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      return wrap( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _iterator3, _step3, _step3$value, i, val;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // eslint-disable-next-line no-restricted-syntax\n                _iterator3 = _createForOfIteratorHelper(TypedArrayPrototypeEntries(float16bitsArray));\n                _context2.prev = 1;\n\n                _iterator3.s();\n\n              case 3:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                _step3$value = _slicedToArray(_step3.value, 2), i = _step3$value[0], val = _step3$value[1];\n                _context2.next = 7;\n                return (\n                  /** @type {[Number, number]} */\n                  [i, convertToNumber(val)]\n                );\n\n              case 7:\n                _context2.next = 3;\n                break;\n\n              case 9:\n                _context2.next = 14;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](1);\n\n                _iterator3.e(_context2.t0);\n\n              case 14:\n                _context2.prev = 14;\n\n                _iterator3.f();\n\n                return _context2.finish(14);\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[1, 11, 14, 17]]);\n      })());\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.at */\n\n  }, {\n    key: \"at\",\n    value: function at(index) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var relativeIndex = ToIntegerOrInfinity(index);\n      var k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n\n      if (k < 0 || k >= length) {\n        return;\n      }\n\n      return convertToNumber(float16bitsArray[k]);\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.map */\n\n  }, {\n    key: \"map\",\n    value: function map(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n      var Constructor = SpeciesConstructor(float16bitsArray, Float16Array); // for optimization\n\n      if (Constructor === Float16Array) {\n        var proxy = new Float16Array(length);\n\n        var _array = getFloat16BitsArray(proxy);\n\n        for (var i = 0; i < length; ++i) {\n          var val = convertToNumber(float16bitsArray[i]);\n          _array[i] = roundToFloat16Bits(ReflectApply(callback, thisArg, [val, i, this]));\n        }\n\n        return proxy;\n      }\n\n      var array = new Constructor(length);\n      assertSpeciesTypedArray(array, length);\n\n      for (var _i = 0; _i < length; ++_i) {\n        var _val = convertToNumber(float16bitsArray[_i]);\n\n        array[_i] = ReflectApply(callback, thisArg, [_val, _i, this]);\n      }\n\n      return (\n        /** @type {any} */\n        array\n      );\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter */\n\n  }, {\n    key: \"filter\",\n    value: function filter(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n      var kept = [];\n\n      for (var i = 0; i < length; ++i) {\n        var val = convertToNumber(float16bitsArray[i]);\n\n        if (ReflectApply(callback, thisArg, [val, i, this])) {\n          ArrayPrototypePush(kept, val);\n        }\n      }\n\n      var Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n      var array = new Constructor(kept);\n      assertSpeciesTypedArray(array);\n      return (\n        /** @type {any} */\n        array\n      );\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce */\n\n  }, {\n    key: \"reduce\",\n    value: function reduce(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n      if (length === 0 && (arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n        throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n      }\n\n      var accumulator, start;\n\n      if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n        accumulator = convertToNumber(float16bitsArray[0]);\n        start = 1;\n      } else {\n        accumulator = arguments.length <= 1 ? undefined : arguments[1];\n        start = 0;\n      }\n\n      for (var i = start; i < length; ++i) {\n        accumulator = callback(accumulator, convertToNumber(float16bitsArray[i]), i, this);\n      }\n\n      return accumulator;\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright */\n\n  }, {\n    key: \"reduceRight\",\n    value: function reduceRight(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n      if (length === 0 && (arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n        throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n      }\n\n      var accumulator, start;\n\n      if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n        accumulator = convertToNumber(float16bitsArray[length - 1]);\n        start = length - 2;\n      } else {\n        accumulator = arguments.length <= 1 ? undefined : arguments[1];\n        start = length - 1;\n      }\n\n      for (var i = start; i >= 0; --i) {\n        accumulator = callback(accumulator, convertToNumber(float16bitsArray[i]), i, this);\n      }\n\n      return accumulator;\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n\n      for (var i = 0; i < length; ++i) {\n        ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this]);\n      }\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.find */\n\n  }, {\n    key: \"find\",\n    value: function find(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n\n      for (var i = 0; i < length; ++i) {\n        var value = convertToNumber(float16bitsArray[i]);\n\n        if (ReflectApply(callback, thisArg, [value, i, this])) {\n          return value;\n        }\n      }\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex */\n\n  }, {\n    key: \"findIndex\",\n    value: function findIndex(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n\n      for (var i = 0; i < length; ++i) {\n        var value = convertToNumber(float16bitsArray[i]);\n\n        if (ReflectApply(callback, thisArg, [value, i, this])) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n    /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlast */\n\n  }, {\n    key: \"findLast\",\n    value: function findLast(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n\n      for (var i = length - 1; i >= 0; --i) {\n        var value = convertToNumber(float16bitsArray[i]);\n\n        if (ReflectApply(callback, thisArg, [value, i, this])) {\n          return value;\n        }\n      }\n    }\n    /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlastindex */\n\n  }, {\n    key: \"findLastIndex\",\n    value: function findLastIndex(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n\n      for (var i = length - 1; i >= 0; --i) {\n        var value = convertToNumber(float16bitsArray[i]);\n\n        if (ReflectApply(callback, thisArg, [value, i, this])) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.every */\n\n  }, {\n    key: \"every\",\n    value: function every(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n\n      for (var i = 0; i < length; ++i) {\n        if (!ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.some */\n\n  }, {\n    key: \"some\",\n    value: function some(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n\n      for (var i = 0; i < length; ++i) {\n        if (ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this])) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.set */\n\n  }, {\n    key: \"set\",\n    value: function set(input) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var targetOffset = ToIntegerOrInfinity(arguments.length <= 1 ? undefined : arguments[1]);\n\n      if (targetOffset < 0) {\n        throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n      }\n\n      if (input == null) {\n        throw NativeTypeError(CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT);\n      }\n\n      if (isNativeBigIntTypedArray(input)) {\n        throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n      } // for optimization\n\n\n      if (isFloat16Array(input)) {\n        // peel off Proxy\n        return TypedArrayPrototypeSet(getFloat16BitsArray(this), getFloat16BitsArray(input), targetOffset);\n      }\n\n      if (isNativeTypedArray(input)) {\n        var buffer = TypedArrayPrototypeGetBuffer(input);\n\n        if (IsDetachedBuffer(buffer)) {\n          throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n        }\n      }\n\n      var targetLength = TypedArrayPrototypeGetLength(float16bitsArray);\n      var src = NativeObject(input);\n      var srcLength = ToLength(src.length);\n\n      if (targetOffset === Infinity || srcLength + targetOffset > targetLength) {\n        throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n      }\n\n      for (var i = 0; i < srcLength; ++i) {\n        float16bitsArray[i + targetOffset] = roundToFloat16Bits(src[i]);\n      }\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse */\n\n  }, {\n    key: \"reverse\",\n    value: function reverse() {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      TypedArrayPrototypeReverse(float16bitsArray);\n      return this;\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill */\n\n  }, {\n    key: \"fill\",\n    value: function fill(value) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n\n      for (var _len = arguments.length, opts = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        opts[_key - 1] = arguments[_key];\n      }\n\n      TypedArrayPrototypeFill.apply(void 0, [float16bitsArray, roundToFloat16Bits(value)].concat(_toConsumableArray(safeIfNeeded(opts))));\n      return this;\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin */\n\n  }, {\n    key: \"copyWithin\",\n    value: function copyWithin(target, start) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n\n      for (var _len2 = arguments.length, opts = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        opts[_key2 - 2] = arguments[_key2];\n      }\n\n      TypedArrayPrototypeCopyWithin.apply(void 0, [float16bitsArray, target, start].concat(_toConsumableArray(safeIfNeeded(opts))));\n      return this;\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort */\n\n  }, {\n    key: \"sort\",\n    value: function sort() {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var compare = (arguments.length <= 0 ? undefined : arguments[0]) !== undefined ? arguments.length <= 0 ? undefined : arguments[0] : defaultCompare;\n      TypedArrayPrototypeSort(float16bitsArray, function (x, y) {\n        return compare(convertToNumber(x), convertToNumber(y));\n      });\n      return this;\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice */\n\n  }, {\n    key: \"slice\",\n    value: function slice() {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var Constructor = SpeciesConstructor(float16bitsArray, Float16Array); // for optimization\n\n      for (var _len3 = arguments.length, opts = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        opts[_key3] = arguments[_key3];\n      }\n\n      if (Constructor === Float16Array) {\n        var uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n        return new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice.apply(void 0, [uint16].concat(_toConsumableArray(safeIfNeeded(opts))))));\n      }\n\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var start = ToIntegerOrInfinity(opts[0]);\n      var end = opts[1] === undefined ? length : ToIntegerOrInfinity(opts[1]);\n      var k;\n\n      if (start === -Infinity) {\n        k = 0;\n      } else if (start < 0) {\n        k = length + start > 0 ? length + start : 0;\n      } else {\n        k = length < start ? length : start;\n      }\n\n      var final;\n\n      if (end === -Infinity) {\n        final = 0;\n      } else if (end < 0) {\n        final = length + end > 0 ? length + end : 0;\n      } else {\n        final = length < end ? length : end;\n      }\n\n      var count = final - k > 0 ? final - k : 0;\n      var array = new Constructor(count);\n      assertSpeciesTypedArray(array, count);\n\n      if (count === 0) {\n        return array;\n      }\n\n      var buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n\n      if (IsDetachedBuffer(buffer)) {\n        throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n      }\n\n      var n = 0;\n\n      while (k < final) {\n        array[n] = convertToNumber(float16bitsArray[k]);\n        ++k;\n        ++n;\n      }\n\n      return (\n        /** @type {any} */\n        array\n      );\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray */\n\n  }, {\n    key: \"subarray\",\n    value: function subarray() {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n      var uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n\n      for (var _len4 = arguments.length, opts = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        opts[_key4] = arguments[_key4];\n      }\n\n      var uint16Subarray = TypedArrayPrototypeSubarray.apply(void 0, [uint16].concat(_toConsumableArray(safeIfNeeded(opts))));\n      var array = new Constructor(TypedArrayPrototypeGetBuffer(uint16Subarray), TypedArrayPrototypeGetByteOffset(uint16Subarray), TypedArrayPrototypeGetLength(uint16Subarray));\n      assertSpeciesTypedArray(array);\n      return (\n        /** @type {any} */\n        array\n      );\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof */\n\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(element) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var from = ToIntegerOrInfinity(arguments.length <= 1 ? undefined : arguments[1]);\n\n      if (from === Infinity) {\n        return -1;\n      }\n\n      if (from < 0) {\n        from += length;\n\n        if (from < 0) {\n          from = 0;\n        }\n      }\n\n      for (var i = from; i < length; ++i) {\n        if (ObjectHasOwn(float16bitsArray, i) && convertToNumber(float16bitsArray[i]) === element) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof */\n\n  }, {\n    key: \"lastIndexOf\",\n    value: function lastIndexOf(element) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var from = (arguments.length <= 1 ? 0 : arguments.length - 1) >= 1 ? ToIntegerOrInfinity(arguments.length <= 1 ? undefined : arguments[1]) : length - 1;\n\n      if (from === -Infinity) {\n        return -1;\n      }\n\n      if (from >= 0) {\n        from = from < length - 1 ? from : length - 1;\n      } else {\n        from += length;\n      }\n\n      for (var i = from; i >= 0; --i) {\n        if (ObjectHasOwn(float16bitsArray, i) && convertToNumber(float16bitsArray[i]) === element) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes */\n\n  }, {\n    key: \"includes\",\n    value: function includes(element) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var from = ToIntegerOrInfinity(arguments.length <= 1 ? undefined : arguments[1]);\n\n      if (from === Infinity) {\n        return false;\n      }\n\n      if (from < 0) {\n        from += length;\n\n        if (from < 0) {\n          from = 0;\n        }\n      }\n\n      var isNaN = NumberIsNaN(element);\n\n      for (var i = from; i < length; ++i) {\n        var value = convertToNumber(float16bitsArray[i]);\n\n        if (isNaN && NumberIsNaN(value)) {\n          return true;\n        }\n\n        if (value === element) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.join */\n\n  }, {\n    key: \"join\",\n    value: function join() {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var array = copyToArray(float16bitsArray);\n\n      for (var _len5 = arguments.length, opts = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        opts[_key5] = arguments[_key5];\n      }\n\n      return ArrayPrototypeJoin.apply(void 0, [array].concat(_toConsumableArray(safeIfNeeded(opts))));\n    }\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring */\n\n  }, {\n    key: \"toLocaleString\",\n    value: function toLocaleString() {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var array = copyToArray(float16bitsArray);\n\n      for (var _len6 = arguments.length, opts = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        opts[_key6] = arguments[_key6];\n      }\n\n      return ArrayPrototypeToLocaleString.apply(void 0, [array].concat(_toConsumableArray(safeIfNeeded(opts))));\n    }\n    /** @see https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag */\n\n  }, {\n    key: SymbolToStringTag,\n    get: function get() {\n      if (isFloat16Array(this)) {\n        return (\n          /** @type {any} */\n          \"Float16Array\"\n        );\n      }\n    }\n  }], [{\n    key: \"from\",\n    value: function from(src) {\n      var Constructor = this;\n\n      if (!ReflectHas(Constructor, brand)) {\n        throw NativeTypeError(THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY);\n      } // for optimization\n\n\n      if (Constructor === Float16Array) {\n        if (isFloat16Array(src) && (arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n          var float16bitsArray = getFloat16BitsArray(src);\n          var uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n          return new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16)));\n        }\n\n        if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n          return new Float16Array(TypedArrayPrototypeGetBuffer(Uint16ArrayFrom(src, roundToFloat16Bits)));\n        }\n\n        var mapFunc = arguments.length <= 1 ? undefined : arguments[1];\n        var thisArg = arguments.length <= 2 ? undefined : arguments[2];\n        return new Float16Array(TypedArrayPrototypeGetBuffer(Uint16ArrayFrom(src, function (val) {\n          for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n            args[_key7 - 1] = arguments[_key7];\n          }\n\n          return roundToFloat16Bits(ReflectApply(mapFunc, this, [val].concat(_toConsumableArray(safeIfNeeded(args)))));\n        }, thisArg)));\n      }\n      /** @type {ArrayLike<unknown>} */\n\n\n      var list;\n      /** @type {number} */\n\n      var length;\n      var iterator = src[SymbolIterator];\n\n      if (iterator != null && typeof iterator !== \"function\") {\n        throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n      }\n\n      if (iterator != null) {\n        // Iterable (TypedArray, Array)\n        // for optimization\n        if (isOrdinaryArray(src)) {\n          list = src;\n          length = src.length;\n        } else if (isOrdinaryNativeTypedArray(src)) {\n          list = src;\n          length = TypedArrayPrototypeGetLength(src);\n        } else {\n          // eslint-disable-next-line no-restricted-syntax\n          list = _toConsumableArray(src);\n          length = list.length;\n        }\n      } else {\n        // ArrayLike\n        if (src == null) {\n          throw NativeTypeError(CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT);\n        }\n\n        list = NativeObject(src);\n        length = ToLength(list.length);\n      }\n\n      var array = new Constructor(length);\n\n      if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n        for (var i = 0; i < length; ++i) {\n          array[i] =\n          /** @type {number} */\n          list[i];\n        }\n      } else {\n        var _mapFunc = arguments.length <= 1 ? undefined : arguments[1];\n\n        var _thisArg = arguments.length <= 2 ? undefined : arguments[2];\n\n        for (var _i2 = 0; _i2 < length; ++_i2) {\n          array[_i2] = ReflectApply(_mapFunc, _thisArg, [list[_i2], _i2]);\n        }\n      }\n\n      return array;\n    }\n    /**\n     * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n     *\n     * @see https://tc39.es/ecma262/#sec-%typedarray%.of\n     */\n\n  }, {\n    key: \"of\",\n    value: function of() {\n      var Constructor = this;\n\n      if (!ReflectHas(Constructor, brand)) {\n        throw NativeTypeError(THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY);\n      }\n\n      var length = arguments.length; // for optimization\n\n      if (Constructor === Float16Array) {\n        var proxy = new Float16Array(length);\n        var float16bitsArray = getFloat16BitsArray(proxy);\n\n        for (var i = 0; i < length; ++i) {\n          float16bitsArray[i] = roundToFloat16Bits(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n        }\n\n        return proxy;\n      }\n\n      var array = new Constructor(length);\n\n      for (var _i3 = 0; _i3 < length; ++_i3) {\n        array[_i3] = _i3 < 0 || arguments.length <= _i3 ? undefined : arguments[_i3];\n      }\n\n      return array;\n    }\n  }]);\n\n  return Float16Array;\n}();\n/** @see https://tc39.es/ecma262/#sec-typedarray.bytes_per_element */\n\nObjectDefineProperty(Float16Array, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT\n}); // limitation: It is peaked by `Object.getOwnPropertySymbols(Float16Array)` and `Reflect.ownKeys(Float16Array)`\n\nObjectDefineProperty(Float16Array, brand, {});\n/** @see https://tc39.es/ecma262/#sec-properties-of-the-typedarray-constructors */\n\nReflectSetPrototypeOf(Float16Array, TypedArray);\nvar Float16ArrayPrototype = Float16Array.prototype;\n/** @see https://tc39.es/ecma262/#sec-typedarray.prototype.bytes_per_element */\n\nObjectDefineProperty(Float16ArrayPrototype, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT\n});\n/** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator */\n\nObjectDefineProperty(Float16ArrayPrototype, SymbolIterator, {\n  value: Float16ArrayPrototype.values,\n  writable: true,\n  configurable: true\n}); // To make `new Float16Array() instanceof Uint16Array` returns `false`\n\nReflectSetPrototypeOf(Float16ArrayPrototype, TypedArrayPrototype);","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@petamoriken/float16/src/Float16Array.mjs"],"names":["safeIfNeeded","wrap","brand","hasFloat16ArrayBrand","convertToNumber","roundToFloat16Bits","isArrayBuffer","isCanonicalIntegerIndexString","isNativeBigIntTypedArray","isNativeTypedArray","isObject","isOrdinaryArray","isOrdinaryNativeTypedArray","isSharedArrayBuffer","ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER","CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT","CANNOT_MIX_BIGINT_AND_OTHER_TYPES","DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH","ITERATOR_PROPERTY_IS_NOT_CALLABLE","OFFSET_IS_OUT_OF_BOUNDS","REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE","SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT","THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY","THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT","ArrayBufferIsView","ArrayPrototypeJoin","ArrayPrototypePush","ArrayPrototypeToLocaleString","NativeArrayBuffer","NativeObject","NativeProxy","NativeRangeError","NativeTypeError","NativeUint16Array","NativeWeakMap","NativeWeakSet","NumberIsNaN","ObjectDefineProperty","ObjectFreeze","ObjectHasOwn","ObjectPrototype__lookupGetter__","ReflectApply","ReflectConstruct","ReflectDefineProperty","ReflectGet","ReflectGetOwnPropertyDescriptor","ReflectHas","ReflectOwnKeys","ReflectSet","ReflectSetPrototypeOf","SymbolIterator","SymbolToStringTag","TypedArray","TypedArrayPrototype","TypedArrayPrototypeCopyWithin","TypedArrayPrototypeEntries","TypedArrayPrototypeFill","TypedArrayPrototypeGetBuffer","TypedArrayPrototypeGetByteOffset","TypedArrayPrototypeGetLength","TypedArrayPrototypeKeys","TypedArrayPrototypeReverse","TypedArrayPrototypeSet","TypedArrayPrototypeSlice","TypedArrayPrototypeSort","TypedArrayPrototypeSubarray","TypedArrayPrototypeValues","Uint16ArrayFrom","WeakMapPrototypeGet","WeakMapPrototypeHas","WeakMapPrototypeSet","WeakSetPrototypeAdd","WeakSetPrototypeHas","IsDetachedBuffer","SpeciesConstructor","ToIntegerOrInfinity","ToLength","defaultCompare","BYTES_PER_ELEMENT","float16bitsArrays","isFloat16Array","target","assertFloat16Array","assertSpeciesTypedArray","count","isTargetFloat16Array","isTargetTypedArray","length","float16bitsArray","getFloat16BitsArray","float16","undefined","buffer","cloned","Float16Array","byteOffset","constructor","copyToArray","array","i","TypedArrayPrototypeGetters","key","descriptor","get","handler","receiver","set","value","getOwnPropertyDescriptor","defineProperty","input","_byteOffset","_length","list","BufferConstructor","data","iterator","arguments","proxy","val","index","relativeIndex","k","callback","thisArg","Constructor","kept","accumulator","start","targetOffset","targetLength","src","srcLength","Infinity","opts","compare","x","y","uint16","end","final","n","uint16Subarray","element","from","isNaN","mapFunc","args","Float16ArrayPrototype","prototype","values","writable","configurable"],"mappings":"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","sourcesContent":["import { safeIfNeeded, wrap } from \"./_util/arrayIterator.mjs\";\nimport { brand, hasFloat16ArrayBrand } from \"./_util/brand.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport {\n  isArrayBuffer,\n  isCanonicalIntegerIndexString,\n  isNativeBigIntTypedArray,\n  isNativeTypedArray,\n  isObject,\n  isOrdinaryArray,\n  isOrdinaryNativeTypedArray,\n  isSharedArrayBuffer,\n} from \"./_util/is.mjs\";\nimport {\n  ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER,\n  CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT,\n  CANNOT_MIX_BIGINT_AND_OTHER_TYPES,\n  DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH,\n  ITERATOR_PROPERTY_IS_NOT_CALLABLE,\n  OFFSET_IS_OUT_OF_BOUNDS,\n  REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE,\n  SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT,\n  THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY,\n  THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT,\n} from \"./_util/messages.mjs\";\nimport {\n  ArrayBufferIsView,\n  ArrayPrototypeJoin,\n  ArrayPrototypePush,\n  ArrayPrototypeToLocaleString,\n  NativeArrayBuffer,\n  NativeObject,\n  NativeProxy,\n  NativeRangeError,\n  NativeTypeError,\n  NativeUint16Array,\n  NativeWeakMap,\n  NativeWeakSet,\n  NumberIsNaN,\n  ObjectDefineProperty,\n  ObjectFreeze,\n  ObjectHasOwn,\n  ObjectPrototype__lookupGetter__,\n  ReflectApply,\n  ReflectConstruct,\n  ReflectDefineProperty,\n  ReflectGet,\n  ReflectGetOwnPropertyDescriptor,\n  ReflectHas,\n  ReflectOwnKeys,\n  ReflectSet,\n  ReflectSetPrototypeOf,\n  SymbolIterator,\n  SymbolToStringTag,\n  TypedArray,\n  TypedArrayPrototype,\n  TypedArrayPrototypeCopyWithin,\n  TypedArrayPrototypeEntries,\n  TypedArrayPrototypeFill,\n  TypedArrayPrototypeGetBuffer,\n  TypedArrayPrototypeGetByteOffset,\n  TypedArrayPrototypeGetLength,\n  TypedArrayPrototypeKeys,\n  TypedArrayPrototypeReverse,\n  TypedArrayPrototypeSet,\n  TypedArrayPrototypeSlice,\n  TypedArrayPrototypeSort,\n  TypedArrayPrototypeSubarray,\n  TypedArrayPrototypeValues,\n  Uint16ArrayFrom,\n  WeakMapPrototypeGet,\n  WeakMapPrototypeHas,\n  WeakMapPrototypeSet,\n  WeakSetPrototypeAdd,\n  WeakSetPrototypeHas,\n} from \"./_util/primordials.mjs\";\nimport {\n  IsDetachedBuffer,\n  SpeciesConstructor,\n  ToIntegerOrInfinity,\n  ToLength,\n  defaultCompare,\n} from \"./_util/spec.mjs\";\n\nconst BYTES_PER_ELEMENT = 2;\n\n/** @typedef {Uint16Array & { __float16bits: never }} Float16BitsArray */\n\n/** @type {WeakMap<Float16Array, Float16BitsArray>} */\nconst float16bitsArrays = new NativeWeakMap();\n\n/**\n * @param {unknown} target\n * @returns {target is Float16Array}\n */\nexport function isFloat16Array(target) {\n  return WeakMapPrototypeHas(float16bitsArrays, target) ||\n    (!ArrayBufferIsView(target) && hasFloat16ArrayBrand(target));\n}\n\n/**\n * @param {unknown} target\n * @throws {TypeError}\n * @returns {asserts target is Float16Array}\n */\nfunction assertFloat16Array(target) {\n  if (!isFloat16Array(target)) {\n    throw NativeTypeError(THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT);\n  }\n}\n\n/**\n * @param {unknown} target\n * @param {number=} count\n * @throws {TypeError}\n * @returns {asserts target is Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float16Array|Float32Array|Float64Array}\n */\nfunction assertSpeciesTypedArray(target, count) {\n  const isTargetFloat16Array = isFloat16Array(target);\n  const isTargetTypedArray = isNativeTypedArray(target);\n\n  if (!isTargetFloat16Array && !isTargetTypedArray) {\n    throw NativeTypeError(SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT);\n  }\n\n  if (typeof count === \"number\") {\n    let length;\n    if (isTargetFloat16Array) {\n      const float16bitsArray = getFloat16BitsArray(target);\n      length = TypedArrayPrototypeGetLength(float16bitsArray);\n    } else {\n      length = TypedArrayPrototypeGetLength(target);\n    }\n\n    if (length < count) {\n      throw NativeTypeError(\n        DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH\n      );\n    }\n  }\n\n  if (isNativeBigIntTypedArray(target)) {\n    throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n  }\n}\n\n/**\n * @param {Float16Array} float16\n * @throws {TypeError}\n * @returns {Float16BitsArray}\n */\nfunction getFloat16BitsArray(float16) {\n  const float16bitsArray = WeakMapPrototypeGet(float16bitsArrays, float16);\n  if (float16bitsArray !== undefined) {\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    return float16bitsArray;\n  }\n\n  // from another Float16Array instance (a different version?)\n  const buffer = /** @type {any} */ (float16).buffer;\n\n  if (IsDetachedBuffer(buffer)) {\n    throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n  }\n\n  const cloned = ReflectConstruct(Float16Array, [\n    buffer,\n    /** @type {any} */ (float16).byteOffset,\n    /** @type {any} */ (float16).length,\n  ], float16.constructor);\n  return WeakMapPrototypeGet(float16bitsArrays, cloned);\n}\n\n/**\n * @param {Float16BitsArray} float16bitsArray\n * @returns {number[]}\n */\nfunction copyToArray(float16bitsArray) {\n  const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n  const array = [];\n  for (let i = 0; i < length; ++i) {\n    array[i] = convertToNumber(float16bitsArray[i]);\n  }\n\n  return array;\n}\n\n/** @type {WeakSet<Function>} */\nconst TypedArrayPrototypeGetters = new NativeWeakSet();\nfor (const key of ReflectOwnKeys(TypedArrayPrototype)) {\n  // @@toStringTag getter property is defined in Float16Array.prototype\n  if (key === SymbolToStringTag) {\n    continue;\n  }\n\n  const descriptor = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, key);\n  if (ObjectHasOwn(descriptor, \"get\") && typeof descriptor.get === \"function\") {\n    WeakSetPrototypeAdd(TypedArrayPrototypeGetters, descriptor.get);\n  }\n}\n\nconst handler = ObjectFreeze(/** @type {ProxyHandler<Float16BitsArray>} */ ({\n  get(target, key, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return convertToNumber(ReflectGet(target, key));\n    }\n\n    // %TypedArray%.prototype getter properties cannot called by Proxy receiver\n    if (WeakSetPrototypeHas(TypedArrayPrototypeGetters, ObjectPrototype__lookupGetter__(target, key))) {\n      return ReflectGet(target, key);\n    }\n\n    return ReflectGet(target, key, receiver);\n  },\n\n  set(target, key, value, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return ReflectSet(target, key, roundToFloat16Bits(value));\n    }\n\n    return ReflectSet(target, key, value, receiver);\n  },\n\n  getOwnPropertyDescriptor(target, key) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n      descriptor.value = convertToNumber(descriptor.value);\n      return descriptor;\n    }\n\n    return ReflectGetOwnPropertyDescriptor(target, key);\n  },\n\n  defineProperty(target, key, descriptor) {\n    if (\n      isCanonicalIntegerIndexString(key) &&\n      ObjectHasOwn(target, key) &&\n      ObjectHasOwn(descriptor, \"value\")\n    ) {\n      descriptor.value = roundToFloat16Bits(descriptor.value);\n      return ReflectDefineProperty(target, key, descriptor);\n    }\n\n    return ReflectDefineProperty(target, key, descriptor);\n  },\n}));\n\nexport class Float16Array {\n  /** @see https://tc39.es/ecma262/#sec-typedarray */\n  constructor(input, _byteOffset, _length) {\n    /** @type {Float16BitsArray} */\n    let float16bitsArray;\n\n    if (isFloat16Array(input)) {\n      float16bitsArray = ReflectConstruct(NativeUint16Array, [getFloat16BitsArray(input)], new.target);\n    } else if (isObject(input) && !isArrayBuffer(input)) { // object without ArrayBuffer\n      /** @type {ArrayLike<unknown>} */\n      let list;\n      /** @type {number} */\n      let length;\n\n      if (isNativeTypedArray(input)) { // TypedArray\n        list = input;\n        length = TypedArrayPrototypeGetLength(input);\n\n        const buffer = TypedArrayPrototypeGetBuffer(input);\n        const BufferConstructor = !isSharedArrayBuffer(buffer)\n          ? /** @type {ArrayBufferConstructor} */ (SpeciesConstructor(\n            buffer,\n            NativeArrayBuffer\n          ))\n          : NativeArrayBuffer;\n\n        if (IsDetachedBuffer(buffer)) {\n          throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n        }\n\n        if (isNativeBigIntTypedArray(input)) {\n          throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n        }\n\n        const data = new BufferConstructor(\n          length * BYTES_PER_ELEMENT\n        );\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [data], new.target);\n      } else {\n        const iterator = input[SymbolIterator];\n        if (iterator != null && typeof iterator !== \"function\") {\n          throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n        }\n\n        if (iterator != null) { // Iterable (Array)\n          // for optimization\n          if (isOrdinaryArray(input)) {\n            list = input;\n            length = input.length;\n          } else {\n            // eslint-disable-next-line no-restricted-syntax\n            list = [... /** @type {Iterable<unknown>} */ (input)];\n            length = list.length;\n          }\n        } else { // ArrayLike\n          list = /** @type {ArrayLike<unknown>} */ (input);\n          length = ToLength(list.length);\n        }\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [length], new.target);\n      }\n\n      // set values\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(list[i]);\n      }\n    } else { // primitive, ArrayBuffer\n      float16bitsArray = ReflectConstruct(NativeUint16Array, arguments, new.target);\n    }\n\n    /** @type {Float16Array} */\n    const proxy = /** @type {any} */ (new NativeProxy(float16bitsArray, handler));\n\n    // proxy private storage\n    WeakMapPrototypeSet(float16bitsArrays, proxy, float16bitsArray);\n\n    return proxy;\n  }\n\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.from\n   */\n  static from(src, ...opts) {\n    const Constructor = this;\n\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(\n        THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY\n      );\n    }\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      if (isFloat16Array(src) && opts.length === 0) {\n        const float16bitsArray = getFloat16BitsArray(src);\n        const uint16 = new NativeUint16Array(\n          TypedArrayPrototypeGetBuffer(float16bitsArray),\n          TypedArrayPrototypeGetByteOffset(float16bitsArray),\n          TypedArrayPrototypeGetLength(float16bitsArray)\n        );\n        return new Float16Array(\n          TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16))\n        );\n      }\n\n      if (opts.length === 0) {\n        return new Float16Array(\n          TypedArrayPrototypeGetBuffer(\n            Uint16ArrayFrom(src, roundToFloat16Bits)\n          )\n        );\n      }\n\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n\n      return new Float16Array(\n        TypedArrayPrototypeGetBuffer(\n          Uint16ArrayFrom(src, function (val, ...args) {\n            return roundToFloat16Bits(\n              ReflectApply(mapFunc, this, [val, ...safeIfNeeded(args)])\n            );\n          }, thisArg)\n        )\n      );\n    }\n\n    /** @type {ArrayLike<unknown>} */\n    let list;\n    /** @type {number} */\n    let length;\n\n    const iterator = src[SymbolIterator];\n    if (iterator != null && typeof iterator !== \"function\") {\n      throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n    }\n\n    if (iterator != null) { // Iterable (TypedArray, Array)\n      // for optimization\n      if (isOrdinaryArray(src)) {\n        list = src;\n        length = src.length;\n      } else if (isOrdinaryNativeTypedArray(src)) {\n        list = src;\n        length = TypedArrayPrototypeGetLength(src);\n      } else {\n        // eslint-disable-next-line no-restricted-syntax\n        list = [...src];\n        length = list.length;\n      }\n    } else { // ArrayLike\n      if (src == null) {\n        throw NativeTypeError(\n          CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT\n        );\n      }\n      list = NativeObject(src);\n      length = ToLength(list.length);\n    }\n\n    const array = new Constructor(length);\n\n    if (opts.length === 0) {\n      for (let i = 0; i < length; ++i) {\n        array[i] = /** @type {number} */ (list[i]);\n      }\n    } else {\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n      for (let i = 0; i < length; ++i) {\n        array[i] = ReflectApply(mapFunc, thisArg, [list[i], i]);\n      }\n    }\n\n    return array;\n  }\n\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.of\n   */\n  static of(...items) {\n    const Constructor = this;\n\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(\n        THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY\n      );\n    }\n\n    const length = items.length;\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const float16bitsArray = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(items[i]);\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n\n    for (let i = 0; i < length; ++i) {\n      array[i] = items[i];\n    }\n\n    return array;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys */\n  keys() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return TypedArrayPrototypeKeys(float16bitsArray);\n  }\n\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.values\n   */\n  values() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return wrap((function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const val of TypedArrayPrototypeValues(float16bitsArray)) {\n        yield convertToNumber(val);\n      }\n    })());\n  }\n\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries\n   */\n  entries() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return wrap((function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const [i, val] of TypedArrayPrototypeEntries(float16bitsArray)) {\n        yield /** @type {[Number, number]} */ ([i, convertToNumber(val)]);\n      }\n    })());\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.at */\n  at(index) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeIndex = ToIntegerOrInfinity(index);\n    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n\n    if (k < 0 || k >= length) {\n      return;\n    }\n\n    return convertToNumber(float16bitsArray[k]);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.map */\n  map(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const array = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        const val = convertToNumber(float16bitsArray[i]);\n        array[i] = roundToFloat16Bits(\n          ReflectApply(callback, thisArg, [val, i, this])\n        );\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n    assertSpeciesTypedArray(array, length);\n\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      array[i] = ReflectApply(callback, thisArg, [val, i, this]);\n    }\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter */\n  filter(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    const kept = [];\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [val, i, this])) {\n        ArrayPrototypePush(kept, val);\n      }\n    }\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n    const array = new Constructor(kept);\n    assertSpeciesTypedArray(array);\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce */\n  reduce(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    if (length === 0 && opts.length === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n    if (opts.length === 0) {\n      accumulator = convertToNumber(float16bitsArray[0]);\n      start = 1;\n    } else {\n      accumulator = opts[0];\n      start = 0;\n    }\n\n    for (let i = start; i < length; ++i) {\n      accumulator = callback(\n        accumulator,\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this\n      );\n    }\n\n    return accumulator;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright */\n  reduceRight(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    if (length === 0 && opts.length === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n    if (opts.length === 0) {\n      accumulator = convertToNumber(float16bitsArray[length - 1]);\n      start = length - 2;\n    } else {\n      accumulator = opts[0];\n      start = length - 1;\n    }\n\n    for (let i = start; i >= 0; --i) {\n      accumulator = callback(\n        accumulator,\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this\n      );\n    }\n\n    return accumulator;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach */\n  forEach(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      ReflectApply(callback, thisArg, [\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this,\n      ]);\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.find */\n  find(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex */\n  findIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlast */\n  findLast(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlastindex */\n  findLastIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.every */\n  every(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      if (\n        !ReflectApply(callback, thisArg, [\n          convertToNumber(float16bitsArray[i]),\n          i,\n          this,\n        ])\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.some */\n  some(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      if (\n        ReflectApply(callback, thisArg, [\n          convertToNumber(float16bitsArray[i]),\n          i,\n          this,\n        ])\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.set */\n  set(input, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const targetOffset = ToIntegerOrInfinity(opts[0]);\n    if (targetOffset < 0) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    if (input == null) {\n      throw NativeTypeError(\n        CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT\n      );\n    }\n\n    if (isNativeBigIntTypedArray(input)) {\n      throw NativeTypeError(\n        CANNOT_MIX_BIGINT_AND_OTHER_TYPES\n      );\n    }\n\n    // for optimization\n    if (isFloat16Array(input)) {\n      // peel off Proxy\n      return TypedArrayPrototypeSet(\n        getFloat16BitsArray(this),\n        getFloat16BitsArray(input),\n        targetOffset\n      );\n    }\n\n    if (isNativeTypedArray(input)) {\n      const buffer = TypedArrayPrototypeGetBuffer(input);\n      if (IsDetachedBuffer(buffer)) {\n        throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n      }\n    }\n\n    const targetLength = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    const src = NativeObject(input);\n    const srcLength = ToLength(src.length);\n\n    if (targetOffset === Infinity || srcLength + targetOffset > targetLength) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    for (let i = 0; i < srcLength; ++i) {\n      float16bitsArray[i + targetOffset] = roundToFloat16Bits(src[i]);\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse */\n  reverse() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeReverse(float16bitsArray);\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill */\n  fill(value, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeFill(\n      float16bitsArray,\n      roundToFloat16Bits(value),\n      ...safeIfNeeded(opts)\n    );\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin */\n  copyWithin(target, start, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeCopyWithin(float16bitsArray, target, start, ...safeIfNeeded(opts));\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort */\n  sort(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const compare = opts[0] !== undefined ? opts[0] : defaultCompare;\n    TypedArrayPrototypeSort(float16bitsArray, (x, y) => {\n      return compare(convertToNumber(x), convertToNumber(y));\n    });\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice */\n  slice(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const uint16 = new NativeUint16Array(\n        TypedArrayPrototypeGetBuffer(float16bitsArray),\n        TypedArrayPrototypeGetByteOffset(float16bitsArray),\n        TypedArrayPrototypeGetLength(float16bitsArray)\n      );\n      return new Float16Array(\n        TypedArrayPrototypeGetBuffer(\n          TypedArrayPrototypeSlice(uint16, ...safeIfNeeded(opts))\n        )\n      );\n    }\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const start = ToIntegerOrInfinity(opts[0]);\n    const end = opts[1] === undefined ? length : ToIntegerOrInfinity(opts[1]);\n\n    let k;\n    if (start === -Infinity) {\n      k = 0;\n    } else if (start < 0) {\n      k = length + start > 0 ? length + start : 0;\n    } else {\n      k = length < start ? length : start;\n    }\n\n    let final;\n    if (end === -Infinity) {\n      final = 0;\n    } else if (end < 0) {\n      final = length + end > 0 ? length + end : 0;\n    } else {\n      final = length < end ? length : end;\n    }\n\n    const count = final - k > 0 ? final - k : 0;\n    const array = new Constructor(count);\n    assertSpeciesTypedArray(array, count);\n\n    if (count === 0) {\n      return array;\n    }\n\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    let n = 0;\n    while (k < final) {\n      array[n] = convertToNumber(float16bitsArray[k]);\n      ++k;\n      ++n;\n    }\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray */\n  subarray(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    const uint16 = new NativeUint16Array(\n      TypedArrayPrototypeGetBuffer(float16bitsArray),\n      TypedArrayPrototypeGetByteOffset(float16bitsArray),\n      TypedArrayPrototypeGetLength(float16bitsArray)\n    );\n    const uint16Subarray = TypedArrayPrototypeSubarray(uint16, ...safeIfNeeded(opts));\n\n    const array = new Constructor(\n      TypedArrayPrototypeGetBuffer(uint16Subarray),\n      TypedArrayPrototypeGetByteOffset(uint16Subarray),\n      TypedArrayPrototypeGetLength(uint16Subarray)\n    );\n    assertSpeciesTypedArray(array);\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof */\n  indexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = ToIntegerOrInfinity(opts[0]);\n    if (from === Infinity) {\n      return -1;\n    }\n\n    if (from < 0) {\n      from += length;\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    for (let i = from; i < length; ++i) {\n      if (\n        ObjectHasOwn(float16bitsArray, i) &&\n        convertToNumber(float16bitsArray[i]) === element\n      ) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof */\n  lastIndexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = opts.length >= 1 ? ToIntegerOrInfinity(opts[0]) : length - 1;\n    if (from === -Infinity) {\n      return -1;\n    }\n\n    if (from >= 0) {\n      from = from < length - 1 ? from : length - 1;\n    } else {\n      from += length;\n    }\n\n    for (let i = from; i >= 0; --i) {\n      if (\n        ObjectHasOwn(float16bitsArray, i) &&\n        convertToNumber(float16bitsArray[i]) === element\n      ) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes */\n  includes(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = ToIntegerOrInfinity(opts[0]);\n    if (from === Infinity) {\n      return false;\n    }\n\n    if (from < 0) {\n      from += length;\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    const isNaN = NumberIsNaN(element);\n    for (let i = from; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n\n      if (isNaN && NumberIsNaN(value)) {\n        return true;\n      }\n\n      if (value === element) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.join */\n  join(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const array = copyToArray(float16bitsArray);\n\n    return ArrayPrototypeJoin(array, ...safeIfNeeded(opts));\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring */\n  toLocaleString(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const array = copyToArray(float16bitsArray);\n\n    return ArrayPrototypeToLocaleString(array, ...safeIfNeeded(opts));\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag */\n  get [SymbolToStringTag]() {\n    if (isFloat16Array(this)) {\n      return /** @type {any} */ (\"Float16Array\");\n    }\n  }\n}\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.bytes_per_element */\nObjectDefineProperty(Float16Array, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT,\n});\n\n// limitation: It is peaked by `Object.getOwnPropertySymbols(Float16Array)` and `Reflect.ownKeys(Float16Array)`\nObjectDefineProperty(Float16Array, brand, {});\n\n/** @see https://tc39.es/ecma262/#sec-properties-of-the-typedarray-constructors */\nReflectSetPrototypeOf(Float16Array, TypedArray);\n\nconst Float16ArrayPrototype = Float16Array.prototype;\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.prototype.bytes_per_element */\nObjectDefineProperty(Float16ArrayPrototype, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT,\n});\n\n/** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator */\nObjectDefineProperty(Float16ArrayPrototype, SymbolIterator, {\n  value: Float16ArrayPrototype.values,\n  writable: true,\n  configurable: true,\n});\n\n// To make `new Float16Array() instanceof Uint16Array` returns `false`\nReflectSetPrototypeOf(Float16ArrayPrototype, TypedArrayPrototype);\n"]},"metadata":{},"sourceType":"module"}