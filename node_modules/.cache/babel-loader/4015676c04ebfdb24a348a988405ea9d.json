{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\n * @module ol/source/BingMaps\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport SourceState from './State.js';\nimport TileImage from './TileImage.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { createFromTileUrlFunctions } from '../tileurlfunction.js';\nimport { createOrUpdate } from '../tilecoord.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\nimport { jsonp as requestJSONP } from '../net.js';\n/**\n * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.\n * @return {string} Quad key.\n */\n\nexport function quadKey(tileCoord) {\n  var z = tileCoord[0];\n  var digits = new Array(z);\n  var mask = 1 << z - 1;\n  var i, charCode;\n\n  for (i = 0; i < z; ++i) {\n    // 48 is charCode for 0 - '0'.charCodeAt(0)\n    charCode = 48;\n\n    if (tileCoord[1] & mask) {\n      charCode += 1;\n    }\n\n    if (tileCoord[2] & mask) {\n      charCode += 2;\n    }\n\n    digits[i] = String.fromCharCode(charCode);\n    mask >>= 1;\n  }\n\n  return digits.join('');\n}\n/**\n * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’\n * Terms Of Use.\n * @const\n * @type {string}\n */\n\nvar TOS_ATTRIBUTION = '<a class=\"ol-attribution-bing-tos\" ' + 'href=\"https://www.microsoft.com/maps/product/terms.html\" target=\"_blank\">' + 'Terms of Use</a>';\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.\n * @property {string} [culture='en-us'] Culture code.\n * @property {string} key Bing Maps API key. Get yours at https://www.bingmapsportal.com/.\n * @property {string} imagerySet Type of imagery.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @typedef {Object} BingMapsImageryMetadataResponse\n * @property {number} statusCode The response status code\n * @property {string} statusDescription The response status description\n * @property {string} authenticationResultCode The authentication result code\n * @property {Array<ResourceSet>} resourceSets The array of resource sets\n */\n\n/**\n * @typedef {Object} ResourceSet\n * @property {Array<Resource>} resources Resources.\n */\n\n/**\n * @typedef {Object} Resource\n * @property {number} imageHeight The image height\n * @property {number} imageWidth The image width\n * @property {number} zoomMin The minimum zoom level\n * @property {number} zoomMax The maximum zoom level\n * @property {string} imageUrl The image URL\n * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation\n * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders\n */\n\n/**\n * @typedef {Object} ImageryProvider\n * @property {Array<CoverageArea>} coverageAreas The coverage areas\n * @property {string} [attribution] The attribution\n */\n\n/**\n * @typedef {Object} CoverageArea\n * @property {number} zoomMin The minimum zoom\n * @property {number} zoomMax The maximum zoom\n * @property {Array<number>} bbox The coverage bounding box\n */\n\n/**\n * @classdesc\n * Layer source for Bing Maps tile data.\n * @api\n */\n\nvar BingMaps =\n/** @class */\nfunction (_super) {\n  __extends(BingMaps, _super);\n  /**\n   * @param {Options} options Bing Maps options.\n   */\n\n\n  function BingMaps(options) {\n    var _this = this;\n\n    var hidpi = options.hidpi !== undefined ? options.hidpi : false;\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    _this = _super.call(this, {\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      interpolate: interpolate,\n      opaque: true,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: SourceState.LOADING,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: hidpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    }) || this;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.hidpi_ = hidpi;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.culture_ = options.culture !== undefined ? options.culture : 'en-us';\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.apiKey_ = options.key;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.imagerySet_ = options.imagerySet;\n    var url = 'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' + _this.imagerySet_ + '?uriScheme=https&include=ImageryProviders&key=' + _this.apiKey_ + '&c=' + _this.culture_;\n    requestJSONP(url, _this.handleImageryMetadataResponse.bind(_this), undefined, 'jsonp');\n    return _this;\n  }\n  /**\n   * Get the api key used for this source.\n   *\n   * @return {string} The api key.\n   * @api\n   */\n\n\n  BingMaps.prototype.getApiKey = function () {\n    return this.apiKey_;\n  };\n  /**\n   * Get the imagery set associated with this source.\n   *\n   * @return {string} The imagery set.\n   * @api\n   */\n\n\n  BingMaps.prototype.getImagerySet = function () {\n    return this.imagerySet_;\n  };\n  /**\n   * @param {BingMapsImageryMetadataResponse} response Response.\n   */\n\n\n  BingMaps.prototype.handleImageryMetadataResponse = function (response) {\n    if (response.statusCode != 200 || response.statusDescription != 'OK' || response.authenticationResultCode != 'ValidCredentials' || response.resourceSets.length != 1 || response.resourceSets[0].resources.length != 1) {\n      this.setState(SourceState.ERROR);\n      return;\n    }\n\n    var resource = response.resourceSets[0].resources[0];\n    var maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;\n    var sourceProjection = this.getProjection();\n    var extent = extentFromProjection(sourceProjection);\n    var scale = this.hidpi_ ? 2 : 1;\n    var tileSize = resource.imageWidth == resource.imageHeight ? resource.imageWidth / scale : [resource.imageWidth / scale, resource.imageHeight / scale];\n    var tileGrid = createXYZ({\n      extent: extent,\n      minZoom: resource.zoomMin,\n      maxZoom: maxZoom,\n      tileSize: tileSize\n    });\n    this.tileGrid = tileGrid;\n    var culture = this.culture_;\n    var hidpi = this.hidpi_;\n    this.tileUrlFunction = createFromTileUrlFunctions(resource.imageUrlSubdomains.map(function (subdomain) {\n      /** @type {import('../tilecoord.js').TileCoord} */\n      var quadKeyTileCoord = [0, 0, 0];\n      var imageUrl = resource.imageUrl.replace('{subdomain}', subdomain).replace('{culture}', culture);\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function (tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          } else {\n            createOrUpdate(tileCoord[0], tileCoord[1], tileCoord[2], quadKeyTileCoord);\n            var url = imageUrl;\n\n            if (hidpi) {\n              url += '&dpi=d1&device=mobile';\n            }\n\n            return url.replace('{quadkey}', quadKey(quadKeyTileCoord));\n          }\n        }\n      );\n    }));\n\n    if (resource.imageryProviders) {\n      var transform_1 = getTransformFromProjections(getProjection('EPSG:4326'), this.getProjection());\n      this.setAttributions(function (frameState) {\n        var attributions = [];\n        var viewState = frameState.viewState;\n        var tileGrid = this.getTileGrid();\n        var z = tileGrid.getZForResolution(viewState.resolution, this.zDirection);\n        var tileCoord = tileGrid.getTileCoordForCoordAndZ(viewState.center, z);\n        var zoom = tileCoord[0];\n        resource.imageryProviders.map(function (imageryProvider) {\n          var intersecting = false;\n          var coverageAreas = imageryProvider.coverageAreas;\n\n          for (var i = 0, ii = coverageAreas.length; i < ii; ++i) {\n            var coverageArea = coverageAreas[i];\n\n            if (zoom >= coverageArea.zoomMin && zoom <= coverageArea.zoomMax) {\n              var bbox = coverageArea.bbox;\n              var epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];\n              var extent_1 = applyTransform(epsg4326Extent, transform_1);\n\n              if (intersects(extent_1, frameState.extent)) {\n                intersecting = true;\n                break;\n              }\n            }\n          }\n\n          if (intersecting) {\n            attributions.push(imageryProvider.attribution);\n          }\n        });\n        attributions.push(TOS_ATTRIBUTION);\n        return attributions;\n      }.bind(this));\n    }\n\n    this.setState(SourceState.READY);\n  };\n\n  return BingMaps;\n}(TileImage);\n\nexport default BingMaps;","map":{"version":3,"mappings":"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","names":["SourceState","TileImage","applyTransform","intersects","createFromTileUrlFunctions","createOrUpdate","createXYZ","extentFromProjection","get","getProjection","getTransformFromProjections","jsonp","requestJSONP","quadKey","tileCoord","z","digits","Array","mask","i","charCode","String","fromCharCode","join","TOS_ATTRIBUTION","__extends","options","hidpi","undefined","interpolate","imageSmoothing","_super","cacheSize","crossOrigin","opaque","projection","reprojectionErrorThreshold","state","LOADING","tileLoadFunction","tilePixelRatio","wrapX","transition","zDirection","_this","hidpi_","culture_","culture","maxZoom_","maxZoom","apiKey_","key","imagerySet_","imagerySet","url","handleImageryMetadataResponse","bind","BingMaps","response","statusCode","statusDescription","authenticationResultCode","resourceSets","length","resources","setState","ERROR","resource","zoomMax","sourceProjection","extent","scale","tileSize","imageWidth","imageHeight","tileGrid","minZoom","zoomMin","tileUrlFunction","imageUrlSubdomains","map","subdomain","quadKeyTileCoord","imageUrl","replace","pixelRatio","imageryProviders","transform_1","setAttributions","frameState","attributions","viewState","getTileGrid","getZForResolution","resolution","getTileCoordForCoordAndZ","center","zoom","imageryProvider","intersecting","coverageAreas","ii","coverageArea","bbox","epsg4326Extent","extent_1","push","attribution","READY"],"sourceRoot":"","sources":["../src/source/BingMaps.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}