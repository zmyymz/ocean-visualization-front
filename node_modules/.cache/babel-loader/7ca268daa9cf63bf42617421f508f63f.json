{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\n * @module ol/render\n */\nimport CanvasImmediateRenderer from './render/canvas/Immediate.js';\nimport { DEVICE_PIXEL_RATIO } from './has.js';\nimport { apply as applyTransform, create as createTransform, multiply as multiplyTransform, scale as scaleTransform } from './transform.js';\nimport { getSquaredTolerance } from './renderer/vector.js';\nimport { getTransformFromProjections, getUserProjection } from './proj.js';\n/**\n * @typedef {Object} State\n * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.\n * @property {import(\"./Feature.js\").FeatureLike} feature Feature.\n * @property {import(\"./geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} pixelRatio Pixel ratio used by the layer renderer.\n * @property {number} resolution Resolution that the render batch was created and optimized for.\n * This is not the view's resolution that is being rendered.\n * @property {number} rotation Rotation of the rendered layer in radians.\n */\n\n/**\n * A function to be used when sorting features before rendering.\n * It takes two instances of {@link module:ol/Feature~Feature} or\n * {@link module:ol/render/Feature~RenderFeature} and returns a `{number}`.\n *\n * @typedef {function(import(\"./Feature.js\").FeatureLike, import(\"./Feature.js\").FeatureLike):number} OrderFunction\n */\n\n/**\n * @typedef {Object} ToContextOptions\n * @property {import(\"./size.js\").Size} [size] Desired size of the canvas in css\n * pixels. When provided, both canvas and css size will be set according to the\n * `pixelRatio`. If not provided, the current canvas and css sizes will not be\n * altered.\n * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas\n * pixel to css pixel ratio) for the canvas.\n */\n\n/**\n * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries\n * to the context's canvas.\n *\n * The units for geometry coordinates are css pixels relative to the top left\n * corner of the canvas element.\n * ```js\n * import {toContext} from 'ol/render';\n * import Fill from 'ol/style/Fill';\n * import Polygon from 'ol/geom/Polygon';\n *\n * var canvas = document.createElement('canvas');\n * var render = toContext(canvas.getContext('2d'),\n *     { size: [100, 100] });\n * render.setFillStrokeStyle(new Fill({ color: blue }));\n * render.drawPolygon(\n *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]]));\n * ```\n *\n * @param {CanvasRenderingContext2D} context Canvas context.\n * @param {ToContextOptions} [opt_options] Options.\n * @return {CanvasImmediateRenderer} Canvas Immediate.\n * @api\n */\n\nexport function toContext(context, opt_options) {\n  var canvas = context.canvas;\n  var options = opt_options ? opt_options : {};\n  var pixelRatio = options.pixelRatio || DEVICE_PIXEL_RATIO;\n  var size = options.size;\n\n  if (size) {\n    canvas.width = size[0] * pixelRatio;\n    canvas.height = size[1] * pixelRatio;\n    canvas.style.width = size[0] + 'px';\n    canvas.style.height = size[1] + 'px';\n  }\n\n  var extent = [0, 0, canvas.width, canvas.height];\n  var transform = scaleTransform(createTransform(), pixelRatio, pixelRatio);\n  return new CanvasImmediateRenderer(context, pixelRatio, extent, transform, 0);\n}\n/**\n * Gets a vector context for drawing to the event's canvas.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @return {CanvasImmediateRenderer} Vector context.\n * @api\n */\n\nexport function getVectorContext(event) {\n  if (!(event.context instanceof CanvasRenderingContext2D)) {\n    throw new Error('Only works for render events from Canvas 2D layers');\n  } // canvas may be at a different pixel ratio than frameState.pixelRatio\n\n\n  var canvasPixelRatio = event.inversePixelTransform[0];\n  var frameState = event.frameState;\n  var transform = multiplyTransform(event.inversePixelTransform.slice(), frameState.coordinateToPixelTransform);\n  var squaredTolerance = getSquaredTolerance(frameState.viewState.resolution, canvasPixelRatio);\n  var userTransform;\n  var userProjection = getUserProjection();\n\n  if (userProjection) {\n    userTransform = getTransformFromProjections(userProjection, frameState.viewState.projection);\n  }\n\n  return new CanvasImmediateRenderer(event.context, canvasPixelRatio, frameState.extent, transform, frameState.viewState.rotation, squaredTolerance, userTransform);\n}\n/**\n * Gets the pixel of the event's canvas context from the map viewport's CSS pixel.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @param {import(\"./pixel.js\").Pixel} pixel CSS pixel relative to the top-left\n * corner of the map viewport.\n * @return {import(\"./pixel.js\").Pixel} Pixel on the event's canvas context.\n * @api\n */\n\nexport function getRenderPixel(event, pixel) {\n  return applyTransform(event.inversePixelTransform, pixel.slice(0));\n}","map":{"version":3,"mappings":"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","names":["CanvasImmediateRenderer","DEVICE_PIXEL_RATIO","apply","applyTransform","create","createTransform","multiply","multiplyTransform","scale","scaleTransform","getSquaredTolerance","getTransformFromProjections","getUserProjection","toContext","context","opt_options","canvas","options","pixelRatio","size","width","height","style","extent","transform","getVectorContext","event","CanvasRenderingContext2D","Error","canvasPixelRatio","inversePixelTransform","frameState","slice","coordinateToPixelTransform","squaredTolerance","viewState","resolution","userTransform","userProjection","projection","rotation","getRenderPixel","pixel"],"sourceRoot":"","sources":["src/render.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}