{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\n * @module ol/render/Feature\n */\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport { LineString, MultiLineString, MultiPoint, MultiPolygon, Point, Polygon } from '../geom.js';\nimport { compose as composeTransform, create as createTransform } from '../transform.js';\nimport { createOrUpdateFromCoordinate, createOrUpdateFromFlatCoordinates, getCenter, getHeight } from '../extent.js';\nimport { extend } from '../array.js';\nimport { getInteriorPointOfArray, getInteriorPointsOfMultiArray } from '../geom/flat/interiorpoint.js';\nimport { get as getProjection } from '../proj.js';\nimport { inflateEnds } from '../geom/flat/orient.js';\nimport { interpolatePoint } from '../geom/flat/interpolate.js';\nimport { linearRingss as linearRingssCenter } from '../geom/flat/center.js';\nimport { transform2D } from '../geom/flat/transform.js';\n/**\n * @type {import(\"../transform.js\").Transform}\n */\n\nvar tmpTransform = createTransform();\n/**\n * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like\n * structure, optimized for vector tile rendering and styling. Geometry access\n * through the API is limited to getting the type and extent of the geometry.\n */\n\nvar RenderFeature =\n/** @class */\nfunction () {\n  /**\n   * @param {import(\"../geom/GeometryType.js\").default} type Geometry type.\n   * @param {Array<number>} flatCoordinates Flat coordinates. These always need\n   *     to be right-handed for polygons.\n   * @param {Array<number>|Array<Array<number>>} ends Ends or Endss.\n   * @param {Object<string, *>} properties Properties.\n   * @param {number|string|undefined} id Feature id.\n   */\n  function RenderFeature(type, flatCoordinates, ends, properties, id) {\n    /**\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\n     */\n    this.styleFunction;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n\n    this.extent_;\n    /**\n     * @private\n     * @type {number|string|undefined}\n     */\n\n    this.id_ = id;\n    /**\n     * @private\n     * @type {import(\"../geom/GeometryType.js\").default}\n     */\n\n    this.type_ = type;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.flatCoordinates_ = flatCoordinates;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.flatInteriorPoints_ = null;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.flatMidpoints_ = null;\n    /**\n     * @private\n     * @type {Array<number>|Array<Array<number>>}\n     */\n\n    this.ends_ = ends;\n    /**\n     * @private\n     * @type {Object<string, *>}\n     */\n\n    this.properties_ = properties;\n  }\n  /**\n   * Get a feature property by its key.\n   * @param {string} key Key\n   * @return {*} Value for the requested key.\n   * @api\n   */\n\n\n  RenderFeature.prototype.get = function (key) {\n    return this.properties_[key];\n  };\n  /**\n   * Get the extent of this feature's geometry.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  RenderFeature.prototype.getExtent = function () {\n    if (!this.extent_) {\n      this.extent_ = this.type_ === GeometryType.POINT ? createOrUpdateFromCoordinate(this.flatCoordinates_) : createOrUpdateFromFlatCoordinates(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2);\n    }\n\n    return this.extent_;\n  };\n  /**\n   * @return {Array<number>} Flat interior points.\n   */\n\n\n  RenderFeature.prototype.getFlatInteriorPoint = function () {\n    if (!this.flatInteriorPoints_) {\n      var flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoints_ = getInteriorPointOfArray(this.flatCoordinates_, 0,\n      /** @type {Array<number>} */\n      this.ends_, 2, flatCenter, 0);\n    }\n\n    return this.flatInteriorPoints_;\n  };\n  /**\n   * @return {Array<number>} Flat interior points.\n   */\n\n\n  RenderFeature.prototype.getFlatInteriorPoints = function () {\n    if (!this.flatInteriorPoints_) {\n      var flatCenters = linearRingssCenter(this.flatCoordinates_, 0,\n      /** @type {Array<Array<number>>} */\n      this.ends_, 2);\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(this.flatCoordinates_, 0,\n      /** @type {Array<Array<number>>} */\n      this.ends_, 2, flatCenters);\n    }\n\n    return this.flatInteriorPoints_;\n  };\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n\n\n  RenderFeature.prototype.getFlatMidpoint = function () {\n    if (!this.flatMidpoints_) {\n      this.flatMidpoints_ = interpolatePoint(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, 0.5);\n    }\n\n    return this.flatMidpoints_;\n  };\n  /**\n   * @return {Array<number>} Flat midpoints.\n   */\n\n\n  RenderFeature.prototype.getFlatMidpoints = function () {\n    if (!this.flatMidpoints_) {\n      this.flatMidpoints_ = [];\n      var flatCoordinates = this.flatCoordinates_;\n      var offset = 0;\n      var ends =\n      /** @type {Array<number>} */\n      this.ends_;\n\n      for (var i = 0, ii = ends.length; i < ii; ++i) {\n        var end = ends[i];\n        var midpoint = interpolatePoint(flatCoordinates, offset, end, 2, 0.5);\n        extend(this.flatMidpoints_, midpoint);\n        offset = end;\n      }\n    }\n\n    return this.flatMidpoints_;\n  };\n  /**\n   * Get the feature identifier.  This is a stable identifier for the feature and\n   * is set when reading data from a remote source.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n\n\n  RenderFeature.prototype.getId = function () {\n    return this.id_;\n  };\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n\n\n  RenderFeature.prototype.getOrientedFlatCoordinates = function () {\n    return this.flatCoordinates_;\n  };\n  /**\n   * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when\n   * determining the geometry type in style function (see {@link #getType}).\n   * @return {RenderFeature} Feature.\n   * @api\n   */\n\n\n  RenderFeature.prototype.getGeometry = function () {\n    return this;\n  };\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {RenderFeature} Simplified geometry.\n   */\n\n\n  RenderFeature.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n    return this;\n  };\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n   * @return {RenderFeature} Simplified geometry.\n   */\n\n\n  RenderFeature.prototype.simplifyTransformed = function (squaredTolerance, opt_transform) {\n    return this;\n  };\n  /**\n   * Get the feature properties.\n   * @return {Object<string, *>} Feature properties.\n   * @api\n   */\n\n\n  RenderFeature.prototype.getProperties = function () {\n    return this.properties_;\n  };\n  /**\n   * @return {number} Stride.\n   */\n\n\n  RenderFeature.prototype.getStride = function () {\n    return 2;\n  };\n  /**\n   * @return {import('../style/Style.js').StyleFunction|undefined} Style\n   */\n\n\n  RenderFeature.prototype.getStyleFunction = function () {\n    return this.styleFunction;\n  };\n  /**\n   * Get the type of this feature's geometry.\n   * @return {import(\"../geom/GeometryType.js\").default} Geometry type.\n   * @api\n   */\n\n\n  RenderFeature.prototype.getType = function () {\n    return this.type_;\n  };\n  /**\n   * Transform geometry coordinates from tile pixel space to projected.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection The data projection\n   */\n\n\n  RenderFeature.prototype.transform = function (projection) {\n    projection = getProjection(projection);\n    var pixelExtent = projection.getExtent();\n    var projectedExtent = projection.getWorldExtent();\n\n    if (pixelExtent && projectedExtent) {\n      var scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n      composeTransform(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);\n      transform2D(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, tmpTransform, this.flatCoordinates_);\n    }\n  };\n  /**\n   * @return {Array<number>|Array<Array<number>>} Ends or endss.\n   */\n\n\n  RenderFeature.prototype.getEnds = function () {\n    return this.ends_;\n  };\n\n  return RenderFeature;\n}();\n\nRenderFeature.prototype.getEndss = RenderFeature.prototype.getEnds;\n/**\n * @return {Array<number>} Flat coordinates.\n */\n\nRenderFeature.prototype.getFlatCoordinates = RenderFeature.prototype.getOrientedFlatCoordinates;\n/**\n * Create a geometry from an `ol/render/Feature`\n * @param {RenderFeature} renderFeature\n * Render Feature\n * @return {Point|MultiPoint|LineString|MultiLineString|Polygon|MultiPolygon}\n * New geometry instance.\n * @api\n */\n\nexport function toGeometry(renderFeature) {\n  var geometryType = renderFeature.getType();\n\n  switch (geometryType) {\n    case GeometryType.POINT:\n      return new Point(renderFeature.getFlatCoordinates());\n\n    case GeometryType.MULTI_POINT:\n      return new MultiPoint(renderFeature.getFlatCoordinates(), GeometryLayout.XY);\n\n    case GeometryType.LINE_STRING:\n      return new LineString(renderFeature.getFlatCoordinates(), GeometryLayout.XY);\n\n    case GeometryType.MULTI_LINE_STRING:\n      return new MultiLineString(renderFeature.getFlatCoordinates(), GeometryLayout.XY,\n      /** @type {Array<number>} */\n      renderFeature.getEnds());\n\n    case GeometryType.POLYGON:\n      var flatCoordinates = renderFeature.getFlatCoordinates();\n      var ends =\n      /** @type {Array<number>} */\n      renderFeature.getEnds();\n      var endss = inflateEnds(flatCoordinates, ends);\n      return endss.length > 1 ? new MultiPolygon(flatCoordinates, GeometryLayout.XY, endss) : new Polygon(flatCoordinates, GeometryLayout.XY, ends);\n\n    default:\n      throw new Error('Invalid geometry type:' + geometryType);\n  }\n}\n/**\n * Create an `ol/Feature` from an `ol/render/Feature`\n * @param {RenderFeature} renderFeature RenderFeature\n * @param {string} [opt_geometryName='geometry'] Geometry name to use\n * when creating the Feature.\n * @return {Feature} Newly constructed `ol/Feature` with properties,\n * geometry, and id copied over.\n * @api\n */\n\nexport function toFeature(renderFeature, opt_geometryName) {\n  var id = renderFeature.getId();\n  var geometry = toGeometry(renderFeature);\n  var properties = renderFeature.getProperties();\n  var feature = new Feature();\n\n  if (opt_geometryName !== undefined) {\n    feature.setGeometryName(opt_geometryName);\n  }\n\n  feature.setGeometry(geometry);\n\n  if (id !== undefined) {\n    feature.setId(id);\n  }\n\n  feature.setProperties(properties, true);\n  return feature;\n}\nexport default RenderFeature;","map":{"version":3,"mappings":"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","names":["Feature","GeometryLayout","GeometryType","LineString","MultiLineString","MultiPoint","MultiPolygon","Point","Polygon","compose","composeTransform","create","createTransform","createOrUpdateFromCoordinate","createOrUpdateFromFlatCoordinates","getCenter","getHeight","extend","getInteriorPointOfArray","getInteriorPointsOfMultiArray","get","getProjection","inflateEnds","interpolatePoint","linearRingss","linearRingssCenter","transform2D","tmpTransform","type","flatCoordinates","ends","properties","id","styleFunction","extent_","id_","type_","flatCoordinates_","flatInteriorPoints_","flatMidpoints_","ends_","properties_","RenderFeature","key","POINT","length","flatCenter","getExtent","flatCenters","offset","i","ii","end","midpoint","squaredTolerance","opt_transform","projection","pixelExtent","projectedExtent","getWorldExtent","scale","prototype","getEndss","getEnds","getFlatCoordinates","getOrientedFlatCoordinates","toGeometry","renderFeature","geometryType","getType","MULTI_POINT","XY","LINE_STRING","MULTI_LINE_STRING","POLYGON","endss","Error","toFeature","opt_geometryName","getId","geometry","getProperties","feature","undefined","setGeometryName","setGeometry","setId","setProperties"],"sourceRoot":"","sources":["../src/render/Feature.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}