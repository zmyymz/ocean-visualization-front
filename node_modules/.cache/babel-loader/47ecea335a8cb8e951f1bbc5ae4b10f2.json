{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/DragBox\n */\n// FIXME draw drag box\n\n\nimport Event from '../events/Event.js';\nimport PointerInteraction from './Pointer.js';\nimport RenderBox from '../render/Box.js';\nimport { mouseActionButton } from '../events/condition.js';\n/**\n * A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\n * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,\n * true should be returned.\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default, import(\"../pixel.js\").Pixel, import(\"../pixel.js\").Pixel):boolean} EndCondition\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-dragbox'] CSS class name for styling the box.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link ol/events/condition~mouseActionButton}.\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default\n * `boxEndCondition` function.\n * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\n * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.\n * Default is `true` if the area of the box is bigger than the `minArea` option.\n * @property {function(this:DragBox, import(\"../MapBrowserEvent.js\").default):void} [onBoxEnd] Code to execute just\n * before `boxend` is fired.\n */\n\n/**\n * @enum {string}\n */\n\nvar DragBoxEventType = {\n  /**\n   * Triggered upon drag box start.\n   * @event DragBoxEvent#boxstart\n   * @api\n   */\n  BOXSTART: 'boxstart',\n\n  /**\n   * Triggered on drag when box is active.\n   * @event DragBoxEvent#boxdrag\n   * @api\n   */\n  BOXDRAG: 'boxdrag',\n\n  /**\n   * Triggered upon drag box end.\n   * @event DragBoxEvent#boxend\n   * @api\n   */\n  BOXEND: 'boxend',\n\n  /**\n   * Triggered upon drag box canceled.\n   * @event DragBoxEvent#boxcancel\n   * @api\n   */\n  BOXCANCEL: 'boxcancel'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of\n * this type.\n */\n\nvar DragBoxEvent =\n/** @class */\nfunction (_super) {\n  __extends(DragBoxEvent, _super);\n  /**\n   * @param {string} type The event type.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate The event coordinate.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Originating event.\n   */\n\n\n  function DragBoxEvent(type, coordinate, mapBrowserEvent) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The coordinate of the drag event.\n     * @const\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @api\n     */\n\n\n    _this.coordinate = coordinate;\n    /**\n     * @const\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n\n    _this.mapBrowserEvent = mapBrowserEvent;\n    return _this;\n  }\n\n  return DragBoxEvent;\n}(Event);\n\nexport { DragBoxEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'boxcancel'|'boxdrag'|'boxend'|'boxstart', DragBoxEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'boxcancel'|'boxdrag'|'boxend', Return>} DragBoxOnSignature\n */\n\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the shift or other key is held down. This is used, for example,\n * for zooming to a specific area of the map\n * (see {@link module:ol/interaction/DragZoom~DragZoom} and\n * {@link module:ol/interaction/DragRotateAndZoom~DragRotateAndZoom}).\n *\n * @fires DragBoxEvent\n * @api\n */\n\nvar DragBox =\n/** @class */\nfunction (_super) {\n  __extends(DragBox, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function DragBox(opt_options) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {DragBoxOnSignature<void>}\n     */\n\n    _this.un;\n    var options = opt_options ? opt_options : {};\n    /**\n     * @type {import(\"../render/Box.js\").default}\n     * @private\n     */\n\n    _this.box_ = new RenderBox(options.className || 'ol-dragbox');\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.minArea_ = options.minArea !== undefined ? options.minArea : 64;\n\n    if (options.onBoxEnd) {\n      _this.onBoxEnd = options.onBoxEnd;\n    }\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n\n\n    _this.startPixel_ = null;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.condition_ = options.condition ? options.condition : mouseActionButton;\n    /**\n     * @private\n     * @type {EndCondition}\n     */\n\n    _this.boxEndCondition_ = options.boxEndCondition ? options.boxEndCondition : _this.defaultBoxEndCondition;\n    return _this;\n  }\n  /**\n   * The default condition for determining whether the boxend event\n   * should fire.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent The originating MapBrowserEvent\n   *     leading to the box end.\n   * @param {import(\"../pixel.js\").Pixel} startPixel The starting pixel of the box.\n   * @param {import(\"../pixel.js\").Pixel} endPixel The end pixel of the box.\n   * @return {boolean} Whether or not the boxend condition should be fired.\n   */\n\n\n  DragBox.prototype.defaultBoxEndCondition = function (mapBrowserEvent, startPixel, endPixel) {\n    var width = endPixel[0] - startPixel[0];\n    var height = endPixel[1] - startPixel[1];\n    return width * width + height * height >= this.minArea_;\n  };\n  /**\n   * Returns geometry of last drawn box.\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\n   * @api\n   */\n\n\n  DragBox.prototype.getGeometry = function () {\n    return this.box_.getGeometry();\n  };\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n\n\n  DragBox.prototype.handleDragEvent = function (mapBrowserEvent) {\n    this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);\n    this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXDRAG, mapBrowserEvent.coordinate, mapBrowserEvent));\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  DragBox.prototype.handleUpEvent = function (mapBrowserEvent) {\n    this.box_.setMap(null);\n    var completeBox = this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel);\n\n    if (completeBox) {\n      this.onBoxEnd(mapBrowserEvent);\n    }\n\n    this.dispatchEvent(new DragBoxEvent(completeBox ? DragBoxEventType.BOXEND : DragBoxEventType.BOXCANCEL, mapBrowserEvent.coordinate, mapBrowserEvent));\n    return false;\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  DragBox.prototype.handleDownEvent = function (mapBrowserEvent) {\n    if (this.condition_(mapBrowserEvent)) {\n      this.startPixel_ = mapBrowserEvent.pixel;\n      this.box_.setMap(mapBrowserEvent.map);\n      this.box_.setPixels(this.startPixel_, this.startPixel_);\n      this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXSTART, mapBrowserEvent.coordinate, mapBrowserEvent));\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\n   * Function to execute just before `onboxend` is fired\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   */\n\n\n  DragBox.prototype.onBoxEnd = function (event) {};\n\n  return DragBox;\n}(PointerInteraction);\n\nexport default DragBox;","map":{"version":3,"mappings":"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","names":["Event","PointerInteraction","RenderBox","mouseActionButton","DragBoxEventType","BOXSTART","BOXDRAG","BOXEND","BOXCANCEL","__extends","type","coordinate","mapBrowserEvent","_super","_this","opt_options","on","once","un","options","box_","className","minArea_","minArea","undefined","onBoxEnd","startPixel_","condition_","condition","boxEndCondition_","boxEndCondition","defaultBoxEndCondition","DragBox","startPixel","endPixel","width","height","getGeometry","setPixels","pixel","dispatchEvent","DragBoxEvent","setMap","completeBox","map","event"],"sourceRoot":"","sources":["../src/interaction/DragBox.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}