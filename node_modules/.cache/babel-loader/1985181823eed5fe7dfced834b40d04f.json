{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/Image\n */\n\n\nimport BaseImageLayer from './BaseImage.js';\nimport CanvasImageLayerRenderer from '../renderer/canvas/ImageLayer.js';\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @extends {BaseImageLayer<ImageSourceType, CanvasImageLayerRenderer>}\n * @api\n */\n\nvar ImageLayer =\n/** @class */\nfunction (_super) {\n  __extends(ImageLayer, _super);\n  /**\n   * @param {import(\"./BaseImage.js\").Options<ImageSourceType>} [opt_options] Layer options.\n   */\n\n\n  function ImageLayer(opt_options) {\n    return _super.call(this, opt_options) || this;\n  }\n\n  ImageLayer.prototype.createRenderer = function () {\n    return new CanvasImageLayerRenderer(this);\n  };\n  /**\n   * Get data for a pixel location.  A four element RGBA array will be returned.  For requests outside the\n   * layer extent, `null` will be returned.  Data for an image can only be retrieved if the\n   * source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   */\n\n\n  ImageLayer.prototype.getData = function (pixel) {\n    return _super.prototype.getData.call(this, pixel);\n  };\n\n  return ImageLayer;\n}(BaseImageLayer);\n\nexport default ImageLayer;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAGA,OAAOA,cAAP,MAA2B,gBAA3B;AACA,OAAOC,wBAAP,MAAqC,kCAArC;AAEA;;;;;;;;;;;;;AAYA;AAAA;AAAA;AAAyBC;AACvB;;;;;AAGA,sBAAYC,WAAZ,EAAuB;WACrBC,kBAAMD,WAAN,KAAkB;AACnB;;AAEDE;AACE,WAAO,IAAIJ,wBAAJ,CAA6B,IAA7B,CAAP;AACD,GAFD;AAIA;;;;;;;;;;;;;;;;;AAeAI,2CAAQC,KAAR,EAAa;AACX,WAAOF,iBAAMG,OAAN,CAAaC,IAAb,CAAa,IAAb,EAAcF,KAAd,CAAP;AACD,GAFD;;AAGF;AA9BA,EAAyBN,cAAzB;;AAgCA,eAAeK,UAAf","names":["BaseImageLayer","CanvasImageLayerRenderer","__extends","opt_options","_super","ImageLayer","pixel","getData","call"],"sourceRoot":"","sources":["../src/layer/Image.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}