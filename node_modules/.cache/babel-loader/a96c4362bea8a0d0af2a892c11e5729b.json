{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/Draw\n */\n\n\nimport Circle from '../geom/Circle.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport InteractionProperty from './Property.js';\nimport LineString from '../geom/LineString.js';\nimport MapBrowserEvent from '../MapBrowserEvent.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport Polygon, { fromCircle, makeRegular } from '../geom/Polygon.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { FALSE, TRUE } from '../functions.js';\nimport { always, noModifierKeys, shiftKeyOnly } from '../events/condition.js';\nimport { boundingExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../extent.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { fromUserCoordinate, getUserProjection } from '../proj.js';\nimport { squaredDistance as squaredCoordinateDistance } from '../coordinate.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../geom/GeometryType.js\").default} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish. Must be greater than `0`.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished. Not used when drawing\n * POINT or MULTI_POINT geometries.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition.noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition.shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry\n * and a projection as arguments, and returns a geometry. The optional existing\n * geometry is the geometry that is returned when the function is called without\n * a second argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default,\n *     import(\"../proj/Projection.js\").default):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n\n/**\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n * @enum {string}\n */\n\nvar Mode = {\n  POINT: 'Point',\n  LINE_STRING: 'LineString',\n  POLYGON: 'Polygon',\n  CIRCLE: 'Circle'\n};\n/**\n * @enum {string}\n */\n\nvar DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend',\n\n  /**\n   * Triggered upon feature draw abortion\n   * @event DrawEvent#drawabort\n   * @api\n   */\n  DRAWABORT: 'drawabort'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\n\nvar DrawEvent =\n/** @class */\nfunction (_super) {\n  __extends(DrawEvent, _super);\n  /**\n   * @param {DrawEventType} type Type.\n   * @param {Feature} feature The feature drawn.\n   */\n\n\n  function DrawEvent(type, feature) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n\n\n    _this.feature = feature;\n    return _this;\n  }\n\n  return DrawEvent;\n}(Event);\n\nexport { DrawEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'drawabort'|'drawend'|'drawstart', DrawEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'drawabort'|'drawend'|'drawstart', Return>} DrawOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\n\nvar Draw =\n/** @class */\nfunction (_super) {\n  __extends(Draw, _super);\n  /**\n   * @param {Options} options Options.\n   */\n\n\n  function Draw(options) {\n    var _this = this;\n\n    var pointerOptions =\n    /** @type {import(\"./Pointer.js\").Options} */\n    options;\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    _this = _super.call(this, pointerOptions) || this;\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.on;\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {DrawOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.shouldHandle_ = false;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n\n    _this.downPx_ = null;\n    /**\n     * @type {?}\n     * @private\n     */\n\n    _this.downTimeout_;\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n\n    _this.lastDragTime_;\n    /**\n     * Pointer type of the last pointermove event\n     * @type {string}\n     * @private\n     */\n\n    _this.pointerType_;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.freehand_ = false;\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource|null}\n     * @private\n     */\n\n    _this.source_ = options.source ? options.source : null;\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>|null}\n     * @private\n     */\n\n    _this.features_ = options.features ? options.features : null;\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n\n    _this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n    /**\n     * Geometry type.\n     * @type {import(\"../geom/GeometryType.js\").default}\n     * @private\n     */\n\n    _this.type_ =\n    /** @type {import(\"../geom/GeometryType.js\").default} */\n    options.type;\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n\n    _this.mode_ = getMode(_this.type_);\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n\n    _this.stopClick_ = !!options.stopClick;\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n\n    _this.minPoints_ = options.minPoints ? options.minPoints : _this.mode_ === Mode.POLYGON ? 3 : 2;\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n\n    _this.maxPoints_ = _this.mode_ === Mode.CIRCLE ? 2 : options.maxPoints ? options.maxPoints : Infinity;\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;\n    var geometryFunction = options.geometryFunction;\n\n    if (!geometryFunction) {\n      var mode_1 = _this.mode_;\n\n      if (mode_1 === Mode.CIRCLE) {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, geometry, projection) {\n          var circle = geometry ?\n          /** @type {Circle} */\n          geometry : new Circle([NaN, NaN]);\n          var center = fromUserCoordinate(coordinates[0], projection);\n          var squaredLength = squaredCoordinateDistance(center, fromUserCoordinate(coordinates[coordinates.length - 1], projection));\n          circle.setCenterAndRadius(center, Math.sqrt(squaredLength));\n          var userProjection = getUserProjection();\n\n          if (userProjection) {\n            circle.transform(projection, userProjection);\n          }\n\n          return circle;\n        };\n      } else {\n        var Constructor_1;\n\n        if (mode_1 === Mode.POINT) {\n          Constructor_1 = Point;\n        } else if (mode_1 === Mode.LINE_STRING) {\n          Constructor_1 = LineString;\n        } else if (mode_1 === Mode.POLYGON) {\n          Constructor_1 = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n\n\n        geometryFunction = function (coordinates, geometry, projection) {\n          if (geometry) {\n            if (mode_1 === Mode.POLYGON) {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])]);\n              } else {\n                geometry.setCoordinates([]);\n              }\n            } else {\n              geometry.setCoordinates(coordinates);\n            }\n          } else {\n            geometry = new Constructor_1(coordinates);\n          }\n\n          return geometry;\n        };\n      }\n    }\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n\n\n    _this.geometryFunction_ = geometryFunction;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n\n    _this.finishCoordinate_ = null;\n    /**\n     * Sketch feature.\n     * @type {Feature<import('../geom/SimpleGeometry.js').default>}\n     * @private\n     */\n\n    _this.sketchFeature_ = null;\n    /**\n     * Sketch point.\n     * @type {Feature<Point>}\n     * @private\n     */\n\n    _this.sketchPoint_ = null;\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n\n    _this.sketchCoords_ = null;\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature<LineString>}\n     * @private\n     */\n\n    _this.sketchLine_ = null;\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n\n    _this.sketchLineCoords_ = null;\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n\n    _this.squaredClickTolerance_ = options.clickTolerance ? options.clickTolerance * options.clickTolerance : 36;\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n\n    _this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileInteracting: true\n    });\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n\n    _this.geometryName_ = options.geometryName;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.condition_ = options.condition ? options.condition : noModifierKeys;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.freehandCondition_;\n\n    if (options.freehand) {\n      _this.freehandCondition_ = always;\n    } else {\n      _this.freehandCondition_ = options.freehandCondition ? options.freehandCondition : shiftKeyOnly;\n    }\n\n    _this.addChangeListener(InteractionProperty.ACTIVE, _this.updateState_);\n\n    return _this;\n  }\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n\n\n  Draw.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n\n    this.updateState_();\n  };\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n\n\n  Draw.prototype.getOverlay = function () {\n    return this.overlay_;\n  };\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n\n\n  Draw.prototype.handleEvent = function (event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.originalEvent.preventDefault();\n    }\n\n    this.freehand_ = this.mode_ !== Mode.POINT && this.freehandCondition_(event);\n    var move = event.type === MapBrowserEventType.POINTERMOVE;\n    var pass = true;\n\n    if (!this.freehand_ && this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {\n      var now = Date.now();\n\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n\n    if (this.freehand_ && event.type === MapBrowserEventType.POINTERDRAG && this.sketchFeature_ !== null) {\n      this.addToDrawing_(event.coordinate);\n      pass = false;\n    } else if (this.freehand_ && event.type === MapBrowserEventType.POINTERDOWN) {\n      pass = false;\n    } else if (move && this.getPointerCount() < 2) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n\n      if (pass && this.freehand_) {\n        this.handlePointerMove_(event);\n\n        if (this.shouldHandle_) {\n          // Avoid page scrolling when freehand drawing on mobile\n          event.originalEvent.preventDefault();\n        }\n      } else if (event.originalEvent.pointerType === 'mouse' || event.type === MapBrowserEventType.POINTERDRAG && this.downTimeout_ === undefined) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n\n    return _super.prototype.handleEvent.call(this, event) && pass;\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  Draw.prototype.handleDownEvent = function (event) {\n    this.shouldHandle_ = !this.freehand_;\n\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event.coordinate);\n      }\n\n      return true;\n    } else if (this.condition_(event)) {\n      this.lastDragTime_ = Date.now();\n      this.downTimeout_ = setTimeout(function () {\n        this.handlePointerMove_(new MapBrowserEvent(MapBrowserEventType.POINTERMOVE, event.map, event.originalEvent, false, event.frameState));\n      }.bind(this), this.dragVertexDelay_);\n      this.downPx_ = event.pixel;\n      return true;\n    } else {\n      this.lastDragTime_ = undefined;\n      return false;\n    }\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  Draw.prototype.handleUpEvent = function (event) {\n    var pass = true;\n\n    if (this.getPointerCount() === 0) {\n      if (this.downTimeout_) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n\n      this.handlePointerMove_(event);\n\n      if (this.shouldHandle_) {\n        var startingToDraw = !this.finishCoordinate_;\n\n        if (startingToDraw) {\n          this.startDrawing_(event.coordinate);\n        }\n\n        if (!startingToDraw && this.freehand_) {\n          this.finishDrawing();\n        } else if (!this.freehand_ && (!startingToDraw || this.mode_ === Mode.POINT)) {\n          if (this.atFinish_(event.pixel)) {\n            if (this.finishCondition_(event)) {\n              this.finishDrawing();\n            }\n          } else {\n            this.addToDrawing_(event.coordinate);\n          }\n        }\n\n        pass = false;\n      } else if (this.freehand_) {\n        this.abortDrawing();\n      }\n    }\n\n    if (!pass && this.stopClick_) {\n      event.preventDefault();\n    }\n\n    return pass;\n  };\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @private\n   */\n\n\n  Draw.prototype.handlePointerMove_ = function (event) {\n    this.pointerType_ = event.originalEvent.pointerType;\n\n    if (this.downPx_ && (!this.freehand_ && this.shouldHandle_ || this.freehand_ && !this.shouldHandle_)) {\n      var downPx = this.downPx_;\n      var clickPx = event.pixel;\n      var dx = downPx[0] - clickPx[0];\n      var dy = downPx[1] - clickPx[1];\n      var squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_ ? squaredDistance > this.squaredClickTolerance_ : squaredDistance <= this.squaredClickTolerance_;\n\n      if (!this.shouldHandle_) {\n        return;\n      }\n    }\n\n    if (this.finishCoordinate_) {\n      this.modifyDrawing_(event.coordinate);\n    } else {\n      this.createOrUpdateSketchPoint_(event.coordinate.slice());\n    }\n  };\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n\n\n  Draw.prototype.atFinish_ = function (pixel) {\n    var at = false;\n\n    if (this.sketchFeature_) {\n      var potentiallyDone = false;\n      var potentiallyFinishCoordinates = [this.finishCoordinate_];\n      var mode = this.mode_;\n\n      if (mode === Mode.POINT) {\n        at = true;\n      } else if (mode === Mode.CIRCLE) {\n        at = this.sketchCoords_.length === 2;\n      } else if (mode === Mode.LINE_STRING) {\n        potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n      } else if (mode === Mode.POLYGON) {\n        var sketchCoords =\n        /** @type {PolyCoordType} */\n        this.sketchCoords_;\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [sketchCoords[0][0], sketchCoords[0][sketchCoords[0].length - 2]];\n      }\n\n      if (potentiallyDone) {\n        var map = this.getMap();\n\n        for (var i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          var finishCoordinate = potentiallyFinishCoordinates[i];\n          var finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          var dx = pixel[0] - finishPixel[0];\n          var dy = pixel[1] - finishPixel[1];\n          var snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n\n    return at;\n  };\n  /**\n   * @param {import(\"../coordinate\").Coordinate} coordinates Coordinate.\n   * @private\n   */\n\n\n  Draw.prototype.createOrUpdateSketchPoint_ = function (coordinates) {\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      var sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  };\n  /**\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @private\n   */\n\n\n  Draw.prototype.createOrUpdateCustomSketchLine_ = function (geometry) {\n    if (!this.sketchLine_) {\n      this.sketchLine_ = new Feature();\n    }\n\n    var ring = geometry.getLinearRing(0);\n    var sketchLineGeom = this.sketchLine_.getGeometry();\n\n    if (!sketchLineGeom) {\n      sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());\n      this.sketchLine_.setGeometry(sketchLineGeom);\n    } else {\n      sketchLineGeom.setFlatCoordinates(ring.getLayout(), ring.getFlatCoordinates());\n      sketchLineGeom.changed();\n    }\n  };\n  /**\n   * Start the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} start Start coordinate.\n   * @private\n   */\n\n\n  Draw.prototype.startDrawing_ = function (start) {\n    var projection = this.getMap().getView().getProjection();\n    this.finishCoordinate_ = start;\n\n    if (this.mode_ === Mode.POINT) {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === Mode.POLYGON) {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n    }\n\n    var geometry = this.geometryFunction_(this.sketchCoords_, undefined, projection);\n    this.sketchFeature_ = new Feature();\n\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n  /**\n   * Modify the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @private\n   */\n\n\n  Draw.prototype.modifyDrawing_ = function (coordinate) {\n    var map = this.getMap();\n    var geometry = this.sketchFeature_.getGeometry();\n    var projection = map.getView().getProjection();\n    var coordinates, last;\n\n    if (this.mode_ === Mode.POINT) {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates =\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0];\n      last = coordinates[coordinates.length - 1];\n\n      if (this.atFinish_(map.getPixelFromCoordinate(coordinate))) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_(\n    /** @type {!LineCoordType} */\n    this.sketchCoords_, geometry, projection);\n\n    if (this.sketchPoint_) {\n      var sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n\n    if (geometry.getType() === GeometryType.POLYGON && this.mode_ !== Mode.POLYGON) {\n      this.createOrUpdateCustomSketchLine_(\n      /** @type {Polygon} */\n      geometry);\n    } else if (this.sketchLineCoords_) {\n      var sketchLineGeom = this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n\n    this.updateSketchFeatures_();\n  };\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {!PointCoordType} coordinate Coordinate\n   * @private\n   */\n\n\n  Draw.prototype.addToDrawing_ = function (coordinate) {\n    var geometry = this.sketchFeature_.getGeometry();\n    var projection = this.getMap().getView().getProjection();\n    var done;\n    var coordinates;\n    var mode = this.mode_;\n\n    if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates =\n      /** @type {LineCoordType} */\n      this.sketchCoords_;\n\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (mode === Mode.POLYGON) {\n      coordinates =\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0];\n\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n\n      coordinates.push(coordinate.slice());\n\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n\n    this.createOrUpdateSketchPoint_(coordinate.slice());\n    this.updateSketchFeatures_();\n\n    if (done) {\n      this.finishDrawing();\n    }\n  };\n  /**\n   * Remove last point of the feature currently being drawn. Does not do anything when\n   * drawing POINT or MULTI_POINT geometries.\n   * @api\n   */\n\n\n  Draw.prototype.removeLastPoint = function () {\n    if (!this.sketchFeature_) {\n      return;\n    }\n\n    var geometry = this.sketchFeature_.getGeometry();\n    var projection = this.getMap().getView().getProjection();\n    var coordinates;\n    var mode = this.mode_;\n\n    if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) {\n      coordinates =\n      /** @type {LineCoordType} */\n      this.sketchCoords_;\n      coordinates.splice(-2, 1);\n\n      if (coordinates.length >= 2) {\n        this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n        var finishCoordinate = this.finishCoordinate_.slice();\n        coordinates[coordinates.length - 1] = finishCoordinate;\n        this.createOrUpdateSketchPoint_(finishCoordinate);\n      }\n\n      this.geometryFunction_(coordinates, geometry, projection);\n\n      if (geometry.getType() === GeometryType.POLYGON && this.sketchLine_) {\n        this.createOrUpdateCustomSketchLine_(\n        /** @type {Polygon} */\n        geometry);\n      }\n    } else if (mode === Mode.POLYGON) {\n      coordinates =\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0];\n      coordinates.splice(-2, 1);\n      var sketchLineGeom = this.sketchLine_.getGeometry();\n\n      if (coordinates.length >= 2) {\n        var finishCoordinate = coordinates[coordinates.length - 2].slice();\n        coordinates[coordinates.length - 1] = finishCoordinate;\n        this.createOrUpdateSketchPoint_(finishCoordinate);\n      }\n\n      sketchLineGeom.setCoordinates(coordinates);\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n\n    if (coordinates.length === 1) {\n      this.abortDrawing();\n    }\n\n    this.updateSketchFeatures_();\n  };\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n\n\n  Draw.prototype.finishDrawing = function () {\n    var sketchFeature = this.abortDrawing_();\n\n    if (!sketchFeature) {\n      return;\n    }\n\n    var coordinates = this.sketchCoords_;\n    var geometry = sketchFeature.getGeometry();\n    var projection = this.getMap().getView().getProjection();\n\n    if (this.mode_ === Mode.LINE_STRING) {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (this.mode_ === Mode.POLYGON) {\n      // remove the redundant last point in ring\n\n      /** @type {PolyCoordType} */\n      coordinates[0].pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n      coordinates = geometry.getCoordinates();\n    } // cast multi-part geometries\n\n\n    if (this.type_ === GeometryType.MULTI_POINT) {\n      sketchFeature.setGeometry(new MultiPoint([\n      /** @type {PointCoordType} */\n      coordinates]));\n    } else if (this.type_ === GeometryType.MULTI_LINE_STRING) {\n      sketchFeature.setGeometry(new MultiLineString([\n      /** @type {LineCoordType} */\n      coordinates]));\n    } else if (this.type_ === GeometryType.MULTI_POLYGON) {\n      sketchFeature.setGeometry(new MultiPolygon([\n      /** @type {PolyCoordType} */\n      coordinates]));\n    } // First dispatch event to allow full set up of feature\n\n\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature)); // Then insert feature\n\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  };\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature<import(\"../geom/SimpleGeometry.js\").default>|null} The sketch feature (or null if none).\n   * @private\n   */\n\n\n  Draw.prototype.abortDrawing_ = function () {\n    this.finishCoordinate_ = null;\n    var sketchFeature = this.sketchFeature_;\n    this.sketchFeature_ = null;\n    this.sketchPoint_ = null;\n    this.sketchLine_ = null;\n    this.overlay_.getSource().clear(true);\n    return sketchFeature;\n  };\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @api\n   */\n\n\n  Draw.prototype.abortDrawing = function () {\n    var sketchFeature = this.abortDrawing_();\n\n    if (sketchFeature) {\n      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWABORT, sketchFeature));\n    }\n  };\n  /**\n   * Append coordinates to the end of the geometry that is currently being drawn.\n   * This can be used when drawing LineStrings or Polygons. Coordinates will\n   * either be appended to the current LineString or the outer ring of the current\n   * Polygon. If no geometry is being drawn, a new one will be created.\n   * @param {!LineCoordType} coordinates Linear coordinates to be appended to\n   * the coordinate array.\n   * @api\n   */\n\n\n  Draw.prototype.appendCoordinates = function (coordinates) {\n    var mode = this.mode_;\n    var newDrawing = !this.sketchFeature_;\n\n    if (newDrawing) {\n      this.startDrawing_(coordinates[0]);\n    }\n    /** @type {LineCoordType} */\n\n\n    var sketchCoords;\n\n    if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) {\n      sketchCoords =\n      /** @type {LineCoordType} */\n      this.sketchCoords_;\n    } else if (mode === Mode.POLYGON) {\n      sketchCoords = this.sketchCoords_ && this.sketchCoords_.length ?\n      /** @type {PolyCoordType} */\n      this.sketchCoords_[0] : [];\n    } else {\n      return;\n    }\n\n    if (newDrawing) {\n      sketchCoords.shift();\n    } // Remove last coordinate from sketch drawing (this coordinate follows cursor position)\n\n\n    sketchCoords.pop(); // Append coordinate list\n\n    for (var i = 0; i < coordinates.length; i++) {\n      this.addToDrawing_(coordinates[i]);\n    }\n\n    var ending = coordinates[coordinates.length - 1]; // Duplicate last coordinate for sketch drawing (cursor position)\n\n    this.addToDrawing_(ending);\n    this.modifyDrawing_(ending);\n  };\n  /**\n   * Initiate draw mode by starting from an existing geometry which will\n   * receive new additional points. This only works on features with\n   * `LineString` geometries, where the interaction will extend lines by adding\n   * points to the end of the coordinates array.\n   * This will change the original feature, instead of drawing a copy.\n   *\n   * The function will dispatch a `drawstart` event.\n   *\n   * @param {!Feature<LineString>} feature Feature to be extended.\n   * @api\n   */\n\n\n  Draw.prototype.extend = function (feature) {\n    var geometry = feature.getGeometry();\n    var lineString = geometry;\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    var last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.sketchPoint_ = new Feature(new Point(last));\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n\n\n  Draw.prototype.updateSketchFeatures_ = function () {\n    var sketchFeatures = [];\n\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n\n    var overlaySource = this.overlay_.getSource();\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  };\n  /**\n   * @private\n   */\n\n\n  Draw.prototype.updateState_ = function () {\n    var map = this.getMap();\n    var active = this.getActive();\n\n    if (!map || !active) {\n      this.abortDrawing();\n    }\n\n    this.overlay_.setMap(active ? map : null);\n  };\n\n  return Draw;\n}(PointerInteraction);\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\n\n\nfunction getDefaultStyleFunction() {\n  var styles = createEditingStyle();\n  return function (feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of a\n * {@link import(\"../geom/Circle.js\").Circle} geometry.\n * @param {number} [opt_sides] Number of sides of the regular polygon.\n *     Default is 32.\n * @param {number} [opt_angle] Angle of the first point in counter-clockwise\n *     radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a polygon.\n * @api\n */\n\n\nexport function createRegularPolygon(opt_sides, opt_angle) {\n  return function (coordinates, opt_geometry, projection) {\n    var center = fromUserCoordinate(\n    /** @type {LineCoordType} */\n    coordinates[0], projection);\n    var end = fromUserCoordinate(\n    /** @type {LineCoordType} */\n    coordinates[coordinates.length - 1], projection);\n    var radius = Math.sqrt(squaredCoordinateDistance(center, end));\n    var geometry = opt_geometry ?\n    /** @type {Polygon} */\n    opt_geometry : fromCircle(new Circle(center), opt_sides);\n    var angle = opt_angle;\n\n    if (!opt_angle && opt_angle !== 0) {\n      var x = end[0] - center[0];\n      var y = end[1] - center[1];\n      angle = Math.atan2(y, x);\n    }\n\n    makeRegular(geometry, center, radius, angle);\n    var userProjection = getUserProjection();\n\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n\n    return geometry;\n  };\n}\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\n\nexport function createBox() {\n  return function (coordinates, opt_geometry, projection) {\n    var extent = boundingExtent(\n    /** @type {LineCoordType} */\n    [coordinates[0], coordinates[coordinates.length - 1]].map(function (coordinate) {\n      return fromUserCoordinate(coordinate, projection);\n    }));\n    var boxCoordinates = [[getBottomLeft(extent), getBottomRight(extent), getTopRight(extent), getTopLeft(extent), getBottomLeft(extent)]];\n    var geometry = opt_geometry;\n\n    if (geometry) {\n      geometry.setCoordinates(boxCoordinates);\n    } else {\n      geometry = new Polygon(boxCoordinates);\n    }\n\n    var userProjection = getUserProjection();\n\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n\n    return geometry;\n  };\n}\n/**\n * Get the drawing mode.  The mode for multi-part geometries is the same as for\n * their single-part cousins.\n * @param {import(\"../geom/GeometryType.js\").default} type Geometry type.\n * @return {Mode} Drawing mode.\n */\n\nfunction getMode(type) {\n  switch (type) {\n    case GeometryType.POINT:\n    case GeometryType.MULTI_POINT:\n      return Mode.POINT;\n\n    case GeometryType.LINE_STRING:\n    case GeometryType.MULTI_LINE_STRING:\n      return Mode.LINE_STRING;\n\n    case GeometryType.POLYGON:\n    case GeometryType.MULTI_POLYGON:\n      return Mode.POLYGON;\n\n    case GeometryType.CIRCLE:\n      return Mode.CIRCLE;\n\n    default:\n      throw new Error('Invalid type: ' + type);\n  }\n}\n\nexport default Draw;","map":{"version":3,"mappings":"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","names":["Circle","Event","EventType","Feature","GeometryType","InteractionProperty","LineString","MapBrowserEvent","MapBrowserEventType","MultiLineString","MultiPoint","MultiPolygon","Point","PointerInteraction","Polygon","fromCircle","makeRegular","VectorLayer","VectorSource","FALSE","TRUE","always","noModifierKeys","shiftKeyOnly","boundingExtent","getBottomLeft","getBottomRight","getTopLeft","getTopRight","createEditingStyle","fromUserCoordinate","getUserProjection","squaredDistance","squaredCoordinateDistance","Mode","POINT","LINE_STRING","POLYGON","CIRCLE","DrawEventType","DRAWSTART","DRAWEND","DRAWABORT","__extends","type","feature","_super","_this","options","pointerOptions","stopDown","on","once","un","shouldHandle_","downPx_","downTimeout_","lastDragTime_","pointerType_","freehand_","source_","source","features_","features","snapTolerance_","snapTolerance","type_","mode_","getMode","stopClick_","stopClick","minPoints_","minPoints","maxPoints_","maxPoints","Infinity","finishCondition_","finishCondition","geometryFunction","mode_1","coordinates","geometry","projection","circle","NaN","center","squaredLength","length","setCenterAndRadius","Math","sqrt","userProjection","transform","Constructor_1","setCoordinates","concat","geometryFunction_","dragVertexDelay_","dragVertexDelay","undefined","finishCoordinate_","sketchFeature_","sketchPoint_","sketchCoords_","sketchLine_","sketchLineCoords_","squaredClickTolerance_","clickTolerance","overlay_","useSpatialIndex","wrapX","style","getDefaultStyleFunction","updateWhileInteracting","geometryName_","geometryName","condition_","condition","freehandCondition_","freehand","freehandCondition","addChangeListener","ACTIVE","updateState_","Draw","map","setMap","call","event","originalEvent","CONTEXTMENU","preventDefault","move","POINTERMOVE","pass","POINTERDRAG","now","Date","pixel","clearTimeout","addToDrawing_","coordinate","POINTERDOWN","getPointerCount","handlePointerMove_","pointerType","DBLCLICK","handleEvent","startDrawing_","setTimeout","frameState","bind","startingToDraw","finishDrawing","atFinish_","abortDrawing","downPx","clickPx","dx","dy","modifyDrawing_","createOrUpdateSketchPoint_","slice","at","potentiallyDone","potentiallyFinishCoordinates","mode","sketchCoords","getMap","i","ii","finishCoordinate","finishPixel","getPixelFromCoordinate","updateSketchFeatures_","sketchPointGeom","getGeometry","ring","getLinearRing","sketchLineGeom","getFlatCoordinates","getLayout","setGeometry","setFlatCoordinates","changed","start","getView","getProjection","setGeometryName","dispatchEvent","DrawEvent","last","getType","createOrUpdateCustomSketchLine_","done","pop","push","splice","sketchFeature","abortDrawing_","getCoordinates","MULTI_POINT","MULTI_LINE_STRING","MULTI_POLYGON","addFeature","getSource","clear","newDrawing","shift","ending","lineString","sketchFeatures","overlaySource","addFeatures","active","getActive","styles","resolution","createRegularPolygon","opt_sides","opt_angle","opt_geometry","end","radius","angle","x","y","atan2","createBox","extent","boxCoordinates","Error"],"sourceRoot":"","sources":["../src/interaction/Draw.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}