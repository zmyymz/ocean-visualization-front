{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.splice.js\";\n\n/**\n * @module ol/source/Cluster\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport VectorSource from './Vector.js';\nimport { add as addCoordinate, scale as scaleCoordinate } from '../coordinate.js';\nimport { assert } from '../asserts.js';\nimport { buffer, createEmpty, createOrUpdateFromCoordinate, getCenter } from '../extent.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [distance=20] Distance in pixels within which features will\n * be clustered together.\n * @property {number} [minDistance=0] Minimum distance in pixels between clusters.\n * Will be capped at the configured distance.\n * By default no minimum distance is guaranteed. This config can be used to avoid\n * overlapping icons. As a tradoff, the cluster feature's position will no longer be\n * the center of all its features.\n * @property {function(Feature):Point} [geometryFunction]\n * Function that takes an {@link module:ol/Feature~Feature} as argument and returns an\n * {@link module:ol/geom/Point~Point} as cluster calculation point for the feature. When a\n * feature should not be considered for clustering, the function should return\n * `null`. The default, which works when the underlying source contains point\n * features only, is\n * ```js\n * function(feature) {\n *   return feature.getGeometry();\n * }\n * ```\n * See {@link module:ol/geom/Polygon~Polygon#getInteriorPoint} for a way to get a cluster\n * calculation point for polygons.\n * @property {function(Point, Array<Feature>):Feature} [createCluster]\n * Function that takes the cluster's center {@link module:ol/geom/Point~Point} and an array\n * of {@link module:ol/Feature~Feature} included in this cluster. Must return a\n * {@link module:ol/Feature~Feature} that will be used to render. Default implementation is:\n * ```js\n * function(point, features) {\n *   return new Feature({\n *     geometry: point,\n *     features: features\n *   });\n * }\n * ```\n * @property {VectorSource} [source=null] Source.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n */\n\n/**\n * @classdesc\n * Layer source to cluster vector data. Works out of the box with point\n * geometries. For other geometry types, or if not all geometries should be\n * considered for clustering, a custom `geometryFunction` can be defined.\n *\n * If the instance is disposed without also disposing the underlying\n * source `setSource(null)` has to be called to remove the listener reference\n * from the wrapped source.\n * @api\n */\n\nvar Cluster =\n/** @class */\nfunction (_super) {\n  __extends(Cluster, _super);\n  /**\n   * @param {Options} options Cluster options.\n   */\n\n\n  function Cluster(options) {\n    var _this = _super.call(this, {\n      attributions: options.attributions,\n      wrapX: options.wrapX\n    }) || this;\n    /**\n     * @type {number|undefined}\n     * @protected\n     */\n\n\n    _this.resolution = undefined;\n    /**\n     * @type {number}\n     * @protected\n     */\n\n    _this.distance = options.distance !== undefined ? options.distance : 20;\n    /**\n     * @type {number}\n     * @protected\n     */\n\n    _this.minDistance = options.minDistance || 0;\n    /**\n     * @type {number}\n     * @protected\n     */\n\n    _this.interpolationRatio = 0;\n    /**\n     * @type {Array<Feature>}\n     * @protected\n     */\n\n    _this.features = [];\n    /**\n     * @param {Feature} feature Feature.\n     * @return {Point} Cluster calculation point.\n     * @protected\n     */\n\n    _this.geometryFunction = options.geometryFunction || function (feature) {\n      var geometry =\n      /** @type {Point} */\n      feature.getGeometry();\n      assert(geometry.getType() == GeometryType.POINT, 10); // The default `geometryFunction` can only handle `Point` geometries\n\n      return geometry;\n    };\n    /**\n     * @type {function(Point, Array<Feature>):Feature}\n     * @private\n     */\n\n\n    _this.createCustomCluster_ = options.createCluster;\n    /**\n     * @type {VectorSource|null}\n     * @protected\n     */\n\n    _this.source = null;\n    /**\n     * @private\n     */\n\n    _this.boundRefresh_ = _this.refresh.bind(_this);\n\n    _this.updateDistance(_this.distance, _this.minDistance);\n\n    _this.setSource(options.source || null);\n\n    return _this;\n  }\n  /**\n   * Remove all features from the source.\n   * @param {boolean} [opt_fast] Skip dispatching of {@link module:ol/source/VectorEventType~VectorEventType#removefeature} events.\n   * @api\n   */\n\n\n  Cluster.prototype.clear = function (opt_fast) {\n    this.features.length = 0;\n\n    _super.prototype.clear.call(this, opt_fast);\n  };\n  /**\n   * Get the distance in pixels between clusters.\n   * @return {number} Distance.\n   * @api\n   */\n\n\n  Cluster.prototype.getDistance = function () {\n    return this.distance;\n  };\n  /**\n   * Get a reference to the wrapped source.\n   * @return {VectorSource|null} Source.\n   * @api\n   */\n\n\n  Cluster.prototype.getSource = function () {\n    return this.source;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n\n\n  Cluster.prototype.loadFeatures = function (extent, resolution, projection) {\n    this.source.loadFeatures(extent, resolution, projection);\n\n    if (resolution !== this.resolution) {\n      this.resolution = resolution;\n      this.refresh();\n    }\n  };\n  /**\n   * Set the distance within which features will be clusterd together.\n   * @param {number} distance The distance in pixels.\n   * @api\n   */\n\n\n  Cluster.prototype.setDistance = function (distance) {\n    this.updateDistance(distance, this.minDistance);\n  };\n  /**\n   * Set the minimum distance between clusters. Will be capped at the\n   * configured distance.\n   * @param {number} minDistance The minimum distance in pixels.\n   * @api\n   */\n\n\n  Cluster.prototype.setMinDistance = function (minDistance) {\n    this.updateDistance(this.distance, minDistance);\n  };\n  /**\n   * The configured minimum distance between clusters.\n   * @return {number} The minimum distance in pixels.\n   * @api\n   */\n\n\n  Cluster.prototype.getMinDistance = function () {\n    return this.minDistance;\n  };\n  /**\n   * Replace the wrapped source.\n   * @param {VectorSource|null} source The new source for this instance.\n   * @api\n   */\n\n\n  Cluster.prototype.setSource = function (source) {\n    if (this.source) {\n      this.source.removeEventListener(EventType.CHANGE, this.boundRefresh_);\n    }\n\n    this.source = source;\n\n    if (source) {\n      source.addEventListener(EventType.CHANGE, this.boundRefresh_);\n    }\n\n    this.refresh();\n  };\n  /**\n   * Handle the source changing.\n   */\n\n\n  Cluster.prototype.refresh = function () {\n    this.clear();\n    this.cluster();\n    this.addFeatures(this.features);\n  };\n  /**\n   * Update the distances and refresh the source if necessary.\n   * @param {number} distance The new distance.\n   * @param {number} minDistance The new minimum distance.\n   */\n\n\n  Cluster.prototype.updateDistance = function (distance, minDistance) {\n    var ratio = distance === 0 ? 0 : Math.min(minDistance, distance) / distance;\n    var changed = distance !== this.distance || this.interpolationRatio !== ratio;\n    this.distance = distance;\n    this.minDistance = minDistance;\n    this.interpolationRatio = ratio;\n\n    if (changed) {\n      this.refresh();\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  Cluster.prototype.cluster = function () {\n    if (this.resolution === undefined || !this.source) {\n      return;\n    }\n\n    var extent = createEmpty();\n    var mapDistance = this.distance * this.resolution;\n    var features = this.source.getFeatures();\n    /** @type {Object<string, true>} */\n\n    var clustered = {};\n\n    for (var i = 0, ii = features.length; i < ii; i++) {\n      var feature = features[i];\n\n      if (!(getUid(feature) in clustered)) {\n        var geometry = this.geometryFunction(feature);\n\n        if (geometry) {\n          var coordinates = geometry.getCoordinates();\n          createOrUpdateFromCoordinate(coordinates, extent);\n          buffer(extent, mapDistance, extent);\n          var neighbors = this.source.getFeaturesInExtent(extent).filter(function (neighbor) {\n            var uid = getUid(neighbor);\n\n            if (uid in clustered) {\n              return false;\n            }\n\n            clustered[uid] = true;\n            return true;\n          });\n          this.features.push(this.createCluster(neighbors, extent));\n        }\n      }\n    }\n  };\n  /**\n   * @param {Array<Feature>} features Features\n   * @param {import(\"../extent.js\").Extent} extent The searched extent for these features.\n   * @return {Feature} The cluster feature.\n   * @protected\n   */\n\n\n  Cluster.prototype.createCluster = function (features, extent) {\n    var centroid = [0, 0];\n\n    for (var i = features.length - 1; i >= 0; --i) {\n      var geometry_1 = this.geometryFunction(features[i]);\n\n      if (geometry_1) {\n        addCoordinate(centroid, geometry_1.getCoordinates());\n      } else {\n        features.splice(i, 1);\n      }\n    }\n\n    scaleCoordinate(centroid, 1 / features.length);\n    var searchCenter = getCenter(extent);\n    var ratio = this.interpolationRatio;\n    var geometry = new Point([centroid[0] * (1 - ratio) + searchCenter[0] * ratio, centroid[1] * (1 - ratio) + searchCenter[1] * ratio]);\n\n    if (this.createCustomCluster_) {\n      return this.createCustomCluster_(geometry, features);\n    } else {\n      return new Feature({\n        geometry: geometry,\n        features: features\n      });\n    }\n  };\n\n  return Cluster;\n}(VectorSource);\n\nexport default Cluster;","map":{"version":3,"mappings":"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","names":["EventType","Feature","GeometryType","Point","VectorSource","add","addCoordinate","scale","scaleCoordinate","assert","buffer","createEmpty","createOrUpdateFromCoordinate","getCenter","getUid","__extends","options","_super","attributions","wrapX","_this","resolution","undefined","distance","minDistance","interpolationRatio","features","geometryFunction","feature","geometry","getGeometry","getType","POINT","createCustomCluster_","createCluster","source","boundRefresh_","refresh","bind","updateDistance","setSource","Cluster","opt_fast","length","clear","call","extent","projection","loadFeatures","removeEventListener","CHANGE","addEventListener","cluster","addFeatures","ratio","Math","min","changed","mapDistance","getFeatures","clustered","i","ii","coordinates","getCoordinates","neighbors","getFeaturesInExtent","filter","neighbor","uid","push","centroid","geometry_1","splice","searchCenter"],"sourceRoot":"","sources":["../src/source/Cluster.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}