{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/Heatmap\n */\n\n\nimport BaseVector from './BaseVector.js';\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport { assign } from '../obj.js';\nimport { clamp } from '../math.js';\nimport { createCanvasContext2D } from '../dom.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient\n * of the heatmap, specified as an array of CSS color strings.\n * @property {number} [radius=8] Radius size in pixels.\n * @property {number} [blur=15] Blur size in pixels.\n * @property {string|function(import(\"../Feature.js\").default):number} [weight='weight'] The feature\n * attribute to use for the weight or a function that returns a weight from a feature. Weight values\n * should range from 0 to 1 (and values outside will be clamped to that range).\n * @property {import(\"../source/Vector.js\").default<import(\"../geom/Point.js\").default>} [source] Point source.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\n\nvar Property = {\n  BLUR: 'blur',\n  GRADIENT: 'gradient',\n  RADIUS: 'radius'\n};\n/**\n * @const\n * @type {Array<string>}\n */\n\nvar DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\n/**\n * @classdesc\n * Layer for rendering vector data as a heatmap.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @extends {BaseVector<import(\"../source/Vector.js\").default, WebGLPointsLayerRenderer>}\n * @api\n */\n\nvar Heatmap =\n/** @class */\nfunction (_super) {\n  __extends(Heatmap, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function Heatmap(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    var baseOptions = assign({}, options);\n    delete baseOptions.gradient;\n    delete baseOptions.radius;\n    delete baseOptions.blur;\n    delete baseOptions.weight;\n    _this = _super.call(this, baseOptions) || this;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    _this.gradient_ = null;\n\n    _this.addChangeListener(Property.GRADIENT, _this.handleGradientChanged_);\n\n    _this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);\n\n    _this.setBlur(options.blur !== undefined ? options.blur : 15);\n\n    _this.setRadius(options.radius !== undefined ? options.radius : 8);\n\n    var weight = options.weight ? options.weight : 'weight';\n\n    if (typeof weight === 'string') {\n      _this.weightFunction_ = function (feature) {\n        return feature.get(weight);\n      };\n    } else {\n      _this.weightFunction_ = weight;\n    } // For performance reasons, don't sort the features before rendering.\n    // The render order is not relevant for a heatmap representation.\n\n\n    _this.setRenderOrder(null);\n\n    return _this;\n  }\n  /**\n   * Return the blur size in pixels.\n   * @return {number} Blur size in pixels.\n   * @api\n   * @observable\n   */\n\n\n  Heatmap.prototype.getBlur = function () {\n    return (\n      /** @type {number} */\n      this.get(Property.BLUR)\n    );\n  };\n  /**\n   * Return the gradient colors as array of strings.\n   * @return {Array<string>} Colors.\n   * @api\n   * @observable\n   */\n\n\n  Heatmap.prototype.getGradient = function () {\n    return (\n      /** @type {Array<string>} */\n      this.get(Property.GRADIENT)\n    );\n  };\n  /**\n   * Return the size of the radius in pixels.\n   * @return {number} Radius size in pixel.\n   * @api\n   * @observable\n   */\n\n\n  Heatmap.prototype.getRadius = function () {\n    return (\n      /** @type {number} */\n      this.get(Property.RADIUS)\n    );\n  };\n  /**\n   * @private\n   */\n\n\n  Heatmap.prototype.handleGradientChanged_ = function () {\n    this.gradient_ = createGradient(this.getGradient());\n  };\n  /**\n   * Set the blur size in pixels.\n   * @param {number} blur Blur size in pixels.\n   * @api\n   * @observable\n   */\n\n\n  Heatmap.prototype.setBlur = function (blur) {\n    this.set(Property.BLUR, blur);\n  };\n  /**\n   * Set the gradient colors as array of strings.\n   * @param {Array<string>} colors Gradient.\n   * @api\n   * @observable\n   */\n\n\n  Heatmap.prototype.setGradient = function (colors) {\n    this.set(Property.GRADIENT, colors);\n  };\n  /**\n   * Set the size of the radius in pixels.\n   * @param {number} radius Radius size in pixel.\n   * @api\n   * @observable\n   */\n\n\n  Heatmap.prototype.setRadius = function (radius) {\n    this.set(Property.RADIUS, radius);\n  };\n\n  Heatmap.prototype.createRenderer = function () {\n    return new WebGLPointsLayerRenderer(this, {\n      className: this.getClassName(),\n      attributes: [{\n        name: 'weight',\n        callback: function (feature) {\n          var weight = this.weightFunction_(feature);\n          return weight !== undefined ? clamp(weight, 0, 1) : 1;\n        }.bind(this)\n      }],\n      vertexShader: \"\\n        precision mediump float;\\n        uniform mat4 u_projectionMatrix;\\n        uniform mat4 u_offsetScaleMatrix;\\n        uniform float u_size;\\n        attribute vec2 a_position;\\n        attribute float a_index;\\n        attribute float a_weight;\\n\\n        varying vec2 v_texCoord;\\n        varying float v_weight;\\n\\n        void main(void) {\\n          mat4 offsetMatrix = u_offsetScaleMatrix;\\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\\n          v_texCoord = vec2(u, v);\\n          v_weight = a_weight;\\n        }\",\n      fragmentShader: \"\\n        precision mediump float;\\n        uniform float u_blurSlope;\\n\\n        varying vec2 v_texCoord;\\n        varying float v_weight;\\n\\n        void main(void) {\\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\\n          gl_FragColor = vec4(alpha, alpha, alpha, alpha);\\n        }\",\n      hitVertexShader: \"\\n        precision mediump float;\\n        uniform mat4 u_projectionMatrix;\\n        uniform mat4 u_offsetScaleMatrix;\\n        uniform float u_size;\\n        attribute vec2 a_position;\\n        attribute float a_index;\\n        attribute float a_weight;\\n        attribute vec4 a_hitColor;\\n\\n        varying vec2 v_texCoord;\\n        varying float v_weight;\\n        varying vec4 v_hitColor;\\n\\n        void main(void) {\\n          mat4 offsetMatrix = u_offsetScaleMatrix;\\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\\n          v_texCoord = vec2(u, v);\\n          v_hitColor = a_hitColor;\\n          v_weight = a_weight;\\n        }\",\n      hitFragmentShader: \"\\n        precision mediump float;\\n        uniform float u_blurSlope;\\n\\n        varying vec2 v_texCoord;\\n        varying float v_weight;\\n        varying vec4 v_hitColor;\\n\\n        void main(void) {\\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\\n          if (alpha < 0.05) {\\n            discard;\\n          }\\n\\n          gl_FragColor = v_hitColor;\\n        }\",\n      uniforms: {\n        u_size: function () {\n          return (this.get(Property.RADIUS) + this.get(Property.BLUR)) * 2;\n        }.bind(this),\n        u_blurSlope: function () {\n          return this.get(Property.RADIUS) / Math.max(1, this.get(Property.BLUR));\n        }.bind(this)\n      },\n      postProcesses: [{\n        fragmentShader: \"\\n            precision mediump float;\\n\\n            uniform sampler2D u_image;\\n            uniform sampler2D u_gradientTexture;\\n            uniform float u_opacity;\\n\\n            varying vec2 v_texCoord;\\n\\n            void main() {\\n              vec4 color = texture2D(u_image, v_texCoord);\\n              gl_FragColor.a = color.a * u_opacity;\\n              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;\\n              gl_FragColor.rgb *= gl_FragColor.a;\\n            }\",\n        uniforms: {\n          u_gradientTexture: function () {\n            return this.gradient_;\n          }.bind(this),\n          u_opacity: function () {\n            return this.getOpacity();\n          }.bind(this)\n        }\n      }]\n    });\n  };\n\n  Heatmap.prototype.renderDeclutter = function () {};\n\n  return Heatmap;\n}(BaseVector);\n/**\n * @param {Array<string>} colors A list of colored.\n * @return {HTMLCanvasElement} canvas with gradient texture.\n */\n\n\nfunction createGradient(colors) {\n  var width = 1;\n  var height = 256;\n  var context = createCanvasContext2D(width, height);\n  var gradient = context.createLinearGradient(0, 0, width, height);\n  var step = 1 / (colors.length - 1);\n\n  for (var i = 0, ii = colors.length; i < ii; ++i) {\n    gradient.addColorStop(i * step, colors[i]);\n  }\n\n  context.fillStyle = gradient;\n  context.fillRect(0, 0, width, height);\n  return context.canvas;\n}\n\nexport default Heatmap;","map":{"version":3,"mappings":"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","names":["BaseVector","WebGLPointsLayerRenderer","assign","clamp","createCanvasContext2D","Property","BLUR","GRADIENT","RADIUS","DEFAULT_GRADIENT","__extends","opt_options","options","baseOptions","gradient","radius","blur","weight","_super","_this","gradient_","addChangeListener","handleGradientChanged_","setGradient","setBlur","undefined","setRadius","weightFunction_","feature","get","setRenderOrder","Heatmap","createGradient","getGradient","set","colors","className","getClassName","attributes","name","callback","bind","vertexShader","fragmentShader","hitVertexShader","hitFragmentShader","uniforms","u_size","u_blurSlope","Math","max","postProcesses","u_gradientTexture","u_opacity","getOpacity","width","height","context","createLinearGradient","step","length","i","ii","addColorStop","fillStyle","fillRect","canvas"],"sourceRoot":"","sources":["../src/layer/Heatmap.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}