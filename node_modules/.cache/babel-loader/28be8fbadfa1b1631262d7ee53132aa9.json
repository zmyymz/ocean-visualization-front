{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n\n/**\n * A wrapper class to simplify rendering to a texture instead of the final canvas\n * @module ol/webgl/RenderTarget\n */\nimport { equals } from '../array.js'; // for pixel color reading\n\nvar tmpArray4 = new Uint8Array(4);\n/**\n * @classdesc\n * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,\n * simplifying initialization and binding for rendering.\n * @api\n */\n\nvar WebGLRenderTarget =\n/** @class */\nfunction () {\n  /**\n   * @param {import(\"./Helper.js\").default} helper WebGL helper; mandatory.\n   * @param {Array<number>} [opt_size] Expected size of the render target texture; note: this can be changed later on.\n   */\n  function WebGLRenderTarget(helper, opt_size) {\n    /**\n     * @private\n     * @type {import(\"./Helper.js\").default}\n     */\n    this.helper_ = helper;\n    var gl = helper.getGL();\n    /**\n     * @private\n     * @type {WebGLTexture}\n     */\n\n    this.texture_ = gl.createTexture();\n    /**\n     * @private\n     * @type {WebGLFramebuffer}\n     */\n\n    this.framebuffer_ = gl.createFramebuffer();\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n\n    this.size_ = opt_size || [1, 1];\n    /**\n     * @type {Uint8Array}\n     * @private\n     */\n\n    this.data_ = new Uint8Array(0);\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.dataCacheDirty_ = true;\n    this.updateSize_();\n  }\n  /**\n   * Changes the size of the render target texture. Note: will do nothing if the size\n   * is already the same.\n   * @param {Array<number>} size Expected size of the render target texture\n   * @api\n   */\n\n\n  WebGLRenderTarget.prototype.setSize = function (size) {\n    if (equals(size, this.size_)) {\n      return;\n    }\n\n    this.size_[0] = size[0];\n    this.size_[1] = size[1];\n    this.updateSize_();\n  };\n  /**\n   * Returns the size of the render target texture\n   * @return {Array<number>} Size of the render target texture\n   * @api\n   */\n\n\n  WebGLRenderTarget.prototype.getSize = function () {\n    return this.size_;\n  };\n  /**\n   * This will cause following calls to `#readAll` or `#readPixel` to download the content of the\n   * render target into memory, which is an expensive operation.\n   * This content will be kept in cache but should be cleared after each new render.\n   * @api\n   */\n\n\n  WebGLRenderTarget.prototype.clearCachedData = function () {\n    this.dataCacheDirty_ = true;\n  };\n  /**\n   * Returns the full content of the frame buffer as a series of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * @return {Uint8Array} Integer array of color values\n   * @api\n   */\n\n\n  WebGLRenderTarget.prototype.readAll = function () {\n    if (this.dataCacheDirty_) {\n      var size = this.size_;\n      var gl = this.helper_.getGL();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n      gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.UNSIGNED_BYTE, this.data_);\n      this.dataCacheDirty_ = false;\n    }\n\n    return this.data_;\n  };\n  /**\n   * Reads one pixel of the frame buffer as an array of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * If x and/or y are outside of existing data, an array filled with 0 is returned.\n   * @param {number} x Pixel coordinate\n   * @param {number} y Pixel coordinate\n   * @return {Uint8Array} Integer array with one color value (4 components)\n   * @api\n   */\n\n\n  WebGLRenderTarget.prototype.readPixel = function (x, y) {\n    if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {\n      tmpArray4[0] = 0;\n      tmpArray4[1] = 0;\n      tmpArray4[2] = 0;\n      tmpArray4[3] = 0;\n      return tmpArray4;\n    }\n\n    this.readAll();\n    var index = Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];\n    tmpArray4[0] = this.data_[index * 4];\n    tmpArray4[1] = this.data_[index * 4 + 1];\n    tmpArray4[2] = this.data_[index * 4 + 2];\n    tmpArray4[3] = this.data_[index * 4 + 3];\n    return tmpArray4;\n  };\n  /**\n   * @return {WebGLTexture} Texture to render to\n   */\n\n\n  WebGLRenderTarget.prototype.getTexture = function () {\n    return this.texture_;\n  };\n  /**\n   * @return {WebGLFramebuffer} Frame buffer of the render target\n   */\n\n\n  WebGLRenderTarget.prototype.getFramebuffer = function () {\n    return this.framebuffer_;\n  };\n  /**\n   * @private\n   */\n\n\n  WebGLRenderTarget.prototype.updateSize_ = function () {\n    var size = this.size_;\n    var gl = this.helper_.getGL();\n    this.texture_ = this.helper_.createTexture(size, null, this.texture_);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture_, 0);\n    this.data_ = new Uint8Array(size[0] * size[1] * 4);\n  };\n\n  return WebGLRenderTarget;\n}();\n\nexport default WebGLRenderTarget;","map":{"version":3,"mappings":";;;AAAA;;;;AAIA,SAAQA,MAAR,QAAqB,aAArB,C,CAEA;;AACA,IAAMC,SAAS,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAlB;AAEA;;;;;;;AAMA;AAAA;AAAA;AACE;;;;AAIA,6BAAYC,MAAZ,EAAoBC,QAApB,EAA4B;AAC1B;;;;AAIA,SAAKC,OAAL,GAAeF,MAAf;AACA,QAAMG,EAAE,GAAGH,MAAM,CAACI,KAAP,EAAX;AAEA;;;;;AAIA,SAAKC,QAAL,GAAgBF,EAAE,CAACG,aAAH,EAAhB;AAEA;;;;;AAIA,SAAKC,YAAL,GAAoBJ,EAAE,CAACK,iBAAH,EAApB;AAEA;;;;;AAIA,SAAKC,KAAL,GAAaR,QAAQ,IAAI,CAAC,CAAD,EAAI,CAAJ,CAAzB;AAEA;;;;;AAIA,SAAKS,KAAL,GAAa,IAAIX,UAAJ,CAAe,CAAf,CAAb;AAEA;;;;;AAIA,SAAKY,eAAL,GAAuB,IAAvB;AAEA,SAAKC,WAAL;AACD;AAED;;;;;;;;AAMAC,kDAAQC,IAAR,EAAY;AACV,QAAIjB,MAAM,CAACiB,IAAD,EAAO,KAAKL,KAAZ,CAAV,EAA8B;AAC5B;AACD;;AACD,SAAKA,KAAL,CAAW,CAAX,IAAgBK,IAAI,CAAC,CAAD,CAApB;AACA,SAAKL,KAAL,CAAW,CAAX,IAAgBK,IAAI,CAAC,CAAD,CAApB;AACA,SAAKF,WAAL;AACD,GAPD;AASA;;;;;;;AAKAC;AACE,WAAO,KAAKJ,KAAZ;AACD,GAFD;AAIA;;;;;;;;AAMAI;AACE,SAAKF,eAAL,GAAuB,IAAvB;AACD,GAFD;AAIA;;;;;;;;AAMAE;AACE,QAAI,KAAKF,eAAT,EAA0B;AACxB,UAAMG,IAAI,GAAG,KAAKL,KAAlB;AACA,UAAMN,EAAE,GAAG,KAAKD,OAAL,CAAaE,KAAb,EAAX;AAEAD,QAAE,CAACY,eAAH,CAAmBZ,EAAE,CAACa,WAAtB,EAAmC,KAAKT,YAAxC;AACAJ,QAAE,CAACc,UAAH,CACE,CADF,EAEE,CAFF,EAGEH,IAAI,CAAC,CAAD,CAHN,EAIEA,IAAI,CAAC,CAAD,CAJN,EAKEX,EAAE,CAACe,IALL,EAMEf,EAAE,CAACgB,aANL,EAOE,KAAKT,KAPP;AASA,WAAKC,eAAL,GAAuB,KAAvB;AACD;;AACD,WAAO,KAAKD,KAAZ;AACD,GAlBD;AAoBA;;;;;;;;;;;AASAG,oDAAUO,CAAV,EAAaC,CAAb,EAAc;AACZ,QAAID,CAAC,GAAG,CAAJ,IAASC,CAAC,GAAG,CAAb,IAAkBD,CAAC,GAAG,KAAKX,KAAL,CAAW,CAAX,CAAtB,IAAuCY,CAAC,IAAI,KAAKZ,KAAL,CAAW,CAAX,CAAhD,EAA+D;AAC7DX,eAAS,CAAC,CAAD,CAAT,GAAe,CAAf;AACAA,eAAS,CAAC,CAAD,CAAT,GAAe,CAAf;AACAA,eAAS,CAAC,CAAD,CAAT,GAAe,CAAf;AACAA,eAAS,CAAC,CAAD,CAAT,GAAe,CAAf;AACA,aAAOA,SAAP;AACD;;AAED,SAAKwB,OAAL;AACA,QAAMC,KAAK,GACTC,IAAI,CAACC,KAAL,CAAWL,CAAX,IAAgB,CAAC,KAAKX,KAAL,CAAW,CAAX,IAAgBe,IAAI,CAACC,KAAL,CAAWJ,CAAX,CAAhB,GAAgC,CAAjC,IAAsC,KAAKZ,KAAL,CAAW,CAAX,CADxD;AAEAX,aAAS,CAAC,CAAD,CAAT,GAAe,KAAKY,KAAL,CAAWa,KAAK,GAAG,CAAnB,CAAf;AACAzB,aAAS,CAAC,CAAD,CAAT,GAAe,KAAKY,KAAL,CAAWa,KAAK,GAAG,CAAR,GAAY,CAAvB,CAAf;AACAzB,aAAS,CAAC,CAAD,CAAT,GAAe,KAAKY,KAAL,CAAWa,KAAK,GAAG,CAAR,GAAY,CAAvB,CAAf;AACAzB,aAAS,CAAC,CAAD,CAAT,GAAe,KAAKY,KAAL,CAAWa,KAAK,GAAG,CAAR,GAAY,CAAvB,CAAf;AACA,WAAOzB,SAAP;AACD,GAjBD;AAmBA;;;;;AAGAe;AACE,WAAO,KAAKR,QAAZ;AACD,GAFD;AAIA;;;;;AAGAQ;AACE,WAAO,KAAKN,YAAZ;AACD,GAFD;AAIA;;;;;AAGAM;AACE,QAAMC,IAAI,GAAG,KAAKL,KAAlB;AACA,QAAMN,EAAE,GAAG,KAAKD,OAAL,CAAaE,KAAb,EAAX;AAEA,SAAKC,QAAL,GAAgB,KAAKH,OAAL,CAAaI,aAAb,CAA2BQ,IAA3B,EAAiC,IAAjC,EAAuC,KAAKT,QAA5C,CAAhB;AAEAF,MAAE,CAACY,eAAH,CAAmBZ,EAAE,CAACa,WAAtB,EAAmC,KAAKT,YAAxC;AACAJ,MAAE,CAACuB,QAAH,CAAY,CAAZ,EAAe,CAAf,EAAkBZ,IAAI,CAAC,CAAD,CAAtB,EAA2BA,IAAI,CAAC,CAAD,CAA/B;AACAX,MAAE,CAACwB,oBAAH,CACExB,EAAE,CAACa,WADL,EAEEb,EAAE,CAACyB,iBAFL,EAGEzB,EAAE,CAAC0B,UAHL,EAIE,KAAKxB,QAJP,EAKE,CALF;AAQA,SAAKK,KAAL,GAAa,IAAIX,UAAJ,CAAee,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAd,GAAoB,CAAnC,CAAb;AACD,GAjBD;;AAkBF;AAAC,CAzKD;;AA2KA,eAAeD,iBAAf","names":["equals","tmpArray4","Uint8Array","helper","opt_size","helper_","gl","getGL","texture_","createTexture","framebuffer_","createFramebuffer","size_","data_","dataCacheDirty_","updateSize_","WebGLRenderTarget","size","bindFramebuffer","FRAMEBUFFER","readPixels","RGBA","UNSIGNED_BYTE","x","y","readAll","index","Math","floor","viewport","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D"],"sourceRoot":"","sources":["../src/webgl/RenderTarget.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}