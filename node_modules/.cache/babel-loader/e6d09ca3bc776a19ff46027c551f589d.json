{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Object\n */\n\n\nimport Event from './events/Event.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport { assign, isEmpty } from './obj.js';\nimport { getUid } from './util.js';\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\n\nvar ObjectEvent =\n/** @class */\nfunction (_super) {\n  __extends(ObjectEvent, _super);\n  /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */\n\n\n  function ObjectEvent(type, key, oldValue) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n\n\n    _this.key = key;\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n\n    _this.oldValue = oldValue;\n    return _this;\n  }\n\n  return ObjectEvent;\n}(Event);\n\nexport { ObjectEvent };\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable~Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\n\nvar BaseObject =\n/** @class */\nfunction (_super) {\n  __extends(BaseObject, _super);\n  /**\n   * @param {Object<string, *>} [opt_values] An object with key-value pairs.\n   */\n\n\n  function BaseObject(opt_values) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {ObjectOnSignature<void>}\n     */\n\n    _this.un; // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n\n    getUid(_this);\n    /**\n     * @private\n     * @type {Object<string, *>}\n     */\n\n    _this.values_ = null;\n\n    if (opt_values !== undefined) {\n      _this.setProperties(opt_values);\n    }\n\n    return _this;\n  }\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n\n\n  BaseObject.prototype.get = function (key) {\n    var value;\n\n    if (this.values_ && this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n\n    return value;\n  };\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n\n\n  BaseObject.prototype.getKeys = function () {\n    return this.values_ && Object.keys(this.values_) || [];\n  };\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n\n\n  BaseObject.prototype.getProperties = function () {\n    return this.values_ && assign({}, this.values_) || {};\n  };\n  /**\n   * @return {boolean} The object has properties.\n   */\n\n\n  BaseObject.prototype.hasProperties = function () {\n    return !!this.values_;\n  };\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n\n\n  BaseObject.prototype.notify = function (key, oldValue) {\n    var eventType;\n    eventType = \"change:\".concat(key);\n\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n\n    eventType = ObjectEventType.PROPERTYCHANGE;\n\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n  };\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n\n\n  BaseObject.prototype.addChangeListener = function (key, listener) {\n    this.addEventListener(\"change:\".concat(key), listener);\n  };\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n\n\n  BaseObject.prototype.removeChangeListener = function (key, listener) {\n    this.removeEventListener(\"change:\".concat(key), listener);\n  };\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean} [opt_silent] Update without triggering an event.\n   * @api\n   */\n\n\n  BaseObject.prototype.set = function (key, value, opt_silent) {\n    var values = this.values_ || (this.values_ = {});\n\n    if (opt_silent) {\n      values[key] = value;\n    } else {\n      var oldValue = values[key];\n      values[key] = value;\n\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean} [opt_silent] Update without triggering an event.\n   * @api\n   */\n\n\n  BaseObject.prototype.setProperties = function (values, opt_silent) {\n    for (var key in values) {\n      this.set(key, values[key], opt_silent);\n    }\n  };\n  /**\n   * Apply any properties from another object without triggering events.\n   * @param {BaseObject} source The source object.\n   * @protected\n   */\n\n\n  BaseObject.prototype.applyProperties = function (source) {\n    if (!source.values_) {\n      return;\n    }\n\n    assign(this.values_ || (this.values_ = {}), source.values_);\n  };\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean} [opt_silent] Unset without triggering an event.\n   * @api\n   */\n\n\n  BaseObject.prototype.unset = function (key, opt_silent) {\n    if (this.values_ && key in this.values_) {\n      var oldValue = this.values_[key];\n      delete this.values_[key];\n\n      if (isEmpty(this.values_)) {\n        this.values_ = null;\n      }\n\n      if (!opt_silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n\n  return BaseObject;\n}(Observable);\n\nexport default BaseObject;","map":{"version":3,"mappings":"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","names":["Event","ObjectEventType","Observable","assign","isEmpty","getUid","__extends","type","key","oldValue","_super","_this","opt_values","on","once","un","values_","undefined","setProperties","BaseObject","value","hasOwnProperty","Object","keys","eventType","hasListener","dispatchEvent","ObjectEvent","PROPERTYCHANGE","listener","addEventListener","removeEventListener","opt_silent","values","notify","set","source"],"sourceRoot":"","sources":["src/Object.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}