{"ast":null,"code":"import { ArrayBufferPrototypeGetByteLength, ArrayIsArray, MathTrunc, NativeArrayPrototypeSymbolIterator, NativeNumber, NativeSharedArrayBuffer, NativeTypedArrayPrototypeSymbolIterator, NumberIsFinite, SharedArrayBufferPrototypeGetByteLength, SymbolIterator, SymbolToStringTag, TypedArrayPrototypeGetSymbolToStringTag } from \"./primordials.mjs\";\n/**\n * @param {unknown} value\n * @returns {value is {}}\n */\n\nexport function isObject(value) {\n  return value !== null && typeof value === \"object\" || typeof value === \"function\";\n}\n/**\n * @param {unknown} value\n * @returns {value is {}}\n */\n\nexport function isObjectLike(value) {\n  return value !== null && typeof value === \"object\";\n} // Inspired by util.types implementation of Node.js\n\n/** @typedef {Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float32Array|Float64Array|BigUint64Array|BigInt64Array} TypedArray */\n\n/**\n * @param {unknown} value\n * @returns {value is TypedArray}\n */\n\nexport function isNativeTypedArray(value) {\n  return TypedArrayPrototypeGetSymbolToStringTag(value) !== undefined;\n}\n/**\n * @param {unknown} value\n * @returns {value is BigInt64Array|BigUint64Array}\n */\n\nexport function isNativeBigIntTypedArray(value) {\n  const typedArrayName = TypedArrayPrototypeGetSymbolToStringTag(value);\n  return typedArrayName === \"BigInt64Array\" || typedArrayName === \"BigUint64Array\";\n}\n/**\n * @param {unknown} value\n * @returns {value is ArrayBuffer}\n */\n\nexport function isArrayBuffer(value) {\n  try {\n    ArrayBufferPrototypeGetByteLength(\n    /** @type {any} */\n    value);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * @param {unknown} value\n * @returns {value is SharedArrayBuffer}\n */\n\nexport function isSharedArrayBuffer(value) {\n  if (NativeSharedArrayBuffer === null) {\n    return false;\n  }\n\n  try {\n    SharedArrayBufferPrototypeGetByteLength(\n    /** @type {any} */\n    value);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * @param {unknown} value\n * @returns {value is unknown[]}\n */\n\nexport function isOrdinaryArray(value) {\n  if (!ArrayIsArray(value)) {\n    return false;\n  }\n\n  if (value[SymbolIterator] === NativeArrayPrototypeSymbolIterator) {\n    return true;\n  } // for other realms\n  // eslint-disable-next-line no-restricted-syntax\n\n\n  const iterator = value[SymbolIterator]();\n  return iterator[SymbolToStringTag] === \"Array Iterator\";\n}\n/**\n * @param {unknown} value\n * @returns {value is TypedArray}\n */\n\nexport function isOrdinaryNativeTypedArray(value) {\n  if (!isNativeTypedArray(value)) {\n    return false;\n  }\n\n  if (value[SymbolIterator] === NativeTypedArrayPrototypeSymbolIterator) {\n    return true;\n  } // for other realms\n  // eslint-disable-next-line no-restricted-syntax\n\n\n  const iterator = value[SymbolIterator]();\n  return iterator[SymbolToStringTag] === \"Array Iterator\";\n}\n/**\n * @param {unknown} value\n * @returns {value is string}\n */\n\nexport function isCanonicalIntegerIndexString(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n\n  const number = NativeNumber(value);\n\n  if (value !== number + \"\") {\n    return false;\n  }\n\n  if (!NumberIsFinite(number)) {\n    return false;\n  }\n\n  return number === MathTrunc(number);\n}","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@petamoriken/float16/src/_util/is.mjs"],"names":["ArrayBufferPrototypeGetByteLength","ArrayIsArray","MathTrunc","NativeArrayPrototypeSymbolIterator","NativeNumber","NativeSharedArrayBuffer","NativeTypedArrayPrototypeSymbolIterator","NumberIsFinite","SharedArrayBufferPrototypeGetByteLength","SymbolIterator","SymbolToStringTag","TypedArrayPrototypeGetSymbolToStringTag","isObject","value","isObjectLike","isNativeTypedArray","undefined","isNativeBigIntTypedArray","typedArrayName","isArrayBuffer","e","isSharedArrayBuffer","isOrdinaryArray","iterator","isOrdinaryNativeTypedArray","isCanonicalIntegerIndexString","number"],"mappings":"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","sourcesContent":["import {\n  ArrayBufferPrototypeGetByteLength,\n  ArrayIsArray,\n  MathTrunc,\n  NativeArrayPrototypeSymbolIterator,\n  NativeNumber,\n  NativeSharedArrayBuffer,\n  NativeTypedArrayPrototypeSymbolIterator,\n  NumberIsFinite,\n  SharedArrayBufferPrototypeGetByteLength,\n  SymbolIterator,\n  SymbolToStringTag,\n  TypedArrayPrototypeGetSymbolToStringTag,\n} from \"./primordials.mjs\";\n\n/**\n * @param {unknown} value\n * @returns {value is {}}\n */\nexport function isObject(value) {\n  return (value !== null && typeof value === \"object\") ||\n    typeof value === \"function\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is {}}\n */\nexport function isObjectLike(value) {\n  return value !== null && typeof value === \"object\";\n}\n\n// Inspired by util.types implementation of Node.js\n/** @typedef {Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float32Array|Float64Array|BigUint64Array|BigInt64Array} TypedArray */\n\n/**\n * @param {unknown} value\n * @returns {value is TypedArray}\n */\nexport function isNativeTypedArray(value) {\n  return TypedArrayPrototypeGetSymbolToStringTag(value) !== undefined;\n}\n\n/**\n * @param {unknown} value\n * @returns {value is BigInt64Array|BigUint64Array}\n */\nexport function isNativeBigIntTypedArray(value) {\n  const typedArrayName = TypedArrayPrototypeGetSymbolToStringTag(value);\n  return typedArrayName === \"BigInt64Array\" ||\n    typedArrayName === \"BigUint64Array\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is ArrayBuffer}\n */\nexport function isArrayBuffer(value) {\n  try {\n    ArrayBufferPrototypeGetByteLength(/** @type {any} */ (value));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {value is SharedArrayBuffer}\n */\nexport function isSharedArrayBuffer(value) {\n  if (NativeSharedArrayBuffer === null) {\n    return false;\n  }\n\n  try {\n    SharedArrayBufferPrototypeGetByteLength(/** @type {any} */ (value));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {value is unknown[]}\n */\nexport function isOrdinaryArray(value) {\n  if (!ArrayIsArray(value)) {\n    return false;\n  }\n\n  if (value[SymbolIterator] === NativeArrayPrototypeSymbolIterator) {\n    return true;\n  }\n\n  // for other realms\n  // eslint-disable-next-line no-restricted-syntax\n  const iterator = value[SymbolIterator]();\n  return iterator[SymbolToStringTag] === \"Array Iterator\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is TypedArray}\n */\nexport function isOrdinaryNativeTypedArray(value) {\n  if (!isNativeTypedArray(value)) {\n    return false;\n  }\n\n  if (value[SymbolIterator] === NativeTypedArrayPrototypeSymbolIterator) {\n    return true;\n  }\n\n  // for other realms\n  // eslint-disable-next-line no-restricted-syntax\n  const iterator = value[SymbolIterator]();\n  return iterator[SymbolToStringTag] === \"Array Iterator\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is string}\n */\nexport function isCanonicalIntegerIndexString(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n\n  const number = NativeNumber(value);\n  if (value !== number + \"\") {\n    return false;\n  }\n\n  if (!NumberIsFinite(number)) {\n    return false;\n  }\n\n  return number === MathTrunc(number);\n}\n"]},"metadata":{},"sourceType":"module"}