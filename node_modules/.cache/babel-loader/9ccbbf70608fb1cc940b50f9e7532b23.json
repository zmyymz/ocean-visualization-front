{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.replace.js\";\n\n/**\n * @module ol/source/TileArcGISRest\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport TileImage from './TileImage.js';\nimport { appendParams } from '../uri.js';\nimport { assign } from '../obj.js';\nimport { createEmpty } from '../extent.js';\nimport { modulo } from '../math.js';\nimport { scale as scaleSize, toSize } from '../size.js';\nimport { hash as tileCoordHash } from '../tilecoord.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be\n * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by\n * default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`,\n * and `IMAGESR` will be set dynamically. Set `LAYERS` to\n * override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.\n * The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The\n * url should include /MapServer or /ImageServer.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity\n * transition, pass `transition: 0`.\n * @property {Array<string>} [urls] ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS\n * Service supports multiple urls for export requests.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from ArcGIS Rest services. Map and Image\n * Services are supported.\n *\n * For cached ArcGIS services, better performance is available using the\n * {@link module:ol/source/XYZ~XYZ} data source.\n * @api\n */\n\nvar TileArcGISRest =\n/** @class */\nfunction (_super) {\n  __extends(TileArcGISRest, _super);\n  /**\n   * @param {Options} [opt_options] Tile ArcGIS Rest options.\n   */\n\n\n  function TileArcGISRest(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    }) || this;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    _this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    _this.tmpExtent_ = createEmpty();\n\n    _this.setKey(_this.getKeyForParams_());\n\n    return _this;\n  }\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n\n\n  TileArcGISRest.prototype.getKeyForParams_ = function () {\n    var i = 0;\n    var res = [];\n\n    for (var key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n\n    return res.join('/');\n  };\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  TileArcGISRest.prototype.getParams = function () {\n    return this.params_;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n\n\n  TileArcGISRest.prototype.getRequestUrl_ = function (tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\n    var urls = this.urls;\n\n    if (!urls) {\n      return undefined;\n    } // ArcGIS Server only wants the numeric portion of the projection ID.\n    // (if there is no numeric portion the entire projection code must\n    // form a valid ArcGIS SpatialReference definition).\n\n\n    var srid = projection.getCode().split(/:(?=\\d+$)/).pop();\n    params['SIZE'] = tileSize[0] + ',' + tileSize[1];\n    params['BBOX'] = tileExtent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio);\n    var url;\n\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      var index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n\n    var modifiedUrl = url.replace(/MapServer\\/?$/, 'MapServer/export').replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n    return appendParams(modifiedUrl, params);\n  };\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n\n\n  TileArcGISRest.prototype.getTilePixelRatio = function (pixelRatio) {\n    return this.hidpi_ ? pixelRatio : 1;\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  TileArcGISRest.prototype.updateParams = function (params) {\n    assign(this.params_, params);\n    this.setKey(this.getKeyForParams_());\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n\n\n  TileArcGISRest.prototype.tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n    var tileGrid = this.getTileGrid();\n\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && !this.hidpi_) {\n      pixelRatio = 1;\n    }\n\n    var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    } // Apply default params and override with user specified values.\n\n\n    var baseParams = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true\n    };\n    assign(baseParams, this.params_);\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, baseParams);\n  };\n\n  return TileArcGISRest;\n}(TileImage);\n\nexport default TileArcGISRest;","map":{"version":3,"mappings":"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","names":["TileImage","appendParams","assign","createEmpty","modulo","scale","scaleSize","toSize","hash","tileCoordHash","__extends","opt_options","options","interpolate","imageSmoothing","undefined","_super","attributions","cacheSize","crossOrigin","projection","reprojectionErrorThreshold","tileGrid","tileLoadFunction","url","urls","wrapX","transition","zDirection","_this","params_","params","hidpi_","hidpi","tmpExtent_","setKey","getKeyForParams_","TileArcGISRest","i","res","key","join","tileCoord","tileSize","tileExtent","pixelRatio","srid","getCode","split","pop","Math","round","length","index","modifiedUrl","replace","getTileGrid","getTileGridForProjection","getResolutions","getTileCoordExtent","getTileSize","tmpSize","baseParams","getRequestUrl_"],"sourceRoot":"","sources":["../src/source/TileArcGISRest.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}