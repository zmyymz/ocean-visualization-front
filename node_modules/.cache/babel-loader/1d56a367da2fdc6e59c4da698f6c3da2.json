{"ast":null,"code":"import { ArrayIteratorPrototype, ArrayIteratorPrototypeNext, ArrayPrototypeSymbolIterator, GeneratorPrototypeNext, IteratorPrototype, NativeArrayPrototypeSymbolIterator, NativeWeakMap, ObjectCreate, ObjectDefineProperty, ReflectGetOwnPropertyDescriptor, ReflectOwnKeys, SymbolIterator, WeakMapPrototypeGet, WeakMapPrototypeSet } from \"./primordials.mjs\";\n/** @type {WeakMap<{}, IterableIterator<any>>} */\n\nconst arrayIterators = new NativeWeakMap();\nconst SafeIteratorPrototype = ObjectCreate(null, {\n  next: {\n    value: function next() {\n      const arrayIterator = WeakMapPrototypeGet(arrayIterators, this);\n      return ArrayIteratorPrototypeNext(arrayIterator);\n    }\n  },\n  [SymbolIterator]: {\n    value: function values() {\n      return this;\n    }\n  }\n});\n/**\n * Wrap the Array around the SafeIterator If Array.prototype [@@iterator] has been modified\n *\n * @type {<T>(array: T[]) => Iterable<T>}\n */\n\nexport function safeIfNeeded(array) {\n  if (array[SymbolIterator] === NativeArrayPrototypeSymbolIterator) {\n    return array;\n  }\n\n  const safe = ObjectCreate(SafeIteratorPrototype);\n  WeakMapPrototypeSet(arrayIterators, safe, ArrayPrototypeSymbolIterator(array));\n  return safe;\n}\n/** @type {WeakMap<{}, Generator<any>>} */\n\nconst generators = new NativeWeakMap();\n/** @see https://tc39.es/ecma262/#sec-%arrayiteratorprototype%-object */\n\nconst DummyArrayIteratorPrototype = ObjectCreate(IteratorPrototype, {\n  next: {\n    value: function next() {\n      const generator = WeakMapPrototypeGet(generators, this);\n      return GeneratorPrototypeNext(generator);\n    },\n    writable: true,\n    configurable: true\n  }\n});\n\nfor (const key of ReflectOwnKeys(ArrayIteratorPrototype)) {\n  // next method has already defined\n  if (key === \"next\") {\n    continue;\n  } // Copy ArrayIteratorPrototype descriptors to DummyArrayIteratorPrototype\n\n\n  ObjectDefineProperty(DummyArrayIteratorPrototype, key, ReflectGetOwnPropertyDescriptor(ArrayIteratorPrototype, key));\n}\n/**\n * Wrap the Generator around the dummy ArrayIterator\n *\n * @type {<T>(generator: Generator<T>) => IterableIterator<T>}\n */\n\n\nexport function wrap(generator) {\n  const dummy = ObjectCreate(DummyArrayIteratorPrototype);\n  WeakMapPrototypeSet(generators, dummy, generator);\n  return dummy;\n}","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@petamoriken/float16/src/_util/arrayIterator.mjs"],"names":["ArrayIteratorPrototype","ArrayIteratorPrototypeNext","ArrayPrototypeSymbolIterator","GeneratorPrototypeNext","IteratorPrototype","NativeArrayPrototypeSymbolIterator","NativeWeakMap","ObjectCreate","ObjectDefineProperty","ReflectGetOwnPropertyDescriptor","ReflectOwnKeys","SymbolIterator","WeakMapPrototypeGet","WeakMapPrototypeSet","arrayIterators","SafeIteratorPrototype","next","value","arrayIterator","values","safeIfNeeded","array","safe","generators","DummyArrayIteratorPrototype","generator","writable","configurable","key","wrap","dummy"],"mappings":"AAAA,SACEA,sBADF,EAEEC,0BAFF,EAGEC,4BAHF,EAIEC,sBAJF,EAKEC,iBALF,EAMEC,kCANF,EAOEC,aAPF,EAQEC,YARF,EASEC,oBATF,EAUEC,+BAVF,EAWEC,cAXF,EAYEC,cAZF,EAaEC,mBAbF,EAcEC,mBAdF,QAeO,mBAfP;AAiBA;;AACA,MAAMC,cAAc,GAAG,IAAIR,aAAJ,EAAvB;AAEA,MAAMS,qBAAqB,GAAGR,YAAY,CAAC,IAAD,EAAO;AAC/CS,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,SAASD,IAAT,GAAgB;AACrB,YAAME,aAAa,GAAGN,mBAAmB,CAACE,cAAD,EAAiB,IAAjB,CAAzC;AACA,aAAOb,0BAA0B,CAACiB,aAAD,CAAjC;AACD;AAJG,GADyC;AAQ/C,GAACP,cAAD,GAAkB;AAChBM,IAAAA,KAAK,EAAE,SAASE,MAAT,GAAkB;AACvB,aAAO,IAAP;AACD;AAHe;AAR6B,CAAP,CAA1C;AAeA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAClC,MAAIA,KAAK,CAACV,cAAD,CAAL,KAA0BN,kCAA9B,EAAkE;AAChE,WAAOgB,KAAP;AACD;;AAED,QAAMC,IAAI,GAAGf,YAAY,CAACQ,qBAAD,CAAzB;AACAF,EAAAA,mBAAmB,CAACC,cAAD,EAAiBQ,IAAjB,EAAuBpB,4BAA4B,CAACmB,KAAD,CAAnD,CAAnB;AACA,SAAOC,IAAP;AACD;AAED;;AACA,MAAMC,UAAU,GAAG,IAAIjB,aAAJ,EAAnB;AAEA;;AACA,MAAMkB,2BAA2B,GAAGjB,YAAY,CAACH,iBAAD,EAAoB;AAClEY,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,SAASD,IAAT,GAAgB;AACrB,YAAMS,SAAS,GAAGb,mBAAmB,CAACW,UAAD,EAAa,IAAb,CAArC;AACA,aAAOpB,sBAAsB,CAACsB,SAAD,CAA7B;AACD,KAJG;AAKJC,IAAAA,QAAQ,EAAE,IALN;AAMJC,IAAAA,YAAY,EAAE;AANV;AAD4D,CAApB,CAAhD;;AAWA,KAAK,MAAMC,GAAX,IAAkBlB,cAAc,CAACV,sBAAD,CAAhC,EAA0D;AACxD;AACA,MAAI4B,GAAG,KAAK,MAAZ,EAAoB;AAClB;AACD,GAJuD,CAMxD;;;AACApB,EAAAA,oBAAoB,CAACgB,2BAAD,EAA8BI,GAA9B,EAAmCnB,+BAA+B,CAACT,sBAAD,EAAyB4B,GAAzB,CAAlE,CAApB;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASC,IAAT,CAAcJ,SAAd,EAAyB;AAC9B,QAAMK,KAAK,GAAGvB,YAAY,CAACiB,2BAAD,CAA1B;AACAX,EAAAA,mBAAmB,CAACU,UAAD,EAAaO,KAAb,EAAoBL,SAApB,CAAnB;AACA,SAAOK,KAAP;AACD","sourcesContent":["import {\n  ArrayIteratorPrototype,\n  ArrayIteratorPrototypeNext,\n  ArrayPrototypeSymbolIterator,\n  GeneratorPrototypeNext,\n  IteratorPrototype,\n  NativeArrayPrototypeSymbolIterator,\n  NativeWeakMap,\n  ObjectCreate,\n  ObjectDefineProperty,\n  ReflectGetOwnPropertyDescriptor,\n  ReflectOwnKeys,\n  SymbolIterator,\n  WeakMapPrototypeGet,\n  WeakMapPrototypeSet,\n} from \"./primordials.mjs\";\n\n/** @type {WeakMap<{}, IterableIterator<any>>} */\nconst arrayIterators = new NativeWeakMap();\n\nconst SafeIteratorPrototype = ObjectCreate(null, {\n  next: {\n    value: function next() {\n      const arrayIterator = WeakMapPrototypeGet(arrayIterators, this);\n      return ArrayIteratorPrototypeNext(arrayIterator);\n    },\n  },\n\n  [SymbolIterator]: {\n    value: function values() {\n      return this;\n    },\n  },\n});\n\n/**\n * Wrap the Array around the SafeIterator If Array.prototype [@@iterator] has been modified\n *\n * @type {<T>(array: T[]) => Iterable<T>}\n */\nexport function safeIfNeeded(array) {\n  if (array[SymbolIterator] === NativeArrayPrototypeSymbolIterator) {\n    return array;\n  }\n\n  const safe = ObjectCreate(SafeIteratorPrototype);\n  WeakMapPrototypeSet(arrayIterators, safe, ArrayPrototypeSymbolIterator(array));\n  return safe;\n}\n\n/** @type {WeakMap<{}, Generator<any>>} */\nconst generators = new NativeWeakMap();\n\n/** @see https://tc39.es/ecma262/#sec-%arrayiteratorprototype%-object */\nconst DummyArrayIteratorPrototype = ObjectCreate(IteratorPrototype, {\n  next: {\n    value: function next() {\n      const generator = WeakMapPrototypeGet(generators, this);\n      return GeneratorPrototypeNext(generator);\n    },\n    writable: true,\n    configurable: true,\n  },\n});\n\nfor (const key of ReflectOwnKeys(ArrayIteratorPrototype)) {\n  // next method has already defined\n  if (key === \"next\") {\n    continue;\n  }\n\n  // Copy ArrayIteratorPrototype descriptors to DummyArrayIteratorPrototype\n  ObjectDefineProperty(DummyArrayIteratorPrototype, key, ReflectGetOwnPropertyDescriptor(ArrayIteratorPrototype, key));\n}\n\n/**\n * Wrap the Generator around the dummy ArrayIterator\n *\n * @type {<T>(generator: Generator<T>) => IterableIterator<T>}\n */\nexport function wrap(generator) {\n  const dummy = ObjectCreate(DummyArrayIteratorPrototype);\n  WeakMapPrototypeSet(generators, dummy, generator);\n  return dummy;\n}\n"]},"metadata":{},"sourceType":"module"}