{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\n * @module ol/source/TileJSON\n */\n// FIXME check order of async callbacks\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * See https://mapbox.com/developers/api/.\n */\n\n\nimport SourceState from './State.js';\nimport TileImage from './TileImage.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { assert } from '../asserts.js';\nimport { createFromTemplates } from '../tileurlfunction.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\nimport { jsonp as requestJSONP } from '../net.js';\n/**\n * @typedef {Object} Config\n * @property {string} [name] The name.\n * @property {string} [description] The description.\n * @property {string} [version] The version.\n * @property {string} [attribution] The attribution.\n * @property {string} [template] The template.\n * @property {string} [legend] The legend.\n * @property {string} [scheme] The scheme.\n * @property {Array<string>} tiles The tile URL templates.\n * @property {Array<string>} [grids] Optional grids.\n * @property {number} [minzoom] Minimum zoom level.\n * @property {number} [maxzoom] Maximum zoom level.\n * @property {Array<number>} [bounds] Optional bounds.\n * @property {Array<number>} [center] Optional center.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\n * Note: `tileSize` and other non-standard TileJSON properties are currently ignored.\n * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in TileJSON format.\n * @api\n */\n\nvar TileJSON =\n/** @class */\nfunction (_super) {\n  __extends(TileJSON, _super);\n  /**\n   * @param {Options} options TileJSON options.\n   */\n\n\n  function TileJSON(options) {\n    var _this = this;\n\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: interpolate,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: SourceState.LOADING,\n      tileLoadFunction: options.tileLoadFunction,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    }) || this;\n    /**\n     * @type {Config}\n     * @private\n     */\n\n    _this.tileJSON_ = null;\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     * @private\n     */\n\n    _this.tileSize_ = options.tileSize;\n\n    if (options.url) {\n      if (options.jsonp) {\n        requestJSONP(options.url, _this.handleTileJSONResponse.bind(_this), _this.handleTileJSONError.bind(_this));\n      } else {\n        var client = new XMLHttpRequest();\n        client.addEventListener('load', _this.onXHRLoad_.bind(_this));\n        client.addEventListener('error', _this.onXHRError_.bind(_this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      _this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\n    }\n\n    return _this;\n  }\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n\n\n  TileJSON.prototype.onXHRLoad_ = function (event) {\n    var client =\n    /** @type {XMLHttpRequest} */\n    event.target; // status will be 0 for file:// urls\n\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      var response = void 0;\n\n      try {\n        response =\n        /** @type {Config} */\n        JSON.parse(client.responseText);\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  };\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n\n\n  TileJSON.prototype.onXHRError_ = function (event) {\n    this.handleTileJSONError();\n  };\n  /**\n   * @return {Config} The tilejson object.\n   * @api\n   */\n\n\n  TileJSON.prototype.getTileJSON = function () {\n    return this.tileJSON_;\n  };\n  /**\n   * @protected\n   * @param {Config} tileJSON Tile JSON.\n   */\n\n\n  TileJSON.prototype.handleTileJSONResponse = function (tileJSON) {\n    var epsg4326Projection = getProjection('EPSG:4326');\n    var sourceProjection = this.getProjection();\n    var extent;\n\n    if (tileJSON['bounds'] !== undefined) {\n      var transform = getTransformFromProjections(epsg4326Projection, sourceProjection);\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    var gridExtent = extentFromProjection(sourceProjection);\n    var minZoom = tileJSON['minzoom'] || 0;\n    var maxZoom = tileJSON['maxzoom'] || 22;\n    var tileGrid = createXYZ({\n      extent: gridExtent,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      tileSize: this.tileSize_\n    });\n    this.tileGrid = tileGrid;\n    this.tileUrlFunction = createFromTemplates(tileJSON['tiles'], tileGrid);\n\n    if (tileJSON['attribution'] !== undefined && !this.getAttributions()) {\n      var attributionExtent_1 = extent !== undefined ? extent : gridExtent;\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent_1, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n\n        return null;\n      });\n    }\n\n    this.tileJSON_ = tileJSON;\n    this.setState(SourceState.READY);\n  };\n  /**\n   * @protected\n   */\n\n\n  TileJSON.prototype.handleTileJSONError = function () {\n    this.setState(SourceState.ERROR);\n  };\n\n  return TileJSON;\n}(TileImage);\n\nexport default TileJSON;","map":{"version":3,"mappings":"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","names":["SourceState","TileImage","applyTransform","intersects","assert","createFromTemplates","createXYZ","extentFromProjection","get","getProjection","getTransformFromProjections","jsonp","requestJSONP","__extends","options","interpolate","imageSmoothing","undefined","_super","attributions","cacheSize","crossOrigin","projection","reprojectionErrorThreshold","state","LOADING","tileLoadFunction","wrapX","transition","zDirection","_this","tileJSON_","tileSize_","tileSize","url","handleTileJSONResponse","bind","handleTileJSONError","client","XMLHttpRequest","addEventListener","onXHRLoad_","onXHRError_","open","send","tileJSON","TileJSON","event","target","status","response","JSON","parse","responseText","err","epsg4326Projection","sourceProjection","extent","transform","gridExtent","minZoom","maxZoom","tileGrid","tileUrlFunction","getAttributions","attributionExtent_1","setAttributions","frameState","setState","READY","ERROR"],"sourceRoot":"","sources":["../src/source/TileJSON.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}