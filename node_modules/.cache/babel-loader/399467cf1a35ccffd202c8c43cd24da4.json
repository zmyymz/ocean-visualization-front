{"ast":null,"code":"import { BaseClient, BaseResponse } from './base.js';\n\nclass FetchResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for fetch API Response\n   * @param {Response} response\n   */\n  constructor(response) {\n    super();\n    this.response = response;\n  }\n\n  get status() {\n    return this.response.status;\n  }\n\n  getHeader(name) {\n    return this.response.headers.get(name);\n  }\n\n  async getData() {\n    const data = this.response.arrayBuffer ? await this.response.arrayBuffer() : (await this.response.buffer()).buffer;\n    return data;\n  }\n\n}\n\nexport class FetchClient extends BaseClient {\n  constructor(url, credentials) {\n    super(url);\n    this.credentials = credentials;\n  }\n\n  async request({\n    headers,\n    credentials,\n    signal\n  } = {}) {\n    const response = await fetch(this.url, {\n      headers,\n      credentials,\n      signal\n    });\n    return new FetchResponse(response);\n  }\n\n}","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/geotiff/dist-module/source/client/fetch.js"],"names":["BaseClient","BaseResponse","FetchResponse","constructor","response","status","getHeader","name","headers","get","getData","data","arrayBuffer","buffer","FetchClient","url","credentials","request","signal","fetch"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,YAArB,QAAyC,WAAzC;;AAEA,MAAMC,aAAN,SAA4BD,YAA5B,CAAyC;AACvC;AACF;AACA;AACA;AACEE,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB;AACA,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;AAES,MAANC,MAAM,GAAG;AACX,WAAO,KAAKD,QAAL,CAAcC,MAArB;AACD;;AAEDC,EAAAA,SAAS,CAACC,IAAD,EAAO;AACd,WAAO,KAAKH,QAAL,CAAcI,OAAd,CAAsBC,GAAtB,CAA0BF,IAA1B,CAAP;AACD;;AAEY,QAAPG,OAAO,GAAG;AACd,UAAMC,IAAI,GAAG,KAAKP,QAAL,CAAcQ,WAAd,GACT,MAAM,KAAKR,QAAL,CAAcQ,WAAd,EADG,GAET,CAAC,MAAM,KAAKR,QAAL,CAAcS,MAAd,EAAP,EAA+BA,MAFnC;AAGA,WAAOF,IAAP;AACD;;AAvBsC;;AA0BzC,OAAO,MAAMG,WAAN,SAA0Bd,UAA1B,CAAqC;AAC1CG,EAAAA,WAAW,CAACY,GAAD,EAAMC,WAAN,EAAmB;AAC5B,UAAMD,GAAN;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACD;;AAEY,QAAPC,OAAO,CAAC;AAAET,IAAAA,OAAF;AAAWQ,IAAAA,WAAX;AAAwBE,IAAAA;AAAxB,MAAmC,EAApC,EAAwC;AACnD,UAAMd,QAAQ,GAAG,MAAMe,KAAK,CAAC,KAAKJ,GAAN,EAAW;AACrCP,MAAAA,OADqC;AAC5BQ,MAAAA,WAD4B;AACfE,MAAAA;AADe,KAAX,CAA5B;AAGA,WAAO,IAAIhB,aAAJ,CAAkBE,QAAlB,CAAP;AACD;;AAXyC","sourcesContent":["import { BaseClient, BaseResponse } from './base.js';\n\nclass FetchResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for fetch API Response\n   * @param {Response} response\n   */\n  constructor(response) {\n    super();\n    this.response = response;\n  }\n\n  get status() {\n    return this.response.status;\n  }\n\n  getHeader(name) {\n    return this.response.headers.get(name);\n  }\n\n  async getData() {\n    const data = this.response.arrayBuffer\n      ? await this.response.arrayBuffer()\n      : (await this.response.buffer()).buffer;\n    return data;\n  }\n}\n\nexport class FetchClient extends BaseClient {\n  constructor(url, credentials) {\n    super(url);\n    this.credentials = credentials;\n  }\n\n  async request({ headers, credentials, signal } = {}) {\n    const response = await fetch(this.url, {\n      headers, credentials, signal,\n    });\n    return new FetchResponse(response);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}