{"ast":null,"code":"/**\n * @module ol/structs/LRUCache\n */\nimport { assert } from '../asserts.js';\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Object} newer Newer.\n * @property {Object} older Older.\n * @property {*} value_ Value.\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\n\nvar LRUCache =\n/** @class */\nfunction () {\n  /**\n   * @param {number} [opt_highWaterMark] High water mark.\n   */\n  function LRUCache(opt_highWaterMark) {\n    /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */\n    this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.count_ = 0;\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n\n    this.entries_ = {};\n    /**\n     * @private\n     * @type {?Entry}\n     */\n\n    this.oldest_ = null;\n    /**\n     * @private\n     * @type {?Entry}\n     */\n\n    this.newest_ = null;\n  }\n  /**\n   * @return {boolean} Can expire cache.\n   */\n\n\n  LRUCache.prototype.canExpireCache = function () {\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n  };\n  /**\n   * Expire the cache.\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\n   */\n\n\n  LRUCache.prototype.expireCache = function (keep) {\n    while (this.canExpireCache()) {\n      this.pop();\n    }\n  };\n  /**\n   * FIXME empty description for jsdoc\n   */\n\n\n  LRUCache.prototype.clear = function () {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n  };\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n\n\n  LRUCache.prototype.containsKey = function (key) {\n    return this.entries_.hasOwnProperty(key);\n  };\n  /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */\n\n\n  LRUCache.prototype.forEach = function (f) {\n    var entry = this.oldest_;\n\n    while (entry) {\n      f(entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  };\n  /**\n   * @param {string} key Key.\n   * @param {*} [opt_options] Options (reserved for subclasses).\n   * @return {T} Value.\n   */\n\n\n  LRUCache.prototype.get = function (key, opt_options) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n\n    if (entry === this.newest_) {\n      return entry.value_;\n    } else if (entry === this.oldest_) {\n      this.oldest_ =\n      /** @type {Entry} */\n      this.oldest_.newer;\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  };\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n\n\n  LRUCache.prototype.remove = function (key) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n\n    if (entry === this.newest_) {\n      this.newest_ =\n      /** @type {Entry} */\n      entry.older;\n\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ =\n      /** @type {Entry} */\n      entry.newer;\n\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  };\n  /**\n   * @return {number} Count.\n   */\n\n\n  LRUCache.prototype.getCount = function () {\n    return this.count_;\n  };\n  /**\n   * @return {Array<string>} Keys.\n   */\n\n\n  LRUCache.prototype.getKeys = function () {\n    var keys = new Array(this.count_);\n    var i = 0;\n    var entry;\n\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n\n    return keys;\n  };\n  /**\n   * @return {Array<T>} Values.\n   */\n\n\n  LRUCache.prototype.getValues = function () {\n    var values = new Array(this.count_);\n    var i = 0;\n    var entry;\n\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n\n    return values;\n  };\n  /**\n   * @return {T} Last value.\n   */\n\n\n  LRUCache.prototype.peekLast = function () {\n    return this.oldest_.value_;\n  };\n  /**\n   * @return {string} Last key.\n   */\n\n\n  LRUCache.prototype.peekLastKey = function () {\n    return this.oldest_.key_;\n  };\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n\n\n  LRUCache.prototype.peekFirstKey = function () {\n    return this.newest_.key_;\n  };\n  /**\n   * @return {T} value Value.\n   */\n\n\n  LRUCache.prototype.pop = function () {\n    var entry = this.oldest_;\n    delete this.entries_[entry.key_];\n\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n\n    this.oldest_ =\n    /** @type {Entry} */\n    entry.newer;\n\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n\n    --this.count_;\n    return entry.value_;\n  };\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n\n\n  LRUCache.prototype.replace = function (key, value) {\n    this.get(key); // update `newest_`\n\n    this.entries_[key].value_ = value;\n  };\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n\n\n  LRUCache.prototype.set = function (key, value) {\n    assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already\n\n    var entry = {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value\n    };\n\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  };\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n\n\n  LRUCache.prototype.setSize = function (size) {\n    this.highWaterMark = size;\n  };\n\n  return LRUCache;\n}();\n\nexport default LRUCache;","map":{"version":3,"mappings":"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","names":["assert","opt_highWaterMark","highWaterMark","undefined","count_","entries_","oldest_","newest_","LRUCache","getCount","keep","canExpireCache","pop","key","hasOwnProperty","f","entry","value_","key_","newer","opt_options","older","keys","Array","i","values","value","get","size"],"sourceRoot":"","sources":["../src/structs/LRUCache.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}