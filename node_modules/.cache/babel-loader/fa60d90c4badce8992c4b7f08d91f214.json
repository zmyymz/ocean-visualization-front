{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\n\n/**\n * @module ol/source/VectorTile\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport EventType from '../events/EventType.js';\nimport Tile from '../VectorTile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport VectorRenderTile from '../VectorRenderTile.js';\nimport { buffer as bufferExtent, getIntersection, intersects } from '../extent.js';\nimport { createForProjection, createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { fromKey, getCacheKeyForTileKey, getKeyZXY } from '../tilecoord.js';\nimport { isEmpty } from '../obj.js';\nimport { loadFeaturesXhr } from '../featureloader.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least twice the number of tiles in the viewport.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {import(\"../format/Feature.js\").default} [format] Feature format for tiles. Used and required by the default.\n * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this\n * to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection of the tile grid.\n * @property {import(\"./State.js\").default} [state] Source state.\n * @property {typeof import(\"../VectorTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/VectorTile~VectorTile}.\n * @property {number} [maxZoom=22] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number|import(\"../size.js\").Size} [tileSize=512] Optional tile size. Not used if `tileGrid` is provided.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction]\n * Optional function to load a tile given a URL. Could look like this for pbf tiles:\n * ```js\n * function(tile, url) {\n *   tile.setLoader(function(extent, resolution, projection) {\n *     fetch(url).then(function(response) {\n *       response.arrayBuffer().then(function(data) {\n *         const format = tile.getFormat() // ol/format/MVT configured as source format\n *         const features = format.readFeatures(data, {\n *           extent: extent,\n *           featureProjection: projection\n *         });\n *         tile.setFeatures(features);\n *       });\n *     });\n *   });\n * }\n * ```\n * If you do not need extent, resolution and projection to get the features for a tile (e.g.\n * for GeoJSON tiles), your `tileLoadFunction` does not need a `setLoader()` call. Only make sure\n * to call `setFeatures()` on the tile:\n * ```js\n * const format = new GeoJSON({featureProjection: map.getView().getProjection()});\n * async function tileLoadFunction(tile, url) {\n *   const response = await fetch(url);\n *   const data = await response.json();\n *   tile.setFeatures(format.readFeatures(data));\n * }\n * ```\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {number} [transition] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When set to `true`, tiles will be wrapped horizontally to\n * render multiple worlds.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=1]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Class for layer sources providing vector data divided into a tile grid, to be\n * used with {@link module:ol/layer/VectorTile~VectorTileLayer}. Although this source receives tiles\n * with vector features from the server, it is not meant for feature editing.\n * Features are optimized for rendering, their geometries are clipped at or near\n * tile boundaries and simplified for a view resolution. See\n * {@link module:ol/source/Vector~VectorSource} for vector sources that are suitable for feature\n * editing.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\n\nvar VectorTile =\n/** @class */\nfunction (_super) {\n  __extends(VectorTile, _super);\n  /**\n   * @param {!Options} options Vector tile options.\n   */\n\n\n  function VectorTile(options) {\n    var _this = this;\n\n    var projection = options.projection || 'EPSG:3857';\n    var extent = options.extent || extentFromProjection(projection);\n    var tileGrid = options.tileGrid || createXYZ({\n      extent: extent,\n      maxResolution: options.maxResolution,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 22,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize || 512\n    });\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      interpolate: true,\n      opaque: false,\n      projection: projection,\n      state: options.state,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultLoadFunction,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX === undefined ? true : options.wrapX,\n      transition: options.transition,\n      zDirection: options.zDirection === undefined ? 1 : options.zDirection\n    }) || this;\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|null}\n     */\n\n    _this.format_ = options.format ? options.format : null;\n    /**\n     * @private\n     * @type {TileCache}\n     */\n\n    _this.sourceTileCache = new TileCache(_this.tileCache.highWaterMark);\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;\n    /**\n     * @protected\n     * @type {typeof import(\"../VectorTile.js\").default}\n     */\n\n    _this.tileClass = options.tileClass ? options.tileClass : Tile;\n    /**\n     * @private\n     * @type {Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n\n    _this.tileGrids_ = {};\n    return _this;\n  }\n  /**\n   * Get features whose bounding box intersects the provided extent. Only features for cached\n   * tiles for the last rendered zoom level are available in the source. So this method is only\n   * suitable for requesting tiles for extents that are currently rendered.\n   *\n   * Features are returned in random tile order and as they are included in the tiles. This means\n   * they can be clipped, duplicated across tiles, and simplified to the render resolution.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   * @api\n   */\n\n\n  VectorTile.prototype.getFeaturesInExtent = function (extent) {\n    var features = [];\n    var tileCache = this.tileCache;\n\n    if (tileCache.getCount() === 0) {\n      return features;\n    }\n\n    var z = fromKey(tileCache.peekFirstKey())[0];\n    var tileGrid = this.tileGrid;\n    tileCache.forEach(function (tile) {\n      if (tile.tileCoord[0] !== z || tile.getState() !== TileState.LOADED) {\n        return;\n      }\n\n      var sourceTiles = tile.getSourceTiles();\n\n      for (var i = 0, ii = sourceTiles.length; i < ii; ++i) {\n        var sourceTile = sourceTiles[i];\n        var tileCoord = sourceTile.tileCoord;\n\n        if (intersects(extent, tileGrid.getTileCoordExtent(tileCoord))) {\n          var tileFeatures = sourceTile.getFeatures();\n\n          if (tileFeatures) {\n            for (var j = 0, jj = tileFeatures.length; j < jj; ++j) {\n              var candidate = tileFeatures[j];\n              var geometry = candidate.getGeometry();\n\n              if (intersects(extent, geometry.getExtent())) {\n                features.push(candidate);\n              }\n            }\n          }\n        }\n      }\n    });\n    return features;\n  };\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n\n\n  VectorTile.prototype.getOverlaps = function () {\n    return this.overlaps_;\n  };\n  /**\n   * clear {@link module:ol/TileCache~TileCache} and delete all source tiles\n   * @api\n   */\n\n\n  VectorTile.prototype.clear = function () {\n    this.tileCache.clear();\n    this.sourceTileCache.clear();\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n\n\n  VectorTile.prototype.expireCache = function (projection, usedTiles) {\n    var tileCache = this.getTileCacheForProjection(projection);\n    var usedSourceTiles = Object.keys(usedTiles).reduce(function (acc, key) {\n      var cacheKey = getCacheKeyForTileKey(key);\n\n      if (tileCache.containsKey(cacheKey)) {\n        var sourceTiles = tileCache.get(cacheKey).sourceTiles;\n\n        for (var i = 0, ii = sourceTiles.length; i < ii; ++i) {\n          acc[sourceTiles[i].getKey()] = true;\n        }\n      }\n\n      return acc;\n    }, {});\n\n    _super.prototype.expireCache.call(this, projection, usedTiles);\n\n    this.sourceTileCache.expireCache(usedSourceTiles);\n  };\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection\").default} projection Projection.\n   * @param {VectorRenderTile} tile Vector image tile.\n   * @return {Array<import(\"../VectorTile\").default>} Tile keys.\n   */\n\n\n  VectorTile.prototype.getSourceTiles = function (pixelRatio, projection, tile) {\n    var _this = this;\n\n    if (tile.getState() === TileState.IDLE) {\n      tile.setState(TileState.LOADING);\n      var urlTileCoord = tile.wrappedTileCoord;\n      var tileGrid = this.getTileGridForProjection(projection);\n      var extent = tileGrid.getTileCoordExtent(urlTileCoord);\n      var z = urlTileCoord[0];\n      var resolution = tileGrid.getResolution(z); // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n\n      bufferExtent(extent, -resolution, extent);\n      var sourceTileGrid_1 = this.tileGrid;\n      var sourceExtent = sourceTileGrid_1.getExtent();\n\n      if (sourceExtent) {\n        getIntersection(extent, sourceExtent, extent);\n      }\n\n      var sourceZ = sourceTileGrid_1.getZForResolution(resolution, 1);\n      sourceTileGrid_1.forEachTileCoord(extent, sourceZ, function (sourceTileCoord) {\n        var tileUrl = _this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);\n\n        var sourceTile = _this.sourceTileCache.containsKey(tileUrl) ? _this.sourceTileCache.get(tileUrl) : new _this.tileClass(sourceTileCoord, tileUrl ? TileState.IDLE : TileState.EMPTY, tileUrl, _this.format_, _this.tileLoadFunction);\n        tile.sourceTiles.push(sourceTile);\n        var sourceTileState = sourceTile.getState();\n\n        if (sourceTileState < TileState.LOADED) {\n          var listenChange_1 = function listenChange_1(event) {\n            _this.handleTileChange(event);\n\n            var state = sourceTile.getState();\n\n            if (state === TileState.LOADED || state === TileState.ERROR) {\n              var sourceTileKey = sourceTile.getKey();\n\n              if (sourceTileKey in tile.errorTileKeys) {\n                if (sourceTile.getState() === TileState.LOADED) {\n                  delete tile.errorTileKeys[sourceTileKey];\n                }\n              } else {\n                tile.loadingSourceTiles--;\n              }\n\n              if (state === TileState.ERROR) {\n                tile.errorTileKeys[sourceTileKey] = true;\n              } else {\n                sourceTile.removeEventListener(EventType.CHANGE, listenChange_1);\n              }\n\n              if (tile.loadingSourceTiles === 0) {\n                tile.setState(isEmpty(tile.errorTileKeys) ? TileState.LOADED : TileState.ERROR);\n              }\n            }\n          };\n\n          sourceTile.addEventListener(EventType.CHANGE, listenChange_1);\n          tile.loadingSourceTiles++;\n        }\n\n        if (sourceTileState === TileState.IDLE) {\n          sourceTile.extent = sourceTileGrid_1.getTileCoordExtent(sourceTileCoord);\n          sourceTile.projection = projection;\n          sourceTile.resolution = sourceTileGrid_1.getResolution(sourceTileCoord[0]);\n\n          _this.sourceTileCache.set(tileUrl, sourceTile);\n\n          sourceTile.load();\n        }\n      });\n\n      if (!tile.loadingSourceTiles) {\n        tile.setState(tile.sourceTiles.some(function (sourceTile) {\n          return sourceTile.getState() === TileState.ERROR;\n        }) ? TileState.ERROR : TileState.LOADED);\n      }\n    }\n\n    return tile.sourceTiles;\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!VectorRenderTile} Tile.\n   */\n\n\n  VectorTile.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n    var coordKey = getKeyZXY(z, x, y);\n    var key = this.getKey();\n    var tile;\n\n    if (this.tileCache.containsKey(coordKey)) {\n      tile = this.tileCache.get(coordKey);\n\n      if (tile.key === key) {\n        return tile;\n      }\n    }\n\n    var tileCoord = [z, x, y];\n    var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    var sourceExtent = this.getTileGrid().getExtent();\n    var tileGrid = this.getTileGridForProjection(projection);\n\n    if (urlTileCoord && sourceExtent) {\n      var tileExtent = tileGrid.getTileCoordExtent(urlTileCoord); // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n\n      bufferExtent(tileExtent, -tileGrid.getResolution(z), tileExtent);\n\n      if (!intersects(sourceExtent, tileExtent)) {\n        urlTileCoord = null;\n      }\n    }\n\n    var empty = true;\n\n    if (urlTileCoord !== null) {\n      var sourceTileGrid = this.tileGrid;\n      var resolution = tileGrid.getResolution(z);\n      var sourceZ = sourceTileGrid.getZForResolution(resolution, 1); // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n\n      var extent = tileGrid.getTileCoordExtent(urlTileCoord);\n      bufferExtent(extent, -resolution, extent);\n      sourceTileGrid.forEachTileCoord(extent, sourceZ, function (sourceTileCoord) {\n        empty = empty && !this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);\n      }.bind(this));\n    }\n\n    var newTile = new VectorRenderTile(tileCoord, empty ? TileState.EMPTY : TileState.IDLE, urlTileCoord, this.getSourceTiles.bind(this, pixelRatio, projection));\n    newTile.key = key;\n\n    if (tile) {\n      newTile.interimTile = tile;\n      newTile.refreshInterimChain();\n      this.tileCache.replace(coordKey, newTile);\n    } else {\n      this.tileCache.set(coordKey, newTile);\n    }\n\n    return newTile;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n\n\n  VectorTile.prototype.getTileGridForProjection = function (projection) {\n    var code = projection.getCode();\n    var tileGrid = this.tileGrids_[code];\n\n    if (!tileGrid) {\n      // A tile grid that matches the tile size of the source tile grid is more\n      // likely to have 1:1 relationships between source tiles and rendered tiles.\n      var sourceTileGrid = this.tileGrid;\n      tileGrid = createForProjection(projection, undefined, sourceTileGrid ? sourceTileGrid.getTileSize(sourceTileGrid.getMinZoom()) : undefined);\n      this.tileGrids_[code] = tileGrid;\n    }\n\n    return tileGrid;\n  };\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n\n\n  VectorTile.prototype.getTilePixelRatio = function (pixelRatio) {\n    return pixelRatio;\n  };\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n\n\n  VectorTile.prototype.getTilePixelSize = function (z, pixelRatio, projection) {\n    var tileGrid = this.getTileGridForProjection(projection);\n    var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    return [Math.round(tileSize[0] * pixelRatio), Math.round(tileSize[1] * pixelRatio)];\n  };\n  /**\n   * Increases the cache size if needed\n   * @param {number} tileCount Minimum number of tiles needed.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n\n\n  VectorTile.prototype.updateCacheSize = function (tileCount, projection) {\n    _super.prototype.updateCacheSize.call(this, tileCount * 2, projection);\n\n    this.sourceTileCache.highWaterMark = this.getTileCacheForProjection(projection).highWaterMark;\n  };\n\n  return VectorTile;\n}(UrlTile);\n\nexport default VectorTile;\n/**\n * Sets the loader for a tile.\n * @param {import(\"../VectorTile.js\").default} tile Vector tile.\n * @param {string} url URL.\n */\n\nexport function defaultLoadFunction(tile, url) {\n  tile.setLoader(\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  function (extent, resolution, projection) {\n    loadFeaturesXhr(url, tile.getFormat(), extent, resolution, projection, tile.onLoad.bind(tile), tile.onError.bind(tile));\n  });\n}","map":{"version":3,"mappings":"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","names":["EventType","Tile","TileCache","TileState","UrlTile","VectorRenderTile","buffer","bufferExtent","getIntersection","intersects","createForProjection","createXYZ","extentFromProjection","fromKey","getCacheKeyForTileKey","getKeyZXY","isEmpty","loadFeaturesXhr","toSize","__extends","options","projection","extent","tileGrid","maxResolution","maxZoom","undefined","minZoom","tileSize","_super","attributions","attributionsCollapsible","cacheSize","interpolate","opaque","state","tileLoadFunction","defaultLoadFunction","tileUrlFunction","url","urls","wrapX","transition","zDirection","_this","format_","format","sourceTileCache","tileCache","highWaterMark","overlaps_","overlaps","tileClass","tileGrids_","VectorTile","features","getCount","z","peekFirstKey","forEach","tile","tileCoord","getState","LOADED","sourceTiles","getSourceTiles","i","ii","length","sourceTile","getTileCoordExtent","tileFeatures","getFeatures","j","jj","candidate","geometry","getGeometry","getExtent","push","clear","usedTiles","getTileCacheForProjection","usedSourceTiles","Object","keys","reduce","acc","key","cacheKey","containsKey","get","getKey","expireCache","call","pixelRatio","IDLE","setState","LOADING","urlTileCoord","wrappedTileCoord","getTileGridForProjection","resolution","getResolution","sourceTileGrid_1","sourceExtent","sourceZ","getZForResolution","forEachTileCoord","sourceTileCoord","tileUrl","EMPTY","sourceTileState","listenChange_1","event","handleTileChange","ERROR","sourceTileKey","errorTileKeys","loadingSourceTiles","removeEventListener","CHANGE","addEventListener","set","load","some","x","y","coordKey","getTileCoordForTileUrlFunction","getTileGrid","tileExtent","empty","sourceTileGrid","bind","newTile","interimTile","refreshInterimChain","replace","code","getCode","getTileSize","getMinZoom","tmpSize","Math","round","tileCount","updateCacheSize","setLoader","getFormat","onLoad","onError"],"sourceRoot":"","sources":["../src/source/VectorTile.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}