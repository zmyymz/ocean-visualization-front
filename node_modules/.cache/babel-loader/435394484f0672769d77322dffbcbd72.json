{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { getFloat16 } from '@petamoriken/float16';\nexport default class DataView64 {\n  constructor(arrayBuffer) {\n    this._dataView = new DataView(arrayBuffer);\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  getUint64(offset, littleEndian) {\n    const left = this.getUint32(offset, littleEndian);\n    const right = this.getUint32(offset + 4, littleEndian);\n    let combined;\n\n    if (littleEndian) {\n      combined = left + 2 ** 32 * right;\n\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(`${combined} exceeds MAX_SAFE_INTEGER. ` + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues');\n      }\n\n      return combined;\n    }\n\n    combined = 2 ** 32 * left + right;\n\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(`${combined} exceeds MAX_SAFE_INTEGER. ` + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues');\n    }\n\n    return combined;\n  } // adapted from https://stackoverflow.com/a/55338384/8060591\n\n\n  getInt64(offset, littleEndian) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (littleEndian ? 7 : 0)) & 0x80) > 0;\n    let carrying = true;\n\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(offset + (littleEndian ? i : 7 - i));\n\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n\n      value += byte * 256 ** i;\n    }\n\n    if (isNegative) {\n      value = -value;\n    }\n\n    return value;\n  }\n\n  getUint8(offset, littleEndian) {\n    return this._dataView.getUint8(offset, littleEndian);\n  }\n\n  getInt8(offset, littleEndian) {\n    return this._dataView.getInt8(offset, littleEndian);\n  }\n\n  getUint16(offset, littleEndian) {\n    return this._dataView.getUint16(offset, littleEndian);\n  }\n\n  getInt16(offset, littleEndian) {\n    return this._dataView.getInt16(offset, littleEndian);\n  }\n\n  getUint32(offset, littleEndian) {\n    return this._dataView.getUint32(offset, littleEndian);\n  }\n\n  getInt32(offset, littleEndian) {\n    return this._dataView.getInt32(offset, littleEndian);\n  }\n\n  getFloat16(offset, littleEndian) {\n    return getFloat16(this._dataView, offset, littleEndian);\n  }\n\n  getFloat32(offset, littleEndian) {\n    return this._dataView.getFloat32(offset, littleEndian);\n  }\n\n  getFloat64(offset, littleEndian) {\n    return this._dataView.getFloat64(offset, littleEndian);\n  }\n\n}","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/geotiff/dist-module/dataview64.js"],"names":["getFloat16","DataView64","constructor","arrayBuffer","_dataView","DataView","buffer","getUint64","offset","littleEndian","left","getUint32","right","combined","Number","isSafeInteger","Error","getInt64","value","isNegative","getUint8","carrying","i","byte","getInt8","getUint16","getInt16","getInt32","getFloat32","getFloat64"],"mappings":"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","sourcesContent":["import { getFloat16 } from '@petamoriken/float16';\n\nexport default class DataView64 {\n  constructor(arrayBuffer) {\n    this._dataView = new DataView(arrayBuffer);\n  }\n\n  get buffer() {\n    return this._dataView.buffer;\n  }\n\n  getUint64(offset, littleEndian) {\n    const left = this.getUint32(offset, littleEndian);\n    const right = this.getUint32(offset + 4, littleEndian);\n    let combined;\n    if (littleEndian) {\n      combined = left + ((2 ** 32) * right);\n      if (!Number.isSafeInteger(combined)) {\n        throw new Error(\n          `${combined} exceeds MAX_SAFE_INTEGER. `\n          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n        );\n      }\n      return combined;\n    }\n    combined = ((2 ** 32) * left) + right;\n    if (!Number.isSafeInteger(combined)) {\n      throw new Error(\n        `${combined} exceeds MAX_SAFE_INTEGER. `\n        + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\n      );\n    }\n\n    return combined;\n  }\n\n  // adapted from https://stackoverflow.com/a/55338384/8060591\n  getInt64(offset, littleEndian) {\n    let value = 0;\n    const isNegative = (this._dataView.getUint8(offset + (littleEndian ? 7 : 0)) & 0x80) > 0;\n    let carrying = true;\n    for (let i = 0; i < 8; i++) {\n      let byte = this._dataView.getUint8(offset + (littleEndian ? i : 7 - i));\n      if (isNegative) {\n        if (carrying) {\n          if (byte !== 0x00) {\n            byte = ~(byte - 1) & 0xff;\n            carrying = false;\n          }\n        } else {\n          byte = ~byte & 0xff;\n        }\n      }\n      value += byte * (256 ** i);\n    }\n    if (isNegative) {\n      value = -value;\n    }\n    return value;\n  }\n\n  getUint8(offset, littleEndian) {\n    return this._dataView.getUint8(offset, littleEndian);\n  }\n\n  getInt8(offset, littleEndian) {\n    return this._dataView.getInt8(offset, littleEndian);\n  }\n\n  getUint16(offset, littleEndian) {\n    return this._dataView.getUint16(offset, littleEndian);\n  }\n\n  getInt16(offset, littleEndian) {\n    return this._dataView.getInt16(offset, littleEndian);\n  }\n\n  getUint32(offset, littleEndian) {\n    return this._dataView.getUint32(offset, littleEndian);\n  }\n\n  getInt32(offset, littleEndian) {\n    return this._dataView.getInt32(offset, littleEndian);\n  }\n\n  getFloat16(offset, littleEndian) {\n    return getFloat16(this._dataView, offset, littleEndian);\n  }\n\n  getFloat32(offset, littleEndian) {\n    return this._dataView.getFloat32(offset, littleEndian);\n  }\n\n  getFloat64(offset, littleEndian) {\n    return this._dataView.getFloat64(offset, littleEndian);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}