{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/proj/epsg3857\n */\n\n\nimport Projection from './Projection.js';\nimport Units from './Units.js';\nimport { cosh } from '../math.js';\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\n\nexport var RADIUS = 6378137;\n/**\n * @const\n * @type {number}\n */\n\nexport var HALF_SIZE = Math.PI * RADIUS;\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\n\nexport var EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\n\nexport var WORLD_EXTENT = [-180, -85, 180, 85];\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\n\nexport var MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\n\nvar EPSG3857Projection =\n/** @class */\nfunction (_super) {\n  __extends(EPSG3857Projection, _super);\n  /**\n   * @param {string} code Code.\n   */\n\n\n  function EPSG3857Projection(code) {\n    return _super.call(this, {\n      code: code,\n      units: Units.METERS,\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function (resolution, point) {\n        return resolution / cosh(point[1] / RADIUS);\n      }\n    }) || this;\n  }\n\n  return EPSG3857Projection;\n}(Projection);\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\n\n\nexport var PROJECTIONS = [new EPSG3857Projection('EPSG:3857'), new EPSG3857Projection('EPSG:102100'), new EPSG3857Projection('EPSG:102113'), new EPSG3857Projection('EPSG:900913'), new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'), new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')];\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\n\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = HALF_SIZE * input[i] / 180;\n    var y = RADIUS * Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));\n\n    if (y > MAX_SAFE_Y) {\n      y = MAX_SAFE_Y;\n    } else if (y < -MAX_SAFE_Y) {\n      y = -MAX_SAFE_Y;\n    }\n\n    output[i + 1] = y;\n  }\n\n  return output;\n}\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\n\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;\n  }\n\n  return output;\n}","map":{"version":3,"mappings":"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","names":["Projection","Units","cosh","RADIUS","HALF_SIZE","Math","PI","EXTENT","WORLD_EXTENT","MAX_SAFE_Y","log","tan","__extends","code","_super","units","METERS","extent","global","worldExtent","getPointResolution","resolution","point","PROJECTIONS","EPSG3857Projection","fromEPSG4326","input","opt_output","opt_dimension","length","dimension","output","undefined","slice","Array","i","y","toEPSG4326","atan","exp"],"sourceRoot":"","sources":["../src/proj/epsg3857.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}