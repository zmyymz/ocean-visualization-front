{"ast":null,"code":"/**\n * @module ol/geom/flat/interiorpoint\n */\nimport { linearRingsContainsXY } from './contains.js';\nimport { numberSafeCompareFunction } from '../../array.js';\n/**\n * Calculates a point that is likely to lie in the interior of the linear rings.\n * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @param {number} flatCentersOffset Flat center offset.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Destination point as XYM coordinate, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\n\nexport function getInteriorPointOfArray(flatCoordinates, offset, ends, stride, flatCenters, flatCentersOffset, opt_dest) {\n  var i, ii, x, x1, x2, y1, y2;\n  var y = flatCenters[flatCentersOffset + 1];\n  /** @type {Array<number>} */\n\n  var intersections = []; // Calculate intersections with the horizontal line\n\n  for (var r = 0, rr = ends.length; r < rr; ++r) {\n    var end = ends[r];\n    x1 = flatCoordinates[end - stride];\n    y1 = flatCoordinates[end - stride + 1];\n\n    for (i = offset; i < end; i += stride) {\n      x2 = flatCoordinates[i];\n      y2 = flatCoordinates[i + 1];\n\n      if (y <= y1 && y2 <= y || y1 <= y && y <= y2) {\n        x = (y - y1) / (y2 - y1) * (x2 - x1) + x1;\n        intersections.push(x);\n      }\n\n      x1 = x2;\n      y1 = y2;\n    }\n  } // Find the longest segment of the horizontal line that has its center point\n  // inside the linear ring.\n\n\n  var pointX = NaN;\n  var maxSegmentLength = -Infinity;\n  intersections.sort(numberSafeCompareFunction);\n  x1 = intersections[0];\n\n  for (i = 1, ii = intersections.length; i < ii; ++i) {\n    x2 = intersections[i];\n    var segmentLength = Math.abs(x2 - x1);\n\n    if (segmentLength > maxSegmentLength) {\n      x = (x1 + x2) / 2;\n\n      if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n        pointX = x;\n        maxSegmentLength = segmentLength;\n      }\n    }\n\n    x1 = x2;\n  }\n\n  if (isNaN(pointX)) {\n    // There is no horizontal line that has its center point inside the linear\n    // ring.  Use the center of the the linear ring's extent.\n    pointX = flatCenters[flatCentersOffset];\n  }\n\n  if (opt_dest) {\n    opt_dest.push(pointX, y, maxSegmentLength);\n    return opt_dest;\n  } else {\n    return [pointX, y, maxSegmentLength];\n  }\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @return {Array<number>} Interior points as XYM coordinates, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\n\nexport function getInteriorPointsOfMultiArray(flatCoordinates, offset, endss, stride, flatCenters) {\n  var interiorPoints = [];\n\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    interiorPoints = getInteriorPointOfArray(flatCoordinates, offset, ends, stride, flatCenters, 2 * i, interiorPoints);\n    offset = ends[ends.length - 1];\n  }\n\n  return interiorPoints;\n}","map":{"version":3,"mappings":"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","names":["linearRingsContainsXY","numberSafeCompareFunction","getInteriorPointOfArray","flatCoordinates","offset","ends","stride","flatCenters","flatCentersOffset","opt_dest","i","ii","x","x1","x2","y1","y2","y","intersections","r","rr","length","end","push","pointX","NaN","maxSegmentLength","Infinity","sort","segmentLength","Math","abs","isNaN","getInteriorPointsOfMultiArray","endss","interiorPoints"],"sourceRoot":"","sources":["../../src/geom/flat/interiorpoint.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}