{"ast":null,"code":"import _typeof from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.concat.js\";\n\n/**\n * @module ol/style/Style\n */\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Stroke from './Stroke.js';\nimport { assert } from '../asserts.js';\n/**\n * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\n * vector layer can be styled. If the function returns `undefined`, the\n * feature will not be rendered.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\n */\n\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n\n/**\n * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>),import(\"../render.js\").State): void}\n * RenderFunction\n */\n\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\n * in hit detection rendering.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n *\n * ## Feature styles\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style';\n *\n *  const fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)',\n *  });\n *  const stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25,\n *  });\n *  const styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5,\n *      }),\n *      fill: fill,\n *      stroke: stroke,\n *    }),\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import GeometryType from 'ol/geom/GeometryType';\n *  import {Circle, Fill, Stroke, Style} from 'ol/style';\n *\n *  const styles = {};\n *  const white = [255, 255, 255, 1];\n *  const blue = [0, 153, 255, 1];\n *  const width = 3;\n *  styles[GeometryType.POLYGON] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5],\n *      }),\n *    }),\n *  ];\n *  styles[GeometryType.MULTI_POLYGON] = styles[GeometryType.POLYGON];\n *\n *  styles[GeometryType.LINE_STRING] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2,\n *      }),\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width,\n *      }),\n *    }),\n *  ];\n *  styles[GeometryType.MULTI_LINE_STRING] = styles[GeometryType.LINE_STRING];\n *\n *  styles[GeometryType.CIRCLE] = styles[GeometryType.POLYGON].concat(\n *    styles[GeometryType.LINE_STRING]\n *  );\n *\n *  styles[GeometryType.POINT] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue,\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2,\n *        }),\n *      }),\n *      zIndex: Infinity,\n *    }),\n *  ];\n *  styles[GeometryType.MULTI_POINT] = styles[GeometryType.POINT];\n *\n *  styles[GeometryType.GEOMETRY_COLLECTION] = styles[\n *    GeometryType.POLYGON\n *  ].concat(styles[GeometryType.LINE_STRING], styles[GeometryType.POINT]);\n * ```\n *\n * @api\n */\n\nvar Style =\n/** @class */\nfunction () {\n  /**\n   * @param {Options} [opt_options] Style options.\n   */\n  function Style(opt_options) {\n    var options = opt_options || {};\n    /**\n     * @private\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n     */\n\n    this.geometry_ = null;\n    /**\n     * @private\n     * @type {!GeometryFunction}\n     */\n\n    this.geometryFunction_ = defaultGeometryFunction;\n\n    if (options.geometry !== undefined) {\n      this.setGeometry(options.geometry);\n    }\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n\n\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n    /**\n     * @private\n     * @type {import(\"./Image.js\").default}\n     */\n\n    this.image_ = options.image !== undefined ? options.image : null;\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n\n    this.hitDetectionRenderer_ = options.hitDetectionRenderer !== undefined ? options.hitDetectionRenderer : null;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {import(\"./Text.js\").default}\n     */\n\n    this.text_ = options.text !== undefined ? options.text : null;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.zIndex_ = options.zIndex;\n  }\n  /**\n   * Clones the style.\n   * @return {Style} The cloned style.\n   * @api\n   */\n\n\n  Style.prototype.clone = function () {\n    var geometry = this.getGeometry();\n\n    if (geometry && _typeof(geometry) === 'object') {\n      geometry =\n      /** @type {import(\"../geom/Geometry.js\").default} */\n      geometry.clone();\n    }\n\n    return new Style({\n      geometry: geometry,\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      image: this.getImage() ? this.getImage().clone() : undefined,\n      renderer: this.getRenderer(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      text: this.getText() ? this.getText().clone() : undefined,\n      zIndex: this.getZIndex()\n    });\n  };\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setRenderer} or the `renderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n\n\n  Style.prototype.getRenderer = function () {\n    return this.renderer_;\n  };\n  /**\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n   * and `image` options of the style will be ignored.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n\n\n  Style.prototype.setRenderer = function (renderer) {\n    this.renderer_ = renderer;\n  };\n  /**\n   * Sets a custom renderer function for this style used\n   * in hit detection.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n\n\n  Style.prototype.setHitDetectionRenderer = function (renderer) {\n    this.hitDetectionRenderer_ = renderer;\n  };\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n\n\n  Style.prototype.getHitDetectionRenderer = function () {\n    return this.hitDetectionRenderer_;\n  };\n  /**\n   * Get the geometry to be rendered.\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n   * Feature property or geometry or function that returns the geometry that will\n   * be rendered with this style.\n   * @api\n   */\n\n\n  Style.prototype.getGeometry = function () {\n    return this.geometry_;\n  };\n  /**\n   * Get the function used to generate a geometry for rendering.\n   * @return {!GeometryFunction} Function that is called with a feature\n   * and returns the geometry to render instead of the feature's geometry.\n   * @api\n   */\n\n\n  Style.prototype.getGeometryFunction = function () {\n    return this.geometryFunction_;\n  };\n  /**\n   * Get the fill style.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n\n\n  Style.prototype.getFill = function () {\n    return this.fill_;\n  };\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n\n\n  Style.prototype.setFill = function (fill) {\n    this.fill_ = fill;\n  };\n  /**\n   * Get the image style.\n   * @return {import(\"./Image.js\").default} Image style.\n   * @api\n   */\n\n\n  Style.prototype.getImage = function () {\n    return this.image_;\n  };\n  /**\n   * Set the image style.\n   * @param {import(\"./Image.js\").default} image Image style.\n   * @api\n   */\n\n\n  Style.prototype.setImage = function (image) {\n    this.image_ = image;\n  };\n  /**\n   * Get the stroke style.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n\n\n  Style.prototype.getStroke = function () {\n    return this.stroke_;\n  };\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n\n\n  Style.prototype.setStroke = function (stroke) {\n    this.stroke_ = stroke;\n  };\n  /**\n   * Get the text style.\n   * @return {import(\"./Text.js\").default} Text style.\n   * @api\n   */\n\n\n  Style.prototype.getText = function () {\n    return this.text_;\n  };\n  /**\n   * Set the text style.\n   * @param {import(\"./Text.js\").default} text Text style.\n   * @api\n   */\n\n\n  Style.prototype.setText = function (text) {\n    this.text_ = text;\n  };\n  /**\n   * Get the z-index for the style.\n   * @return {number|undefined} ZIndex.\n   * @api\n   */\n\n\n  Style.prototype.getZIndex = function () {\n    return this.zIndex_;\n  };\n  /**\n   * Set a geometry that is rendered instead of the feature's geometry.\n   *\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n   *     Feature property or geometry or function returning a geometry to render\n   *     for this style.\n   * @api\n   */\n\n\n  Style.prototype.setGeometry = function (geometry) {\n    if (typeof geometry === 'function') {\n      this.geometryFunction_ = geometry;\n    } else if (typeof geometry === 'string') {\n      this.geometryFunction_ = function (feature) {\n        return (\n          /** @type {import(\"../geom/Geometry.js\").default} */\n          feature.get(geometry)\n        );\n      };\n    } else if (!geometry) {\n      this.geometryFunction_ = defaultGeometryFunction;\n    } else if (geometry !== undefined) {\n      this.geometryFunction_ = function () {\n        return (\n          /** @type {import(\"../geom/Geometry.js\").default} */\n          geometry\n        );\n      };\n    }\n\n    this.geometry_ = geometry;\n  };\n  /**\n   * Set the z-index.\n   *\n   * @param {number|undefined} zIndex ZIndex.\n   * @api\n   */\n\n\n  Style.prototype.setZIndex = function (zIndex) {\n    this.zIndex_ = zIndex;\n  };\n\n  return Style;\n}();\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\n\n\nexport function toFunction(obj) {\n  var styleFunction;\n\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array<Style>}\n     */\n    var styles_1;\n\n    if (Array.isArray(obj)) {\n      styles_1 = obj;\n    } else {\n      assert(typeof\n      /** @type {?} */\n      obj.getZIndex === 'function', 41); // Expected an `Style` or an array of `Style`\n\n      var style =\n      /** @type {Style} */\n      obj;\n      styles_1 = [style];\n    }\n\n    styleFunction = function styleFunction() {\n      return styles_1;\n    };\n  }\n\n  return styleFunction;\n}\n/**\n * @type {Array<Style>|null}\n */\n\nvar defaultStyles = null;\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\n\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    var fill = new Fill({\n      color: 'rgba(255,255,255,0.4)'\n    });\n    var stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25\n    });\n    defaultStyles = [new Style({\n      image: new CircleStyle({\n        fill: fill,\n        stroke: stroke,\n        radius: 5\n      }),\n      fill: fill,\n      stroke: stroke\n    })];\n  }\n\n  return defaultStyles;\n}\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} Styles\n */\n\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} */\n  var styles = {};\n  var white = [255, 255, 255, 1];\n  var blue = [0, 153, 255, 1];\n  var width = 3;\n  styles[GeometryType.POLYGON] = [new Style({\n    fill: new Fill({\n      color: [255, 255, 255, 0.5]\n    })\n  })];\n  styles[GeometryType.MULTI_POLYGON] = styles[GeometryType.POLYGON];\n  styles[GeometryType.LINE_STRING] = [new Style({\n    stroke: new Stroke({\n      color: white,\n      width: width + 2\n    })\n  }), new Style({\n    stroke: new Stroke({\n      color: blue,\n      width: width\n    })\n  })];\n  styles[GeometryType.MULTI_LINE_STRING] = styles[GeometryType.LINE_STRING];\n  styles[GeometryType.CIRCLE] = styles[GeometryType.POLYGON].concat(styles[GeometryType.LINE_STRING]);\n  styles[GeometryType.POINT] = [new Style({\n    image: new CircleStyle({\n      radius: width * 2,\n      fill: new Fill({\n        color: blue\n      }),\n      stroke: new Stroke({\n        color: white,\n        width: width / 2\n      })\n    }),\n    zIndex: Infinity\n  })];\n  styles[GeometryType.MULTI_POINT] = styles[GeometryType.POINT];\n  styles[GeometryType.GEOMETRY_COLLECTION] = styles[GeometryType.POLYGON].concat(styles[GeometryType.LINE_STRING], styles[GeometryType.POINT]);\n  return styles;\n}\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\n\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\n\nexport default Style;","map":{"version":3,"mappings":"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","names":["CircleStyle","Fill","GeometryType","Stroke","assert","opt_options","options","geometry_","geometryFunction_","defaultGeometryFunction","geometry","undefined","setGeometry","fill_","fill","image_","image","renderer_","renderer","hitDetectionRenderer_","hitDetectionRenderer","stroke_","stroke","text_","text","zIndex_","zIndex","Style","getGeometry","clone","getFill","getImage","getRenderer","getStroke","getText","getZIndex","feature","get","toFunction","obj","styleFunction","styles_1","Array","isArray","style","defaultStyles","createDefaultStyle","resolution","color","width","radius","createEditingStyle","styles","white","blue","POLYGON","MULTI_POLYGON","LINE_STRING","MULTI_LINE_STRING","CIRCLE","concat","POINT","Infinity","MULTI_POINT","GEOMETRY_COLLECTION"],"sourceRoot":"","sources":["../src/style/Style.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}