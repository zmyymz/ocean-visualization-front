{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Overlay\n */\n\n\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport OverlayPositioning from './OverlayPositioning.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { containsExtent } from './extent.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { outerHeight, outerWidth, removeChildren, removeNode } from './dom.js';\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {import(\"./OverlayPositioning.js\").default} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport?\n * If `true` (deprecated), then `autoPanAnimation` and `autoPanMargin` will be\n * used to determine the panning parameters; if an object is supplied then other\n * parameters are ignored.\n * @property {PanOptions} [autoPanAnimation] The animation options used to pan\n * the overlay into view. This animation is only used when `autoPan` is enabled.\n * A `duration` and `easing` may be provided to customize the animation.\n * Deprecated and ignored if `autoPan` is supplied as an object.\n * @property {number} [autoPanMargin=20] The margin (in pixels) between the\n * overlay and the borders of the map when autopanning. Deprecated and ignored\n * if `autoPan` is supplied as an object.\n * @property {PanIntoViewOptions} [autoPanOptions] The options to use for the\n * autoPan. This is only used when `autoPan` is enabled and has preference over\n * the individual `autoPanMargin` and `autoPanOptions`.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n\n/**\n * @enum {string}\n * @protected\n */\n\nvar Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning'\n};\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     var popup = new Overlay({\n *       element: document.getElementById('popup')\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\n\nvar Overlay =\n/** @class */\nfunction (_super) {\n  __extends(Overlay, _super);\n  /**\n   * @param {Options} options Overlay options.\n   */\n\n\n  function Overlay(options) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {OverlayOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @protected\n     * @type {Options}\n     */\n\n    _this.options = options;\n    /**\n     * @protected\n     * @type {number|string|undefined}\n     */\n\n    _this.id = options.id;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n\n    _this.insertFirst = options.insertFirst !== undefined ? options.insertFirst : true;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n\n    _this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n\n    _this.element = document.createElement('div');\n    _this.element.className = options.className !== undefined ? options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    _this.element.style.position = 'absolute';\n    _this.element.style.pointerEvents = 'auto';\n    var autoPan = options.autoPan;\n\n    if (autoPan && 'object' !== typeof autoPan) {\n      autoPan = {\n        animation: options.autoPanAnimation,\n        margin: options.autoPanMargin\n      };\n    }\n    /**\n     * @protected\n     * @type {PanIntoViewOptions|false}\n     */\n\n\n    _this.autoPan =\n    /** @type {PanIntoViewOptions} */\n    autoPan || false;\n    /**\n     * @protected\n     * @type {{transform_: string,\n     *         visible: boolean}}\n     */\n\n    _this.rendered = {\n      transform_: '',\n      visible: true\n    };\n    /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n\n    _this.mapPostrenderListenerKey = null;\n\n    _this.addChangeListener(Property.ELEMENT, _this.handleElementChanged);\n\n    _this.addChangeListener(Property.MAP, _this.handleMapChanged);\n\n    _this.addChangeListener(Property.OFFSET, _this.handleOffsetChanged);\n\n    _this.addChangeListener(Property.POSITION, _this.handlePositionChanged);\n\n    _this.addChangeListener(Property.POSITIONING, _this.handlePositioningChanged);\n\n    if (options.element !== undefined) {\n      _this.setElement(options.element);\n    }\n\n    _this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n\n    _this.setPositioning(options.positioning !== undefined ?\n    /** @type {import(\"./OverlayPositioning.js\").default} */\n    options.positioning : OverlayPositioning.TOP_LEFT);\n\n    if (options.position !== undefined) {\n      _this.setPosition(options.position);\n    }\n\n    return _this;\n  }\n  /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getElement = function () {\n    return (\n      /** @type {HTMLElement|undefined} */\n      this.get(Property.ELEMENT)\n    );\n  };\n  /**\n   * Get the overlay identifier which is set on constructor.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n\n\n  Overlay.prototype.getId = function () {\n    return this.id;\n  };\n  /**\n   * Get the map associated with this overlay.\n   * @return {import(\"./PluggableMap.js\").default|null} The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getMap = function () {\n    return (\n      /** @type {import(\"./PluggableMap.js\").default|null} */\n      this.get(Property.MAP) || null\n    );\n  };\n  /**\n   * Get the offset of this overlay.\n   * @return {Array<number>} The offset.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getOffset = function () {\n    return (\n      /** @type {Array<number>} */\n      this.get(Property.OFFSET)\n    );\n  };\n  /**\n   * Get the current position of this overlay.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n   *     anchored at.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getPosition = function () {\n    return (\n      /** @type {import(\"./coordinate.js\").Coordinate|undefined} */\n      this.get(Property.POSITION)\n    );\n  };\n  /**\n   * Get the current positioning of this overlay.\n   * @return {import(\"./OverlayPositioning.js\").default} How the overlay is positioned\n   *     relative to its point on the map.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getPositioning = function () {\n    return (\n      /** @type {import(\"./OverlayPositioning.js\").default} */\n      this.get(Property.POSITIONING)\n    );\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handleElementChanged = function () {\n    removeChildren(this.element);\n    var element = this.getElement();\n\n    if (element) {\n      this.element.appendChild(element);\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handleMapChanged = function () {\n    if (this.mapPostrenderListenerKey) {\n      removeNode(this.element);\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n\n    var map = this.getMap();\n\n    if (map) {\n      this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n      this.updatePixelPosition();\n      var container = this.stopEvent ? map.getOverlayContainerStopEvent() : map.getOverlayContainer();\n\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n\n      this.performAutoPan();\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.render = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handleOffsetChanged = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handlePositionChanged = function () {\n    this.updatePixelPosition();\n    this.performAutoPan();\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handlePositioningChanged = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * Set the DOM element to be associated with this overlay.\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setElement = function (element) {\n    this.set(Property.ELEMENT, element);\n  };\n  /**\n   * Set the map to be associated with this overlay.\n   * @param {import(\"./PluggableMap.js\").default|null} map The map that the\n   * overlay is part of. Pass `null` to just remove the overlay from the current map.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setMap = function (map) {\n    this.set(Property.MAP, map);\n  };\n  /**\n   * Set the offset for this overlay.\n   * @param {Array<number>} offset Offset.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setOffset = function (offset) {\n    this.set(Property.OFFSET, offset);\n  };\n  /**\n   * Set the position for this overlay. If the position is `undefined` the\n   * overlay is hidden.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n   *     is anchored at.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setPosition = function (position) {\n    this.set(Property.POSITION, position);\n  };\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary) using the configured autoPan parameters\n   * @protected\n   */\n\n\n  Overlay.prototype.performAutoPan = function () {\n    if (this.autoPan) {\n      this.panIntoView(this.autoPan);\n    }\n  };\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary).\n   * @param {PanIntoViewOptions} [opt_panIntoViewOptions] Options for the pan action\n   * @api\n   */\n\n\n  Overlay.prototype.panIntoView = function (opt_panIntoViewOptions) {\n    var map = this.getMap();\n\n    if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n      return;\n    }\n\n    var mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    var element = this.getElement();\n    var overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);\n    var panIntoViewOptions = opt_panIntoViewOptions || {};\n    var myMargin = panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      var offsetLeft = overlayRect[0] - mapRect[0];\n      var offsetRight = mapRect[2] - overlayRect[2];\n      var offsetTop = overlayRect[1] - mapRect[1];\n      var offsetBottom = mapRect[3] - overlayRect[3];\n      var delta = [0, 0];\n\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - myMargin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + myMargin;\n      }\n\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - myMargin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + myMargin;\n      }\n\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        var center =\n        /** @type {import(\"./coordinate.js\").Coordinate} */\n        map.getView().getCenterInternal();\n        var centerPx = map.getPixelFromCoordinateInternal(center);\n\n        if (!centerPx) {\n          return;\n        }\n\n        var newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n        var panOptions = panIntoViewOptions.animation || {};\n        map.getView().animateInternal({\n          center: map.getCoordinateFromPixelInternal(newCenterPx),\n          duration: panOptions.duration,\n          easing: panOptions.easing\n        });\n      }\n    }\n  };\n  /**\n   * Get the extent of an element relative to the document\n   * @param {HTMLElement} element The element.\n   * @param {import(\"./size.js\").Size} size The size of the element.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @protected\n   */\n\n\n  Overlay.prototype.getRect = function (element, size) {\n    var box = element.getBoundingClientRect();\n    var offsetX = box.left + window.pageXOffset;\n    var offsetY = box.top + window.pageYOffset;\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n  };\n  /**\n   * Set the positioning for this overlay.\n   * @param {import(\"./OverlayPositioning.js\").default} positioning how the overlay is\n   *     positioned relative to its point on the map.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setPositioning = function (positioning) {\n    this.set(Property.POSITIONING, positioning);\n  };\n  /**\n   * Modify the visibility of the element.\n   * @param {boolean} visible Element visibility.\n   * @protected\n   */\n\n\n  Overlay.prototype.setVisible = function (visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  };\n  /**\n   * Update pixel position.\n   * @protected\n   */\n\n\n  Overlay.prototype.updatePixelPosition = function () {\n    var map = this.getMap();\n    var position = this.getPosition();\n\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n\n    var pixel = map.getPixelFromCoordinate(position);\n    var mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  };\n  /**\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n   * @protected\n   */\n\n\n  Overlay.prototype.updateRenderedPosition = function (pixel, mapSize) {\n    var style = this.element.style;\n    var offset = this.getOffset();\n    var positioning = this.getPositioning();\n    this.setVisible(true);\n    var x = Math.round(pixel[0] + offset[0]) + 'px';\n    var y = Math.round(pixel[1] + offset[1]) + 'px';\n    var posX = '0%';\n    var posY = '0%';\n\n    if (positioning == OverlayPositioning.BOTTOM_RIGHT || positioning == OverlayPositioning.CENTER_RIGHT || positioning == OverlayPositioning.TOP_RIGHT) {\n      posX = '-100%';\n    } else if (positioning == OverlayPositioning.BOTTOM_CENTER || positioning == OverlayPositioning.CENTER_CENTER || positioning == OverlayPositioning.TOP_CENTER) {\n      posX = '-50%';\n    }\n\n    if (positioning == OverlayPositioning.BOTTOM_LEFT || positioning == OverlayPositioning.BOTTOM_CENTER || positioning == OverlayPositioning.BOTTOM_RIGHT) {\n      posY = '-100%';\n    } else if (positioning == OverlayPositioning.CENTER_LEFT || positioning == OverlayPositioning.CENTER_CENTER || positioning == OverlayPositioning.CENTER_RIGHT) {\n      posY = '-50%';\n    }\n\n    var transform = \"translate(\".concat(posX, \", \").concat(posY, \") translate(\").concat(x, \", \").concat(y, \")\");\n\n    if (this.rendered.transform_ != transform) {\n      this.rendered.transform_ = transform;\n      style.transform = transform; // @ts-ignore IE9\n\n      style.msTransform = transform;\n    }\n  };\n  /**\n   * returns the options this Overlay has been created with\n   * @return {Options} overlay options\n   */\n\n\n  Overlay.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  return Overlay;\n}(BaseObject);\n\nexport default Overlay;","map":{"version":3,"mappings":"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","names":["BaseObject","MapEventType","OverlayPositioning","CLASS_SELECTABLE","containsExtent","listen","unlistenByKey","outerHeight","outerWidth","removeChildren","removeNode","Property","ELEMENT","MAP","OFFSET","POSITION","POSITIONING","__extends","options","_super","_this","on","once","un","id","insertFirst","undefined","stopEvent","element","document","createElement","className","style","position","pointerEvents","autoPan","animation","autoPanAnimation","margin","autoPanMargin","rendered","transform_","visible","mapPostrenderListenerKey","addChangeListener","handleElementChanged","handleMapChanged","handleOffsetChanged","handlePositionChanged","handlePositioningChanged","setElement","setOffset","offset","setPositioning","positioning","TOP_LEFT","setPosition","Overlay","get","getElement","appendChild","map","getMap","POSTRENDER","render","updatePixelPosition","container","getOverlayContainerStopEvent","getOverlayContainer","insertBefore","childNodes","performAutoPan","set","panIntoView","opt_panIntoViewOptions","getTargetElement","mapRect","getRect","getSize","overlayRect","panIntoViewOptions","myMargin","offsetLeft","offsetRight","offsetTop","offsetBottom","delta","Math","abs","center","getView","getCenterInternal","centerPx","getPixelFromCoordinateInternal","newCenterPx","panOptions","animateInternal","getCoordinateFromPixelInternal","duration","easing","size","box","getBoundingClientRect","offsetX","left","window","pageXOffset","offsetY","top","pageYOffset","display","getPosition","isRendered","setVisible","pixel","getPixelFromCoordinate","mapSize","updateRenderedPosition","getOffset","getPositioning","x","round","y","posX","posY","BOTTOM_RIGHT","CENTER_RIGHT","TOP_RIGHT","BOTTOM_CENTER","CENTER_CENTER","TOP_CENTER","BOTTOM_LEFT","CENTER_LEFT","transform","concat","msTransform"],"sourceRoot":"","sources":["src/Overlay.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}