{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.map.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/KeyboardPan\n */\n\n\nimport EventType from '../events/EventType.js';\nimport Interaction, { pan } from './Interaction.js';\nimport KeyCode from '../events/KeyCode.js';\nimport { noModifierKeys, targetNotEditable } from '../events/condition.js';\nimport { rotate as rotateCoordinate } from '../coordinate.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.noModifierKeys} and\n * {@link module:ol/events/condition.targetNotEditable}.\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\n * press.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\n * @api\n */\n\nvar KeyboardPan =\n/** @class */\nfunction (_super) {\n  __extends(KeyboardPan, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function KeyboardPan(opt_options) {\n    var _this = _super.call(this) || this;\n\n    var options = opt_options || {};\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n\n    _this.defaultCondition_ = function (mapBrowserEvent) {\n      return noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent);\n    };\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n\n    _this.condition_ = options.condition !== undefined ? options.condition : _this.defaultCondition_;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.duration_ = options.duration !== undefined ? options.duration : 100;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.pixelDelta_ = options.pixelDelta !== undefined ? options.pixelDelta : 128;\n    return _this;\n  }\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n   * pressed).\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @this {KeyboardPan}\n   */\n\n\n  KeyboardPan.prototype.handleEvent = function (mapBrowserEvent) {\n    var stopEvent = false;\n\n    if (mapBrowserEvent.type == EventType.KEYDOWN) {\n      var keyEvent =\n      /** @type {KeyboardEvent} */\n      mapBrowserEvent.originalEvent;\n      var keyCode = keyEvent.keyCode;\n\n      if (this.condition_(mapBrowserEvent) && (keyCode == KeyCode.DOWN || keyCode == KeyCode.LEFT || keyCode == KeyCode.RIGHT || keyCode == KeyCode.UP)) {\n        var map = mapBrowserEvent.map;\n        var view = map.getView();\n        var mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n        var deltaX = 0,\n            deltaY = 0;\n\n        if (keyCode == KeyCode.DOWN) {\n          deltaY = -mapUnitsDelta;\n        } else if (keyCode == KeyCode.LEFT) {\n          deltaX = -mapUnitsDelta;\n        } else if (keyCode == KeyCode.RIGHT) {\n          deltaX = mapUnitsDelta;\n        } else {\n          deltaY = mapUnitsDelta;\n        }\n\n        var delta = [deltaX, deltaY];\n        rotateCoordinate(delta, view.getRotation());\n        pan(view, delta, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n\n    return !stopEvent;\n  };\n\n  return KeyboardPan;\n}(Interaction);\n\nexport default KeyboardPan;","map":{"version":3,"mappings":"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","names":["EventType","Interaction","pan","KeyCode","noModifierKeys","targetNotEditable","rotate","rotateCoordinate","__extends","opt_options","_super","options","_this","defaultCondition_","mapBrowserEvent","condition_","condition","undefined","duration_","duration","pixelDelta_","pixelDelta","KeyboardPan","stopEvent","type","KEYDOWN","keyEvent","originalEvent","keyCode","DOWN","LEFT","RIGHT","UP","map","view","getView","mapUnitsDelta","getResolution","deltaX","deltaY","delta","getRotation","preventDefault"],"sourceRoot":"","sources":["../src/interaction/KeyboardPan.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}