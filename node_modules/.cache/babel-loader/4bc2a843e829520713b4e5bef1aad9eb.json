{"ast":null,"code":"import { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass XHRResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for XMLHttpRequest\n   * @param {XMLHttpRequest} xhr\n   * @param {ArrayBuffer} data\n   */\n  constructor(xhr, data) {\n    super();\n    this.xhr = xhr;\n    this.data = data;\n  }\n\n  get status() {\n    return this.xhr.status;\n  }\n\n  getHeader(name) {\n    return this.xhr.getResponseHeader(name);\n  }\n\n  async getData() {\n    return this.data;\n  }\n\n}\n\nexport class XHRClient extends BaseClient {\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', this.url);\n      xhr.responseType = 'arraybuffer';\n\n      for (const [key, value] of Object.entries(headers)) {\n        xhr.setRequestHeader(key, value);\n      } // hook signals\n\n\n      xhr.onload = () => {\n        const data = xhr.response;\n        resolve(new XHRResponse(xhr, data));\n      };\n\n      xhr.onerror = reject;\n\n      xhr.onabort = () => reject(new AbortError('Request aborted'));\n\n      xhr.send();\n\n      if (signal) {\n        if (signal.aborted) {\n          xhr.abort();\n        }\n\n        signal.addEventListener('abort', () => xhr.abort());\n      }\n    });\n  }\n\n  async request({\n    headers,\n    signal\n  } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n\n}","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/geotiff/dist-module/source/client/xhr.js"],"names":["BaseClient","BaseResponse","AbortError","XHRResponse","constructor","xhr","data","status","getHeader","name","getResponseHeader","getData","XHRClient","constructRequest","headers","signal","Promise","resolve","reject","XMLHttpRequest","open","url","responseType","key","value","Object","entries","setRequestHeader","onload","response","onerror","onabort","send","aborted","abort","addEventListener","request"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,YAArB,QAAyC,WAAzC;AACA,SAASC,UAAT,QAA2B,gBAA3B;;AAEA,MAAMC,WAAN,SAA0BF,YAA1B,CAAuC;AACrC;AACF;AACA;AACA;AACA;AACEG,EAAAA,WAAW,CAACC,GAAD,EAAMC,IAAN,EAAY;AACrB;AACA,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;;AAES,MAANC,MAAM,GAAG;AACX,WAAO,KAAKF,GAAL,CAASE,MAAhB;AACD;;AAEDC,EAAAA,SAAS,CAACC,IAAD,EAAO;AACd,WAAO,KAAKJ,GAAL,CAASK,iBAAT,CAA2BD,IAA3B,CAAP;AACD;;AAEY,QAAPE,OAAO,GAAG;AACd,WAAO,KAAKL,IAAZ;AACD;;AAtBoC;;AAyBvC,OAAO,MAAMM,SAAN,SAAwBZ,UAAxB,CAAmC;AACxCa,EAAAA,gBAAgB,CAACC,OAAD,EAAUC,MAAV,EAAkB;AAChC,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMb,GAAG,GAAG,IAAIc,cAAJ,EAAZ;AACAd,MAAAA,GAAG,CAACe,IAAJ,CAAS,KAAT,EAAgB,KAAKC,GAArB;AACAhB,MAAAA,GAAG,CAACiB,YAAJ,GAAmB,aAAnB;;AACA,WAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeZ,OAAf,CAA3B,EAAoD;AAClDT,QAAAA,GAAG,CAACsB,gBAAJ,CAAqBJ,GAArB,EAA0BC,KAA1B;AACD,OANqC,CAQtC;;;AACAnB,MAAAA,GAAG,CAACuB,MAAJ,GAAa,MAAM;AACjB,cAAMtB,IAAI,GAAGD,GAAG,CAACwB,QAAjB;AACAZ,QAAAA,OAAO,CAAC,IAAId,WAAJ,CAAgBE,GAAhB,EAAqBC,IAArB,CAAD,CAAP;AACD,OAHD;;AAIAD,MAAAA,GAAG,CAACyB,OAAJ,GAAcZ,MAAd;;AACAb,MAAAA,GAAG,CAAC0B,OAAJ,GAAc,MAAMb,MAAM,CAAC,IAAIhB,UAAJ,CAAe,iBAAf,CAAD,CAA1B;;AACAG,MAAAA,GAAG,CAAC2B,IAAJ;;AAEA,UAAIjB,MAAJ,EAAY;AACV,YAAIA,MAAM,CAACkB,OAAX,EAAoB;AAClB5B,UAAAA,GAAG,CAAC6B,KAAJ;AACD;;AACDnB,QAAAA,MAAM,CAACoB,gBAAP,CAAwB,OAAxB,EAAiC,MAAM9B,GAAG,CAAC6B,KAAJ,EAAvC;AACD;AACF,KAvBM,CAAP;AAwBD;;AAEY,QAAPE,OAAO,CAAC;AAAEtB,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAsB,EAAvB,EAA2B;AACtC,UAAMc,QAAQ,GAAG,MAAM,KAAKhB,gBAAL,CAAsBC,OAAtB,EAA+BC,MAA/B,CAAvB;AACA,WAAOc,QAAP;AACD;;AA/BuC","sourcesContent":["import { BaseClient, BaseResponse } from './base.js';\nimport { AbortError } from '../../utils.js';\n\nclass XHRResponse extends BaseResponse {\n  /**\n   * BaseResponse facade for XMLHttpRequest\n   * @param {XMLHttpRequest} xhr\n   * @param {ArrayBuffer} data\n   */\n  constructor(xhr, data) {\n    super();\n    this.xhr = xhr;\n    this.data = data;\n  }\n\n  get status() {\n    return this.xhr.status;\n  }\n\n  getHeader(name) {\n    return this.xhr.getResponseHeader(name);\n  }\n\n  async getData() {\n    return this.data;\n  }\n}\n\nexport class XHRClient extends BaseClient {\n  constructRequest(headers, signal) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', this.url);\n      xhr.responseType = 'arraybuffer';\n      for (const [key, value] of Object.entries(headers)) {\n        xhr.setRequestHeader(key, value);\n      }\n\n      // hook signals\n      xhr.onload = () => {\n        const data = xhr.response;\n        resolve(new XHRResponse(xhr, data));\n      };\n      xhr.onerror = reject;\n      xhr.onabort = () => reject(new AbortError('Request aborted'));\n      xhr.send();\n\n      if (signal) {\n        if (signal.aborted) {\n          xhr.abort();\n        }\n        signal.addEventListener('abort', () => xhr.abort());\n      }\n    });\n  }\n\n  async request({ headers, signal } = {}) {\n    const response = await this.constructRequest(headers, signal);\n    return response;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}