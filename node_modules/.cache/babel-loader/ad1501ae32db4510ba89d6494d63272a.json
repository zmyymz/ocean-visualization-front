{"ast":null,"code":"import { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport { CANNOT_CONVERT_A_BIGINT_VALUE_TO_A_NUMBER } from \"./_util/messages.mjs\";\nimport { NativeNumber, NativeTypeError, NumberIsFinite } from \"./_util/primordials.mjs\";\n/**\n * returns the nearest half-precision float representation of a number\n *\n * @param {number} num\n * @returns {number}\n */\n\nexport function hfround(num) {\n  if (typeof num === \"bigint\") {\n    throw NativeTypeError(CANNOT_CONVERT_A_BIGINT_VALUE_TO_A_NUMBER);\n  }\n\n  num = NativeNumber(num); // for optimization\n\n  if (!NumberIsFinite(num) || num === 0) {\n    return num;\n  }\n\n  var x16 = roundToFloat16Bits(num);\n  return convertToNumber(x16);\n}","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@petamoriken/float16/src/hfround.mjs"],"names":["convertToNumber","roundToFloat16Bits","CANNOT_CONVERT_A_BIGINT_VALUE_TO_A_NUMBER","NativeNumber","NativeTypeError","NumberIsFinite","hfround","num","x16"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,kBAA1B,QAAoD,uBAApD;AACA,SAASC,yCAAT,QAA0D,sBAA1D;AACA,SACEC,YADF,EAEEC,eAFF,EAGEC,cAHF,QAIO,yBAJP;AAMA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AAC3B,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAMH,eAAe,CAACF,yCAAD,CAArB;AACD;;AAEDK,EAAAA,GAAG,GAAGJ,YAAY,CAACI,GAAD,CAAlB,CAL2B,CAO3B;;AACA,MAAI,CAACF,cAAc,CAACE,GAAD,CAAf,IAAwBA,GAAG,KAAK,CAApC,EAAuC;AACrC,WAAOA,GAAP;AACD;;AAED,MAAMC,GAAG,GAAGP,kBAAkB,CAACM,GAAD,CAA9B;AACA,SAAOP,eAAe,CAACQ,GAAD,CAAtB;AACD","sourcesContent":["import { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport { CANNOT_CONVERT_A_BIGINT_VALUE_TO_A_NUMBER } from \"./_util/messages.mjs\";\nimport {\n  NativeNumber,\n  NativeTypeError,\n  NumberIsFinite,\n} from \"./_util/primordials.mjs\";\n\n/**\n * returns the nearest half-precision float representation of a number\n *\n * @param {number} num\n * @returns {number}\n */\nexport function hfround(num) {\n  if (typeof num === \"bigint\") {\n    throw NativeTypeError(CANNOT_CONVERT_A_BIGINT_VALUE_TO_A_NUMBER);\n  }\n\n  num = NativeNumber(num);\n\n  // for optimization\n  if (!NumberIsFinite(num) || num === 0) {\n    return num;\n  }\n\n  const x16 = roundToFloat16Bits(num);\n  return convertToNumber(x16);\n}\n"]},"metadata":{},"sourceType":"module"}