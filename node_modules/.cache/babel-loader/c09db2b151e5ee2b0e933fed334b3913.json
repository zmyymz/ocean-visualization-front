{"ast":null,"code":"import \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n\n/**\n * @module ol/proj\n */\n\n/**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection~Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection~Projection} with\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\n * this.\n */\nimport Projection from './proj/Projection.js';\nimport Units, { METERS_PER_UNIT } from './proj/Units.js';\nimport { PROJECTIONS as EPSG3857_PROJECTIONS, fromEPSG4326, toEPSG4326 } from './proj/epsg3857.js';\nimport { PROJECTIONS as EPSG4326_PROJECTIONS } from './proj/epsg4326.js';\nimport { add as addProj, clear as clearProj, get as getProj } from './proj/projections.js';\nimport { add as addTransformFunc, clear as clearTransformFuncs, get as getTransformFunc } from './proj/transforms.js';\nimport { applyTransform, getWidth } from './extent.js';\nimport { clamp, modulo } from './math.js';\nimport { equals, getWorldsAway } from './coordinate.js';\nimport { getDistance } from './sphere.js';\n/**\n * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier\n * string or undefined.\n * @typedef {Projection|string|undefined} ProjectionLike\n * @api\n */\n\n/**\n * A transform function accepts an array of input coordinate values, an optional\n * output array, and an optional dimension (default should be 2).  The function\n * transforms the input coordinate values, populates the output array, and\n * returns the output array.\n *\n * @typedef {function(Array<number>, Array<number>=, number=): Array<number>} TransformFunction\n * @api\n */\n\nexport { METERS_PER_UNIT };\nexport { Projection };\nvar showCoordinateWarning = true;\n/**\n * @param {boolean} [opt_disable = true] Disable console info about `useGeographic()`\n */\n\nexport function disableCoordinateWarning(opt_disable) {\n  var hide = opt_disable === undefined ? true : opt_disable;\n  showCoordinateWarning = !hide;\n}\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension.\n * @return {Array<number>} Output coordinate array (new array, same coordinate\n *     values).\n */\n\nexport function cloneTransform(input, opt_output, opt_dimension) {\n  var output;\n\n  if (opt_output !== undefined) {\n    for (var i = 0, ii = input.length; i < ii; ++i) {\n      opt_output[i] = input[i];\n    }\n\n    output = opt_output;\n  } else {\n    output = input.slice();\n  }\n\n  return output;\n}\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension.\n * @return {Array<number>} Input coordinate array (same array as input).\n */\n\nexport function identityTransform(input, opt_output, opt_dimension) {\n  if (opt_output !== undefined && input !== opt_output) {\n    for (var i = 0, ii = input.length; i < ii; ++i) {\n      opt_output[i] = input[i];\n    }\n\n    input = opt_output;\n  }\n\n  return input;\n}\n/**\n * Add a Projection object to the list of supported projections that can be\n * looked up by their code.\n *\n * @param {Projection} projection Projection instance.\n * @api\n */\n\nexport function addProjection(projection) {\n  addProj(projection.getCode(), projection);\n  addTransformFunc(projection, projection, cloneTransform);\n}\n/**\n * @param {Array<Projection>} projections Projections.\n */\n\nexport function addProjections(projections) {\n  projections.forEach(addProjection);\n}\n/**\n * Fetches a Projection object for the code specified.\n *\n * @param {ProjectionLike} projectionLike Either a code string which is\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\n *     existing projection object, or undefined.\n * @return {Projection|null} Projection object, or null if not in list.\n * @api\n */\n\nexport function get(projectionLike) {\n  return typeof projectionLike === 'string' ? getProj(\n  /** @type {string} */\n  projectionLike) :\n  /** @type {Projection} */\n  projectionLike || null;\n}\n/**\n * Get the resolution of the point in degrees or distance units.\n * For projections with degrees as the unit this will simply return the\n * provided resolution. For other projections the point resolution is\n * by default estimated by transforming the `point` pixel to EPSG:4326,\n * measuring its width and height on the normal sphere,\n * and taking the average of the width and height.\n * A custom function can be provided for a specific projection, either\n * by setting the `getPointResolution` option in the\n * {@link module:ol/proj/Projection~Projection} constructor or by using\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\n * projection object.\n * @param {ProjectionLike} projection The projection.\n * @param {number} resolution Nominal resolution in projection units.\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\n * @param {import(\"./proj/Units.js\").default} [opt_units] Units to get the point resolution in.\n * Default is the projection's units.\n * @return {number} Point resolution.\n * @api\n */\n\nexport function getPointResolution(projection, resolution, point, opt_units) {\n  projection = get(projection);\n  var pointResolution;\n  var getter = projection.getPointResolutionFunc();\n\n  if (getter) {\n    pointResolution = getter(resolution, point);\n\n    if (opt_units && opt_units !== projection.getUnits()) {\n      var metersPerUnit = projection.getMetersPerUnit();\n\n      if (metersPerUnit) {\n        pointResolution = pointResolution * metersPerUnit / METERS_PER_UNIT[opt_units];\n      }\n    }\n  } else {\n    var units = projection.getUnits();\n\n    if (units == Units.DEGREES && !opt_units || opt_units == Units.DEGREES) {\n      pointResolution = resolution;\n    } else {\n      // Estimate point resolution by transforming the center pixel to EPSG:4326,\n      // measuring its width and height on the normal sphere, and taking the\n      // average of the width and height.\n      var toEPSG4326_1 = getTransformFromProjections(projection, get('EPSG:4326'));\n\n      if (toEPSG4326_1 === identityTransform && units !== Units.DEGREES) {\n        // no transform is available\n        pointResolution = resolution * projection.getMetersPerUnit();\n      } else {\n        var vertices = [point[0] - resolution / 2, point[1], point[0] + resolution / 2, point[1], point[0], point[1] - resolution / 2, point[0], point[1] + resolution / 2];\n        vertices = toEPSG4326_1(vertices, vertices, 2);\n        var width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\n        var height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\n        pointResolution = (width + height) / 2;\n      }\n\n      var metersPerUnit = opt_units ? METERS_PER_UNIT[opt_units] : projection.getMetersPerUnit();\n\n      if (metersPerUnit !== undefined) {\n        pointResolution /= metersPerUnit;\n      }\n    }\n  }\n\n  return pointResolution;\n}\n/**\n * Registers transformation functions that don't alter coordinates. Those allow\n * to transform between projections with equal meaning.\n *\n * @param {Array<Projection>} projections Projections.\n * @api\n */\n\nexport function addEquivalentProjections(projections) {\n  addProjections(projections);\n  projections.forEach(function (source) {\n    projections.forEach(function (destination) {\n      if (source !== destination) {\n        addTransformFunc(source, destination, cloneTransform);\n      }\n    });\n  });\n}\n/**\n * Registers transformation functions to convert coordinates in any projection\n * in projection1 to any projection in projection2.\n *\n * @param {Array<Projection>} projections1 Projections with equal\n *     meaning.\n * @param {Array<Projection>} projections2 Projections with equal\n *     meaning.\n * @param {TransformFunction} forwardTransform Transformation from any\n *   projection in projection1 to any projection in projection2.\n * @param {TransformFunction} inverseTransform Transform from any projection\n *   in projection2 to any projection in projection1..\n */\n\nexport function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {\n  projections1.forEach(function (projection1) {\n    projections2.forEach(function (projection2) {\n      addTransformFunc(projection1, projection2, forwardTransform);\n      addTransformFunc(projection2, projection1, inverseTransform);\n    });\n  });\n}\n/**\n * Clear all cached projections and transforms.\n */\n\nexport function clearAllProjections() {\n  clearProj();\n  clearTransformFuncs();\n}\n/**\n * @param {Projection|string|undefined} projection Projection.\n * @param {string} defaultCode Default code.\n * @return {Projection} Projection.\n */\n\nexport function createProjection(projection, defaultCode) {\n  if (!projection) {\n    return get(defaultCode);\n  } else if (typeof projection === 'string') {\n    return get(projection);\n  } else {\n    return (\n      /** @type {Projection} */\n      projection\n    );\n  }\n}\n/**\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\n * function.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\n *     transform.\n * @return {TransformFunction} Transform function.\n */\n\nexport function createTransformFromCoordinateTransform(coordTransform) {\n  return (\n    /**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>} [opt_output] Output.\n     * @param {number} [opt_dimension] Dimension.\n     * @return {Array<number>} Output.\n     */\n    function (input, opt_output, opt_dimension) {\n      var length = input.length;\n      var dimension = opt_dimension !== undefined ? opt_dimension : 2;\n      var output = opt_output !== undefined ? opt_output : new Array(length);\n\n      for (var i = 0; i < length; i += dimension) {\n        var point = coordTransform([input[i], input[i + 1]]);\n        output[i] = point[0];\n        output[i + 1] = point[1];\n\n        for (var j = dimension - 1; j >= 2; --j) {\n          output[i + j] = input[i + j];\n        }\n      }\n\n      return output;\n    }\n  );\n}\n/**\n * Registers coordinate transform functions to convert coordinates between the\n * source projection and the destination projection.\n * The forward and inverse functions convert coordinate pairs; this function\n * converts these into the functions used internally which also handle\n * extents and coordinate arrays.\n *\n * @param {ProjectionLike} source Source projection.\n * @param {ProjectionLike} destination Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\n *     function (that is, from the source projection to the destination\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\n *     function (that is, from the destination projection to the source\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @api\n */\n\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\n  var sourceProj = get(source);\n  var destProj = get(destination);\n  addTransformFunc(sourceProj, destProj, createTransformFromCoordinateTransform(forward));\n  addTransformFunc(destProj, sourceProj, createTransformFromCoordinateTransform(inverse));\n}\n/**\n * Transforms a coordinate from longitude/latitude to a different projection.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\n *     an array with longitude as 1st and latitude as 2nd element.\n * @param {ProjectionLike} [opt_projection] Target projection. The\n *     default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\n * @api\n */\n\nexport function fromLonLat(coordinate, opt_projection) {\n  disableCoordinateWarning();\n  return transform(coordinate, 'EPSG:4326', opt_projection !== undefined ? opt_projection : 'EPSG:3857');\n}\n/**\n * Transforms a coordinate to longitude/latitude.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\n * @param {ProjectionLike} [opt_projection] Projection of the coordinate.\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\n *     with longitude as 1st and latitude as 2nd element.\n * @api\n */\n\nexport function toLonLat(coordinate, opt_projection) {\n  var lonLat = transform(coordinate, opt_projection !== undefined ? opt_projection : 'EPSG:3857', 'EPSG:4326');\n  var lon = lonLat[0];\n\n  if (lon < -180 || lon > 180) {\n    lonLat[0] = modulo(lon + 180, 360) - 180;\n  }\n\n  return lonLat;\n}\n/**\n * Checks if two projections are the same, that is every coordinate in one\n * projection does represent the same geographic point as the same coordinate in\n * the other projection.\n *\n * @param {Projection} projection1 Projection 1.\n * @param {Projection} projection2 Projection 2.\n * @return {boolean} Equivalent.\n * @api\n */\n\nexport function equivalent(projection1, projection2) {\n  if (projection1 === projection2) {\n    return true;\n  }\n\n  var equalUnits = projection1.getUnits() === projection2.getUnits();\n\n  if (projection1.getCode() === projection2.getCode()) {\n    return equalUnits;\n  } else {\n    var transformFunc = getTransformFromProjections(projection1, projection2);\n    return transformFunc === cloneTransform && equalUnits;\n  }\n}\n/**\n * Searches in the list of transform functions for the function for converting\n * coordinates from the source projection to the destination projection.\n *\n * @param {Projection} sourceProjection Source Projection object.\n * @param {Projection} destinationProjection Destination Projection\n *     object.\n * @return {TransformFunction} Transform function.\n */\n\nexport function getTransformFromProjections(sourceProjection, destinationProjection) {\n  var sourceCode = sourceProjection.getCode();\n  var destinationCode = destinationProjection.getCode();\n  var transformFunc = getTransformFunc(sourceCode, destinationCode);\n\n  if (!transformFunc) {\n    transformFunc = identityTransform;\n  }\n\n  return transformFunc;\n}\n/**\n * Given the projection-like objects, searches for a transformation\n * function to convert a coordinates array from the source projection to the\n * destination projection.\n *\n * @param {ProjectionLike} source Source.\n * @param {ProjectionLike} destination Destination.\n * @return {TransformFunction} Transform function.\n * @api\n */\n\nexport function getTransform(source, destination) {\n  var sourceProjection = get(source);\n  var destinationProjection = get(destination);\n  return getTransformFromProjections(sourceProjection, destinationProjection);\n}\n/**\n * Transforms a coordinate from source projection to destination projection.\n * This returns a new coordinate (and does not modify the original).\n *\n * See {@link module:ol/proj.transformExtent} for extent transformation.\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\n * subclasses for geometry transforms.\n *\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n * @api\n */\n\nexport function transform(coordinate, source, destination) {\n  var transformFunc = getTransform(source, destination);\n  return transformFunc(coordinate, undefined, coordinate.length);\n}\n/**\n * Transforms an extent from source projection to destination projection.  This\n * returns a new extent (and does not modify the original).\n *\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @param {number} [opt_stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {import(\"./extent.js\").Extent} The transformed extent.\n * @api\n */\n\nexport function transformExtent(extent, source, destination, opt_stops) {\n  var transformFunc = getTransform(source, destination);\n  return applyTransform(extent, transformFunc, undefined, opt_stops);\n}\n/**\n * Transforms the given point to the destination projection.\n *\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\n * @param {Projection} sourceProjection Source projection.\n * @param {Projection} destinationProjection Destination projection.\n * @return {import(\"./coordinate.js\").Coordinate} Point.\n */\n\nexport function transformWithProjections(point, sourceProjection, destinationProjection) {\n  var transformFunc = getTransformFromProjections(sourceProjection, destinationProjection);\n  return transformFunc(point);\n}\n/**\n * @type {Projection|null}\n */\n\nvar userProjection = null;\n/**\n * Set the projection for coordinates supplied from and returned by API methods.\n * This includes all API methods except for those interacting with tile grids.\n * @param {ProjectionLike} projection The user projection.\n * @api\n */\n\nexport function setUserProjection(projection) {\n  userProjection = get(projection);\n}\n/**\n * Clear the user projection if set.\n * @api\n */\n\nexport function clearUserProjection() {\n  userProjection = null;\n}\n/**\n * Get the projection for coordinates supplied from and returned by API methods.\n * Note that this method is not yet a part of the stable API.  Support for user\n * projections is not yet complete and should be considered experimental.\n * @return {Projection|null} The user projection (or null if not set).\n * @api\n */\n\nexport function getUserProjection() {\n  return userProjection;\n}\n/**\n * Use geographic coordinates (WGS-84 datum) in API methods.  This includes all API\n * methods except for those interacting with tile grids.\n * @api\n */\n\nexport function useGeographic() {\n  setUserProjection('EPSG:4326');\n}\n/**\n * Return a coordinate transformed into the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} sourceProjection The input coordinate projection.\n * @return {Array<number>} The input coordinate in the user projection.\n */\n\nexport function toUserCoordinate(coordinate, sourceProjection) {\n  if (!userProjection) {\n    return coordinate;\n  }\n\n  return transform(coordinate, sourceProjection, userProjection);\n}\n/**\n * Return a coordinate transformed from the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {Array<number>} The input coordinate transformed.\n */\n\nexport function fromUserCoordinate(coordinate, destProjection) {\n  if (!userProjection) {\n    if (showCoordinateWarning && !equals(coordinate, [0, 0]) && coordinate[0] >= -180 && coordinate[0] <= 180 && coordinate[1] >= -90 && coordinate[1] <= 90) {\n      showCoordinateWarning = false; // eslint-disable-next-line no-console\n\n      console.warn('Call useGeographic() ol/proj once to work with [longitude, latitude] coordinates.');\n    }\n\n    return coordinate;\n  }\n\n  return transform(coordinate, userProjection, destProjection);\n}\n/**\n * Return an extent transformed into the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} sourceProjection The input extent projection.\n * @return {import(\"./extent.js\").Extent} The input extent in the user projection.\n */\n\nexport function toUserExtent(extent, sourceProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n\n  return transformExtent(extent, sourceProjection, userProjection);\n}\n/**\n * Return an extent transformed from the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {import(\"./extent.js\").Extent} The input extent transformed.\n */\n\nexport function fromUserExtent(extent, destProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n\n  return transformExtent(extent, userProjection, destProjection);\n}\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in input projection units per pixel.\n * @param {ProjectionLike} sourceProjection The input projection.\n * @return {number} Resolution in user projection units per pixel.\n */\n\nexport function toUserResolution(resolution, sourceProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n\n  var sourceUnits = get(sourceProjection).getUnits();\n  var userUnits = userProjection.getUnits();\n  return sourceUnits && userUnits ? resolution * METERS_PER_UNIT[sourceUnits] / METERS_PER_UNIT[userUnits] : resolution;\n}\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in user projection units per pixel.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {number} Resolution in destination projection units per pixel.\n */\n\nexport function fromUserResolution(resolution, destProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n\n  var sourceUnits = get(destProjection).getUnits();\n  var userUnits = userProjection.getUnits();\n  return sourceUnits && userUnits ? resolution * METERS_PER_UNIT[userUnits] / METERS_PER_UNIT[sourceUnits] : resolution;\n}\n/**\n * Creates a safe coordinate transform function from a coordinate transform function.\n * \"Safe\" means that it can handle wrapping of x-coordinates for global projections,\n * and that coordinates exceeding the source projection validity extent's range will be\n * clamped to the validity range.\n * @param {Projection} sourceProj Source projection.\n * @param {Projection} destProj Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} transform Transform function (source to destiation).\n * @return {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} Safe transform function (source to destiation).\n */\n\nexport function createSafeCoordinateTransform(sourceProj, destProj, transform) {\n  return function (coord) {\n    var sourceX = coord[0];\n    var sourceY = coord[1];\n    var transformed, worldsAway;\n\n    if (sourceProj.canWrapX()) {\n      var sourceExtent = sourceProj.getExtent();\n      var sourceExtentWidth = getWidth(sourceExtent);\n      worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);\n\n      if (worldsAway) {\n        // Move x to the real world\n        sourceX = sourceX - worldsAway * sourceExtentWidth;\n      }\n\n      sourceX = clamp(sourceX, sourceExtent[0], sourceExtent[2]);\n      sourceY = clamp(sourceY, sourceExtent[1], sourceExtent[3]);\n      transformed = transform([sourceX, sourceY]);\n    } else {\n      transformed = transform(coord);\n    }\n\n    if (worldsAway && destProj.canWrapX()) {\n      // Move transformed coordinate back to the offset world\n      transformed[0] += worldsAway * getWidth(destProj.getExtent());\n    }\n\n    return transformed;\n  };\n}\n/**\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\n * by when this module is executed and should only need to be called again after\n * `clearAllProjections()` is called (e.g. in tests).\n */\n\nexport function addCommon() {\n  // Add transformations that don't alter coordinates to convert within set of\n  // projections with equal meaning.\n  addEquivalentProjections(EPSG3857_PROJECTIONS);\n  addEquivalentProjections(EPSG4326_PROJECTIONS); // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n  // coordinates and back.\n\n  addEquivalentTransforms(EPSG4326_PROJECTIONS, EPSG3857_PROJECTIONS, fromEPSG4326, toEPSG4326);\n}\naddCommon();","map":{"version":3,"mappings":"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","names":["Projection","Units","METERS_PER_UNIT","PROJECTIONS","EPSG3857_PROJECTIONS","fromEPSG4326","toEPSG4326","EPSG4326_PROJECTIONS","add","addProj","clear","clearProj","get","getProj","addTransformFunc","clearTransformFuncs","getTransformFunc","applyTransform","getWidth","clamp","modulo","equals","getWorldsAway","getDistance","showCoordinateWarning","disableCoordinateWarning","opt_disable","hide","undefined","cloneTransform","input","opt_output","opt_dimension","output","i","ii","length","slice","identityTransform","addProjection","projection","getCode","addProjections","projections","forEach","projectionLike","getPointResolution","resolution","point","opt_units","pointResolution","getter","getPointResolutionFunc","getUnits","metersPerUnit","getMetersPerUnit","units","DEGREES","toEPSG4326_1","getTransformFromProjections","vertices","width","height","addEquivalentProjections","source","destination","addEquivalentTransforms","projections1","projections2","forwardTransform","inverseTransform","projection1","projection2","clearAllProjections","createProjection","defaultCode","createTransformFromCoordinateTransform","coordTransform","dimension","Array","j","addCoordinateTransforms","forward","inverse","sourceProj","destProj","fromLonLat","coordinate","opt_projection","transform","toLonLat","lonLat","lon","equivalent","equalUnits","transformFunc","sourceProjection","destinationProjection","sourceCode","destinationCode","getTransform","transformExtent","extent","opt_stops","transformWithProjections","userProjection","setUserProjection","clearUserProjection","getUserProjection","useGeographic","toUserCoordinate","fromUserCoordinate","destProjection","console","warn","toUserExtent","fromUserExtent","toUserResolution","sourceUnits","userUnits","fromUserResolution","createSafeCoordinateTransform","coord","sourceX","sourceY","transformed","worldsAway","canWrapX","sourceExtent","getExtent","sourceExtentWidth","addCommon"],"sourceRoot":"","sources":["src/proj.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}