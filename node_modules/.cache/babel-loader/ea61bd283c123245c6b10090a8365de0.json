{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/TileImage\n */\n\n\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport { ENABLE_RASTER_REPROJECTION } from '../reproj/common.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport { getKey, getKeyZXY } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection } from '../tilegrid.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./State.js\").default} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\n\nvar TileImage =\n/** @class */\nfunction (_super) {\n  __extends(TileImage, _super);\n  /**\n   * @param {!Options} options Image tile options.\n   */\n\n\n  function TileImage(options) {\n    var _this = this;\n\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection\n    }) || this;\n    /**\n     * @protected\n     * @type {?string}\n     */\n\n    _this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n\n    _this.tileClass = options.tileClass !== undefined ? options.tileClass : ImageTile;\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n\n    _this.tileCacheForProjection = {};\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n\n    _this.tileGridForProjection = {};\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.renderReprojectionEdges_ = false;\n    return _this;\n  }\n  /**\n   * @return {boolean} Can expire cache.\n   */\n\n\n  TileImage.prototype.canExpireCache = function () {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return _super.prototype.canExpireCache.call(this);\n    }\n\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    } else {\n      for (var key in this.tileCacheForProjection) {\n        if (this.tileCacheForProjection[key].canExpireCache()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n\n\n  TileImage.prototype.expireCache = function (projection, usedTiles) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      _super.prototype.expireCache.call(this, projection, usedTiles);\n\n      return;\n    }\n\n    var usedTileCache = this.getTileCacheForProjection(projection);\n    this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n\n    for (var id in this.tileCacheForProjection) {\n      var tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n\n\n  TileImage.prototype.getGutterForProjection = function (projection) {\n    if (ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return 0;\n    } else {\n      return this.getGutter();\n    }\n  };\n  /**\n   * @return {number} Gutter.\n   */\n\n\n  TileImage.prototype.getGutter = function () {\n    return 0;\n  };\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n\n\n  TileImage.prototype.getKey = function () {\n    var key = _super.prototype.getKey.call(this);\n\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n\n    return key;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n\n\n  TileImage.prototype.getOpaque = function (projection) {\n    if (ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return false;\n    } else {\n      return _super.prototype.getOpaque.call(this, projection);\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n\n\n  TileImage.prototype.getTileGridForProjection = function (projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return _super.prototype.getTileGridForProjection.call(this, projection);\n    }\n\n    var thisProj = this.getProjection();\n\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    } else {\n      var projKey = getUid(projection);\n\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = getTileGridForProjection(projection);\n      }\n\n      return this.tileGridForProjection[projKey];\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   */\n\n\n  TileImage.prototype.getTileCacheForProjection = function (projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return _super.prototype.getTileCacheForProjection.call(this, projection);\n    }\n\n    var thisProj = this.getProjection();\n\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    } else {\n      var projKey = getUid(projection);\n\n      if (!(projKey in this.tileCacheForProjection)) {\n        this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n      }\n\n      return this.tileCacheForProjection[projKey];\n    }\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n\n\n  TileImage.prototype.createTile_ = function (z, x, y, pixelRatio, projection, key) {\n    var tileCoord = [z, x, y];\n    var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    var tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n    var tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   */\n\n\n  TileImage.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n    var sourceProjection = this.getProjection();\n\n    if (!ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n    } else {\n      var cache = this.getTileCacheForProjection(projection);\n      var tileCoord = [z, x, y];\n      var tile = void 0;\n      var tileCoordKey = getKey(tileCoord);\n\n      if (cache.containsKey(tileCoordKey)) {\n        tile = cache.get(tileCoordKey);\n      }\n\n      var key = this.getKey();\n\n      if (tile && tile.key == key) {\n        return tile;\n      } else {\n        var sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        var targetTileGrid = this.getTileGridForProjection(projection);\n        var wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        var newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), function (z, x, y, pixelRatio) {\n          return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n        }.bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.getInterpolate());\n        newTile.key = key;\n\n        if (tile) {\n          newTile.interimTile = tile;\n          newTile.refreshInterimChain();\n          cache.replace(tileCoordKey, newTile);\n        } else {\n          cache.set(tileCoordKey, newTile);\n        }\n\n        return newTile;\n      }\n    }\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   * @protected\n   */\n\n\n  TileImage.prototype.getTileInternal = function (z, x, y, pixelRatio, projection) {\n    var tile = null;\n    var tileCoordKey = getKeyZXY(z, x, y);\n    var key = this.getKey();\n\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        var interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key); //make the new tile the head of the list,\n\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n\n    return tile;\n  };\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n\n\n  TileImage.prototype.setRenderReprojectionEdges = function (render) {\n    if (!ENABLE_RASTER_REPROJECTION || this.renderReprojectionEdges_ == render) {\n      return;\n    }\n\n    this.renderReprojectionEdges_ = render;\n\n    for (var id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n\n    this.changed();\n  };\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n\n\n  TileImage.prototype.setTileGridForProjection = function (projection, tilegrid) {\n    if (ENABLE_RASTER_REPROJECTION) {\n      var proj = getProjection(projection);\n\n      if (proj) {\n        var projKey = getUid(proj);\n\n        if (!(projKey in this.tileGridForProjection)) {\n          this.tileGridForProjection[projKey] = tilegrid;\n        }\n      }\n    }\n  };\n\n  return TileImage;\n}(UrlTile);\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\n\n\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */\n  imageTile.getImage().src = src;\n}\n\nexport default TileImage;","map":{"version":3,"mappings":"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","names":["EventType","ImageTile","ReprojTile","TileCache","TileState","UrlTile","ENABLE_RASTER_REPROJECTION","equivalent","get","getProjection","getKey","getKeyZXY","getForProjection","getTileGridForProjection","getUid","__extends","options","interpolate","imageSmoothing","undefined","_super","attributions","cacheSize","opaque","projection","state","tileGrid","tileLoadFunction","defaultTileLoadFunction","tilePixelRatio","tileUrlFunction","url","urls","wrapX","transition","key","attributionsCollapsible","zDirection","_this","crossOrigin","tileClass","tileCacheForProjection","tileGridForProjection","reprojectionErrorThreshold_","reprojectionErrorThreshold","renderReprojectionEdges_","TileImage","canExpireCache","call","tileCache","usedTiles","expireCache","usedTileCache","getTileCacheForProjection","id","getGutter","getInterpolate","getOpaque","thisProj","projKey","highWaterMark","z","x","y","pixelRatio","tileCoord","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","IDLE","EMPTY","tileOptions","addEventListener","CHANGE","handleTileChange","bind","sourceProjection","getTileInternal","cache","tileCoordKey","containsKey","sourceTileGrid","targetTileGrid","wrappedTileCoord","newTile","getTilePixelRatio","interimTile","refreshInterimChain","replace","set","createTile_","getState","render","clear","changed","tilegrid","proj","imageTile","src","getImage"],"sourceRoot":"","sources":["../src/source/TileImage.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}