{"ast":null,"code":"/**\n * @module ol/events/condition\n */\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport { FALSE, TRUE } from '../functions.js';\nimport { MAC, WEBKIT } from '../has.js';\nimport { assert } from '../asserts.js';\n/**\n * A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * `{boolean}`. If the condition is met, true should be returned.\n *\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default): boolean} Condition\n */\n\n/**\n * Creates a condition function that passes when all provided conditions pass.\n * @param {...Condition} var_args Conditions to check.\n * @return {Condition} Condition function.\n */\n\nexport function all(var_args) {\n  var conditions = arguments;\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} All conditions passed.\n   */\n\n  return function (event) {\n    var pass = true;\n\n    for (var i = 0, ii = conditions.length; i < ii; ++i) {\n      pass = pass && conditions[i](event);\n\n      if (!pass) {\n        break;\n      }\n    }\n\n    return pass;\n  };\n}\n/**\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\n * additionally the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt key is pressed.\n * @api\n */\n\nexport var altKeyOnly = function (mapBrowserEvent) {\n  var originalEvent =\n  /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\n/**\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\n * (e.g. when additionally the platform-modifier-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt and shift keys are pressed.\n * @api\n */\n\nexport var altShiftKeysOnly = function (mapBrowserEvent) {\n  var originalEvent =\n  /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;\n};\n/**\n * Return `true` if the map has the focus. This condition requires a map target\n * element with a `tabindex` attribute, e.g. `<div id=\"map\" tabindex=\"1\">`.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map has the focus.\n * @api\n */\n\nexport var focus = function (event) {\n  var targetElement = event.map.getTargetElement();\n  var activeElement = event.map.getOwnerDocument().activeElement;\n  return targetElement.contains(activeElement);\n};\n/**\n * Return `true` if the map has the focus or no 'tabindex' attribute set.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map container has the focus or no 'tabindex' attribute.\n */\n\nexport var focusWithTabindex = function (event) {\n  return event.map.getTargetElement().hasAttribute('tabindex') ? focus(event) : true;\n};\n/**\n * Return always true.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True.\n * @api\n */\n\nexport var always = TRUE;\n/**\n * Return `true` if the event is a `click` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `click` event.\n * @api\n */\n\nexport var click = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.CLICK;\n};\n/**\n * Return `true` if the event has an \"action\"-producing mouse button.\n *\n * By definition, this includes left-click on windows/linux, and left-click\n * without the ctrl key on Macs.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} The result.\n */\n\nexport var mouseActionButton = function (mapBrowserEvent) {\n  var originalEvent =\n  /** @type {MouseEvent} */\n  mapBrowserEvent.originalEvent;\n  return originalEvent.button == 0 && !(WEBKIT && MAC && originalEvent.ctrlKey);\n};\n/**\n * Return always false.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} False.\n * @api\n */\n\nexport var never = FALSE;\n/**\n * Return `true` if the browser event is a `pointermove` event, `false`\n * otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the browser event is a `pointermove` event.\n * @api\n */\n\nexport var pointerMove = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == 'pointermove';\n};\n/**\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `singleclick` event.\n * @api\n */\n\nexport var singleClick = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;\n};\n/**\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `dblclick` event.\n * @api\n */\n\nexport var doubleClick = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;\n};\n/**\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\n * pressed.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if there no modifier keys are pressed.\n * @api\n */\n\nexport var noModifierKeys = function (mapBrowserEvent) {\n  var originalEvent =\n  /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\n/**\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\n * the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the platform modifier key is pressed.\n * @api\n */\n\nexport var platformModifierKeyOnly = function (mapBrowserEvent) {\n  var originalEvent =\n  /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  return !originalEvent.altKey && (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\n/**\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\n * additionally the alt-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the shift key is pressed.\n * @api\n */\n\nexport var shiftKeyOnly = function (mapBrowserEvent) {\n  var originalEvent =\n  /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;\n};\n/**\n * Return `true` if the target element is not editable, i.e. not a `<input>`-,\n * `<select>`- or `<textarea>`-element, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if the target element is not editable.\n * @api\n */\n\nexport var targetNotEditable = function (mapBrowserEvent) {\n  var originalEvent =\n  /** @type {KeyboardEvent|MouseEvent|TouchEvent} */\n  mapBrowserEvent.originalEvent;\n  var tagName =\n  /** @type {Element} */\n  originalEvent.target.tagName;\n  return tagName !== 'INPUT' && tagName !== 'SELECT' && tagName !== 'TEXTAREA';\n};\n/**\n * Return `true` if the event originates from a mouse device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a mouse device.\n * @api\n */\n\nexport var mouseOnly = function (mapBrowserEvent) {\n  var pointerEvent =\n  /** @type {import(\"../MapBrowserEvent\").default} */\n  mapBrowserEvent.originalEvent;\n  assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n\n  return pointerEvent.pointerType == 'mouse';\n};\n/**\n * Return `true` if the event originates from a touchable device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a touchable device.\n * @api\n */\n\nexport var touchOnly = function (mapBrowserEvent) {\n  var pointerEvt =\n  /** @type {import(\"../MapBrowserEvent\").default} */\n  mapBrowserEvent.originalEvent;\n  assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n\n  return pointerEvt.pointerType === 'touch';\n};\n/**\n * Return `true` if the event originates from a digital pen.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a digital pen.\n * @api\n */\n\nexport var penOnly = function (mapBrowserEvent) {\n  var pointerEvt =\n  /** @type {import(\"../MapBrowserEvent\").default} */\n  mapBrowserEvent.originalEvent;\n  assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n\n  return pointerEvt.pointerType === 'pen';\n};\n/**\n * Return `true` if the event originates from a primary pointer in\n * contact with the surface or if the left mouse button is pressed.\n * See https://www.w3.org/TR/pointerevents/#button-states.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a primary pointer.\n * @api\n */\n\nexport var primaryAction = function (mapBrowserEvent) {\n  var pointerEvent =\n  /** @type {import(\"../MapBrowserEvent\").default} */\n  mapBrowserEvent.originalEvent;\n  assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n\n  return pointerEvent.isPrimary && pointerEvent.button === 0;\n};","map":{"version":3,"mappings":"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","names":["MapBrowserEventType","FALSE","TRUE","MAC","WEBKIT","assert","all","var_args","conditions","arguments","event","pass","i","ii","length","altKeyOnly","mapBrowserEvent","originalEvent","altKey","metaKey","ctrlKey","shiftKey","altShiftKeysOnly","focus","targetElement","map","getTargetElement","activeElement","getOwnerDocument","contains","focusWithTabindex","hasAttribute","always","click","type","CLICK","mouseActionButton","button","never","pointerMove","singleClick","SINGLECLICK","doubleClick","DBLCLICK","noModifierKeys","platformModifierKeyOnly","shiftKeyOnly","targetNotEditable","tagName","target","mouseOnly","pointerEvent","undefined","pointerType","touchOnly","pointerEvt","penOnly","primaryAction","isPrimary"],"sourceRoot":"","sources":["../src/events/condition.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}