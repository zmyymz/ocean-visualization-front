{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Tile\n */\n\n\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport TileState from './TileState.js';\nimport { abstract } from './util.js';\nimport { easeIn } from './easing.js';\n/**\n * A function that takes an {@link module:ol/Tile~Tile} for the tile and a\n * `{string}` for the url as arguments. The default is\n * ```js\n * source.setTileLoadFunction(function(tile, src) {\n *   tile.getImage().src = src;\n * });\n * ```\n * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve\n * error handling:\n *\n * ```js\n * import TileState from 'ol/TileState';\n *\n * source.setTileLoadFunction(function(tile, src) {\n *   var xhr = new XMLHttpRequest();\n *   xhr.responseType = 'blob';\n *   xhr.addEventListener('loadend', function (evt) {\n *     var data = this.response;\n *     if (data !== undefined) {\n *       tile.getImage().src = URL.createObjectURL(data);\n *     } else {\n *       tile.setState(TileState.ERROR);\n *     }\n *   });\n *   xhr.addEventListener('error', function () {\n *     tile.setState(TileState.ERROR);\n *   });\n *   xhr.open('GET', src);\n *   xhr.send();\n * });\n * ```\n *\n * @typedef {function(Tile, string): void} LoadFunction\n * @api\n */\n\n/**\n * {@link module:ol/source/Tile~TileSource} sources use a function of this type to get\n * the url that provides a tile for a given tile coordinate.\n *\n * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile\n * coordinate, a `{number}` representing the pixel ratio and a\n * {@link module:ol/proj/Projection~Projection} for the projection  as arguments\n * and returns a `{string}` representing the tile URL, or undefined if no tile\n * should be requested for the passed tile coordinate.\n *\n * @typedef {function(import(\"./tilecoord.js\").TileCoord, number,\n *           import(\"./proj/Projection.js\").default): (string|undefined)} UrlFunction\n * @api\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @api\n */\n\n/**\n * @classdesc\n * Base class for tiles.\n *\n * @abstract\n */\n\nvar Tile =\n/** @class */\nfunction (_super) {\n  __extends(Tile, _super);\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {Options} [opt_options] Tile options.\n   */\n\n\n  function Tile(tileCoord, state, opt_options) {\n    var _this = _super.call(this) || this;\n\n    var options = opt_options ? opt_options : {};\n    /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */\n\n    _this.tileCoord = tileCoord;\n    /**\n     * @protected\n     * @type {import(\"./TileState.js\").default}\n     */\n\n    _this.state = state;\n    /**\n     * An \"interim\" tile for this tile. The interim tile may be used while this\n     * one is loading, for \"smooth\" transitions when changing params/dimensions\n     * on the source.\n     * @type {Tile}\n     */\n\n    _this.interimTile = null;\n    /**\n     * A key assigned to the tile. This is used by the tile source to determine\n     * if this tile can effectively be used, or if a new tile should be created\n     * and this one be used as an interim tile for this new tile.\n     * @type {string}\n     */\n\n    _this.key = '';\n    /**\n     * The duration for the opacity transition.\n     * @type {number}\n     */\n\n    _this.transition_ = options.transition === undefined ? 250 : options.transition;\n    /**\n     * Lookup of start times for rendering transitions.  If the start time is\n     * equal to -1, the transition is complete.\n     * @type {Object<string, number>}\n     */\n\n    _this.transitionStarts_ = {};\n    /**\n     * @type {boolean}\n     */\n\n    _this.interpolate = !!options.interpolate;\n    return _this;\n  }\n  /**\n   * @protected\n   */\n\n\n  Tile.prototype.changed = function () {\n    this.dispatchEvent(EventType.CHANGE);\n  };\n  /**\n   * Called by the tile cache when the tile is removed from the cache due to expiry\n   */\n\n\n  Tile.prototype.release = function () {};\n  /**\n   * @return {string} Key.\n   */\n\n\n  Tile.prototype.getKey = function () {\n    return this.key + '/' + this.tileCoord;\n  };\n  /**\n   * Get the interim tile most suitable for rendering using the chain of interim\n   * tiles. This corresponds to the  most recent tile that has been loaded, if no\n   * such tile exists, the original tile is returned.\n   * @return {!Tile} Best tile for rendering.\n   */\n\n\n  Tile.prototype.getInterimTile = function () {\n    if (!this.interimTile) {\n      //empty chain\n      return this;\n    }\n\n    var tile = this.interimTile; // find the first loaded tile and return it. Since the chain is sorted in\n    // decreasing order of creation time, there is no need to search the remainder\n    // of the list (all those tiles correspond to older requests and will be\n    // cleaned up by refreshInterimChain)\n\n    do {\n      if (tile.getState() == TileState.LOADED) {\n        // Show tile immediately instead of fading it in after loading, because\n        // the interim tile is in place already\n        this.transition_ = 0;\n        return tile;\n      }\n\n      tile = tile.interimTile;\n    } while (tile); // we can not find a better tile\n\n\n    return this;\n  };\n  /**\n   * Goes through the chain of interim tiles and discards sections of the chain\n   * that are no longer relevant.\n   */\n\n\n  Tile.prototype.refreshInterimChain = function () {\n    if (!this.interimTile) {\n      return;\n    }\n\n    var tile = this.interimTile;\n    /**\n     * @type {Tile}\n     */\n\n    var prev = this;\n\n    do {\n      if (tile.getState() == TileState.LOADED) {\n        //we have a loaded tile, we can discard the rest of the list\n        //we would could abort any LOADING tile request\n        //older than this tile (i.e. any LOADING tile following this entry in the chain)\n        tile.interimTile = null;\n        break;\n      } else if (tile.getState() == TileState.LOADING) {\n        //keep this LOADING tile any loaded tiles later in the chain are\n        //older than this tile, so we're still interested in the request\n        prev = tile;\n      } else if (tile.getState() == TileState.IDLE) {\n        //the head of the list is the most current tile, we don't need\n        //to start any other requests for this chain\n        prev.interimTile = tile.interimTile;\n      } else {\n        prev = tile;\n      }\n\n      tile = prev.interimTile;\n    } while (tile);\n  };\n  /**\n   * Get the tile coordinate for this tile.\n   * @return {import(\"./tilecoord.js\").TileCoord} The tile coordinate.\n   * @api\n   */\n\n\n  Tile.prototype.getTileCoord = function () {\n    return this.tileCoord;\n  };\n  /**\n   * @return {import(\"./TileState.js\").default} State.\n   */\n\n\n  Tile.prototype.getState = function () {\n    return this.state;\n  };\n  /**\n   * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,\n   * it is important to set the state correctly to {@link module:ol/TileState~ERROR}\n   * when the tile cannot be loaded. Otherwise the tile cannot be removed from\n   * the tile queue and will block other requests.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @api\n   */\n\n\n  Tile.prototype.setState = function (state) {\n    if (this.state !== TileState.ERROR && this.state > state) {\n      throw new Error('Tile load sequence violation');\n    }\n\n    this.state = state;\n    this.changed();\n  };\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @abstract\n   * @api\n   */\n\n\n  Tile.prototype.load = function () {\n    abstract();\n  };\n  /**\n   * Get the alpha value for rendering.\n   * @param {string} id An id for the renderer.\n   * @param {number} time The render frame time.\n   * @return {number} A number between 0 and 1.\n   */\n\n\n  Tile.prototype.getAlpha = function (id, time) {\n    if (!this.transition_) {\n      return 1;\n    }\n\n    var start = this.transitionStarts_[id];\n\n    if (!start) {\n      start = time;\n      this.transitionStarts_[id] = start;\n    } else if (start === -1) {\n      return 1;\n    }\n\n    var delta = time - start + 1000 / 60; // avoid rendering at 0\n\n    if (delta >= this.transition_) {\n      return 1;\n    }\n\n    return easeIn(delta / this.transition_);\n  };\n  /**\n   * Determine if a tile is in an alpha transition.  A tile is considered in\n   * transition if tile.getAlpha() has not yet been called or has been called\n   * and returned 1.\n   * @param {string} id An id for the renderer.\n   * @return {boolean} The tile is in transition.\n   */\n\n\n  Tile.prototype.inTransition = function (id) {\n    if (!this.transition_) {\n      return false;\n    }\n\n    return this.transitionStarts_[id] !== -1;\n  };\n  /**\n   * Mark a transition as complete.\n   * @param {string} id An id for the renderer.\n   */\n\n\n  Tile.prototype.endTransition = function (id) {\n    if (this.transition_) {\n      this.transitionStarts_[id] = -1;\n    }\n  };\n\n  return Tile;\n}(EventTarget);\n\nexport default Tile;","map":{"version":3,"mappings":"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","names":["EventTarget","EventType","TileState","abstract","easeIn","__extends","tileCoord","state","opt_options","_super","options","_this","interimTile","key","transition_","transition","undefined","transitionStarts_","interpolate","Tile","dispatchEvent","CHANGE","tile","getState","LOADED","prev","LOADING","IDLE","ERROR","Error","changed","id","time","start","delta"],"sourceRoot":"","sources":["src/Tile.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}