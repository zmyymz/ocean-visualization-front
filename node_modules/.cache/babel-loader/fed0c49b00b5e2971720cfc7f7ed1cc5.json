{"ast":null,"code":"import \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.split.js\";\n\n/**\n * @module ol/css\n */\n\n/**\n * @typedef {Object} FontParameters\n * @property {string} style Style.\n * @property {string} variant Variant.\n * @property {string} weight Weight.\n * @property {string} size Size.\n * @property {string} lineHeight LineHeight.\n * @property {string} family Family.\n * @property {Array<string>} families Families.\n */\n\n/**\n * The CSS class for hidden feature.\n *\n * @const\n * @type {string}\n */\nexport var CLASS_HIDDEN = 'ol-hidden';\n/**\n * The CSS class that we'll give the DOM elements to have them selectable.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_SELECTABLE = 'ol-selectable';\n/**\n * The CSS class that we'll give the DOM elements to have them unselectable.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_UNSELECTABLE = 'ol-unselectable';\n/**\n * The CSS class for unsupported feature.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_UNSUPPORTED = 'ol-unsupported';\n/**\n * The CSS class for controls.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_CONTROL = 'ol-control';\n/**\n * The CSS class that we'll give the DOM elements that are collapsed, i.e.\n * to those elements which usually can be expanded.\n *\n * @const\n * @type {string}\n */\n\nexport var CLASS_COLLAPSED = 'ol-collapsed';\n/**\n * From https://stackoverflow.com/questions/10135697/regex-to-parse-any-css-font\n * @type {RegExp}\n */\n\nvar fontRegEx = new RegExp(['^\\\\s*(?=(?:(?:[-a-z]+\\\\s*){0,2}(italic|oblique))?)', '(?=(?:(?:[-a-z]+\\\\s*){0,2}(small-caps))?)', '(?=(?:(?:[-a-z]+\\\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)', '(?:(?:normal|\\\\1|\\\\2|\\\\3)\\\\s*){0,3}((?:xx?-)?', '(?:small|large)|medium|smaller|larger|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx]))', '(?:\\\\s*\\\\/\\\\s*(normal|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx])?))', '?\\\\s*([-,\\\\\"\\\\\\'\\\\sa-z]+?)\\\\s*$'].join(''), 'i');\nvar fontRegExMatchIndex = ['style', 'variant', 'weight', 'size', 'lineHeight', 'family'];\n/**\n * Get the list of font families from a font spec.  Note that this doesn't work\n * for font families that have commas in them.\n * @param {string} fontSpec The CSS font property.\n * @return {FontParameters|null} The font parameters (or null if the input spec is invalid).\n */\n\nexport var getFontParameters = function getFontParameters(fontSpec) {\n  var match = fontSpec.match(fontRegEx);\n\n  if (!match) {\n    return null;\n  }\n\n  var style =\n  /** @type {FontParameters} */\n  {\n    lineHeight: 'normal',\n    size: '1.2em',\n    style: 'normal',\n    weight: 'normal',\n    variant: 'normal'\n  };\n\n  for (var i = 0, ii = fontRegExMatchIndex.length; i < ii; ++i) {\n    var value = match[i + 1];\n\n    if (value !== undefined) {\n      style[fontRegExMatchIndex[i]] = value;\n    }\n  }\n\n  style.families = style.family.split(/,\\s?/);\n  return style;\n};\n/**\n * @param {number} opacity Opacity (0..1).\n * @return {string} CSS opacity.\n */\n\nexport function cssOpacity(opacity) {\n  return opacity === 1 ? '' : String(Math.round(opacity * 100) / 100);\n}","map":{"version":3,"mappings":";;;;;;;;;AAAA;;;;AAIA;;;;;;;;;;;AAWA;;;;;;AAMA,OAAO,IAAMA,YAAY,GAAG,WAArB;AAEP;;;;;;;AAMA,OAAO,IAAMC,gBAAgB,GAAG,eAAzB;AAEP;;;;;;;AAMA,OAAO,IAAMC,kBAAkB,GAAG,iBAA3B;AAEP;;;;;;;AAMA,OAAO,IAAMC,iBAAiB,GAAG,gBAA1B;AAEP;;;;;;;AAMA,OAAO,IAAMC,aAAa,GAAG,YAAtB;AAEP;;;;;;;;AAOA,OAAO,IAAMC,eAAe,GAAG,cAAxB;AAEP;;;;;AAIA,IAAMC,SAAS,GAAG,IAAIC,MAAJ,CAChB,CACE,oDADF,EAEE,2CAFF,EAGE,6DAHF,EAIE,+CAJF,EAKE,6EALF,EAME,+DANF,EAOE,iCAPF,EAQEC,IARF,CAQO,EARP,CADgB,EAUhB,GAVgB,CAAlB;AAYA,IAAMC,mBAAmB,GAAG,CAC1B,OAD0B,EAE1B,SAF0B,EAG1B,QAH0B,EAI1B,MAJ0B,EAK1B,YAL0B,EAM1B,QAN0B,CAA5B;AASA;;;;;;;AAMA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAUC,QAAV,EAAkB;AACjD,MAAMC,KAAK,GAAGD,QAAQ,CAACC,KAAT,CAAeN,SAAf,CAAd;;AACA,MAAI,CAACM,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AACD,MAAMC,KAAK;AAAG;AAA+B;AAC3CC,cAAU,EAAE,QAD+B;AAE3CC,QAAI,EAAE,OAFqC;AAG3CF,SAAK,EAAE,QAHoC;AAI3CG,UAAM,EAAE,QAJmC;AAK3CC,WAAO,EAAE;AALkC,GAA7C;;AAOA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGV,mBAAmB,CAACW,MAAzC,EAAiDF,CAAC,GAAGC,EAArD,EAAyD,EAAED,CAA3D,EAA8D;AAC5D,QAAMG,KAAK,GAAGT,KAAK,CAACM,CAAC,GAAG,CAAL,CAAnB;;AACA,QAAIG,KAAK,KAAKC,SAAd,EAAyB;AACvBT,WAAK,CAACJ,mBAAmB,CAACS,CAAD,CAApB,CAAL,GAAgCG,KAAhC;AACD;AACF;;AACDR,OAAK,CAACU,QAAN,GAAiBV,KAAK,CAACW,MAAN,CAAaC,KAAb,CAAmB,MAAnB,CAAjB;AACA,SAAOZ,KAAP;AACD,CApBM;AAsBP;;;;;AAIA,OAAM,SAAUa,UAAV,CAAqBC,OAArB,EAA4B;AAChC,SAAOA,OAAO,KAAK,CAAZ,GAAgB,EAAhB,GAAqBC,MAAM,CAACC,IAAI,CAACC,KAAL,CAAWH,OAAO,GAAG,GAArB,IAA4B,GAA7B,CAAlC;AACD","names":["CLASS_HIDDEN","CLASS_SELECTABLE","CLASS_UNSELECTABLE","CLASS_UNSUPPORTED","CLASS_CONTROL","CLASS_COLLAPSED","fontRegEx","RegExp","join","fontRegExMatchIndex","getFontParameters","fontSpec","match","style","lineHeight","size","weight","variant","i","ii","length","value","undefined","families","family","split","cssOpacity","opacity","String","Math","round"],"sourceRoot":"","sources":["src/css.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}