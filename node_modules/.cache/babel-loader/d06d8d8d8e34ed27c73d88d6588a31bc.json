{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Observable\n */\n\n\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport { listen, listenOnce, unlistenByKey } from './events.js';\n/***\n * @template {string} Type\n * @template {Event|import(\"./events/Event.js\").default} EventClass\n * @template Return\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\n */\n\n/***\n * @template {string} Type\n * @template Return\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\n */\n\n/**\n * @typedef {'change'|'error'} EventTypes\n */\n\n/***\n * @template Return\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").default\n * @api\n */\n\nvar Observable =\n/** @class */\nfunction (_super) {\n  __extends(Observable, _super);\n\n  function Observable() {\n    var _this = _super.call(this) || this;\n\n    _this.on =\n    /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */\n    _this.onInternal;\n    _this.once =\n    /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */\n    _this.onceInternal;\n    _this.un =\n    /** @type {ObservableOnSignature<void>} */\n    _this.unInternal;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.revision_ = 0;\n    return _this;\n  }\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n\n\n  Observable.prototype.changed = function () {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  };\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n\n\n  Observable.prototype.getRevision = function () {\n    return this.revision_;\n  };\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n\n\n  Observable.prototype.onInternal = function (type, listener) {\n    if (Array.isArray(type)) {\n      var len = type.length;\n      var keys = new Array(len);\n\n      for (var i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n\n      return keys;\n    } else {\n      return listen(this,\n      /** @type {string} */\n      type, listener);\n    }\n  };\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n\n\n  Observable.prototype.onceInternal = function (type, listener) {\n    var key;\n\n    if (Array.isArray(type)) {\n      var len = type.length;\n      key = new Array(len);\n\n      for (var i = 0; i < len; ++i) {\n        key[i] = listenOnce(this, type[i], listener);\n      }\n    } else {\n      key = listenOnce(this,\n      /** @type {string} */\n      type, listener);\n    }\n    /** @type {Object} */\n\n\n    listener.ol_key = key;\n    return key;\n  };\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @protected\n   */\n\n\n  Observable.prototype.unInternal = function (type, listener) {\n    var key =\n    /** @type {Object} */\n    listener.ol_key;\n\n    if (key) {\n      unByKey(key);\n    } else if (Array.isArray(type)) {\n      for (var i = 0, ii = type.length; i < ii; ++i) {\n        this.removeEventListener(type[i], listener);\n      }\n    } else {\n      this.removeEventListener(type, listener);\n    }\n  };\n\n  return Observable;\n}(EventTarget);\n/**\n * Listen for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\n\n\nObservable.prototype.on;\n/**\n * Listen once for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\n\nObservable.prototype.once;\n/**\n * Unlisten for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @api\n */\n\nObservable.prototype.un;\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\n\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (var i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey(\n    /** @type {import(\"./events.js\").EventsKey} */\n    key);\n  }\n}\nexport default Observable;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAGA,OAAOA,WAAP,MAAwB,oBAAxB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,SAAQC,MAAR,EAAgBC,UAAhB,EAA4BC,aAA5B,QAAgD,aAAhD;AAEA;;;;;;;AAOA;;;;;;AAMA;;;;AAIA;;;;;AAKA;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAyBC;;AACvB;AAAA,gBACEC,qBAAO,IADT;;AAGEC,SAAI,CAACC,EAAL;AACE;AACED,SAAI,CAACE,UAFT;AAKAF,SAAI,CAACG,IAAL;AACE;AACEH,SAAI,CAACI,YAFT;AAKAJ,SAAI,CAACK,EAAL;AAAU;AAA4CL,SAAI,CAACM,UAA3D;AAEA;;;;;AAIAN,SAAI,CAACO,SAAL,GAAiB,CAAjB;;AACD;AAED;;;;;;AAIAC;AACE,MAAE,KAAKD,SAAP;AACA,SAAKE,aAAL,CAAmBf,SAAS,CAACgB,MAA7B;AACD,GAHD;AAKA;;;;;;;;AAMAF;AACE,WAAO,KAAKD,SAAZ;AACD,GAFD;AAIA;;;;;;;;AAMAC,8CAAWG,IAAX,EAAiBC,QAAjB,EAAyB;AACvB,QAAIC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;AACvB,UAAMI,GAAG,GAAGJ,IAAI,CAACK,MAAjB;AACA,UAAMC,IAAI,GAAG,IAAIJ,KAAJ,CAAUE,GAAV,CAAb;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyB,EAAEG,CAA3B,EAA8B;AAC5BD,YAAI,CAACC,CAAD,CAAJ,GAAUvB,MAAM,CAAC,IAAD,EAAOgB,IAAI,CAACO,CAAD,CAAX,EAAgBN,QAAhB,CAAhB;AACD;;AACD,aAAOK,IAAP;AACD,KAPD,MAOO;AACL,aAAOtB,MAAM,CAAC,IAAD;AAAO;AAAuBgB,UAA9B,EAAqCC,QAArC,CAAb;AACD;AACF,GAXD;AAaA;;;;;;;;AAMAJ,gDAAaG,IAAb,EAAmBC,QAAnB,EAA2B;AACzB,QAAIO,GAAJ;;AACA,QAAIN,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;AACvB,UAAMI,GAAG,GAAGJ,IAAI,CAACK,MAAjB;AACAG,SAAG,GAAG,IAAIN,KAAJ,CAAUE,GAAV,CAAN;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyB,EAAEG,CAA3B,EAA8B;AAC5BC,WAAG,CAACD,CAAD,CAAH,GAAStB,UAAU,CAAC,IAAD,EAAOe,IAAI,CAACO,CAAD,CAAX,EAAgBN,QAAhB,CAAnB;AACD;AACF,KAND,MAMO;AACLO,SAAG,GAAGvB,UAAU,CAAC,IAAD;AAAO;AAAuBe,UAA9B,EAAqCC,QAArC,CAAhB;AACD;AACD;;;AAAuBA,YAAD,CAAWQ,MAAX,GAAoBD,GAApB;AACtB,WAAOA,GAAP;AACD,GAbD;AAeA;;;;;;;;AAMAX,8CAAWG,IAAX,EAAiBC,QAAjB,EAAyB;AACvB,QAAMO,GAAG;AAAG;AAAuBP,YAAD,CAAWQ,MAA7C;;AACA,QAAID,GAAJ,EAAS;AACPE,aAAO,CAACF,GAAD,CAAP;AACD,KAFD,MAEO,IAAIN,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;AAC9B,WAAK,IAAIO,CAAC,GAAG,CAAR,EAAWI,EAAE,GAAGX,IAAI,CAACK,MAA1B,EAAkCE,CAAC,GAAGI,EAAtC,EAA0C,EAAEJ,CAA5C,EAA+C;AAC7C,aAAKK,mBAAL,CAAyBZ,IAAI,CAACO,CAAD,CAA7B,EAAkCN,QAAlC;AACD;AACF,KAJM,MAIA;AACL,WAAKW,mBAAL,CAAyBZ,IAAzB,EAA+BC,QAA/B;AACD;AACF,GAXD;;AAYF;AApGA,EAAyBnB,WAAzB;AAsGA;;;;;;;;;;;;AAUAe,UAAU,CAACgB,SAAX,CAAqBvB,EAArB;AAEA;;;;;;;;;;;AAUAO,UAAU,CAACgB,SAAX,CAAqBrB,IAArB;AAEA;;;;;;;;AAOAK,UAAU,CAACgB,SAAX,CAAqBnB,EAArB;AAEA;;;;;;;AAMA,OAAM,SAAUgB,OAAV,CAAkBF,GAAlB,EAAqB;AACzB,MAAIN,KAAK,CAACC,OAAN,CAAcK,GAAd,CAAJ,EAAwB;AACtB,SAAK,IAAID,CAAC,GAAG,CAAR,EAAWI,EAAE,GAAGH,GAAG,CAACH,MAAzB,EAAiCE,CAAC,GAAGI,EAArC,EAAyC,EAAEJ,CAA3C,EAA8C;AAC5CrB,mBAAa,CAACsB,GAAG,CAACD,CAAD,CAAJ,CAAb;AACD;AACF,GAJD,MAIO;AACLrB,iBAAa;AAAC;AAAgDsB,OAAjD,CAAb;AACD;AACF;AAED,eAAeX,UAAf","names":["EventTarget","EventType","listen","listenOnce","unlistenByKey","__extends","_super","_this","on","onInternal","once","onceInternal","un","unInternal","revision_","Observable","dispatchEvent","CHANGE","type","listener","Array","isArray","len","length","keys","i","key","ol_key","unByKey","ii","removeEventListener","prototype"],"sourceRoot":"","sources":["src/Observable.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}