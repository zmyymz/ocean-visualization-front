{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/Pointer\n */\n\n\nimport Interaction from './Interaction.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport { getValues } from '../obj.js';\n/**\n * @typedef {Object} Options\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleDownEvent]\n * Function handling \"down\" events. If the function returns `true` then a drag\n * sequence is started.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleDragEvent]\n * Function handling \"drag\" events. This function is called on \"move\" events\n * during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. The function may return `false` to prevent the\n * propagation of the event to other interactions in the map's interactions\n * chain.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleMoveEvent]\n * Function handling \"move\" events. This function is called on \"move\" events.\n * This functions is also called during a drag sequence, so during a drag\n * sequence both the `handleDragEvent` function and this function are called.\n * If `handleDownEvent` is defined and it returns true this function will not\n * be called during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleUpEvent]\n *  Function handling \"up\" events. If the function returns `false` then the\n * current drag sequence is stopped.\n * @property {function(boolean):boolean} [stopDown]\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */\n\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n * @api\n */\n\nvar PointerInteraction =\n/** @class */\nfunction (_super) {\n  __extends(PointerInteraction, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function PointerInteraction(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this,\n    /** @type {import(\"./Interaction.js\").InteractionOptions} */\n    options) || this;\n\n    if (options.handleDownEvent) {\n      _this.handleDownEvent = options.handleDownEvent;\n    }\n\n    if (options.handleDragEvent) {\n      _this.handleDragEvent = options.handleDragEvent;\n    }\n\n    if (options.handleMoveEvent) {\n      _this.handleMoveEvent = options.handleMoveEvent;\n    }\n\n    if (options.handleUpEvent) {\n      _this.handleUpEvent = options.handleUpEvent;\n    }\n\n    if (options.stopDown) {\n      _this.stopDown = options.stopDown;\n    }\n    /**\n     * @type {boolean}\n     * @protected\n     */\n\n\n    _this.handlingDownUpSequence = false;\n    /**\n     * @type {!Object<string, PointerEvent>}\n     * @private\n     */\n\n    _this.trackedPointers_ = {};\n    /**\n     * @type {Array<PointerEvent>}\n     * @protected\n     */\n\n    _this.targetPointers = [];\n    return _this;\n  }\n  /**\n   * Returns the current number of pointers involved in the interaction,\n   * e.g. `2` when two fingers are used.\n   * @return {number} The number of pointers.\n   * @api\n   */\n\n\n  PointerInteraction.prototype.getPointerCount = function () {\n    return this.targetPointers.length;\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n\n\n  PointerInteraction.prototype.handleDownEvent = function (mapBrowserEvent) {\n    return false;\n  };\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n\n\n  PointerInteraction.prototype.handleDragEvent = function (mapBrowserEvent) {};\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n   * detected.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n\n\n  PointerInteraction.prototype.handleEvent = function (mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n\n    var stopEvent = false;\n    this.updateTrackedPointers_(mapBrowserEvent);\n\n    if (this.handlingDownUpSequence) {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n        this.handleDragEvent(mapBrowserEvent); // prevent page scrolling during dragging\n\n        mapBrowserEvent.originalEvent.preventDefault();\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        var handledUp = this.handleUpEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;\n      }\n    } else {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        var handled = this.handleDownEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handled;\n        stopEvent = this.stopDown(handled);\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n        this.handleMoveEvent(mapBrowserEvent);\n      }\n    }\n\n    return !stopEvent;\n  };\n  /**\n   * Handle pointer move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n\n\n  PointerInteraction.prototype.handleMoveEvent = function (mapBrowserEvent) {};\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n\n\n  PointerInteraction.prototype.handleUpEvent = function (mapBrowserEvent) {\n    return false;\n  };\n  /**\n   * This function is used to determine if \"down\" events should be propagated\n   * to other interactions or should be stopped.\n   * @param {boolean} handled Was the event handled by the interaction?\n   * @return {boolean} Should the `down` event be stopped?\n   */\n\n\n  PointerInteraction.prototype.stopDown = function (handled) {\n    return handled;\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @private\n   */\n\n\n  PointerInteraction.prototype.updateTrackedPointers_ = function (mapBrowserEvent) {\n    if (isPointerDraggingEvent(mapBrowserEvent)) {\n      var event_1 = mapBrowserEvent.originalEvent;\n      var id = event_1.pointerId.toString();\n\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        delete this.trackedPointers_[id];\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        this.trackedPointers_[id] = event_1;\n      } else if (id in this.trackedPointers_) {\n        // update only when there was a pointerdown event for this pointer\n        this.trackedPointers_[id] = event_1;\n      }\n\n      this.targetPointers = getValues(this.trackedPointers_);\n    }\n  };\n\n  return PointerInteraction;\n}(Interaction);\n/**\n * @param {Array<PointerEvent>} pointerEvents List of events.\n * @return {import(\"../pixel.js\").Pixel} Centroid pixel.\n */\n\n\nexport function centroid(pointerEvents) {\n  var length = pointerEvents.length;\n  var clientX = 0;\n  var clientY = 0;\n\n  for (var i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n\n  return [clientX / length, clientY / length];\n}\n/**\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n * @return {boolean} Whether the event is a pointerdown, pointerdrag\n *     or pointerup event.\n */\n\nfunction isPointerDraggingEvent(mapBrowserEvent) {\n  var type = mapBrowserEvent.type;\n  return type === MapBrowserEventType.POINTERDOWN || type === MapBrowserEventType.POINTERDRAG || type === MapBrowserEventType.POINTERUP;\n}\n\nexport default PointerInteraction;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAGA,OAAOA,WAAP,MAAwB,kBAAxB;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;AACA,SAAQC,SAAR,QAAwB,WAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAiCC;AAC/B;;;;;AAGA,8BAAYC,WAAZ,EAAuB;AAAvB;;AACE,QAAMC,OAAO,GAAGD,WAAW,GAAGA,WAAH,GAAiB,EAA5C;YAEAE;AACE;AAA8DD,WADhE,KAEC;;AAED,QAAIA,OAAO,CAACE,eAAZ,EAA6B;AAC3BC,WAAI,CAACD,eAAL,GAAuBF,OAAO,CAACE,eAA/B;AACD;;AAED,QAAIF,OAAO,CAACI,eAAZ,EAA6B;AAC3BD,WAAI,CAACC,eAAL,GAAuBJ,OAAO,CAACI,eAA/B;AACD;;AAED,QAAIJ,OAAO,CAACK,eAAZ,EAA6B;AAC3BF,WAAI,CAACE,eAAL,GAAuBL,OAAO,CAACK,eAA/B;AACD;;AAED,QAAIL,OAAO,CAACM,aAAZ,EAA2B;AACzBH,WAAI,CAACG,aAAL,GAAqBN,OAAO,CAACM,aAA7B;AACD;;AAED,QAAIN,OAAO,CAACO,QAAZ,EAAsB;AACpBJ,WAAI,CAACI,QAAL,GAAgBP,OAAO,CAACO,QAAxB;AACD;AAED;;;;;;AAIAJ,SAAI,CAACK,sBAAL,GAA8B,KAA9B;AAEA;;;;;AAIAL,SAAI,CAACM,gBAAL,GAAwB,EAAxB;AAEA;;;;;AAIAN,SAAI,CAACO,cAAL,GAAsB,EAAtB;;AACD;AAED;;;;;;;;AAMAC;AACE,WAAO,KAAKD,cAAL,CAAoBE,MAA3B;AACD,GAFD;AAIA;;;;;;;;AAMAD,2DAAgBE,eAAhB,EAA+B;AAC7B,WAAO,KAAP;AACD,GAFD;AAIA;;;;;;;AAKAF,2DAAgBE,eAAhB,EAA+B,CAAI,CAAnC;AAEA;;;;;;;;;;AAQAF,uDAAYE,eAAZ,EAA2B;AACzB,QAAI,CAACA,eAAe,CAACC,aAArB,EAAoC;AAClC,aAAO,IAAP;AACD;;AAED,QAAIC,SAAS,GAAG,KAAhB;AACA,SAAKC,sBAAL,CAA4BH,eAA5B;;AACA,QAAI,KAAKL,sBAAT,EAAiC;AAC/B,UAAIK,eAAe,CAACI,IAAhB,IAAwBrB,mBAAmB,CAACsB,WAAhD,EAA6D;AAC3D,aAAKd,eAAL,CAAqBS,eAArB,EAD2D,CAE3D;;AACAA,uBAAe,CAACC,aAAhB,CAA8BK,cAA9B;AACD,OAJD,MAIO,IAAIN,eAAe,CAACI,IAAhB,IAAwBrB,mBAAmB,CAACwB,SAAhD,EAA2D;AAChE,YAAMC,SAAS,GAAG,KAAKf,aAAL,CAAmBO,eAAnB,CAAlB;AACA,aAAKL,sBAAL,GACEa,SAAS,IAAI,KAAKX,cAAL,CAAoBE,MAApB,GAA6B,CAD5C;AAED;AACF,KAVD,MAUO;AACL,UAAIC,eAAe,CAACI,IAAhB,IAAwBrB,mBAAmB,CAAC0B,WAAhD,EAA6D;AAC3D,YAAMC,OAAO,GAAG,KAAKrB,eAAL,CAAqBW,eAArB,CAAhB;AACA,aAAKL,sBAAL,GAA8Be,OAA9B;AACAR,iBAAS,GAAG,KAAKR,QAAL,CAAcgB,OAAd,CAAZ;AACD,OAJD,MAIO,IAAIV,eAAe,CAACI,IAAhB,IAAwBrB,mBAAmB,CAAC4B,WAAhD,EAA6D;AAClE,aAAKnB,eAAL,CAAqBQ,eAArB;AACD;AACF;;AACD,WAAO,CAACE,SAAR;AACD,GA3BD;AA6BA;;;;;;;AAKAJ,2DAAgBE,eAAhB,EAA+B,CAAI,CAAnC;AAEA;;;;;;;;AAMAF,yDAAcE,eAAd,EAA6B;AAC3B,WAAO,KAAP;AACD,GAFD;AAIA;;;;;;;;AAMAF,oDAASY,OAAT,EAAgB;AACd,WAAOA,OAAP;AACD,GAFD;AAIA;;;;;;AAIAZ,kEAAuBE,eAAvB,EAAsC;AACpC,QAAIY,sBAAsB,CAACZ,eAAD,CAA1B,EAA6C;AAC3C,UAAMa,OAAK,GAAGb,eAAe,CAACC,aAA9B;AAEA,UAAMa,EAAE,GAAGD,OAAK,CAACE,SAAN,CAAgBC,QAAhB,EAAX;;AACA,UAAIhB,eAAe,CAACI,IAAhB,IAAwBrB,mBAAmB,CAACwB,SAAhD,EAA2D;AACzD,eAAO,KAAKX,gBAAL,CAAsBkB,EAAtB,CAAP;AACD,OAFD,MAEO,IAAId,eAAe,CAACI,IAAhB,IAAwBrB,mBAAmB,CAAC0B,WAAhD,EAA6D;AAClE,aAAKb,gBAAL,CAAsBkB,EAAtB,IAA4BD,OAA5B;AACD,OAFM,MAEA,IAAIC,EAAE,IAAI,KAAKlB,gBAAf,EAAiC;AACtC;AACA,aAAKA,gBAAL,CAAsBkB,EAAtB,IAA4BD,OAA5B;AACD;;AACD,WAAKhB,cAAL,GAAsBb,SAAS,CAAC,KAAKY,gBAAN,CAA/B;AACD;AACF,GAfD;;AAgBF;AAjKA,EAAiCd,WAAjC;AAmKA;;;;;;AAIA,OAAM,SAAUmC,QAAV,CAAmBC,aAAnB,EAAgC;AACpC,MAAMnB,MAAM,GAAGmB,aAAa,CAACnB,MAA7B;AACA,MAAIoB,OAAO,GAAG,CAAd;AACA,MAAIC,OAAO,GAAG,CAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,MAApB,EAA4BsB,CAAC,EAA7B,EAAiC;AAC/BF,WAAO,IAAID,aAAa,CAACG,CAAD,CAAb,CAAiBF,OAA5B;AACAC,WAAO,IAAIF,aAAa,CAACG,CAAD,CAAb,CAAiBD,OAA5B;AACD;;AACD,SAAO,CAACD,OAAO,GAAGpB,MAAX,EAAmBqB,OAAO,GAAGrB,MAA7B,CAAP;AACD;AAED;;;;;;AAKA,SAASa,sBAAT,CAAgCZ,eAAhC,EAA+C;AAC7C,MAAMI,IAAI,GAAGJ,eAAe,CAACI,IAA7B;AACA,SACEA,IAAI,KAAKrB,mBAAmB,CAAC0B,WAA7B,IACAL,IAAI,KAAKrB,mBAAmB,CAACsB,WAD7B,IAEAD,IAAI,KAAKrB,mBAAmB,CAACwB,SAH/B;AAKD;;AAED,eAAeT,kBAAf","names":["Interaction","MapBrowserEventType","getValues","__extends","opt_options","options","_super","handleDownEvent","_this","handleDragEvent","handleMoveEvent","handleUpEvent","stopDown","handlingDownUpSequence","trackedPointers_","targetPointers","PointerInteraction","length","mapBrowserEvent","originalEvent","stopEvent","updateTrackedPointers_","type","POINTERDRAG","preventDefault","POINTERUP","handledUp","POINTERDOWN","handled","POINTERMOVE","isPointerDraggingEvent","event_1","id","pointerId","toString","centroid","pointerEvents","clientX","clientY","i"],"sourceRoot":"","sources":["../src/interaction/Pointer.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}