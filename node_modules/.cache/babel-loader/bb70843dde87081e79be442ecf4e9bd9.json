{"ast":null,"code":"import _asyncToGenerator from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.error.cause.js\";\n\n/**\n * @typedef Slice\n * @property {number} offset\n * @property {number} length\n */\nexport var BaseSource = /*#__PURE__*/function () {\n  function BaseSource() {\n    _classCallCheck(this, BaseSource);\n  }\n\n  _createClass(BaseSource, [{\n    key: \"fetch\",\n    value:\n    /**\n     *\n     * @param {Slice[]} slices\n     * @returns {ArrayBuffer[]}\n     */\n    function () {\n      var _fetch = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(slices) {\n        var _this = this;\n\n        var signal,\n            _args = arguments;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                signal = _args.length > 1 && _args[1] !== undefined ? _args[1] : undefined;\n                return _context.abrupt(\"return\", Promise.all(slices.map(function (slice) {\n                  return _this.fetchSlice(slice, signal);\n                })));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function fetch(_x) {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n    /**\n     *\n     * @param {Slice} slice\n     * @returns {ArrayBuffer}\n     */\n\n  }, {\n    key: \"fetchSlice\",\n    value: function () {\n      var _fetchSlice = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(slice) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                throw new Error(\"fetching of slice \".concat(slice, \" not possible, not implemented\"));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function fetchSlice(_x2) {\n        return _fetchSlice.apply(this, arguments);\n      }\n\n      return fetchSlice;\n    }()\n    /**\n     * Returns the filesize if already determined and null otherwise\n     */\n\n  }, {\n    key: \"fileSize\",\n    get: function get() {\n      return null;\n    }\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n  }]);\n\n  return BaseSource;\n}();","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/geotiff/dist-module/source/basesource.js"],"names":["BaseSource","slices","signal","undefined","Promise","all","map","slice","fetchSlice","Error"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA,WAAaA,UAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACE;AACF;AACA;AACA;AACA;AALA;AAAA,2EAME,iBAAYC,MAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoBC,gBAAAA,MAApB,2DAA6BC,SAA7B;AAAA,iDACSC,OAAO,CAACC,GAAR,CACLJ,MAAM,CAACK,GAAP,CAAW,UAACC,KAAD;AAAA,yBAAW,KAAI,CAACC,UAAL,CAAgBD,KAAhB,EAAuBL,MAAvB,CAAX;AAAA,iBAAX,CADK,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OANF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAYE;AACF;AACA;AACA;AACA;;AAhBA;AAAA;AAAA;AAAA,gFAiBE,kBAAiBK,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,sBACQ,IAAIE,KAAJ,6BAA+BF,KAA/B,oCADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAjBF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqBE;AACF;AACA;;AAvBA;AAAA;AAAA,SAwBE,eAAe;AACb,aAAO,IAAP;AACD;AA1BH;AAAA;AAAA;AAAA,2EA4BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA5BF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA","sourcesContent":["/**\n * @typedef Slice\n * @property {number} offset\n * @property {number} length\n */\n\nexport class BaseSource {\n  /**\n   *\n   * @param {Slice[]} slices\n   * @returns {ArrayBuffer[]}\n   */\n  async fetch(slices, signal = undefined) {\n    return Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  /**\n   *\n   * @param {Slice} slice\n   * @returns {ArrayBuffer}\n   */\n  async fetchSlice(slice) {\n    throw new Error(`fetching of slice ${slice} not possible, not implemented`);\n  }\n\n  /**\n   * Returns the filesize if already determined and null otherwise\n   */\n  get fileSize() {\n    return null;\n  }\n\n  async close() {\n    // no-op by default\n  }\n}\n"]},"metadata":{},"sourceType":"module"}