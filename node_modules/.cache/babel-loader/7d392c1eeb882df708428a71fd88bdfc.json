{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\n * @module ol/style/RegularShape\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { asColorLike } from '../colorlike.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { defaultFillStyle, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle } from '../render/canvas.js';\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\n * @property {number} [radius2] Second radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {Array<number>} [displacement=[0,0]] Displacement of the shape\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\n\nvar RegularShape =\n/** @class */\nfunction (_super) {\n  __extends(RegularShape, _super);\n  /**\n   * @param {Options} options Options.\n   */\n\n\n  function RegularShape(options) {\n    var _this = this;\n    /**\n     * @type {boolean}\n     */\n\n\n    var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    _this = _super.call(this, {\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: options.scale !== undefined ? options.scale : 1,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0]\n    }) || this;\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n\n    _this.canvas_ = undefined;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    _this.hitDetectionCanvas_ = null;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n\n    _this.fill_ = options.fill !== undefined ? options.fill : null;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    _this.origin_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.points_ = options.points;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    _this.radius_ = options.radius !== undefined ? options.radius : options.radius1;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.radius2_ = options.radius2;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.angle_ = options.angle !== undefined ? options.angle : 0;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n\n    _this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    _this.size_ = null;\n    /**\n     * @private\n     * @type {RenderOptions}\n     */\n\n    _this.renderOptions_ = null;\n\n    _this.render();\n\n    return _this;\n  }\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n\n\n  RegularShape.prototype.clone = function () {\n    var scale = this.getScale();\n    var style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      displacement: this.getDisplacement().slice()\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  };\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n\n\n  RegularShape.prototype.getAnchor = function () {\n    var size = this.size_;\n\n    if (!size) {\n      return null;\n    }\n\n    var displacement = this.getDisplacement();\n    return [size[0] / 2 - displacement[0], size[1] / 2 + displacement[1]];\n  };\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n\n\n  RegularShape.prototype.getAngle = function () {\n    return this.angle_;\n  };\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n\n\n  RegularShape.prototype.getFill = function () {\n    return this.fill_;\n  };\n  /**\n   * @return {HTMLCanvasElement} Image element.\n   */\n\n\n  RegularShape.prototype.getHitDetectionImage = function () {\n    if (!this.hitDetectionCanvas_) {\n      this.createHitDetectionCanvas_(this.renderOptions_);\n    }\n\n    return this.hitDetectionCanvas_;\n  };\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n\n\n  RegularShape.prototype.getImage = function (pixelRatio) {\n    var image = this.canvas_[pixelRatio];\n\n    if (!image) {\n      var renderOptions = this.renderOptions_;\n      var context = createCanvasContext2D(renderOptions.size * pixelRatio, renderOptions.size * pixelRatio);\n      this.draw_(renderOptions, context, pixelRatio);\n      image = context.canvas;\n      this.canvas_[pixelRatio] = image;\n    }\n\n    return image;\n  };\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n\n\n  RegularShape.prototype.getPixelRatio = function (pixelRatio) {\n    return pixelRatio;\n  };\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n\n\n  RegularShape.prototype.getImageSize = function () {\n    return this.size_;\n  };\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n\n\n  RegularShape.prototype.getImageState = function () {\n    return ImageState.LOADED;\n  };\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n\n\n  RegularShape.prototype.getOrigin = function () {\n    return this.origin_;\n  };\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n\n\n  RegularShape.prototype.getPoints = function () {\n    return this.points_;\n  };\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n\n\n  RegularShape.prototype.getRadius = function () {\n    return this.radius_;\n  };\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n\n\n  RegularShape.prototype.getRadius2 = function () {\n    return this.radius2_;\n  };\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   */\n\n\n  RegularShape.prototype.getSize = function () {\n    return this.size_;\n  };\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n\n\n  RegularShape.prototype.getStroke = function () {\n    return this.stroke_;\n  };\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n\n\n  RegularShape.prototype.listenImageChange = function (listener) {};\n  /**\n   * Load not yet loaded URI.\n   */\n\n\n  RegularShape.prototype.load = function () {};\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n\n\n  RegularShape.prototype.unlistenImageChange = function (listener) {};\n  /**\n   * Calculate additional canvas size needed for the miter.\n   * @param {string} lineJoin Line join\n   * @param {number} strokeWidth Stroke width\n   * @param {number} miterLimit Miter limit\n   * @return {number} Additional canvas size needed\n   * @private\n   */\n\n\n  RegularShape.prototype.calculateLineJoinSize_ = function (lineJoin, strokeWidth, miterLimit) {\n    if (strokeWidth === 0 || this.points_ === Infinity || lineJoin !== 'bevel' && lineJoin !== 'miter') {\n      return strokeWidth;\n    } // m  | ^\n    // i  | |\\                  .\n    // t >|  #\\\n    // e  | |\\ \\              .\n    // r      \\s\\\n    //      |  \\t\\          .                 .\n    //          \\r\\                      .   .\n    //      |    \\o\\      .          .  . . .\n    //          e \\k\\            .  .    . .\n    //      |      \\e\\  .    .  .       . .\n    //       d      \\ \\  .  .          . .\n    //      | _ _a_ _\\#  .            . .\n    //   r1          / `             . .\n    //      |                       . .\n    //       b     /               . .\n    //      |                     . .\n    //           / r2            . .\n    //      |                        .   .\n    //         /                           .   .\n    //      |α                                   .   .\n    //       /                                         .   .\n    //      ° center\n\n\n    var r1 = this.radius_;\n    var r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n\n    if (r1 < r2) {\n      var tmp = r1;\n      r1 = r2;\n      r2 = tmp;\n    }\n\n    var points = this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n    var alpha = 2 * Math.PI / points;\n    var a = r2 * Math.sin(alpha);\n    var b = Math.sqrt(r2 * r2 - a * a);\n    var d = r1 - b;\n    var e = Math.sqrt(a * a + d * d);\n    var miterRatio = e / a;\n\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n      return miterRatio * strokeWidth;\n    } // Calculate the distnce from center to the stroke corner where\n    // it was cut short because of the miter limit.\n    //              l\n    //        ----+---- <= distance from center to here is maxr\n    //       /####|k ##\\\n    //      /#####^#####\\\n    //     /#### /+\\# s #\\\n    //    /### h/+++\\# t #\\\n    //   /### t/+++++\\# r #\\\n    //  /### a/+++++++\\# o #\\\n    // /### p/++ fill +\\# k #\\\n    ///#### /+++++^+++++\\# e #\\\n    //#####/+++++/+\\+++++\\#####\\\n\n\n    var k = strokeWidth / 2 / miterRatio;\n    var l = strokeWidth / 2 * (d / e);\n    var maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n    var bevelAdd = maxr - r1;\n\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\n      return bevelAdd * 2;\n    } // If outer miter is over the miter limit the inner miter may reach through the\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n\n\n    var aa = r1 * Math.sin(alpha);\n    var bb = Math.sqrt(r1 * r1 - aa * aa);\n    var dd = r2 - bb;\n    var ee = Math.sqrt(aa * aa + dd * dd);\n    var innerMiterRatio = ee / aa;\n\n    if (innerMiterRatio <= miterLimit) {\n      var innerLength = innerMiterRatio * strokeWidth / 2 - r2 - r1;\n      return 2 * Math.max(bevelAdd, innerLength);\n    }\n\n    return bevelAdd * 2;\n  };\n  /**\n   * @return {RenderOptions}  The render options\n   * @protected\n   */\n\n\n  RegularShape.prototype.createRenderOptions = function () {\n    var lineJoin = defaultLineJoin;\n    var miterLimit = 0;\n    var lineDash = null;\n    var lineDashOffset = 0;\n    var strokeStyle;\n    var strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n      lineJoin = this.stroke_.getLineJoin();\n\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n\n      miterLimit = this.stroke_.getMiterLimit();\n\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n\n    var add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n    var maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n    var size = Math.ceil(2 * maxRadius + add);\n    return {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit\n    };\n  };\n  /**\n   * @protected\n   */\n\n\n  RegularShape.prototype.render = function () {\n    this.renderOptions_ = this.createRenderOptions();\n    var size = this.renderOptions_.size;\n    this.canvas_ = {};\n    this.size_ = [size, size];\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} pixelRatio The pixel ratio.\n   */\n\n\n  RegularShape.prototype.draw_ = function (renderOptions, context, pixelRatio) {\n    context.scale(pixelRatio, pixelRatio); // set origin to canvas center\n\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n    this.createPath_(context);\n\n    if (this.fill_) {\n      var color = this.fill_.getColor();\n\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n\n      if (context.setLineDash && renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */\n\n\n  RegularShape.prototype.createHitDetectionCanvas_ = function (renderOptions) {\n    if (this.fill_) {\n      var color = this.fill_.getColor(); // determine if fill is transparent (or pattern or gradient)\n\n      var opacity = 0;\n\n      if (typeof color === 'string') {\n        color = asArray(color);\n      }\n\n      if (color === null) {\n        opacity = 1;\n      } else if (Array.isArray(color)) {\n        opacity = color.length === 4 ? color[3] : 1;\n      }\n\n      if (opacity === 0) {\n        // if a transparent fill style is set, create an extra hit-detection image\n        // with a default fill style\n        var context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n        this.hitDetectionCanvas_ = context.canvas;\n        this.drawHitDetectionCanvas_(renderOptions, context);\n      }\n    }\n\n    if (!this.hitDetectionCanvas_) {\n      this.hitDetectionCanvas_ = this.getImage(1);\n    }\n  };\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context The context to draw in.\n   */\n\n\n  RegularShape.prototype.createPath_ = function (context) {\n    var points = this.points_;\n    var radius = this.radius_;\n\n    if (points === Infinity) {\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\n    } else {\n      var radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n\n      if (this.radius2_ !== undefined) {\n        points *= 2;\n      }\n\n      var startAngle = this.angle_ - Math.PI / 2;\n      var step = 2 * Math.PI / points;\n\n      for (var i = 0; i < points; i++) {\n        var angle0 = startAngle + i * step;\n        var radiusC = i % 2 === 0 ? radius : radius2;\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n      }\n\n      context.closePath();\n    }\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   */\n\n\n  RegularShape.prototype.drawHitDetectionCanvas_ = function (renderOptions, context) {\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n    this.createPath_(context);\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  };\n\n  return RegularShape;\n}(ImageStyle);\n\nexport default RegularShape;","map":{"version":3,"mappings":"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","names":["ImageState","ImageStyle","asArray","asColorLike","createCanvasContext2D","defaultFillStyle","defaultLineJoin","defaultLineWidth","defaultMiterLimit","defaultStrokeStyle","__extends","options","rotateWithView","undefined","_super","opacity","rotation","scale","displacement","_this","canvas_","hitDetectionCanvas_","fill_","fill","origin_","points_","points","radius_","radius","radius1","radius2_","radius2","angle_","angle","stroke_","stroke","size_","renderOptions_","render","RegularShape","getScale","style","getFill","clone","getPoints","getRadius","getRadius2","getAngle","getStroke","getRotation","getRotateWithView","Array","isArray","slice","getDisplacement","setOpacity","getOpacity","size","createHitDetectionCanvas_","pixelRatio","image","renderOptions","context","draw_","canvas","LOADED","listener","lineJoin","strokeWidth","miterLimit","Infinity","r1","r2","tmp","alpha","Math","PI","a","sin","b","sqrt","d","e","miterRatio","k","l","maxr","bevelAdd","aa","bb","dd","ee","innerMiterRatio","innerLength","max","lineDash","lineDashOffset","strokeStyle","getColor","getWidth","getLineDash","getLineDashOffset","getLineJoin","getMiterLimit","add","calculateLineJoinSize_","maxRadius","ceil","createRenderOptions","translate","createPath_","color","fillStyle","lineWidth","setLineDash","length","drawHitDetectionCanvas_","getImage","arc","startAngle","step","i","angle0","radiusC","lineTo","cos","closePath"],"sourceRoot":"","sources":["../src/style/RegularShape.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}