{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/Geometry\n */\n\n\nimport BaseObject from '../Object.js';\nimport Units from '../proj/Units.js';\nimport { abstract } from '../util.js';\nimport { compose as composeTransform, create as createTransform } from '../transform.js';\nimport { createEmpty, createOrUpdateEmpty, getHeight, returnOrUpdate } from '../extent.js';\nimport { get as getProjection, getTransform } from '../proj.js';\nimport { memoizeOne } from '../functions.js';\nimport { transform2D } from './flat/transform.js';\n/**\n * @type {import(\"../transform.js\").Transform}\n */\n\nvar tmpTransform = createTransform();\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */\n\nvar Geometry =\n/** @class */\nfunction (_super) {\n  __extends(Geometry, _super);\n\n  function Geometry() {\n    var _this = _super.call(this) || this;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n\n    _this.extent_ = createEmpty();\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.extentRevision_ = -1;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    _this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    _this.simplifiedGeometryRevision = 0;\n    /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} revision The geometry revision.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */\n\n    _this.simplifyTransformedInternal = memoizeOne(function (revision, squaredTolerance, opt_transform) {\n      if (!opt_transform) {\n        return this.getSimplifiedGeometry(squaredTolerance);\n      }\n\n      var clone = this.clone();\n      clone.applyTransform(opt_transform);\n      return clone.getSimplifiedGeometry(squaredTolerance);\n    });\n    return _this;\n  }\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n   * @return {Geometry} Simplified geometry.\n   */\n\n\n  Geometry.prototype.simplifyTransformed = function (squaredTolerance, opt_transform) {\n    return this.simplifyTransformedInternal(this.getRevision(), squaredTolerance, opt_transform);\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @abstract\n   * @return {!Geometry} Clone.\n   */\n\n\n  Geometry.prototype.clone = function () {\n    return abstract();\n  };\n  /**\n   * @abstract\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  Geometry.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    return abstract();\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n\n\n  Geometry.prototype.containsXY = function (x, y) {\n    var coord = this.getClosestPoint([x, y]);\n    return coord[0] === x && coord[1] === y;\n  };\n  /**\n   * Return the closest point of the geometry to the passed point as\n   * {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_closestPoint] Closest point.\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n   * @api\n   */\n\n\n  Geometry.prototype.getClosestPoint = function (point, opt_closestPoint) {\n    var closestPoint = opt_closestPoint ? opt_closestPoint : [NaN, NaN];\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n    return closestPoint;\n  };\n  /**\n   * Returns true if this geometry includes the specified coordinate. If the\n   * coordinate is on the boundary of the geometry, returns false.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains coordinate.\n   * @api\n   */\n\n\n  Geometry.prototype.intersectsCoordinate = function (coordinate) {\n    return this.containsXY(coordinate[0], coordinate[1]);\n  };\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n\n\n  Geometry.prototype.computeExtent = function (extent) {\n    return abstract();\n  };\n  /**\n   * Get the extent of the geometry.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Extent.\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n\n\n  Geometry.prototype.getExtent = function (opt_extent) {\n    if (this.extentRevision_ != this.getRevision()) {\n      var extent = this.computeExtent(this.extent_);\n\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\n        createOrUpdateEmpty(extent);\n      }\n\n      this.extentRevision_ = this.getRevision();\n    }\n\n    return returnOrUpdate(this.extent_, opt_extent);\n  };\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n\n\n  Geometry.prototype.rotate = function (angle, anchor) {\n    abstract();\n  };\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n\n\n  Geometry.prototype.scale = function (sx, opt_sy, opt_anchor) {\n    abstract();\n  };\n  /**\n   * Create a simplified version of this geometry.  For linestrings, this uses\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n   * algorithm.  For polygons, a quantization-based\n   * simplification is used to preserve topology.\n   * @param {number} tolerance The tolerance distance for simplification.\n   * @return {Geometry} A new, simplified version of the original geometry.\n   * @api\n   */\n\n\n  Geometry.prototype.simplify = function (tolerance) {\n    return this.getSimplifiedGeometry(tolerance * tolerance);\n  };\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker\n   * algorithm.\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Geometry} Simplified geometry.\n   */\n\n\n  Geometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n    return abstract();\n  };\n  /**\n   * Get the type of this geometry.\n   * @abstract\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   */\n\n\n  Geometry.prototype.getType = function () {\n    return abstract();\n  };\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @abstract\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   */\n\n\n  Geometry.prototype.applyTransform = function (transformFn) {\n    abstract();\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   */\n\n\n  Geometry.prototype.intersectsExtent = function (extent) {\n    return abstract();\n  };\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @abstract\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n\n\n  Geometry.prototype.translate = function (deltaX, deltaY) {\n    abstract();\n  };\n  /**\n   * Transform each coordinate of the geometry from one coordinate reference\n   * system to another. The geometry is modified in place.\n   * For example, a line will be transformed to a line and a circle to a circle.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @return {Geometry} This geometry.  Note that original geometry is\n   *     modified in place.\n   * @api\n   */\n\n\n  Geometry.prototype.transform = function (source, destination) {\n    /** @type {import(\"../proj/Projection.js\").default} */\n    var sourceProj = getProjection(source);\n    var transformFn = sourceProj.getUnits() == Units.TILE_PIXELS ? function (inCoordinates, outCoordinates, stride) {\n      var pixelExtent = sourceProj.getExtent();\n      var projectedExtent = sourceProj.getWorldExtent();\n      var scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n      composeTransform(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);\n      transform2D(inCoordinates, 0, inCoordinates.length, stride, tmpTransform, outCoordinates);\n      return getTransform(sourceProj, destination)(inCoordinates, outCoordinates, stride);\n    } : getTransform(sourceProj, destination);\n    this.applyTransform(transformFn);\n    return this;\n  };\n\n  return Geometry;\n}(BaseObject);\n\nexport default Geometry;","map":{"version":3,"mappings":"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","names":["BaseObject","Units","abstract","compose","composeTransform","create","createTransform","createEmpty","createOrUpdateEmpty","getHeight","returnOrUpdate","get","getProjection","getTransform","memoizeOne","transform2D","tmpTransform","__extends","_super","_this","extent_","extentRevision_","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometryRevision","simplifyTransformedInternal","revision","squaredTolerance","opt_transform","getSimplifiedGeometry","clone","applyTransform","Geometry","getRevision","x","y","closestPoint","minSquaredDistance","coord","getClosestPoint","point","opt_closestPoint","NaN","closestPointXY","Infinity","coordinate","containsXY","extent","opt_extent","computeExtent","isNaN","angle","anchor","sx","opt_sy","opt_anchor","tolerance","transformFn","deltaX","deltaY","source","destination","sourceProj","getUnits","TILE_PIXELS","inCoordinates","outCoordinates","stride","pixelExtent","getExtent","projectedExtent","getWorldExtent","scale","length"],"sourceRoot":"","sources":["../src/geom/Geometry.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}