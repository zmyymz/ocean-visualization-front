{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.map.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/DragPan\n */\n\n\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { all, focusWithTabindex, noModifierKeys, primaryAction } from '../events/condition.js';\nimport { easeOut } from '../easing.js';\nimport { rotate as rotateCoordinate, scale as scaleCoordinate } from '../coordinate.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n * @api\n */\n\nvar DragPan =\n/** @class */\nfunction (_super) {\n  __extends(DragPan, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function DragPan(opt_options) {\n    var _this = _super.call(this, {\n      stopDown: FALSE\n    }) || this;\n\n    var options = opt_options ? opt_options : {};\n    /**\n     * @private\n     * @type {import(\"../Kinetic.js\").default|undefined}\n     */\n\n    _this.kinetic_ = options.kinetic;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n\n    _this.lastCentroid = null;\n    /**\n     * @type {number}\n     */\n\n    _this.lastPointersCount_;\n    /**\n     * @type {boolean}\n     */\n\n    _this.panning_ = false;\n    var condition = options.condition ? options.condition : all(noModifierKeys, primaryAction);\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.condition_ = options.onFocusOnly ? all(focusWithTabindex, condition) : condition;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.noKinetic_ = false;\n    return _this;\n  }\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n\n\n  DragPan.prototype.handleDragEvent = function (mapBrowserEvent) {\n    if (!this.panning_) {\n      this.panning_ = true;\n      this.getMap().getView().beginInteraction();\n    }\n\n    var targetPointers = this.targetPointers;\n    var centroid = centroidFromPointers(targetPointers);\n\n    if (targetPointers.length == this.lastPointersCount_) {\n      if (this.kinetic_) {\n        this.kinetic_.update(centroid[0], centroid[1]);\n      }\n\n      if (this.lastCentroid) {\n        var delta = [this.lastCentroid[0] - centroid[0], centroid[1] - this.lastCentroid[1]];\n        var map = mapBrowserEvent.map;\n        var view = map.getView();\n        scaleCoordinate(delta, view.getResolution());\n        rotateCoordinate(delta, view.getRotation());\n        view.adjustCenterInternal(delta);\n      }\n    } else if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger down, tiny drag, second finger down\n      this.kinetic_.begin();\n    }\n\n    this.lastCentroid = centroid;\n    this.lastPointersCount_ = targetPointers.length;\n    mapBrowserEvent.originalEvent.preventDefault();\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  DragPan.prototype.handleUpEvent = function (mapBrowserEvent) {\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n\n    if (this.targetPointers.length === 0) {\n      if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n        var distance = this.kinetic_.getDistance();\n        var angle = this.kinetic_.getAngle();\n        var center = view.getCenterInternal();\n        var centerpx = map.getPixelFromCoordinateInternal(center);\n        var dest = map.getCoordinateFromPixelInternal([centerpx[0] - distance * Math.cos(angle), centerpx[1] - distance * Math.sin(angle)]);\n        view.animateInternal({\n          center: view.getConstrainedCenter(dest),\n          duration: 500,\n          easing: easeOut\n        });\n      }\n\n      if (this.panning_) {\n        this.panning_ = false;\n        view.endInteraction();\n      }\n\n      return false;\n    } else {\n      if (this.kinetic_) {\n        // reset so we don't overestimate the kinetic energy after\n        // after one finger up, tiny drag, second finger up\n        this.kinetic_.begin();\n      }\n\n      this.lastCentroid = null;\n      return true;\n    }\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  DragPan.prototype.handleDownEvent = function (mapBrowserEvent) {\n    if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      this.lastCentroid = null; // stop any current animation\n\n      if (view.getAnimating()) {\n        view.cancelAnimations();\n      }\n\n      if (this.kinetic_) {\n        this.kinetic_.begin();\n      } // No kinetic as soon as more than one pointer on the screen is\n      // detected. This is to prevent nasty pans after pinch.\n\n\n      this.noKinetic_ = this.targetPointers.length > 1;\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return DragPan;\n}(PointerInteraction);\n\nexport default DragPan;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAGA,OAAOA,kBAAP,IACEC,QAAQ,IAAIC,oBADd,QAEO,cAFP;AAGA,SAAQC,KAAR,QAAoB,iBAApB;AACA,SACEC,GADF,EAEEC,iBAFF,EAGEC,cAHF,EAIEC,aAJF,QAKO,wBALP;AAMA,SAAQC,OAAR,QAAsB,cAAtB;AACA,SACEC,MAAM,IAAIC,gBADZ,EAEEC,KAAK,IAAIC,eAFX,QAGO,kBAHP;AAKA;;;;;;;;;;AAUA;;;;;;AAKA;AAAA;AAAA;AAAsBC;AACpB;;;;;AAGA,mBAAYC,WAAZ,EAAuB;AAAvB,gBACEC,kBAAM;AACJC,cAAQ,EAAEb;AADN,KAAN,KAEE,IAHJ;;AAKE,QAAMc,OAAO,GAAGH,WAAW,GAAGA,WAAH,GAAiB,EAA5C;AAEA;;;;;AAIAI,SAAI,CAACC,QAAL,GAAgBF,OAAO,CAACG,OAAxB;AAEA;;;;AAGAF,SAAI,CAACG,YAAL,GAAoB,IAApB;AAEA;;;;AAGAH,SAAI,CAACI,kBAAL;AAEA;;;;AAGAJ,SAAI,CAACK,QAAL,GAAgB,KAAhB;AAEA,QAAMC,SAAS,GAAGP,OAAO,CAACO,SAAR,GACdP,OAAO,CAACO,SADM,GAEdpB,GAAG,CAACE,cAAD,EAAiBC,aAAjB,CAFP;AAIA;;;;;AAIAW,SAAI,CAACO,UAAL,GAAkBR,OAAO,CAACS,WAAR,GACdtB,GAAG,CAACC,iBAAD,EAAoBmB,SAApB,CADW,GAEdA,SAFJ;AAIA;;;;;AAIAN,SAAI,CAACS,UAAL,GAAkB,KAAlB;;AACD;AAED;;;;;;AAIAC,gDAAgBC,eAAhB,EAA+B;AAC7B,QAAI,CAAC,KAAKN,QAAV,EAAoB;AAClB,WAAKA,QAAL,GAAgB,IAAhB;AACA,WAAKO,MAAL,GAAcC,OAAd,GAAwBC,gBAAxB;AACD;;AACD,QAAMC,cAAc,GAAG,KAAKA,cAA5B;AACA,QAAMhC,QAAQ,GAAGC,oBAAoB,CAAC+B,cAAD,CAArC;;AACA,QAAIA,cAAc,CAACC,MAAf,IAAyB,KAAKZ,kBAAlC,EAAsD;AACpD,UAAI,KAAKH,QAAT,EAAmB;AACjB,aAAKA,QAAL,CAAcgB,MAAd,CAAqBlC,QAAQ,CAAC,CAAD,CAA7B,EAAkCA,QAAQ,CAAC,CAAD,CAA1C;AACD;;AACD,UAAI,KAAKoB,YAAT,EAAuB;AACrB,YAAMe,KAAK,GAAG,CACZ,KAAKf,YAAL,CAAkB,CAAlB,IAAuBpB,QAAQ,CAAC,CAAD,CADnB,EAEZA,QAAQ,CAAC,CAAD,CAAR,GAAc,KAAKoB,YAAL,CAAkB,CAAlB,CAFF,CAAd;AAIA,YAAMgB,GAAG,GAAGR,eAAe,CAACQ,GAA5B;AACA,YAAMC,IAAI,GAAGD,GAAG,CAACN,OAAJ,EAAb;AACAnB,uBAAe,CAACwB,KAAD,EAAQE,IAAI,CAACC,aAAL,EAAR,CAAf;AACA7B,wBAAgB,CAAC0B,KAAD,EAAQE,IAAI,CAACE,WAAL,EAAR,CAAhB;AACAF,YAAI,CAACG,oBAAL,CAA0BL,KAA1B;AACD;AACF,KAfD,MAeO,IAAI,KAAKjB,QAAT,EAAmB;AACxB;AACA;AACA,WAAKA,QAAL,CAAcuB,KAAd;AACD;;AACD,SAAKrB,YAAL,GAAoBpB,QAApB;AACA,SAAKqB,kBAAL,GAA0BW,cAAc,CAACC,MAAzC;AACAL,mBAAe,CAACc,aAAhB,CAA8BC,cAA9B;AACD,GA9BD;AAgCA;;;;;;;AAKAhB,8CAAcC,eAAd,EAA6B;AAC3B,QAAMQ,GAAG,GAAGR,eAAe,CAACQ,GAA5B;AACA,QAAMC,IAAI,GAAGD,GAAG,CAACN,OAAJ,EAAb;;AACA,QAAI,KAAKE,cAAL,CAAoBC,MAApB,KAA+B,CAAnC,EAAsC;AACpC,UAAI,CAAC,KAAKP,UAAN,IAAoB,KAAKR,QAAzB,IAAqC,KAAKA,QAAL,CAAc0B,GAAd,EAAzC,EAA8D;AAC5D,YAAMC,QAAQ,GAAG,KAAK3B,QAAL,CAAc4B,WAAd,EAAjB;AACA,YAAMC,KAAK,GAAG,KAAK7B,QAAL,CAAc8B,QAAd,EAAd;AACA,YAAMC,MAAM,GAAGZ,IAAI,CAACa,iBAAL,EAAf;AACA,YAAMC,QAAQ,GAAGf,GAAG,CAACgB,8BAAJ,CAAmCH,MAAnC,CAAjB;AACA,YAAMI,IAAI,GAAGjB,GAAG,CAACkB,8BAAJ,CAAmC,CAC9CH,QAAQ,CAAC,CAAD,CAAR,GAAcN,QAAQ,GAAGU,IAAI,CAACC,GAAL,CAAST,KAAT,CADqB,EAE9CI,QAAQ,CAAC,CAAD,CAAR,GAAcN,QAAQ,GAAGU,IAAI,CAACE,GAAL,CAASV,KAAT,CAFqB,CAAnC,CAAb;AAIAV,YAAI,CAACqB,eAAL,CAAqB;AACnBT,gBAAM,EAAEZ,IAAI,CAACsB,oBAAL,CAA0BN,IAA1B,CADW;AAEnBO,kBAAQ,EAAE,GAFS;AAGnBC,gBAAM,EAAEtD;AAHW,SAArB;AAKD;;AACD,UAAI,KAAKe,QAAT,EAAmB;AACjB,aAAKA,QAAL,GAAgB,KAAhB;AACAe,YAAI,CAACyB,cAAL;AACD;;AACD,aAAO,KAAP;AACD,KArBD,MAqBO;AACL,UAAI,KAAK5C,QAAT,EAAmB;AACjB;AACA;AACA,aAAKA,QAAL,CAAcuB,KAAd;AACD;;AACD,WAAKrB,YAAL,GAAoB,IAApB;AACA,aAAO,IAAP;AACD;AACF,GAjCD;AAmCA;;;;;;;AAKAO,gDAAgBC,eAAhB,EAA+B;AAC7B,QAAI,KAAKI,cAAL,CAAoBC,MAApB,GAA6B,CAA7B,IAAkC,KAAKT,UAAL,CAAgBI,eAAhB,CAAtC,EAAwE;AACtE,UAAMQ,GAAG,GAAGR,eAAe,CAACQ,GAA5B;AACA,UAAMC,IAAI,GAAGD,GAAG,CAACN,OAAJ,EAAb;AACA,WAAKV,YAAL,GAAoB,IAApB,CAHsE,CAItE;;AACA,UAAIiB,IAAI,CAAC0B,YAAL,EAAJ,EAAyB;AACvB1B,YAAI,CAAC2B,gBAAL;AACD;;AACD,UAAI,KAAK9C,QAAT,EAAmB;AACjB,aAAKA,QAAL,CAAcuB,KAAd;AACD,OAVqE,CAWtE;AACA;;;AACA,WAAKf,UAAL,GAAkB,KAAKM,cAAL,CAAoBC,MAApB,GAA6B,CAA/C;AACA,aAAO,IAAP;AACD,KAfD,MAeO;AACL,aAAO,KAAP;AACD;AACF,GAnBD;;AAoBF;AAxJA,EAAsBlC,kBAAtB;;AA0JA,eAAe4B,OAAf","names":["PointerInteraction","centroid","centroidFromPointers","FALSE","all","focusWithTabindex","noModifierKeys","primaryAction","easeOut","rotate","rotateCoordinate","scale","scaleCoordinate","__extends","opt_options","_super","stopDown","options","_this","kinetic_","kinetic","lastCentroid","lastPointersCount_","panning_","condition","condition_","onFocusOnly","noKinetic_","DragPan","mapBrowserEvent","getMap","getView","beginInteraction","targetPointers","length","update","delta","map","view","getResolution","getRotation","adjustCenterInternal","begin","originalEvent","preventDefault","end","distance","getDistance","angle","getAngle","center","getCenterInternal","centerpx","getPixelFromCoordinateInternal","dest","getCoordinateFromPixelInternal","Math","cos","sin","animateInternal","getConstrainedCenter","duration","easing","endInteraction","getAnimating","cancelAnimations"],"sourceRoot":"","sources":["../src/interaction/DragPan.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}