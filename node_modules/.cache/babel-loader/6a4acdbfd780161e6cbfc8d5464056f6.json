{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/WMSGetFeatureInfo\n */\n\n\nimport GML2 from './GML2.js';\nimport XMLFeature from './XMLFeature.js';\nimport { assign } from '../obj.js';\nimport { extend, includes } from '../array.js';\nimport { makeArrayPusher, makeStructureNS, pushParseAndPop } from '../xml.js';\n/**\n * @typedef {Object} Options\n * @property {Array<string>} [layers] If set, only features of the given layers will be returned by the format when read.\n */\n\n/**\n * @const\n * @type {string}\n */\n\nvar featureIdentifier = '_feature';\n/**\n * @const\n * @type {string}\n */\n\nvar layerIdentifier = '_layer';\n/**\n * @classdesc\n * Format for reading WMSGetFeatureInfo format. It uses\n * {@link module:ol/format/GML2~GML2} to read features.\n *\n * @api\n */\n\nvar WMSGetFeatureInfo =\n/** @class */\nfunction (_super) {\n  __extends(WMSGetFeatureInfo, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function WMSGetFeatureInfo(opt_options) {\n    var _this = _super.call(this) || this;\n\n    var options = opt_options ? opt_options : {};\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.featureNS_ = 'http://mapserver.gis.umn.edu/mapserver';\n    /**\n     * @private\n     * @type {GML2}\n     */\n\n    _this.gmlFormat_ = new GML2();\n    /**\n     * @private\n     * @type {Array<string>|null}\n     */\n\n    _this.layers_ = options.layers ? options.layers : null;\n    return _this;\n  }\n  /**\n   * @return {Array<string>|null} layers\n   */\n\n\n  WMSGetFeatureInfo.prototype.getLayers = function () {\n    return this.layers_;\n  };\n  /**\n   * @param {Array<string>|null} layers Layers to parse.\n   */\n\n\n  WMSGetFeatureInfo.prototype.setLayers = function (layers) {\n    this.layers_ = layers;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @private\n   */\n\n\n  WMSGetFeatureInfo.prototype.readFeatures_ = function (node, objectStack) {\n    node.setAttribute('namespaceURI', this.featureNS_);\n    var localName = node.localName;\n    /** @type {Array<import(\"../Feature.js\").default>} */\n\n    var features = [];\n\n    if (node.childNodes.length === 0) {\n      return features;\n    }\n\n    if (localName == 'msGMLOutput') {\n      for (var i = 0, ii = node.childNodes.length; i < ii; i++) {\n        var layer = node.childNodes[i];\n\n        if (layer.nodeType !== Node.ELEMENT_NODE) {\n          continue;\n        }\n\n        var layerElement =\n        /** @type {Element} */\n        layer;\n        var context = objectStack[0];\n        var toRemove = layerIdentifier;\n        var layerName = layerElement.localName.replace(toRemove, '');\n\n        if (this.layers_ && !includes(this.layers_, layerName)) {\n          continue;\n        }\n\n        var featureType = layerName + featureIdentifier;\n        context['featureType'] = featureType;\n        context['featureNS'] = this.featureNS_;\n        /** @type {Object<string, import(\"../xml.js\").Parser>} */\n\n        var parsers = {};\n        parsers[featureType] = makeArrayPusher(this.gmlFormat_.readFeatureElement, this.gmlFormat_);\n        var parsersNS = makeStructureNS([context['featureNS'], null], parsers);\n        layerElement.setAttribute('namespaceURI', this.featureNS_);\n        var layerFeatures = pushParseAndPop([], // @ts-ignore\n        parsersNS, layerElement, objectStack, this.gmlFormat_);\n\n        if (layerFeatures) {\n          extend(features, layerFeatures);\n        }\n      }\n    }\n\n    if (localName == 'FeatureCollection') {\n      var gmlFeatures = pushParseAndPop([], this.gmlFormat_.FEATURE_COLLECTION_PARSERS, node, [{}], this.gmlFormat_);\n\n      if (gmlFeatures) {\n        features = gmlFeatures;\n      }\n    }\n\n    return features;\n  };\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n\n\n  WMSGetFeatureInfo.prototype.readFeaturesFromNode = function (node, opt_options) {\n    var options = {};\n\n    if (opt_options) {\n      assign(options, this.getReadOptions(node, opt_options));\n    }\n\n    return this.readFeatures_(node, [options]);\n  };\n\n  return WMSGetFeatureInfo;\n}(XMLFeature);\n\nexport default WMSGetFeatureInfo;","map":{"version":3,"mappings":"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","names":["GML2","XMLFeature","assign","extend","includes","makeArrayPusher","makeStructureNS","pushParseAndPop","featureIdentifier","layerIdentifier","__extends","opt_options","_super","options","_this","featureNS_","gmlFormat_","layers_","layers","WMSGetFeatureInfo","node","objectStack","setAttribute","localName","features","childNodes","length","i","ii","layer","nodeType","Node","ELEMENT_NODE","layerElement","context","toRemove","layerName","replace","featureType","parsers","readFeatureElement","parsersNS","layerFeatures","gmlFeatures","FEATURE_COLLECTION_PARSERS","getReadOptions","readFeatures_"],"sourceRoot":"","sources":["../src/format/WMSGetFeatureInfo.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}