{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/EsriJSON\n */\n\n\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport LinearRing from '../geom/LinearRing.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { assert } from '../asserts.js';\nimport { assign, isEmpty } from '../obj.js';\nimport { containsExtent } from '../extent.js';\nimport { deflateCoordinates } from '../geom/flat/deflate.js';\nimport { get as getProjection } from '../proj.js';\nimport { linearRingIsClockwise } from '../geom/flat/orient.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @typedef {import(\"arcgis-rest-api\").Feature} EsriJSONFeature\n * @typedef {import(\"arcgis-rest-api\").FeatureSet} EsriJSONFeatureSet\n * @typedef {import(\"arcgis-rest-api\").Geometry} EsriJSONGeometry\n * @typedef {import(\"arcgis-rest-api\").Point} EsriJSONPoint\n * @typedef {import(\"arcgis-rest-api\").Polyline} EsriJSONPolyline\n * @typedef {import(\"arcgis-rest-api\").Polygon} EsriJSONPolygon\n * @typedef {import(\"arcgis-rest-api\").Multipoint} EsriJSONMultipoint\n * @typedef {import(\"arcgis-rest-api\").HasZM} EsriJSONHasZM\n * @typedef {import(\"arcgis-rest-api\").Position} EsriJSONPosition\n * @typedef {import(\"arcgis-rest-api\").SpatialReferenceWkid} EsriJSONSpatialReferenceWkid\n */\n\n/**\n * @typedef {Object} EsriJSONMultiPolygon\n * @property {Array<Array<Array<Array<number>>>>} rings Rings for the MultiPolygon.\n * @property {boolean} [hasM] If the polygon coordinates have an M value.\n * @property {boolean} [hasZ] If the polygon coordinates have a Z value.\n * @property {EsriJSONSpatialReferenceWkid} [spatialReference] The coordinate reference system.\n */\n\n/**\n * @const\n * @type {Object<import(\"../geom/GeometryType.js\").default, function(EsriJSONGeometry): import(\"../geom/Geometry.js\").default>}\n */\n\nvar GEOMETRY_READERS = {};\nGEOMETRY_READERS[GeometryType.POINT] = readPointGeometry;\nGEOMETRY_READERS[GeometryType.LINE_STRING] = readLineStringGeometry;\nGEOMETRY_READERS[GeometryType.POLYGON] = readPolygonGeometry;\nGEOMETRY_READERS[GeometryType.MULTI_POINT] = readMultiPointGeometry;\nGEOMETRY_READERS[GeometryType.MULTI_LINE_STRING] = readMultiLineStringGeometry;\nGEOMETRY_READERS[GeometryType.MULTI_POLYGON] = readMultiPolygonGeometry;\n/**\n * @const\n * @type {Object<string, function(import(\"../geom/Geometry.js\").default, import(\"./Feature.js\").WriteOptions=): (EsriJSONGeometry)>}\n */\n\nvar GEOMETRY_WRITERS = {};\nGEOMETRY_WRITERS[GeometryType.POINT] = writePointGeometry;\nGEOMETRY_WRITERS[GeometryType.LINE_STRING] = writeLineStringGeometry;\nGEOMETRY_WRITERS[GeometryType.POLYGON] = writePolygonGeometry;\nGEOMETRY_WRITERS[GeometryType.MULTI_POINT] = writeMultiPointGeometry;\nGEOMETRY_WRITERS[GeometryType.MULTI_LINE_STRING] = writeMultiLineStringGeometry;\nGEOMETRY_WRITERS[GeometryType.MULTI_POLYGON] = writeMultiPolygonGeometry;\n/**\n * @typedef {Object} Options\n * @property {string} [geometryName] Geometry name to use when creating features.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the EsriJSON format.\n *\n * @api\n */\n\nvar EsriJSON =\n/** @class */\nfunction (_super) {\n  __extends(EsriJSON, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function EsriJSON(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this) || this;\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n\n    _this.geometryName_ = options.geometryName;\n    return _this;\n  }\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @param {string} [opt_idField] Name of the field where to get the id from.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  EsriJSON.prototype.readFeatureFromObject = function (object, opt_options, opt_idField) {\n    var esriJSONFeature =\n    /** @type {EsriJSONFeature} */\n    object;\n    var geometry = readGeometry(esriJSONFeature.geometry, opt_options);\n    var feature = new Feature();\n\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    }\n\n    feature.setGeometry(geometry);\n\n    if (esriJSONFeature.attributes) {\n      feature.setProperties(esriJSONFeature.attributes, true);\n      var id = esriJSONFeature.attributes[opt_idField];\n\n      if (id !== undefined) {\n        feature.setId(\n        /** @type {number} */\n        id);\n      }\n    }\n\n    return feature;\n  };\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n\n\n  EsriJSON.prototype.readFeaturesFromObject = function (object, opt_options) {\n    var options = opt_options ? opt_options : {};\n\n    if (object['features']) {\n      var esriJSONFeatureSet =\n      /** @type {EsriJSONFeatureSet} */\n      object;\n      /** @type {Array<import(\"../Feature.js\").default>} */\n\n      var features = [];\n      var esriJSONFeatures = esriJSONFeatureSet.features;\n\n      for (var i = 0, ii = esriJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(esriJSONFeatures[i], options, object.objectIdFieldName));\n      }\n\n      return features;\n    } else {\n      return [this.readFeatureFromObject(object, options)];\n    }\n  };\n  /**\n   * @param {EsriJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  EsriJSON.prototype.readGeometryFromObject = function (object, opt_options) {\n    return readGeometry(object, opt_options);\n  };\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  EsriJSON.prototype.readProjectionFromObject = function (object) {\n    if (object['spatialReference'] && object['spatialReference']['wkid'] !== undefined) {\n      var spatialReference =\n      /** @type {EsriJSONSpatialReferenceWkid} */\n      object['spatialReference'];\n      var crs = spatialReference.wkid;\n      return getProjection('EPSG:' + crs);\n    } else {\n      return null;\n    }\n  };\n  /**\n   * Encode a geometry as a EsriJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {EsriJSONGeometry} Object.\n   * @api\n   */\n\n\n  EsriJSON.prototype.writeGeometryObject = function (geometry, opt_options) {\n    return writeGeometry(geometry, this.adaptOptions(opt_options));\n  };\n  /**\n   * Encode a feature as a esriJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {Object} Object.\n   * @api\n   */\n\n\n  EsriJSON.prototype.writeFeatureObject = function (feature, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var object = {};\n\n    if (!feature.hasProperties()) {\n      object['attributes'] = {};\n      return object;\n    }\n\n    var properties = feature.getProperties();\n    var geometry = feature.getGeometry();\n\n    if (geometry) {\n      object['geometry'] = writeGeometry(geometry, opt_options);\n      var projection = opt_options && (opt_options.dataProjection || opt_options.featureProjection);\n\n      if (projection) {\n        object['geometry']['spatialReference'] =\n        /** @type {EsriJSONSpatialReferenceWkid} */\n        {\n          wkid: Number(getProjection(projection).getCode().split(':').pop())\n        };\n      }\n\n      delete properties[feature.getGeometryName()];\n    }\n\n    if (!isEmpty(properties)) {\n      object['attributes'] = properties;\n    } else {\n      object['attributes'] = {};\n    }\n\n    return object;\n  };\n  /**\n   * Encode an array of features as a EsriJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {EsriJSONFeatureSet} EsriJSON Object.\n   * @api\n   */\n\n\n  EsriJSON.prototype.writeFeaturesObject = function (features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var objects = [];\n\n    for (var i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], opt_options));\n    }\n\n    return {\n      'features': objects\n    };\n  };\n\n  return EsriJSON;\n}(JSONFeature);\n/**\n * @param {EsriJSONGeometry} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\n\n\nfunction readGeometry(object, opt_options) {\n  var _a, _b;\n\n  if (!object) {\n    return null;\n  }\n  /** @type {import(\"../geom/GeometryType.js\").default} */\n\n\n  var type;\n\n  if (typeof object['x'] === 'number' && typeof object['y'] === 'number') {\n    type = GeometryType.POINT;\n  } else if (object['points']) {\n    type = GeometryType.MULTI_POINT;\n  } else if (object['paths']) {\n    var esriJSONPolyline =\n    /** @type {EsriJSONPolyline} */\n    object;\n\n    if (esriJSONPolyline.paths.length === 1) {\n      type = GeometryType.LINE_STRING;\n    } else {\n      type = GeometryType.MULTI_LINE_STRING;\n    }\n  } else if (object['rings']) {\n    var esriJSONPolygon =\n    /** @type {EsriJSONPolygon} */\n    object;\n    var layout = getGeometryLayout(esriJSONPolygon);\n    var rings = convertRings(esriJSONPolygon.rings, layout);\n\n    if (rings.length === 1) {\n      type = GeometryType.POLYGON;\n      object = assign({}, object, (_a = {}, _a['rings'] = rings[0], _a));\n    } else {\n      type = GeometryType.MULTI_POLYGON;\n      object = assign({}, object, (_b = {}, _b['rings'] = rings, _b));\n    }\n  }\n\n  var geometryReader = GEOMETRY_READERS[type];\n  return transformGeometryWithOptions(geometryReader(object), false, opt_options);\n}\n/**\n * Determines inner and outer rings.\n * Checks if any polygons in this array contain any other polygons in this\n * array. It is used for checking for holes.\n * Logic inspired by: https://github.com/Esri/terraformer-arcgis-parser\n * @param {Array<!Array<!Array<number>>>} rings Rings.\n * @param {import(\"../geom/GeometryLayout.js\").default} layout Geometry layout.\n * @return {Array<!Array<!Array<!Array<number>>>>} Transformed rings.\n */\n\n\nfunction convertRings(rings, layout) {\n  var flatRing = [];\n  var outerRings = [];\n  var holes = [];\n  var i, ii;\n\n  for (i = 0, ii = rings.length; i < ii; ++i) {\n    flatRing.length = 0;\n    deflateCoordinates(flatRing, 0, rings[i], layout.length); // is this ring an outer ring? is it clockwise?\n\n    var clockwise = linearRingIsClockwise(flatRing, 0, flatRing.length, layout.length);\n\n    if (clockwise) {\n      outerRings.push([rings[i]]);\n    } else {\n      holes.push(rings[i]);\n    }\n  }\n\n  while (holes.length) {\n    var hole = holes.shift();\n    var matched = false; // loop over all outer rings and see if they contain our hole.\n\n    for (i = outerRings.length - 1; i >= 0; i--) {\n      var outerRing = outerRings[i][0];\n      var containsHole = containsExtent(new LinearRing(outerRing).getExtent(), new LinearRing(hole).getExtent());\n\n      if (containsHole) {\n        // the hole is contained push it into our polygon\n        outerRings[i].push(hole);\n        matched = true;\n        break;\n      }\n    }\n\n    if (!matched) {\n      // no outer rings contain this hole turn it into and outer\n      // ring (reverse it)\n      outerRings.push([hole.reverse()]);\n    }\n  }\n\n  return outerRings;\n}\n/**\n * @param {EsriJSONPoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Point.\n */\n\n\nfunction readPointGeometry(object) {\n  var point;\n\n  if (object.m !== undefined && object.z !== undefined) {\n    point = new Point([object.x, object.y, object.z, object.m], GeometryLayout.XYZM);\n  } else if (object.z !== undefined) {\n    point = new Point([object.x, object.y, object.z], GeometryLayout.XYZ);\n  } else if (object.m !== undefined) {\n    point = new Point([object.x, object.y, object.m], GeometryLayout.XYM);\n  } else {\n    point = new Point([object.x, object.y]);\n  }\n\n  return point;\n}\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} LineString.\n */\n\n\nfunction readLineStringGeometry(object) {\n  var layout = getGeometryLayout(object);\n  return new LineString(object.paths[0], layout);\n}\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiLineString.\n */\n\n\nfunction readMultiLineStringGeometry(object) {\n  var layout = getGeometryLayout(object);\n  return new MultiLineString(object.paths, layout);\n}\n/**\n * @param {EsriJSONHasZM} object Object.\n * @return {import(\"../geom/GeometryLayout.js\").default} The geometry layout to use.\n */\n\n\nfunction getGeometryLayout(object) {\n  var layout = GeometryLayout.XY;\n\n  if (object.hasZ === true && object.hasM === true) {\n    layout = GeometryLayout.XYZM;\n  } else if (object.hasZ === true) {\n    layout = GeometryLayout.XYZ;\n  } else if (object.hasM === true) {\n    layout = GeometryLayout.XYM;\n  }\n\n  return layout;\n}\n/**\n * @param {EsriJSONMultipoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPoint.\n */\n\n\nfunction readMultiPointGeometry(object) {\n  var layout = getGeometryLayout(object);\n  return new MultiPoint(object.points, layout);\n}\n/**\n * @param {EsriJSONMultiPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPolygon.\n */\n\n\nfunction readMultiPolygonGeometry(object) {\n  var layout = getGeometryLayout(object);\n  return new MultiPolygon(object.rings, layout);\n}\n/**\n * @param {EsriJSONPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Polygon.\n */\n\n\nfunction readPolygonGeometry(object) {\n  var layout = getGeometryLayout(object);\n  return new Polygon(object.rings, layout);\n}\n/**\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONPoint} EsriJSON geometry.\n */\n\n\nfunction writePointGeometry(geometry, opt_options) {\n  var coordinates = geometry.getCoordinates();\n  /** @type {EsriJSONPoint} */\n\n  var esriJSON;\n  var layout = geometry.getLayout();\n\n  if (layout === GeometryLayout.XYZ) {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      z: coordinates[2]\n    };\n  } else if (layout === GeometryLayout.XYM) {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      m: coordinates[2]\n    };\n  } else if (layout === GeometryLayout.XYZM) {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      z: coordinates[2],\n      m: coordinates[3]\n    };\n  } else if (layout === GeometryLayout.XY) {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1]\n    };\n  } else {\n    assert(false, 34); // Invalid geometry layout\n  }\n\n  return esriJSON;\n}\n/**\n * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @return {Object} Object with boolean hasZ and hasM keys.\n */\n\n\nfunction getHasZM(geometry) {\n  var layout = geometry.getLayout();\n  return {\n    hasZ: layout === GeometryLayout.XYZ || layout === GeometryLayout.XYZM,\n    hasM: layout === GeometryLayout.XYM || layout === GeometryLayout.XYZM\n  };\n}\n/**\n * @param {import(\"../geom/LineString.js\").default} lineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\n\n\nfunction writeLineStringGeometry(lineString, opt_options) {\n  var hasZM = getHasZM(lineString);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    paths: [\n    /** @type {Array<EsriJSONPosition>} */\n    lineString.getCoordinates()]\n  };\n}\n/**\n * @param {import(\"../geom/Polygon.js\").default} polygon Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\n\n\nfunction writePolygonGeometry(polygon, opt_options) {\n  // Esri geometries use the left-hand rule\n  var hasZM = getHasZM(polygon);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    rings:\n    /** @type {Array<Array<EsriJSONPosition>>} */\n    polygon.getCoordinates(false)\n  };\n}\n/**\n * @param {import(\"../geom/MultiLineString.js\").default} multiLineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\n\n\nfunction writeMultiLineStringGeometry(multiLineString, opt_options) {\n  var hasZM = getHasZM(multiLineString);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    paths:\n    /** @type {Array<Array<EsriJSONPosition>>} */\n    multiLineString.getCoordinates()\n  };\n}\n/**\n * @param {import(\"../geom/MultiPoint.js\").default} multiPoint Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONMultipoint} EsriJSON geometry.\n */\n\n\nfunction writeMultiPointGeometry(multiPoint, opt_options) {\n  var hasZM = getHasZM(multiPoint);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    points:\n    /** @type {Array<EsriJSONPosition>} */\n    multiPoint.getCoordinates()\n  };\n}\n/**\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\n\n\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  var hasZM = getHasZM(geometry);\n  var coordinates = geometry.getCoordinates(false);\n  var output = [];\n\n  for (var i = 0; i < coordinates.length; i++) {\n    for (var x = coordinates[i].length - 1; x >= 0; x--) {\n      output.push(coordinates[i][x]);\n    }\n  }\n\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    rings:\n    /** @type {Array<Array<EsriJSONPosition>>} */\n    output\n  };\n}\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONGeometry} EsriJSON geometry.\n */\n\n\nfunction writeGeometry(geometry, opt_options) {\n  var geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\n  return geometryWriter(transformGeometryWithOptions(geometry, true, opt_options), opt_options);\n}\n\nexport default EsriJSON;","map":{"version":3,"mappings":"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","names":["Feature","GeometryLayout","GeometryType","JSONFeature","LineString","LinearRing","MultiLineString","MultiPoint","MultiPolygon","Point","Polygon","assert","assign","isEmpty","containsExtent","deflateCoordinates","get","getProjection","linearRingIsClockwise","transformGeometryWithOptions","GEOMETRY_READERS","POINT","readPointGeometry","LINE_STRING","readLineStringGeometry","POLYGON","readPolygonGeometry","MULTI_POINT","readMultiPointGeometry","MULTI_LINE_STRING","readMultiLineStringGeometry","MULTI_POLYGON","readMultiPolygonGeometry","GEOMETRY_WRITERS","writePointGeometry","writeLineStringGeometry","writePolygonGeometry","writeMultiPointGeometry","writeMultiLineStringGeometry","writeMultiPolygonGeometry","__extends","opt_options","options","_super","_this","geometryName_","geometryName","EsriJSON","object","opt_idField","esriJSONFeature","geometry","readGeometry","feature","setGeometryName","setGeometry","attributes","setProperties","id","undefined","setId","esriJSONFeatureSet","features","esriJSONFeatures","i","ii","length","push","readFeatureFromObject","objectIdFieldName","spatialReference","crs","wkid","writeGeometry","adaptOptions","hasProperties","properties","getProperties","getGeometry","projection","dataProjection","featureProjection","Number","getCode","split","pop","getGeometryName","objects","writeFeatureObject","type","esriJSONPolyline","paths","esriJSONPolygon","layout","getGeometryLayout","rings","convertRings","_a","_b","geometryReader","flatRing","outerRings","holes","clockwise","hole","shift","matched","outerRing","containsHole","getExtent","reverse","point","m","z","x","y","XYZM","XYZ","XYM","XY","hasZ","hasM","points","coordinates","getCoordinates","esriJSON","getLayout","getHasZM","lineString","hasZM","polygon","multiLineString","multiPoint","output","geometryWriter","getType"],"sourceRoot":"","sources":["../src/format/EsriJSON.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}