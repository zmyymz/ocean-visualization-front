{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n\n/**\n * @module ol/webgl/PostProcessingPass\n */\nimport { getUid } from '../util.js';\nvar DEFAULT_VERTEX_SHADER = \"\\n  precision mediump float;\\n  \\n  attribute vec2 a_position;\\n  varying vec2 v_texCoord;\\n  varying vec2 v_screenCoord;\\n  \\n  uniform vec2 u_screenSize;\\n   \\n  void main() {\\n    v_texCoord = a_position * 0.5 + 0.5;\\n    v_screenCoord = v_texCoord * u_screenSize;\\n    gl_Position = vec4(a_position, 0.0, 1.0);\\n  }\\n\";\nvar DEFAULT_FRAGMENT_SHADER = \"\\n  precision mediump float;\\n   \\n  uniform sampler2D u_image;\\n  uniform float u_opacity;\\n   \\n  varying vec2 v_texCoord;\\n   \\n  void main() {\\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\\n  }\\n\";\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {number} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n *\n * @api\n */\n\nvar WebGLPostProcessingPass =\n/** @class */\nfunction () {\n  /**\n   * @param {Options} options Options.\n   */\n  function WebGLPostProcessingPass(options) {\n    this.gl_ = options.webGlContext;\n    var gl = this.gl_;\n    this.scaleRatio_ = options.scaleRatio || 1;\n    this.renderTargetTexture_ = gl.createTexture();\n    this.renderTargetTextureSize_ = null;\n    this.frameBuffer_ = gl.createFramebuffer(); // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n\n    var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, options.vertexShader || DEFAULT_VERTEX_SHADER);\n    gl.compileShader(vertexShader);\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, options.fragmentShader || DEFAULT_FRAGMENT_SHADER);\n    gl.compileShader(fragmentShader);\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_); // bind the vertices buffer for the frame buffer\n\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    var verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesArray), gl.STATIC_DRAW);\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(this.renderTargetProgram_, 'a_position');\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_screenSize');\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_opacity');\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_image');\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n\n    this.uniforms_ = [];\n    options.uniforms && Object.keys(options.uniforms).forEach(function (name) {\n      this.uniforms_.push({\n        value: options.uniforms[name],\n        location: gl.getUniformLocation(this.renderTargetProgram_, name)\n      });\n    }.bind(this));\n  }\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   * @api\n   */\n\n\n  WebGLPostProcessingPass.prototype.getGL = function () {\n    return this.gl_;\n  };\n  /**\n   * Initialize the render target texture of the post process, make sure it is at the\n   * right size and bind it as a render target for the next draw calls.\n   * The last step to be initialized will be the one where the primitives are rendered.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n   * @api\n   */\n\n\n  WebGLPostProcessingPass.prototype.init = function (frameState) {\n    var gl = this.getGL();\n    var textureSize = [gl.drawingBufferWidth * this.scaleRatio_, gl.drawingBufferHeight * this.scaleRatio_]; // rendering goes to my buffer\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n    gl.viewport(0, 0, textureSize[0], textureSize[1]); // if size has changed: adjust canvas & render target texture\n\n    if (!this.renderTargetTextureSize_ || this.renderTargetTextureSize_[0] !== textureSize[0] || this.renderTargetTextureSize_[1] !== textureSize[1]) {\n      this.renderTargetTextureSize_ = textureSize; // create a new texture\n\n      var level = 0;\n      var internalFormat = gl.RGBA;\n      var border = 0;\n      var format = gl.RGBA;\n      var type = gl.UNSIGNED_BYTE;\n      var data = null;\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, textureSize[0], textureSize[1], border, format, type, data);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); // bind the texture to the framebuffer\n\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.renderTargetTexture_, 0);\n    }\n  };\n  /**\n   * Render to the next postprocessing pass (or to the canvas if final pass).\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n   * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [postCompose] Called before composing.\n   * @api\n   */\n\n\n  WebGLPostProcessingPass.prototype.apply = function (frameState, nextPass, preCompose, postCompose) {\n    var gl = this.getGL();\n    var size = frameState.size;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, nextPass ? nextPass.getFrameBuffer() : null);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n\n    if (!nextPass) {\n      // clear the canvas if we are the first to render to it\n      // and preserveDrawingBuffer is true\n      var canvasId = getUid(gl.canvas);\n\n      if (!frameState.renderTargets[canvasId]) {\n        var attributes = gl.getContextAttributes();\n\n        if (attributes && attributes.preserveDrawingBuffer) {\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\n          gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n\n        frameState.renderTargets[canvasId] = true;\n      }\n    }\n\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.useProgram(this.renderTargetProgram_);\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n    gl.vertexAttribPointer(this.renderTargetAttribLocation_, 2, gl.FLOAT, false, 0, 0);\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\n    var opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n    this.applyUniforms(frameState);\n\n    if (preCompose) {\n      preCompose(gl, frameState);\n    }\n\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    if (postCompose) {\n      postCompose(gl, frameState);\n    }\n  };\n  /**\n   * @return {WebGLFramebuffer} Frame buffer\n   * @api\n   */\n\n\n  WebGLPostProcessingPass.prototype.getFrameBuffer = function () {\n    return this.frameBuffer_;\n  };\n  /**\n   * Sets the custom uniforms based on what was given in the constructor.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n\n\n  WebGLPostProcessingPass.prototype.applyUniforms = function (frameState) {\n    var gl = this.getGL();\n    var value;\n    var textureSlot = 1;\n    this.uniforms_.forEach(function (uniform) {\n      value = typeof uniform.value === 'function' ? uniform.value(frameState) : uniform.value; // apply value based on type\n\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.texture = gl.createTexture();\n        }\n\n        gl.activeTexture(gl[\"TEXTURE\".concat(textureSlot)]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        if (value instanceof ImageData) {\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, value.width, value.height, 0, gl.UNSIGNED_BYTE, new Uint8Array(value.data));\n        } else {\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n        } // fill texture slots\n\n\n        gl.uniform1i(uniform.location, textureSlot++);\n      } else if (Array.isArray(value)) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(uniform.location, value[0], value[1]);\n            return;\n\n          case 3:\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n            return;\n\n          case 4:\n            gl.uniform4f(uniform.location, value[0], value[1], value[2], value[3]);\n            return;\n\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(uniform.location, value);\n      }\n    });\n  };\n\n  return WebGLPostProcessingPass;\n}();\n\nexport default WebGLPostProcessingPass;","map":{"version":3,"mappings":"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","names":["getUid","DEFAULT_VERTEX_SHADER","DEFAULT_FRAGMENT_SHADER","options","gl_","webGlContext","gl","scaleRatio_","scaleRatio","renderTargetTexture_","createTexture","renderTargetTextureSize_","frameBuffer_","createFramebuffer","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","renderTargetProgram_","createProgram","attachShader","linkProgram","renderTargetVerticesBuffer_","createBuffer","verticesArray","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","renderTargetAttribLocation_","getAttribLocation","renderTargetUniformLocation_","getUniformLocation","renderTargetOpacityLocation_","renderTargetTextureLocation_","uniforms_","uniforms","Object","keys","forEach","name","push","value","location","bind","WebGLPostProcessingPass","frameState","getGL","textureSize","drawingBufferWidth","drawingBufferHeight","bindFramebuffer","FRAMEBUFFER","getFrameBuffer","viewport","level","internalFormat","RGBA","border","format","type","UNSIGNED_BYTE","data","bindTexture","TEXTURE_2D","texImage2D","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","framebufferTexture2D","COLOR_ATTACHMENT0","nextPass","preCompose","postCompose","size","activeTexture","TEXTURE0","canvasId","canvas","renderTargets","attributes","getContextAttributes","preserveDrawingBuffer","clearColor","clear","COLOR_BUFFER_BIT","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","useProgram","enableVertexAttribArray","vertexAttribPointer","FLOAT","uniform2f","uniform1i","opacity","layerStatesArray","layerIndex","uniform1f","applyUniforms","drawArrays","TRIANGLES","textureSlot","uniform","HTMLCanvasElement","ImageData","texture","width","height","Uint8Array","Array","isArray","length","uniform3f","uniform4f"],"sourceRoot":"","sources":["../src/webgl/PostProcessingPass.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}