{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n\n/**\n * @module ol/MapBrowserEventHandler\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport EventType from './events/EventType.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport Target from './events/Target.js';\nimport { PASSIVE_EVENT_LISTENERS } from './has.js';\nimport { VOID } from './functions.js';\nimport { listen, unlistenByKey } from './events.js';\n\nvar MapBrowserEventHandler =\n/** @class */\nfunction (_super) {\n  __extends(MapBrowserEventHandler, _super);\n  /**\n   * @param {import(\"./PluggableMap.js\").default} map The map with the viewport to listen to events on.\n   * @param {number} [moveTolerance] The minimal distance the pointer must travel to trigger a move.\n   */\n\n\n  function MapBrowserEventHandler(map, moveTolerance) {\n    var _this = _super.call(this, map) || this;\n    /**\n     * This is the element that we will listen to the real events on.\n     * @type {import(\"./PluggableMap.js\").default}\n     * @private\n     */\n\n\n    _this.map_ = map;\n    /**\n     * @type {any}\n     * @private\n     */\n\n    _this.clickTimeoutId_;\n    /**\n     * Emulate dblclick and singleclick. Will be true when only one pointer is active.\n     * @type {boolean}\n     */\n\n    _this.emulateClicks_ = false;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.dragging_ = false;\n    /**\n     * @type {!Array<import(\"./events.js\").EventsKey>}\n     * @private\n     */\n\n    _this.dragListenerKeys_ = [];\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.moveTolerance_ = moveTolerance === undefined ? 1 : moveTolerance;\n    /**\n     * The most recent \"down\" type event (or null if none have occurred).\n     * Set on pointerdown.\n     * @type {PointerEvent|null}\n     * @private\n     */\n\n    _this.down_ = null;\n\n    var element = _this.map_.getViewport();\n    /**\n     * @type {number}\n     * @private\n     */\n\n\n    _this.activePointers_ = 0;\n    /**\n     * @type {!Object<number, boolean>}\n     * @private\n     */\n\n    _this.trackedTouches_ = {};\n    _this.element_ = element;\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n\n    _this.pointerdownListenerKey_ = listen(element, PointerEventType.POINTERDOWN, _this.handlePointerDown_, _this);\n    /**\n     * @type {PointerEvent}\n     * @private\n     */\n\n    _this.originalPointerMoveEvent_;\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n\n    _this.relayedListenerKey_ = listen(element, PointerEventType.POINTERMOVE, _this.relayEvent_, _this);\n    /**\n     * @private\n     */\n\n    _this.boundHandleTouchMove_ = _this.handleTouchMove_.bind(_this);\n\n    _this.element_.addEventListener(EventType.TOUCHMOVE, _this.boundHandleTouchMove_, PASSIVE_EVENT_LISTENERS ? {\n      passive: false\n    } : false);\n\n    return _this;\n  }\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.emulateClick_ = function (pointerEvent) {\n    var newEvent = new MapBrowserEvent(MapBrowserEventType.CLICK, this.map_, pointerEvent);\n    this.dispatchEvent(newEvent);\n\n    if (this.clickTimeoutId_ !== undefined) {\n      // double-click\n      clearTimeout(this.clickTimeoutId_);\n      this.clickTimeoutId_ = undefined;\n      newEvent = new MapBrowserEvent(MapBrowserEventType.DBLCLICK, this.map_, pointerEvent);\n      this.dispatchEvent(newEvent);\n    } else {\n      // click\n      this.clickTimeoutId_ = setTimeout(\n      /** @this {MapBrowserEventHandler} */\n      function () {\n        this.clickTimeoutId_ = undefined;\n        var newEvent = new MapBrowserEvent(MapBrowserEventType.SINGLECLICK, this.map_, pointerEvent);\n        this.dispatchEvent(newEvent);\n      }.bind(this), 250);\n    }\n  };\n  /**\n   * Keeps track on how many pointers are currently active.\n   *\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.updateActivePointers_ = function (pointerEvent) {\n    var event = pointerEvent;\n\n    if (event.type == MapBrowserEventType.POINTERUP || event.type == MapBrowserEventType.POINTERCANCEL) {\n      delete this.trackedTouches_[event.pointerId];\n    } else if (event.type == MapBrowserEventType.POINTERDOWN) {\n      this.trackedTouches_[event.pointerId] = true;\n    }\n\n    this.activePointers_ = Object.keys(this.trackedTouches_).length;\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.handlePointerUp_ = function (pointerEvent) {\n    this.updateActivePointers_(pointerEvent);\n    var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERUP, this.map_, pointerEvent);\n    this.dispatchEvent(newEvent); // We emulate click events on left mouse button click, touch contact, and pen\n    // contact. isMouseActionButton returns true in these cases (evt.button is set\n    // to 0).\n    // See http://www.w3.org/TR/pointerevents/#button-states\n    // We only fire click, singleclick, and doubleclick if nobody has called\n    // event.preventDefault().\n\n    if (this.emulateClicks_ && !newEvent.defaultPrevented && !this.dragging_ && this.isMouseActionButton_(pointerEvent)) {\n      this.emulateClick_(this.down_);\n    }\n\n    if (this.activePointers_ === 0) {\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n      this.dragging_ = false;\n      this.down_ = null;\n    }\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} If the left mouse button was pressed.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.isMouseActionButton_ = function (pointerEvent) {\n    return pointerEvent.button === 0;\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.handlePointerDown_ = function (pointerEvent) {\n    this.emulateClicks_ = this.activePointers_ === 0;\n    this.updateActivePointers_(pointerEvent);\n    var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERDOWN, this.map_, pointerEvent);\n    this.dispatchEvent(newEvent); // Store a copy of the down event\n\n    this.down_ =\n    /** @type {PointerEvent} */\n    {};\n\n    for (var property in pointerEvent) {\n      var value = pointerEvent[property];\n      this.down_[property] = typeof value === 'function' ? VOID : value;\n    }\n\n    if (this.dragListenerKeys_.length === 0) {\n      var doc = this.map_.getOwnerDocument();\n      this.dragListenerKeys_.push(listen(doc, MapBrowserEventType.POINTERMOVE, this.handlePointerMove_, this), listen(doc, MapBrowserEventType.POINTERUP, this.handlePointerUp_, this),\n      /* Note that the listener for `pointercancel is set up on\n       * `pointerEventHandler_` and not `documentPointerEventHandler_` like\n       * the `pointerup` and `pointermove` listeners.\n       *\n       * The reason for this is the following: `TouchSource.vacuumTouches_()`\n       * issues `pointercancel` events, when there was no `touchend` for a\n       * `touchstart`. Now, let's say a first `touchstart` is registered on\n       * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.\n       * But `documentPointerEventHandler_` doesn't know about the first\n       * `touchstart`. If there is no `touchend` for the `touchstart`, we can\n       * only receive a `touchcancel` from `pointerEventHandler_`, because it is\n       * only registered there.\n       */\n      listen(this.element_, MapBrowserEventType.POINTERCANCEL, this.handlePointerUp_, this));\n\n      if (this.element_.getRootNode && this.element_.getRootNode() !== doc) {\n        this.dragListenerKeys_.push(listen(this.element_.getRootNode(), MapBrowserEventType.POINTERUP, this.handlePointerUp_, this));\n      }\n    }\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.handlePointerMove_ = function (pointerEvent) {\n    // Between pointerdown and pointerup, pointermove events are triggered.\n    // To avoid a 'false' touchmove event to be dispatched, we test if the pointer\n    // moved a significant distance.\n    if (this.isMoving_(pointerEvent)) {\n      this.dragging_ = true;\n      var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERDRAG, this.map_, pointerEvent, this.dragging_);\n      this.dispatchEvent(newEvent);\n    }\n  };\n  /**\n   * Wrap and relay a pointer event.  Note that this requires that the type\n   * string for the MapBrowserEvent matches the PointerEvent type.\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.relayEvent_ = function (pointerEvent) {\n    this.originalPointerMoveEvent_ = pointerEvent;\n    var dragging = !!(this.down_ && this.isMoving_(pointerEvent));\n    this.dispatchEvent(new MapBrowserEvent(pointerEvent.type, this.map_, pointerEvent, dragging));\n  };\n  /**\n   * Flexible handling of a `touch-action: none` css equivalent: because calling\n   * `preventDefault()` on a `pointermove` event does not stop native page scrolling\n   * and zooming, we also listen for `touchmove` and call `preventDefault()` on it\n   * when an interaction (currently `DragPan` handles the event.\n   * @param {TouchEvent} event Event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.handleTouchMove_ = function (event) {\n    // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`\n    // may not be initialized yet when we get here on a platform without native pointer events.\n    var originalEvent = this.originalPointerMoveEvent_;\n\n    if ((!originalEvent || originalEvent.defaultPrevented) && (typeof event.cancelable !== 'boolean' || event.cancelable === true)) {\n      event.preventDefault();\n    }\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} Is moving.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.isMoving_ = function (pointerEvent) {\n    return this.dragging_ || Math.abs(pointerEvent.clientX - this.down_.clientX) > this.moveTolerance_ || Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_;\n  };\n  /**\n   * Clean up.\n   */\n\n\n  MapBrowserEventHandler.prototype.disposeInternal = function () {\n    if (this.relayedListenerKey_) {\n      unlistenByKey(this.relayedListenerKey_);\n      this.relayedListenerKey_ = null;\n    }\n\n    this.element_.removeEventListener(EventType.TOUCHMOVE, this.boundHandleTouchMove_);\n\n    if (this.pointerdownListenerKey_) {\n      unlistenByKey(this.pointerdownListenerKey_);\n      this.pointerdownListenerKey_ = null;\n    }\n\n    this.dragListenerKeys_.forEach(unlistenByKey);\n    this.dragListenerKeys_.length = 0;\n    this.element_ = null;\n\n    _super.prototype.disposeInternal.call(this);\n  };\n\n  return MapBrowserEventHandler;\n}(Target);\n\nexport default MapBrowserEventHandler;","map":{"version":3,"mappings":"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","names":["EventType","MapBrowserEvent","MapBrowserEventType","PointerEventType","Target","PASSIVE_EVENT_LISTENERS","VOID","listen","unlistenByKey","__extends","map","moveTolerance","_super","_this","map_","clickTimeoutId_","emulateClicks_","dragging_","dragListenerKeys_","moveTolerance_","undefined","down_","element","getViewport","activePointers_","trackedTouches_","element_","pointerdownListenerKey_","POINTERDOWN","handlePointerDown_","originalPointerMoveEvent_","relayedListenerKey_","POINTERMOVE","relayEvent_","boundHandleTouchMove_","handleTouchMove_","bind","addEventListener","TOUCHMOVE","passive","MapBrowserEventHandler","pointerEvent","newEvent","CLICK","dispatchEvent","clearTimeout","DBLCLICK","setTimeout","SINGLECLICK","event","type","POINTERUP","POINTERCANCEL","pointerId","Object","keys","length","updateActivePointers_","defaultPrevented","isMouseActionButton_","emulateClick_","forEach","button","property","value","doc","getOwnerDocument","push","handlePointerMove_","handlePointerUp_","getRootNode","isMoving_","POINTERDRAG","dragging","originalEvent","cancelable","preventDefault","Math","abs","clientX","clientY","removeEventListener","disposeInternal","call"],"sourceRoot":"","sources":["src/MapBrowserEventHandler.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}