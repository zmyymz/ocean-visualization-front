{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\n * @module ol/source/ImageArcGISRest\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport { appendParams } from '../uri.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { containsExtent, getHeight, getWidth } from '../extent.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest~TileArcGISRest} data source.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\n\nvar ImageArcGISRest =\n/** @class */\nfunction (_super) {\n  __extends(ImageArcGISRest, _super);\n  /**\n   * @param {Options} [opt_options] Image ArcGIS Rest Options.\n   */\n\n\n  function ImageArcGISRest(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      interpolate: interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions\n    }) || this;\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    _this.url_ = options.url;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n\n    _this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    _this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n\n    _this.image_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    _this.imageSize_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.renderedRevision_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n    return _this;\n  }\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  ImageArcGISRest.prototype.getParams = function () {\n    return this.params_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n\n\n  ImageArcGISRest.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n    var image = this.image_;\n\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), extent)) {\n      return image;\n    }\n\n    var params = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true\n    };\n    assign(params, this.params_);\n    extent = extent.slice();\n    var centerX = (extent[0] + extent[2]) / 2;\n    var centerY = (extent[1] + extent[3]) / 2;\n\n    if (this.ratio_ != 1) {\n      var halfWidth = this.ratio_ * getWidth(extent) / 2;\n      var halfHeight = this.ratio_ * getHeight(extent) / 2;\n      extent[0] = centerX - halfWidth;\n      extent[1] = centerY - halfHeight;\n      extent[2] = centerX + halfWidth;\n      extent[3] = centerY + halfHeight;\n    }\n\n    var imageResolution = resolution / pixelRatio; // Compute an integer width and height.\n\n    var width = Math.ceil(getWidth(extent) / imageResolution);\n    var height = Math.ceil(getHeight(extent) / imageResolution); // Modify the extent to match the integer width and height.\n\n    extent[0] = centerX - imageResolution * width / 2;\n    extent[2] = centerX + imageResolution * width / 2;\n    extent[1] = centerY - imageResolution * height / 2;\n    extent[3] = centerY + imageResolution * height / 2;\n    this.imageSize_[0] = width;\n    this.imageSize_[1] = height;\n    var url = this.getRequestUrl_(extent, this.imageSize_, pixelRatio, projection, params);\n    this.image_ = new ImageWrapper(extent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);\n    this.renderedRevision_ = this.getRevision();\n    this.image_.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n    return this.image_;\n  };\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n\n\n  ImageArcGISRest.prototype.getImageLoadFunction = function () {\n    return this.imageLoadFunction_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n\n\n  ImageArcGISRest.prototype.getRequestUrl_ = function (extent, size, pixelRatio, projection, params) {\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    // (if there is no numeric portion the entire projection code must\n    // form a valid ArcGIS SpatialReference definition).\n    var srid = projection.getCode().split(/:(?=\\d+$)/).pop();\n    params['SIZE'] = size[0] + ',' + size[1];\n    params['BBOX'] = extent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(90 * pixelRatio);\n    var url = this.url_;\n    var modifiedUrl = url.replace(/MapServer\\/?$/, 'MapServer/export').replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n\n    if (modifiedUrl == url) {\n      assert(false, 50); // `options.featureTypes` should be an Array\n    }\n\n    return appendParams(modifiedUrl, params);\n  };\n  /**\n   * Return the URL used for this ArcGIS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n\n\n  ImageArcGISRest.prototype.getUrl = function () {\n    return this.url_;\n  };\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n\n\n  ImageArcGISRest.prototype.setImageLoadFunction = function (imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  };\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n\n\n  ImageArcGISRest.prototype.setUrl = function (url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  ImageArcGISRest.prototype.updateParams = function (params) {\n    assign(this.params_, params);\n    this.image_ = null;\n    this.changed();\n  };\n\n  return ImageArcGISRest;\n}(ImageSource);\n\nexport default ImageArcGISRest;","map":{"version":3,"mappings":"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","names":["EventType","ImageSource","defaultImageLoadFunction","ImageWrapper","appendParams","assert","assign","containsExtent","getHeight","getWidth","__extends","opt_options","options","interpolate","imageSmoothing","undefined","_super","attributions","projection","resolutions","_this","crossOrigin_","crossOrigin","hidpi_","hidpi","url_","url","imageLoadFunction_","imageLoadFunction","params_","params","image_","imageSize_","renderedRevision_","ratio_","ratio","ImageArcGISRest","extent","resolution","pixelRatio","findNearestResolution","image","getRevision","getResolution","getPixelRatio","getExtent","slice","centerX","centerY","halfWidth","halfHeight","imageResolution","width","Math","ceil","height","getRequestUrl_","addEventListener","CHANGE","handleImageChange","bind","size","srid","getCode","split","pop","join","round","modifiedUrl","replace","changed"],"sourceRoot":"","sources":["../src/source/ImageArcGISRest.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}