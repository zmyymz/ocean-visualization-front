{"ast":null,"code":"import _asyncToGenerator from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.error.cause.js\";\nvar registry = new Map();\nexport function addDecoder(cases, importFn) {\n  if (!Array.isArray(cases)) {\n    cases = [cases]; // eslint-disable-line no-param-reassign\n  }\n\n  cases.forEach(function (c) {\n    return registry.set(c, importFn);\n  });\n}\nexport function getDecoder(_x) {\n  return _getDecoder.apply(this, arguments);\n} // Add default decoders to registry (end-user may override with other implementations)\n\nfunction _getDecoder() {\n  _getDecoder = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(fileDirectory) {\n    var importFn, Decoder;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            importFn = registry.get(fileDirectory.Compression);\n\n            if (importFn) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new Error(\"Unknown compression method identifier: \".concat(fileDirectory.Compression));\n\n          case 3:\n            _context.next = 5;\n            return importFn();\n\n          case 5:\n            Decoder = _context.sent;\n            return _context.abrupt(\"return\", new Decoder(fileDirectory));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getDecoder.apply(this, arguments);\n}\n\naddDecoder([undefined, 1], function () {\n  return import('./raw.js').then(function (m) {\n    return m.default;\n  });\n});\naddDecoder(5, function () {\n  return import('./lzw.js').then(function (m) {\n    return m.default;\n  });\n});\naddDecoder(6, function () {\n  throw new Error('old style JPEG compression is not supported.');\n});\naddDecoder(7, function () {\n  return import('./jpeg.js').then(function (m) {\n    return m.default;\n  });\n});\naddDecoder([8, 32946], function () {\n  return import('./deflate.js').then(function (m) {\n    return m.default;\n  });\n});\naddDecoder(32773, function () {\n  return import('./packbits.js').then(function (m) {\n    return m.default;\n  });\n});\naddDecoder(34887, function () {\n  return import('./lerc.js').then(function (m) {\n    return m.default;\n  });\n});\naddDecoder(50001, function () {\n  return import('./webimage.js').then(function (m) {\n    return m.default;\n  });\n});","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/geotiff/dist-module/compression/index.js"],"names":["registry","Map","addDecoder","cases","importFn","Array","isArray","forEach","c","set","getDecoder","fileDirectory","get","Compression","Error","Decoder","undefined","then","m","default"],"mappings":";;;;;;;;AAAA,IAAMA,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;AAEA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,QAA3B,EAAqC;AAC1C,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAL,EAA2B;AACzBA,IAAAA,KAAK,GAAG,CAACA,KAAD,CAAR,CADyB,CACR;AAClB;;AACDA,EAAAA,KAAK,CAACI,OAAN,CAAc,UAACC,CAAD;AAAA,WAAOR,QAAQ,CAACS,GAAT,CAAaD,CAAb,EAAgBJ,QAAhB,CAAP;AAAA,GAAd;AACD;AAED,gBAAsBM,UAAtB;AAAA;AAAA,C,CASA;;;wEATO,iBAA0BC,aAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACCP,YAAAA,QADD,GACYJ,QAAQ,CAACY,GAAT,CAAaD,aAAa,CAACE,WAA3B,CADZ;;AAAA,gBAEAT,QAFA;AAAA;AAAA;AAAA;;AAAA,kBAGG,IAAIU,KAAJ,kDAAoDH,aAAa,CAACE,WAAlE,EAHH;;AAAA;AAAA;AAAA,mBAKiBT,QAAQ,EALzB;;AAAA;AAKCW,YAAAA,OALD;AAAA,6CAME,IAAIA,OAAJ,CAAYJ,aAAZ,CANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAUPT,UAAU,CAAC,CAACc,SAAD,EAAY,CAAZ,CAAD,EAAiB;AAAA,SAAM,OAAO,UAAP,EAAmBC,IAAnB,CAAwB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,OAAT;AAAA,GAAxB,CAAN;AAAA,CAAjB,CAAV;AACAjB,UAAU,CAAC,CAAD,EAAI;AAAA,SAAM,OAAO,UAAP,EAAmBe,IAAnB,CAAwB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,OAAT;AAAA,GAAxB,CAAN;AAAA,CAAJ,CAAV;AACAjB,UAAU,CAAC,CAAD,EAAI,YAAM;AAClB,QAAM,IAAIY,KAAJ,CAAU,8CAAV,CAAN;AACD,CAFS,CAAV;AAGAZ,UAAU,CAAC,CAAD,EAAI;AAAA,SAAM,OAAO,WAAP,EAAoBe,IAApB,CAAyB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,OAAT;AAAA,GAAzB,CAAN;AAAA,CAAJ,CAAV;AACAjB,UAAU,CAAC,CAAC,CAAD,EAAI,KAAJ,CAAD,EAAa;AAAA,SAAM,OAAO,cAAP,EAAuBe,IAAvB,CAA4B,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,OAAT;AAAA,GAA5B,CAAN;AAAA,CAAb,CAAV;AACAjB,UAAU,CAAC,KAAD,EAAQ;AAAA,SAAM,OAAO,eAAP,EAAwBe,IAAxB,CAA6B,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,OAAT;AAAA,GAA7B,CAAN;AAAA,CAAR,CAAV;AACAjB,UAAU,CAAC,KAAD,EAAQ;AAAA,SAAM,OAAO,WAAP,EAAoBe,IAApB,CAAyB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,OAAT;AAAA,GAAzB,CAAN;AAAA,CAAR,CAAV;AACAjB,UAAU,CAAC,KAAD,EAAQ;AAAA,SAAM,OAAO,eAAP,EAAwBe,IAAxB,CAA6B,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,OAAT;AAAA,GAA7B,CAAN;AAAA,CAAR,CAAV","sourcesContent":["const registry = new Map();\n\nexport function addDecoder(cases, importFn) {\n  if (!Array.isArray(cases)) {\n    cases = [cases]; // eslint-disable-line no-param-reassign\n  }\n  cases.forEach((c) => registry.set(c, importFn));\n}\n\nexport async function getDecoder(fileDirectory) {\n  const importFn = registry.get(fileDirectory.Compression);\n  if (!importFn) {\n    throw new Error(`Unknown compression method identifier: ${fileDirectory.Compression}`);\n  }\n  const Decoder = await importFn();\n  return new Decoder(fileDirectory);\n}\n\n// Add default decoders to registry (end-user may override with other implementations)\naddDecoder([undefined, 1], () => import('./raw.js').then((m) => m.default));\naddDecoder(5, () => import('./lzw.js').then((m) => m.default));\naddDecoder(6, () => {\n  throw new Error('old style JPEG compression is not supported.');\n});\naddDecoder(7, () => import('./jpeg.js').then((m) => m.default));\naddDecoder([8, 32946], () => import('./deflate.js').then((m) => m.default));\naddDecoder(32773, () => import('./packbits.js').then((m) => m.default));\naddDecoder(34887, () => import('./lerc.js').then((m) => m.default));\naddDecoder(50001, () => import('./webimage.js').then((m) => m.default));\n"]},"metadata":{},"sourceType":"module"}