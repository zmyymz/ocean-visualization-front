{"ast":null,"code":"/**\n * @module ol/loadingstrategy\n */\nimport { fromUserExtent, fromUserResolution, toUserExtent } from './proj.js';\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\n\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\n\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number, import(\"./proj.js\").Projection): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\n\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj.js\").Projection} projection Projection.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution, projection) {\n      var z = tileGrid.getZForResolution(fromUserResolution(resolution, projection));\n      var tileRange = tileGrid.getTileRangeForExtentAndZ(fromUserExtent(extent, projection), z);\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n\n      var extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n\n      var tileCoord = [z, 0, 0];\n\n      for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {\n        for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {\n          extents.push(toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection));\n        }\n      }\n\n      return extents;\n    }\n  );\n}","map":{"version":3,"mappings":"AAAA;;;AAIA,SAAQA,cAAR,EAAwBC,kBAAxB,EAA4CC,YAA5C,QAA+D,WAA/D;AAEA;;;;;;;;AAOA,OAAM,SAAUC,GAAV,CAAcC,MAAd,EAAsBC,UAAtB,EAAgC;AACpC,SAAO,CAAC,CAAC,CAACC,QAAF,EAAY,CAACA,QAAb,EAAuBA,QAAvB,EAAiCA,QAAjC,CAAD,CAAP;AACD;AAED;;;;;;;;;AAQA,OAAM,SAAUC,IAAV,CAAeH,MAAf,EAAuBC,UAAvB,EAAiC;AACrC,SAAO,CAACD,MAAD,CAAP;AACD;AAED;;;;;;;AAMA,OAAM,SAAUI,IAAV,CAAeC,QAAf,EAAuB;AAC3B;AACE;;;;;;AAMA,cAAUL,MAAV,EAAkBC,UAAlB,EAA8BK,UAA9B,EAAwC;AACtC,UAAMC,CAAC,GAAGF,QAAQ,CAACG,iBAAT,CACRX,kBAAkB,CAACI,UAAD,EAAaK,UAAb,CADV,CAAV;AAGA,UAAMG,SAAS,GAAGJ,QAAQ,CAACK,yBAAT,CAChBd,cAAc,CAACI,MAAD,EAASM,UAAT,CADE,EAEhBC,CAFgB,CAAlB;AAIA;;AACA,UAAMI,OAAO,GAAG,EAAhB;AACA;;AACA,UAAMC,SAAS,GAAG,CAACL,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAlB;;AACA,WACEK,SAAS,CAAC,CAAD,CAAT,GAAeH,SAAS,CAACI,IAD3B,EAEED,SAAS,CAAC,CAAD,CAAT,IAAgBH,SAAS,CAACK,IAF5B,EAGE,EAAEF,SAAS,CAAC,CAAD,CAHb,EAIE;AACA,aACEA,SAAS,CAAC,CAAD,CAAT,GAAeH,SAAS,CAACM,IAD3B,EAEEH,SAAS,CAAC,CAAD,CAAT,IAAgBH,SAAS,CAACO,IAF5B,EAGE,EAAEJ,SAAS,CAAC,CAAD,CAHb,EAIE;AACAD,iBAAO,CAACM,IAAR,CACEnB,YAAY,CAACO,QAAQ,CAACa,kBAAT,CAA4BN,SAA5B,CAAD,EAAyCN,UAAzC,CADd;AAGD;AACF;;AACD,aAAOK,OAAP;AACD;AAnCH;AAqCD","names":["fromUserExtent","fromUserResolution","toUserExtent","all","extent","resolution","Infinity","bbox","tile","tileGrid","projection","z","getZForResolution","tileRange","getTileRangeForExtentAndZ","extents","tileCoord","minX","maxX","minY","maxY","push","getTileCoordExtent"],"sourceRoot":"","sources":["src/loadingstrategy.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}