{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\n\n/**\n * Operators and utilities used for style expressions\n * @module ol/style/expressions\n */\nimport PaletteTexture from '../webgl/PaletteTexture.js';\nimport { Uniforms } from '../renderer/webgl/TileLayer.js';\nimport { asArray, fromString, isStringColor } from '../color.js';\nimport { log2 } from '../math.js';\n/**\n * Base type used for literal style parameters; can be a number literal or the output of an operator,\n * which in turns takes {@link import(\"./expressions.js\").ExpressionValue} arguments.\n *\n * The following operators can be used:\n *\n * * Reading operators:\n *   * `['band', bandIndex, xOffset, yOffset]` For tile layers only. Fetches pixel values from band\n *     `bandIndex` of the source's data. The first `bandIndex` of the source data is `1`. Fetched values\n *     are in the 0..1 range. {@link import(\"../source/TileImage.js\").default} sources have 4 bands: red,\n *     green, blue and alpha. {@link import(\"../source/DataTile.js\").default} sources can have any number\n *     of bands, depending on the underlying data source and\n *     {@link import(\"../source/GeoTIFF.js\").Options configuration}. `xOffset` and `yOffset` are optional\n *     and allow specifying pixel offsets for x and y. This is used for sampling data from neighboring pixels.\n *   * `['get', 'attributeName']` fetches a feature attribute (it will be prefixed by `a_` in the shader)\n *     Note: those will be taken from the attributes provided to the renderer\n *   * `['resolution']` returns the current resolution\n *   * `['time']` returns the time in seconds since the creation of the layer\n *   * `['var', 'varName']` fetches a value from the style variables, or 0 if undefined\n *   * `['zoom']` returns the current zoom level\n *\n * * Math operators:\n *   * `['*', value1, value2]` multiplies `value1` by `value2`\n *   * `['/', value1, value2]` divides `value1` by `value2`\n *   * `['+', value1, value2]` adds `value1` and `value2`\n *   * `['-', value1, value2]` subtracts `value2` from `value1`\n *   * `['clamp', value, low, high]` clamps `value` between `low` and `high`\n *   * `['%', value1, value2]` returns the result of `value1 % value2` (modulo)\n *   * `['^', value1, value2]` returns the value of `value1` raised to the `value2` power\n *   * `['abs', value1]` returns the absolute value of `value1`\n *   * `['floor', value1]` returns the nearest integer less than or equal to `value1`\n *   * `['round', value1]` returns the nearest integer to `value1`\n *   * `['ceil', value1]` returns the nearest integer greater than or equal to `value1`\n *   * `['sin', value1]` returns the sine of `value1`\n *   * `['cos', value1]` returns the cosine of `value1`\n *   * `['atan', value1, value2]` returns `atan2(value1, value2)`. If `value2` is not provided, returns `atan(value1)`\n *\n * * Transform operators:\n *   * `['case', condition1, output1, ...conditionN, outputN, fallback]` selects the first output whose corresponding\n *     condition evaluates to `true`. If no match is found, returns the `fallback` value.\n *     All conditions should be `boolean`, output and fallback can be any kind.\n *   * `['match', input, match1, output1, ...matchN, outputN, fallback]` compares the `input` value against all\n *     provided `matchX` values, returning the output associated with the first valid match. If no match is found,\n *     returns the `fallback` value.\n *     `input` and `matchX` values must all be of the same type, and can be `number` or `string`. `outputX` and\n *     `fallback` values must be of the same type, and can be of any kind.\n *   * `['interpolate', interpolation, input, stop1, output1, ...stopN, outputN]` returns a value by interpolating between\n *     pairs of inputs and outputs; `interpolation` can either be `['linear']` or `['exponential', base]` where `base` is\n *     the rate of increase from stop A to stop B (i.e. power to which the interpolation ratio is raised); a value\n *     of 1 is equivalent to `['linear']`.\n *     `input` and `stopX` values must all be of type `number`. `outputX` values can be `number` or `color` values.\n *     Note: `input` will be clamped between `stop1` and `stopN`, meaning that all output values will be comprised\n *     between `output1` and `outputN`.\n *\n * * Logical operators:\n *   * `['<', value1, value2]` returns `true` if `value1` is strictly lower than `value2`, or `false` otherwise.\n *   * `['<=', value1, value2]` returns `true` if `value1` is lower than or equals `value2`, or `false` otherwise.\n *   * `['>', value1, value2]` returns `true` if `value1` is strictly greater than `value2`, or `false` otherwise.\n *   * `['>=', value1, value2]` returns `true` if `value1` is greater than or equals `value2`, or `false` otherwise.\n *   * `['==', value1, value2]` returns `true` if `value1` equals `value2`, or `false` otherwise.\n *   * `['!=', value1, value2]` returns `true` if `value1` does not equal `value2`, or `false` otherwise.\n *   * `['!', value1]` returns `false` if `value1` is `true` or greater than `0`, or `true` otherwise.\n *   * `['all', value1, value2, ...]` returns `true` if all the inputs are `true`, `false` otherwise.\n *   * `['any', value1, value2, ...]` returns `true` if any of the inputs are `true`, `false` otherwise.\n *   * `['between', value1, value2, value3]` returns `true` if `value1` is contained between `value2` and `value3`\n *     (inclusively), or `false` otherwise.\n *\n * * Conversion operators:\n *   * `['array', value1, ...valueN]` creates a numerical array from `number` values; please note that the amount of\n *     values can currently only be 2, 3 or 4.\n *   * `['color', red, green, blue, alpha]` creates a `color` value from `number` values; the `alpha` parameter is\n *     optional; if not specified, it will be set to 1.\n *     Note: `red`, `green` and `blue` components must be values between 0 and 255; `alpha` between 0 and 1.\n *   * `['palette', index, colors]` picks a `color` value from an array of colors using the given index; the `index`\n *     expression must evaluate to a number; the items in the `colors` array must be strings with hex colors\n *     (e.g. `'#86A136'`), colors using the rgba[a] functional notation (e.g. `'rgb(134, 161, 54)'` or `'rgba(134, 161, 54, 1)'`),\n *     named colors (e.g. `'red'`), or array literals with 3 ([r, g, b]) or 4 ([r, g, b, a]) values (with r, g, and b\n *     in the 0-255 range and a in the 0-1 range).\n *\n * Values can either be literals or another operator, as they will be evaluated recursively.\n * Literal values can be of the following types:\n * * `boolean`\n * * `number`\n * * `string`\n * * {@link module:ol/color~Color}\n *\n * @typedef {Array<*>|import(\"../color.js\").Color|string|number|boolean} ExpressionValue\n * @api\n */\n\n/**\n * Possible inferred types from a given value or expression.\n * Note: these are binary flags.\n * @enum {number}\n */\n\nexport var ValueTypes = {\n  NUMBER: 1,\n  STRING: 2,\n  COLOR: 4,\n  BOOLEAN: 8,\n  NUMBER_ARRAY: 16,\n  ANY: 31,\n  NONE: 0\n};\n/**\n * An operator declaration must contain two methods: `getReturnType` which returns a type based on\n * the operator arguments, and `toGlsl` which returns a GLSL-compatible string.\n * Note: both methods can process arguments recursively.\n * @typedef {Object} Operator\n * @property {function(Array<ExpressionValue>): ValueTypes|number} getReturnType Returns one or several types\n * @property {function(ParsingContext, Array<ExpressionValue>, ValueTypes=): string} toGlsl Returns a GLSL-compatible string\n * Note: takes in an optional type hint as 3rd parameter\n */\n\n/**\n * Operator declarations\n * @type {Object<string, Operator>}\n */\n\nexport var Operators = {};\n/**\n * Returns the possible types for a given value (each type being a binary flag)\n * To test a value use e.g. `getValueType(v) & ValueTypes.BOOLEAN`\n * @param {ExpressionValue} value Value\n * @return {ValueTypes|number} Type or types inferred from the value\n */\n\nexport function getValueType(value) {\n  if (typeof value === 'number') {\n    return ValueTypes.NUMBER;\n  }\n\n  if (typeof value === 'boolean') {\n    return ValueTypes.BOOLEAN;\n  }\n\n  if (typeof value === 'string') {\n    if (isStringColor(value)) {\n      return ValueTypes.COLOR | ValueTypes.STRING;\n    }\n\n    return ValueTypes.STRING;\n  }\n\n  if (!Array.isArray(value)) {\n    throw new Error(\"Unhandled value type: \".concat(JSON.stringify(value)));\n  }\n\n  var valueArr =\n  /** @type {Array<*>} */\n  value;\n  var onlyNumbers = valueArr.every(function (v) {\n    return typeof v === 'number';\n  });\n\n  if (onlyNumbers) {\n    if (valueArr.length === 3 || valueArr.length === 4) {\n      return ValueTypes.COLOR | ValueTypes.NUMBER_ARRAY;\n    }\n\n    return ValueTypes.NUMBER_ARRAY;\n  }\n\n  if (typeof valueArr[0] !== 'string') {\n    throw new Error(\"Expected an expression operator but received: \".concat(JSON.stringify(valueArr)));\n  }\n\n  var operator = Operators[valueArr[0]];\n\n  if (operator === undefined) {\n    throw new Error(\"Unrecognized expression operator: \".concat(JSON.stringify(valueArr)));\n  }\n\n  return operator.getReturnType(valueArr.slice(1));\n}\n/**\n * Checks if only one value type is enabled in the input number.\n * @param {ValueTypes|number} valueType Number containing value type binary flags\n * @return {boolean} True if only one type flag is enabled, false if zero or multiple\n */\n\nexport function isTypeUnique(valueType) {\n  return log2(valueType) % 1 === 0;\n}\n/**\n * Context available during the parsing of an expression.\n * @typedef {Object} ParsingContext\n * @property {boolean} [inFragmentShader] If false, means the expression output should be made for a vertex shader\n * @property {Array<string>} variables List of variables used in the expression; contains **unprefixed names**\n * @property {Array<string>} attributes List of attributes used in the expression; contains **unprefixed names**\n * @property {Object<string, number>} stringLiteralsMap This object maps all encountered string values to a number\n * @property {Object<string, string>} functions Lookup of functions used by the style.\n * @property {number} [bandCount] Number of bands per pixel.\n * @property {Array<PaletteTexture>} [paletteTextures] List of palettes used by the style.\n */\n\n/**\n * Will return the number as a float with a dot separator, which is required by GLSL.\n * @param {number} v Numerical value.\n * @return {string} The value as string.\n */\n\nexport function numberToGlsl(v) {\n  var s = v.toString();\n  return s.indexOf('.') === -1 ? s + '.0' : s;\n}\n/**\n * Will return the number array as a float with a dot separator, concatenated with ', '.\n * @param {Array<number>} array Numerical values array.\n * @return {string} The array as a vector, e. g.: `vec3(1.0, 2.0, 3.0)`.\n */\n\nexport function arrayToGlsl(array) {\n  if (array.length < 2 || array.length > 4) {\n    throw new Error('`formatArray` can only output `vec2`, `vec3` or `vec4` arrays.');\n  }\n\n  return \"vec\".concat(array.length, \"(\").concat(array.map(numberToGlsl).join(', '), \")\");\n}\n/**\n * Will normalize and converts to string a `vec4` color array compatible with GLSL.\n * @param {string|import(\"../color.js\").Color} color Color either in string format or [r, g, b, a] array format,\n * with RGB components in the 0..255 range and the alpha component in the 0..1 range.\n * Note that the final array will always have 4 components.\n * @return {string} The color expressed in the `vec4(1.0, 1.0, 1.0, 1.0)` form.\n */\n\nexport function colorToGlsl(color) {\n  var array = asArray(color).slice();\n\n  if (array.length < 4) {\n    array.push(1);\n  }\n\n  return arrayToGlsl(array.map(function (c, i) {\n    return i < 3 ? c / 255 : c;\n  }));\n}\n/**\n * Returns a stable equivalent number for the string literal.\n * @param {ParsingContext} context Parsing context\n * @param {string} string String literal value\n * @return {number} Number equivalent\n */\n\nexport function getStringNumberEquivalent(context, string) {\n  if (context.stringLiteralsMap[string] === undefined) {\n    context.stringLiteralsMap[string] = Object.keys(context.stringLiteralsMap).length;\n  }\n\n  return context.stringLiteralsMap[string];\n}\n/**\n * Returns a stable equivalent number for the string literal, for use in shaders. This number is then\n * converted to be a GLSL-compatible string.\n * @param {ParsingContext} context Parsing context\n * @param {string} string String literal value\n * @return {string} GLSL-compatible string containing a number\n */\n\nexport function stringToGlsl(context, string) {\n  return numberToGlsl(getStringNumberEquivalent(context, string));\n}\n/**\n * Recursively parses a style expression and outputs a GLSL-compatible string. Takes in a parsing context that\n * will be read and modified during the parsing operation.\n * @param {ParsingContext} context Parsing context\n * @param {ExpressionValue} value Value\n * @param {ValueTypes|number} [typeHint] Hint for the expected final type (can be several types combined)\n * @return {string} GLSL-compatible output\n */\n\nexport function expressionToGlsl(context, value, typeHint) {\n  // operator\n  if (Array.isArray(value) && typeof value[0] === 'string') {\n    var operator = Operators[value[0]];\n\n    if (operator === undefined) {\n      throw new Error(\"Unrecognized expression operator: \".concat(JSON.stringify(value)));\n    }\n\n    return operator.toGlsl(context, value.slice(1), typeHint);\n  }\n\n  var valueType = getValueType(value);\n\n  if ((valueType & ValueTypes.NUMBER) > 0) {\n    return numberToGlsl(\n    /** @type {number} */\n    value);\n  }\n\n  if ((valueType & ValueTypes.BOOLEAN) > 0) {\n    return value.toString();\n  }\n\n  if ((valueType & ValueTypes.STRING) > 0 && (typeHint === undefined || typeHint == ValueTypes.STRING)) {\n    return stringToGlsl(context, value.toString());\n  }\n\n  if ((valueType & ValueTypes.COLOR) > 0 && (typeHint === undefined || typeHint == ValueTypes.COLOR)) {\n    return colorToGlsl(\n    /** @type {Array<number> | string} */\n    value);\n  }\n\n  if ((valueType & ValueTypes.NUMBER_ARRAY) > 0) {\n    return arrayToGlsl(\n    /** @type {Array<number>} */\n    value);\n  }\n\n  throw new Error(\"Unexpected expression \".concat(value, \" (expected type \").concat(typeHint, \")\"));\n}\n\nfunction assertNumber(value) {\n  if (!(getValueType(value) & ValueTypes.NUMBER)) {\n    throw new Error(\"A numeric value was expected, got \".concat(JSON.stringify(value), \" instead\"));\n  }\n}\n\nfunction assertNumbers(values) {\n  for (var i = 0; i < values.length; i++) {\n    assertNumber(values[i]);\n  }\n}\n\nfunction assertString(value) {\n  if (!(getValueType(value) & ValueTypes.STRING)) {\n    throw new Error(\"A string value was expected, got \".concat(JSON.stringify(value), \" instead\"));\n  }\n}\n\nfunction assertBoolean(value) {\n  if (!(getValueType(value) & ValueTypes.BOOLEAN)) {\n    throw new Error(\"A boolean value was expected, got \".concat(JSON.stringify(value), \" instead\"));\n  }\n}\n\nfunction assertArgsCount(args, count) {\n  if (args.length !== count) {\n    throw new Error(\"Exactly \".concat(count, \" arguments were expected, got \").concat(args.length, \" instead\"));\n  }\n}\n\nfunction assertArgsMinCount(args, count) {\n  if (args.length < count) {\n    throw new Error(\"At least \".concat(count, \" arguments were expected, got \").concat(args.length, \" instead\"));\n  }\n}\n\nfunction assertArgsMaxCount(args, count) {\n  if (args.length > count) {\n    throw new Error(\"At most \".concat(count, \" arguments were expected, got \").concat(args.length, \" instead\"));\n  }\n}\n\nfunction assertArgsEven(args) {\n  if (args.length % 2 !== 0) {\n    throw new Error(\"An even amount of arguments was expected, got \".concat(args, \" instead\"));\n  }\n}\n\nfunction assertArgsOdd(args) {\n  if (args.length % 2 === 0) {\n    throw new Error(\"An odd amount of arguments was expected, got \".concat(args, \" instead\"));\n  }\n}\n\nfunction assertUniqueInferredType(args, types) {\n  if (!isTypeUnique(types)) {\n    throw new Error(\"Could not infer only one type from the following expression: \".concat(JSON.stringify(args)));\n  }\n}\n\nOperators['get'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.ANY;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertString(args[0]);\n    var value = args[0].toString();\n\n    if (context.attributes.indexOf(value) === -1) {\n      context.attributes.push(value);\n    }\n\n    var prefix = context.inFragmentShader ? 'v_' : 'a_';\n    return prefix + value;\n  }\n};\n/**\n * Get the uniform name given a variable name.\n * @param {string} variableName The variable name.\n * @return {string} The uniform name.\n */\n\nexport function uniformNameForVariable(variableName) {\n  return 'u_var_' + variableName;\n}\nOperators['var'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.ANY;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertString(args[0]);\n    var value = args[0].toString();\n\n    if (context.variables.indexOf(value) === -1) {\n      context.variables.push(value);\n    }\n\n    return uniformNameForVariable(value);\n  }\n};\nexport var PALETTE_TEXTURE_ARRAY = 'u_paletteTextures'; // ['palette', index, colors]\n\nOperators['palette'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.COLOR;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumber(args[0]);\n    var index = expressionToGlsl(context, args[0]);\n    var colors = args[1];\n\n    if (!Array.isArray(colors)) {\n      throw new Error('The second argument of palette must be an array');\n    }\n\n    var numColors = colors.length;\n    var palette = new Uint8Array(numColors * 4);\n\n    for (var i = 0; i < numColors; i++) {\n      var candidate = colors[i];\n      /**\n       * @type {import('../color.js').Color}\n       */\n\n      var color = void 0;\n\n      if (typeof candidate === 'string') {\n        color = fromString(candidate);\n      } else {\n        if (!Array.isArray(candidate)) {\n          throw new Error('The second argument of palette must be an array of strings or colors');\n        }\n\n        var length_1 = candidate.length;\n\n        if (length_1 === 4) {\n          color = candidate;\n        } else {\n          if (length_1 !== 3) {\n            throw new Error(\"Expected palette color to have 3 or 4 values, got \".concat(length_1));\n          }\n\n          color = [candidate[0], candidate[1], candidate[2], 1];\n        }\n      }\n\n      var offset = i * 4;\n      palette[offset] = color[0];\n      palette[offset + 1] = color[1];\n      palette[offset + 2] = color[2];\n      palette[offset + 3] = color[3] * 255;\n    }\n\n    if (!context.paletteTextures) {\n      context.paletteTextures = [];\n    }\n\n    var paletteName = \"\".concat(PALETTE_TEXTURE_ARRAY, \"[\").concat(context.paletteTextures.length, \"]\");\n    var paletteTexture = new PaletteTexture(paletteName, palette);\n    context.paletteTextures.push(paletteTexture);\n    return \"texture2D(\".concat(paletteName, \", vec2((\").concat(index, \" + 0.5) / \").concat(numColors, \".0, 0.5))\");\n  }\n};\nvar GET_BAND_VALUE_FUNC = 'getBandValue';\nOperators['band'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsMinCount(args, 1);\n    assertArgsMaxCount(args, 3);\n    var band = args[0];\n\n    if (!(GET_BAND_VALUE_FUNC in context.functions)) {\n      var ifBlocks = '';\n      var bandCount = context.bandCount || 1;\n\n      for (var i = 0; i < bandCount; i++) {\n        var colorIndex = Math.floor(i / 4);\n        var bandIndex = i % 4;\n\n        if (bandIndex === bandCount - 1 && bandIndex === 1) {\n          // LUMINANCE_ALPHA - band 1 assigned to rgb and band 2 assigned to alpha\n          bandIndex = 3;\n        }\n\n        var textureName = \"\".concat(Uniforms.TILE_TEXTURE_ARRAY, \"[\").concat(colorIndex, \"]\");\n        ifBlocks += \"\\n          if (band == \".concat(i + 1, \".0) {\\n            return texture2D(\").concat(textureName, \", v_textureCoord + vec2(dx, dy))[\").concat(bandIndex, \"];\\n          }\\n        \");\n      }\n\n      context.functions[GET_BAND_VALUE_FUNC] = \"\\n        float getBandValue(float band, float xOffset, float yOffset) {\\n          float dx = xOffset / \".concat(Uniforms.TEXTURE_PIXEL_WIDTH, \";\\n          float dy = yOffset / \").concat(Uniforms.TEXTURE_PIXEL_HEIGHT, \";\\n          \").concat(ifBlocks, \"\\n        }\\n      \");\n    }\n\n    var bandExpression = expressionToGlsl(context, band);\n    var xOffsetExpression = expressionToGlsl(context, args[1] || 0);\n    var yOffsetExpression = expressionToGlsl(context, args[2] || 0);\n    return \"\".concat(GET_BAND_VALUE_FUNC, \"(\").concat(bandExpression, \", \").concat(xOffsetExpression, \", \").concat(yOffsetExpression, \")\");\n  }\n};\nOperators['time'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 0);\n    return 'u_time';\n  }\n};\nOperators['zoom'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 0);\n    return 'u_zoom';\n  }\n};\nOperators['resolution'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 0);\n    return 'u_resolution';\n  }\n};\nOperators['*'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\".concat(expressionToGlsl(context, args[0]), \" * \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['/'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\".concat(expressionToGlsl(context, args[0]), \" / \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['+'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\".concat(expressionToGlsl(context, args[0]), \" + \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['-'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\".concat(expressionToGlsl(context, args[0]), \" - \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['clamp'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 3);\n    assertNumbers(args);\n    var min = expressionToGlsl(context, args[1]);\n    var max = expressionToGlsl(context, args[2]);\n    return \"clamp(\".concat(expressionToGlsl(context, args[0]), \", \").concat(min, \", \").concat(max, \")\");\n  }\n};\nOperators['%'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"mod(\".concat(expressionToGlsl(context, args[0]), \", \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['^'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"pow(\".concat(expressionToGlsl(context, args[0]), \", \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['abs'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return \"abs(\".concat(expressionToGlsl(context, args[0]), \")\");\n  }\n};\nOperators['floor'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return \"floor(\".concat(expressionToGlsl(context, args[0]), \")\");\n  }\n};\nOperators['round'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return \"floor(\".concat(expressionToGlsl(context, args[0]), \" + 0.5)\");\n  }\n};\nOperators['ceil'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return \"ceil(\".concat(expressionToGlsl(context, args[0]), \")\");\n  }\n};\nOperators['sin'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return \"sin(\".concat(expressionToGlsl(context, args[0]), \")\");\n  }\n};\nOperators['cos'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return \"cos(\".concat(expressionToGlsl(context, args[0]), \")\");\n  }\n};\nOperators['atan'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsMinCount(args, 1);\n    assertArgsMaxCount(args, 2);\n    assertNumbers(args);\n    return args.length === 2 ? \"atan(\".concat(expressionToGlsl(context, args[0]), \", \").concat(expressionToGlsl(context, args[1]), \")\") : \"atan(\".concat(expressionToGlsl(context, args[0]), \")\");\n  }\n};\nOperators['>'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\".concat(expressionToGlsl(context, args[0]), \" > \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['>='] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\".concat(expressionToGlsl(context, args[0]), \" >= \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['<'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\".concat(expressionToGlsl(context, args[0]), \" < \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['<='] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\".concat(expressionToGlsl(context, args[0]), \" <= \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\n\nfunction getEqualOperator(operator) {\n  return {\n    getReturnType: function getReturnType(args) {\n      return ValueTypes.BOOLEAN;\n    },\n    toGlsl: function toGlsl(context, args) {\n      assertArgsCount(args, 2); // find common type\n\n      var type = ValueTypes.ANY;\n\n      for (var i = 0; i < args.length; i++) {\n        type &= getValueType(args[i]);\n      }\n\n      if (type === ValueTypes.NONE) {\n        throw new Error(\"All arguments should be of compatible type, got \".concat(JSON.stringify(args), \" instead\"));\n      } // Since it's not possible to have color types here, we can leave it out\n      // This fixes issues in case the value type is ambiguously detected as a color (e.g. the string 'red')\n\n\n      type &= ~ValueTypes.COLOR;\n      return \"(\".concat(expressionToGlsl(context, args[0], type), \" \").concat(operator, \" \").concat(expressionToGlsl(context, args[1], type), \")\");\n    }\n  };\n}\n\nOperators['=='] = getEqualOperator('==');\nOperators['!='] = getEqualOperator('!=');\nOperators['!'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertBoolean(args[0]);\n    return \"(!\".concat(expressionToGlsl(context, args[0]), \")\");\n  }\n};\n\nfunction getDecisionOperator(operator) {\n  return {\n    getReturnType: function getReturnType(args) {\n      return ValueTypes.BOOLEAN;\n    },\n    toGlsl: function toGlsl(context, args) {\n      assertArgsMinCount(args, 2);\n\n      for (var i = 0; i < args.length; i++) {\n        assertBoolean(args[i]);\n      }\n\n      var result = '';\n      result = args.map(function (arg) {\n        return expressionToGlsl(context, arg);\n      }).join(\" \".concat(operator, \" \"));\n      result = \"(\".concat(result, \")\");\n      return result;\n    }\n  };\n}\n\nOperators['all'] = getDecisionOperator('&&');\nOperators['any'] = getDecisionOperator('||');\nOperators['between'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 3);\n    assertNumbers(args);\n    var min = expressionToGlsl(context, args[1]);\n    var max = expressionToGlsl(context, args[2]);\n    var value = expressionToGlsl(context, args[0]);\n    return \"(\".concat(value, \" >= \").concat(min, \" && \").concat(value, \" <= \").concat(max, \")\");\n  }\n};\nOperators['array'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER_ARRAY;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsMinCount(args, 2);\n    assertArgsMaxCount(args, 4);\n    assertNumbers(args);\n    var parsedArgs = args.map(function (val) {\n      return expressionToGlsl(context, val, ValueTypes.NUMBER);\n    });\n    return \"vec\".concat(args.length, \"(\").concat(parsedArgs.join(', '), \")\");\n  }\n};\nOperators['color'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.COLOR;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsMinCount(args, 3);\n    assertArgsMaxCount(args, 4);\n    assertNumbers(args);\n    var array =\n    /** @type {Array<number>} */\n    args;\n\n    if (args.length === 3) {\n      array.push(1);\n    }\n\n    var parsedArgs = args.map(function (val, i) {\n      return expressionToGlsl(context, val, ValueTypes.NUMBER) + (i < 3 ? ' / 255.0' : '');\n    });\n    return \"vec\".concat(args.length, \"(\").concat(parsedArgs.join(', '), \")\");\n  }\n};\nOperators['interpolate'] = {\n  getReturnType: function getReturnType(args) {\n    var type = ValueTypes.COLOR | ValueTypes.NUMBER;\n\n    for (var i = 3; i < args.length; i += 2) {\n      type = type & getValueType(args[i]);\n    }\n\n    return type;\n  },\n  toGlsl: function toGlsl(context, args, opt_typeHint) {\n    assertArgsEven(args);\n    assertArgsMinCount(args, 6); // validate interpolation type\n\n    var type = args[0];\n    var interpolation;\n\n    switch (type[0]) {\n      case 'linear':\n        interpolation = 1;\n        break;\n\n      case 'exponential':\n        interpolation = type[1];\n        break;\n\n      default:\n        interpolation = null;\n    }\n\n    if (!interpolation) {\n      throw new Error(\"Invalid interpolation type for \\\"interpolate\\\" operator, received: \".concat(JSON.stringify(type)));\n    } // compute input/output types\n\n\n    var typeHint = opt_typeHint !== undefined ? opt_typeHint : ValueTypes.ANY;\n    var outputType = Operators['interpolate'].getReturnType(args) & typeHint;\n    assertUniqueInferredType(args, outputType);\n    var input = expressionToGlsl(context, args[1]);\n    var exponent = numberToGlsl(interpolation);\n    var result = '';\n\n    for (var i = 2; i < args.length - 2; i += 2) {\n      var stop1 = expressionToGlsl(context, args[i]);\n      var output1 = result || expressionToGlsl(context, args[i + 1], outputType);\n      var stop2 = expressionToGlsl(context, args[i + 2]);\n      var output2 = expressionToGlsl(context, args[i + 3], outputType);\n      result = \"mix(\".concat(output1, \", \").concat(output2, \", pow(clamp((\").concat(input, \" - \").concat(stop1, \") / (\").concat(stop2, \" - \").concat(stop1, \"), 0.0, 1.0), \").concat(exponent, \"))\");\n    }\n\n    return result;\n  }\n};\nOperators['match'] = {\n  getReturnType: function getReturnType(args) {\n    var type = ValueTypes.ANY;\n\n    for (var i = 2; i < args.length; i += 2) {\n      type = type & getValueType(args[i]);\n    }\n\n    type = type & getValueType(args[args.length - 1]);\n    return type;\n  },\n  toGlsl: function toGlsl(context, args, opt_typeHint) {\n    assertArgsEven(args);\n    assertArgsMinCount(args, 4);\n    var typeHint = opt_typeHint !== undefined ? opt_typeHint : ValueTypes.ANY;\n    var outputType = Operators['match'].getReturnType(args) & typeHint;\n    assertUniqueInferredType(args, outputType);\n    var input = expressionToGlsl(context, args[0]);\n    var fallback = expressionToGlsl(context, args[args.length - 1], outputType);\n    var result = null;\n\n    for (var i = args.length - 3; i >= 1; i -= 2) {\n      var match = expressionToGlsl(context, args[i]);\n      var output = expressionToGlsl(context, args[i + 1], outputType);\n      result = \"(\".concat(input, \" == \").concat(match, \" ? \").concat(output, \" : \").concat(result || fallback, \")\");\n    }\n\n    return result;\n  }\n};\nOperators['case'] = {\n  getReturnType: function getReturnType(args) {\n    var type = ValueTypes.ANY;\n\n    for (var i = 1; i < args.length; i += 2) {\n      type = type & getValueType(args[i]);\n    }\n\n    type = type & getValueType(args[args.length - 1]);\n    return type;\n  },\n  toGlsl: function toGlsl(context, args, opt_typeHint) {\n    assertArgsOdd(args);\n    assertArgsMinCount(args, 3);\n    var typeHint = opt_typeHint !== undefined ? opt_typeHint : ValueTypes.ANY;\n    var outputType = Operators['case'].getReturnType(args) & typeHint;\n    assertUniqueInferredType(args, outputType);\n\n    for (var i = 0; i < args.length - 1; i += 2) {\n      assertBoolean(args[i]);\n    }\n\n    var fallback = expressionToGlsl(context, args[args.length - 1], outputType);\n    var result = null;\n\n    for (var i = args.length - 3; i >= 0; i -= 2) {\n      var condition = expressionToGlsl(context, args[i]);\n      var output = expressionToGlsl(context, args[i + 1], outputType);\n      result = \"(\".concat(condition, \" ? \").concat(output, \" : \").concat(result || fallback, \")\");\n    }\n\n    return result;\n  }\n};","map":{"version":3,"mappings":"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","names":["PaletteTexture","Uniforms","asArray","fromString","isStringColor","log2","ValueTypes","NUMBER","STRING","COLOR","BOOLEAN","NUMBER_ARRAY","ANY","NONE","Operators","getValueType","value","Array","isArray","Error","JSON","stringify","valueArr","onlyNumbers","every","v","length","operator","undefined","getReturnType","slice","isTypeUnique","valueType","numberToGlsl","s","toString","indexOf","arrayToGlsl","array","concat","map","join","colorToGlsl","color","push","c","i","getStringNumberEquivalent","context","string","stringLiteralsMap","Object","keys","stringToGlsl","expressionToGlsl","typeHint","toGlsl","assertNumber","assertNumbers","values","assertString","assertBoolean","assertArgsCount","args","count","assertArgsMinCount","assertArgsMaxCount","assertArgsEven","assertArgsOdd","assertUniqueInferredType","types","attributes","prefix","inFragmentShader","uniformNameForVariable","variableName","variables","PALETTE_TEXTURE_ARRAY","index","colors","numColors","palette","Uint8Array","candidate","length_1","offset","paletteTextures","paletteName","paletteTexture","GET_BAND_VALUE_FUNC","band","functions","ifBlocks","bandCount","colorIndex","Math","floor","bandIndex","textureName","TILE_TEXTURE_ARRAY","TEXTURE_PIXEL_WIDTH","TEXTURE_PIXEL_HEIGHT","bandExpression","xOffsetExpression","yOffsetExpression","min","max","getEqualOperator","type","getDecisionOperator","result","arg","parsedArgs","val","opt_typeHint","interpolation","outputType","input","exponent","stop1","output1","stop2","output2","fallback","match","output","condition"],"sourceRoot":"","sources":["../src/style/expressions.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}