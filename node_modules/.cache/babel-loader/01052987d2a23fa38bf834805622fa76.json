{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.object.get-prototype-of.js\";\nimport \"core-js/modules/es.array.join.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/UrlTile\n */\n\n\nimport TileEventType from './TileEventType.js';\nimport TileSource, { TileSourceEvent } from './Tile.js';\nimport TileState from '../TileState.js';\nimport { createFromTemplates, expandUrl } from '../tileurlfunction.js';\nimport { getKeyZXY } from '../tilecoord.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Cache size.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./State.js\").default} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] TileUrlFunction.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\n\nvar UrlTile =\n/** @class */\nfunction (_super) {\n  __extends(UrlTile, _super);\n  /**\n   * @param {Options} options Image tile options.\n   */\n\n\n  function UrlTile(options) {\n    var _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection\n    }) || this;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n\n    _this.generateTileUrlFunction_ = _this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n\n    _this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      _this.tileUrlFunction = options.tileUrlFunction;\n    }\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n\n\n    _this.urls = null;\n\n    if (options.urls) {\n      _this.setUrls(options.urls);\n    } else if (options.url) {\n      _this.setUrl(options.url);\n    }\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n\n\n    _this.tileLoadingKeys_ = {};\n    return _this;\n  }\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n\n\n  UrlTile.prototype.getTileLoadFunction = function () {\n    return this.tileLoadFunction;\n  };\n  /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n\n\n  UrlTile.prototype.getTileUrlFunction = function () {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction ? this.tileUrlFunction.bind(this) : this.tileUrlFunction;\n  };\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n\n\n  UrlTile.prototype.getUrls = function () {\n    return this.urls;\n  };\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n\n\n  UrlTile.prototype.handleTileChange = function (event) {\n    var tile =\n    /** @type {import(\"../Tile.js\").default} */\n    event.target;\n    var uid = getUid(tile);\n    var tileState = tile.getState();\n    var type;\n\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR : tileState == TileState.LOADED ? TileEventType.TILELOADEND : undefined;\n    }\n\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  };\n  /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n\n\n  UrlTile.prototype.setTileLoadFunction = function (tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  };\n  /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n\n\n  UrlTile.prototype.setTileUrlFunction = function (tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  };\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n\n\n  UrlTile.prototype.setUrl = function (url) {\n    var urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  };\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n\n\n  UrlTile.prototype.setUrls = function (urls) {\n    this.urls = urls;\n    var key = urls.join('\\n');\n\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n\n\n  UrlTile.prototype.tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n    return undefined;\n  };\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n\n\n  UrlTile.prototype.useTile = function (z, x, y) {\n    var tileCoordKey = getKeyZXY(z, x, y);\n\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  };\n\n  return UrlTile;\n}(TileSource);\n\nexport default UrlTile;","map":{"version":3,"mappings":"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","names":["TileEventType","TileSource","TileSourceEvent","TileState","createFromTemplates","expandUrl","getKeyZXY","getUid","__extends","options","_super","attributions","cacheSize","opaque","projection","state","tileGrid","tilePixelRatio","wrapX","transition","interpolate","key","attributionsCollapsible","zDirection","_this","generateTileUrlFunction_","tileUrlFunction","UrlTile","prototype","tileLoadFunction","urls","setUrls","url","setUrl","tileLoadingKeys_","Object","getPrototypeOf","bind","event","tile","target","uid","tileState","getState","type","LOADING","TILELOADSTART","ERROR","TILELOADERROR","LOADED","TILELOADEND","undefined","dispatchEvent","tileCache","clear","changed","pruneExceptNewestZ","setKey","join","setTileUrlFunction","tileCoord","pixelRatio","z","x","y","tileCoordKey","containsKey","get"],"sourceRoot":"","sources":["../src/source/UrlTile.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}