{"ast":null,"code":"import { safeIfNeeded, wrap } from \"./_util/arrayIterator.mjs\";\nimport { brand, hasFloat16ArrayBrand } from \"./_util/brand.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport { isArrayBuffer, isCanonicalIntegerIndexString, isNativeBigIntTypedArray, isNativeTypedArray, isObject, isOrdinaryArray, isOrdinaryNativeTypedArray, isSharedArrayBuffer } from \"./_util/is.mjs\";\nimport { ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER, CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT, CANNOT_MIX_BIGINT_AND_OTHER_TYPES, DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH, ITERATOR_PROPERTY_IS_NOT_CALLABLE, OFFSET_IS_OUT_OF_BOUNDS, REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE, SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT, THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY, THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT } from \"./_util/messages.mjs\";\nimport { ArrayBufferIsView, ArrayPrototypeJoin, ArrayPrototypePush, ArrayPrototypeToLocaleString, NativeArrayBuffer, NativeObject, NativeProxy, NativeRangeError, NativeTypeError, NativeUint16Array, NativeWeakMap, NativeWeakSet, NumberIsNaN, ObjectDefineProperty, ObjectFreeze, ObjectHasOwn, ObjectPrototype__lookupGetter__, ReflectApply, ReflectConstruct, ReflectDefineProperty, ReflectGet, ReflectGetOwnPropertyDescriptor, ReflectHas, ReflectOwnKeys, ReflectSet, ReflectSetPrototypeOf, SymbolIterator, SymbolToStringTag, TypedArray, TypedArrayPrototype, TypedArrayPrototypeCopyWithin, TypedArrayPrototypeEntries, TypedArrayPrototypeFill, TypedArrayPrototypeGetBuffer, TypedArrayPrototypeGetByteOffset, TypedArrayPrototypeGetLength, TypedArrayPrototypeKeys, TypedArrayPrototypeReverse, TypedArrayPrototypeSet, TypedArrayPrototypeSlice, TypedArrayPrototypeSort, TypedArrayPrototypeSubarray, TypedArrayPrototypeValues, Uint16ArrayFrom, WeakMapPrototypeGet, WeakMapPrototypeHas, WeakMapPrototypeSet, WeakSetPrototypeAdd, WeakSetPrototypeHas } from \"./_util/primordials.mjs\";\nimport { IsDetachedBuffer, SpeciesConstructor, ToIntegerOrInfinity, ToLength, defaultCompare } from \"./_util/spec.mjs\";\nconst BYTES_PER_ELEMENT = 2;\n/** @typedef {Uint16Array & { __float16bits: never }} Float16BitsArray */\n\n/** @type {WeakMap<Float16Array, Float16BitsArray>} */\n\nconst float16bitsArrays = new NativeWeakMap();\n/**\n * @param {unknown} target\n * @returns {target is Float16Array}\n */\n\nexport function isFloat16Array(target) {\n  return WeakMapPrototypeHas(float16bitsArrays, target) || !ArrayBufferIsView(target) && hasFloat16ArrayBrand(target);\n}\n/**\n * @param {unknown} target\n * @throws {TypeError}\n * @returns {asserts target is Float16Array}\n */\n\nfunction assertFloat16Array(target) {\n  if (!isFloat16Array(target)) {\n    throw NativeTypeError(THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT);\n  }\n}\n/**\n * @param {unknown} target\n * @param {number=} count\n * @throws {TypeError}\n * @returns {asserts target is Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float16Array|Float32Array|Float64Array}\n */\n\n\nfunction assertSpeciesTypedArray(target, count) {\n  const isTargetFloat16Array = isFloat16Array(target);\n  const isTargetTypedArray = isNativeTypedArray(target);\n\n  if (!isTargetFloat16Array && !isTargetTypedArray) {\n    throw NativeTypeError(SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT);\n  }\n\n  if (typeof count === \"number\") {\n    let length;\n\n    if (isTargetFloat16Array) {\n      const float16bitsArray = getFloat16BitsArray(target);\n      length = TypedArrayPrototypeGetLength(float16bitsArray);\n    } else {\n      length = TypedArrayPrototypeGetLength(target);\n    }\n\n    if (length < count) {\n      throw NativeTypeError(DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH);\n    }\n  }\n\n  if (isNativeBigIntTypedArray(target)) {\n    throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n  }\n}\n/**\n * @param {Float16Array} float16\n * @throws {TypeError}\n * @returns {Float16BitsArray}\n */\n\n\nfunction getFloat16BitsArray(float16) {\n  const float16bitsArray = WeakMapPrototypeGet(float16bitsArrays, float16);\n\n  if (float16bitsArray !== undefined) {\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    return float16bitsArray;\n  } // from another Float16Array instance (a different version?)\n\n\n  const buffer =\n  /** @type {any} */\n  float16.buffer;\n\n  if (IsDetachedBuffer(buffer)) {\n    throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n  }\n\n  const cloned = ReflectConstruct(Float16Array, [buffer,\n  /** @type {any} */\n  float16.byteOffset,\n  /** @type {any} */\n  float16.length], float16.constructor);\n  return WeakMapPrototypeGet(float16bitsArrays, cloned);\n}\n/**\n * @param {Float16BitsArray} float16bitsArray\n * @returns {number[]}\n */\n\n\nfunction copyToArray(float16bitsArray) {\n  const length = TypedArrayPrototypeGetLength(float16bitsArray);\n  const array = [];\n\n  for (let i = 0; i < length; ++i) {\n    array[i] = convertToNumber(float16bitsArray[i]);\n  }\n\n  return array;\n}\n/** @type {WeakSet<Function>} */\n\n\nconst TypedArrayPrototypeGetters = new NativeWeakSet();\n\nfor (const key of ReflectOwnKeys(TypedArrayPrototype)) {\n  // @@toStringTag getter property is defined in Float16Array.prototype\n  if (key === SymbolToStringTag) {\n    continue;\n  }\n\n  const descriptor = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, key);\n\n  if (ObjectHasOwn(descriptor, \"get\") && typeof descriptor.get === \"function\") {\n    WeakSetPrototypeAdd(TypedArrayPrototypeGetters, descriptor.get);\n  }\n}\n\nconst handler = ObjectFreeze(\n/** @type {ProxyHandler<Float16BitsArray>} */\n{\n  get(target, key, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return convertToNumber(ReflectGet(target, key));\n    } // %TypedArray%.prototype getter properties cannot called by Proxy receiver\n\n\n    if (WeakSetPrototypeHas(TypedArrayPrototypeGetters, ObjectPrototype__lookupGetter__(target, key))) {\n      return ReflectGet(target, key);\n    }\n\n    return ReflectGet(target, key, receiver);\n  },\n\n  set(target, key, value, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return ReflectSet(target, key, roundToFloat16Bits(value));\n    }\n\n    return ReflectSet(target, key, value, receiver);\n  },\n\n  getOwnPropertyDescriptor(target, key) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n      descriptor.value = convertToNumber(descriptor.value);\n      return descriptor;\n    }\n\n    return ReflectGetOwnPropertyDescriptor(target, key);\n  },\n\n  defineProperty(target, key, descriptor) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key) && ObjectHasOwn(descriptor, \"value\")) {\n      descriptor.value = roundToFloat16Bits(descriptor.value);\n      return ReflectDefineProperty(target, key, descriptor);\n    }\n\n    return ReflectDefineProperty(target, key, descriptor);\n  }\n\n});\nexport class Float16Array {\n  /** @see https://tc39.es/ecma262/#sec-typedarray */\n  constructor(input, _byteOffset, _length) {\n    /** @type {Float16BitsArray} */\n    let float16bitsArray;\n\n    if (isFloat16Array(input)) {\n      float16bitsArray = ReflectConstruct(NativeUint16Array, [getFloat16BitsArray(input)], new.target);\n    } else if (isObject(input) && !isArrayBuffer(input)) {\n      // object without ArrayBuffer\n\n      /** @type {ArrayLike<unknown>} */\n      let list;\n      /** @type {number} */\n\n      let length;\n\n      if (isNativeTypedArray(input)) {\n        // TypedArray\n        list = input;\n        length = TypedArrayPrototypeGetLength(input);\n        const buffer = TypedArrayPrototypeGetBuffer(input);\n        const BufferConstructor = !isSharedArrayBuffer(buffer) ?\n        /** @type {ArrayBufferConstructor} */\n        SpeciesConstructor(buffer, NativeArrayBuffer) : NativeArrayBuffer;\n\n        if (IsDetachedBuffer(buffer)) {\n          throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n        }\n\n        if (isNativeBigIntTypedArray(input)) {\n          throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n        }\n\n        const data = new BufferConstructor(length * BYTES_PER_ELEMENT);\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [data], new.target);\n      } else {\n        const iterator = input[SymbolIterator];\n\n        if (iterator != null && typeof iterator !== \"function\") {\n          throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n        }\n\n        if (iterator != null) {\n          // Iterable (Array)\n          // for optimization\n          if (isOrdinaryArray(input)) {\n            list = input;\n            length = input.length;\n          } else {\n            // eslint-disable-next-line no-restricted-syntax\n            list = [...\n            /** @type {Iterable<unknown>} */\n            input];\n            length = list.length;\n          }\n        } else {\n          // ArrayLike\n          list =\n          /** @type {ArrayLike<unknown>} */\n          input;\n          length = ToLength(list.length);\n        }\n\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [length], new.target);\n      } // set values\n\n\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(list[i]);\n      }\n    } else {\n      // primitive, ArrayBuffer\n      float16bitsArray = ReflectConstruct(NativeUint16Array, arguments, new.target);\n    }\n    /** @type {Float16Array} */\n\n\n    const proxy =\n    /** @type {any} */\n    new NativeProxy(float16bitsArray, handler); // proxy private storage\n\n    WeakMapPrototypeSet(float16bitsArrays, proxy, float16bitsArray);\n    return proxy;\n  }\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.from\n   */\n\n\n  static from(src, ...opts) {\n    const Constructor = this;\n\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY);\n    } // for optimization\n\n\n    if (Constructor === Float16Array) {\n      if (isFloat16Array(src) && opts.length === 0) {\n        const float16bitsArray = getFloat16BitsArray(src);\n        const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n        return new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16)));\n      }\n\n      if (opts.length === 0) {\n        return new Float16Array(TypedArrayPrototypeGetBuffer(Uint16ArrayFrom(src, roundToFloat16Bits)));\n      }\n\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n      return new Float16Array(TypedArrayPrototypeGetBuffer(Uint16ArrayFrom(src, function (val, ...args) {\n        return roundToFloat16Bits(ReflectApply(mapFunc, this, [val, ...safeIfNeeded(args)]));\n      }, thisArg)));\n    }\n    /** @type {ArrayLike<unknown>} */\n\n\n    let list;\n    /** @type {number} */\n\n    let length;\n    const iterator = src[SymbolIterator];\n\n    if (iterator != null && typeof iterator !== \"function\") {\n      throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n    }\n\n    if (iterator != null) {\n      // Iterable (TypedArray, Array)\n      // for optimization\n      if (isOrdinaryArray(src)) {\n        list = src;\n        length = src.length;\n      } else if (isOrdinaryNativeTypedArray(src)) {\n        list = src;\n        length = TypedArrayPrototypeGetLength(src);\n      } else {\n        // eslint-disable-next-line no-restricted-syntax\n        list = [...src];\n        length = list.length;\n      }\n    } else {\n      // ArrayLike\n      if (src == null) {\n        throw NativeTypeError(CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT);\n      }\n\n      list = NativeObject(src);\n      length = ToLength(list.length);\n    }\n\n    const array = new Constructor(length);\n\n    if (opts.length === 0) {\n      for (let i = 0; i < length; ++i) {\n        array[i] =\n        /** @type {number} */\n        list[i];\n      }\n    } else {\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n\n      for (let i = 0; i < length; ++i) {\n        array[i] = ReflectApply(mapFunc, thisArg, [list[i], i]);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.of\n   */\n\n\n  static of(...items) {\n    const Constructor = this;\n\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY);\n    }\n\n    const length = items.length; // for optimization\n\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const float16bitsArray = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(items[i]);\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n\n    for (let i = 0; i < length; ++i) {\n      array[i] = items[i];\n    }\n\n    return array;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys */\n\n\n  keys() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    return TypedArrayPrototypeKeys(float16bitsArray);\n  }\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.values\n   */\n\n\n  values() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    return wrap(function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const val of TypedArrayPrototypeValues(float16bitsArray)) {\n        yield convertToNumber(val);\n      }\n    }());\n  }\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries\n   */\n\n\n  entries() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    return wrap(function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const [i, val] of TypedArrayPrototypeEntries(float16bitsArray)) {\n        yield (\n          /** @type {[Number, number]} */\n          [i, convertToNumber(val)]\n        );\n      }\n    }());\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.at */\n\n\n  at(index) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeIndex = ToIntegerOrInfinity(index);\n    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n\n    if (k < 0 || k >= length) {\n      return;\n    }\n\n    return convertToNumber(float16bitsArray[k]);\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.map */\n\n\n  map(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array); // for optimization\n\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const array = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        const val = convertToNumber(float16bitsArray[i]);\n        array[i] = roundToFloat16Bits(ReflectApply(callback, thisArg, [val, i, this]));\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n    assertSpeciesTypedArray(array, length);\n\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      array[i] = ReflectApply(callback, thisArg, [val, i, this]);\n    }\n\n    return (\n      /** @type {any} */\n      array\n    );\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter */\n\n\n  filter(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n    const kept = [];\n\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n\n      if (ReflectApply(callback, thisArg, [val, i, this])) {\n        ArrayPrototypePush(kept, val);\n      }\n    }\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n    const array = new Constructor(kept);\n    assertSpeciesTypedArray(array);\n    return (\n      /** @type {any} */\n      array\n    );\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce */\n\n\n  reduce(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    if (length === 0 && opts.length === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n\n    if (opts.length === 0) {\n      accumulator = convertToNumber(float16bitsArray[0]);\n      start = 1;\n    } else {\n      accumulator = opts[0];\n      start = 0;\n    }\n\n    for (let i = start; i < length; ++i) {\n      accumulator = callback(accumulator, convertToNumber(float16bitsArray[i]), i, this);\n    }\n\n    return accumulator;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright */\n\n\n  reduceRight(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    if (length === 0 && opts.length === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n\n    if (opts.length === 0) {\n      accumulator = convertToNumber(float16bitsArray[length - 1]);\n      start = length - 2;\n    } else {\n      accumulator = opts[0];\n      start = length - 1;\n    }\n\n    for (let i = start; i >= 0; --i) {\n      accumulator = callback(accumulator, convertToNumber(float16bitsArray[i]), i, this);\n    }\n\n    return accumulator;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach */\n\n\n  forEach(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this]);\n    }\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.find */\n\n\n  find(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex */\n\n\n  findIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlast */\n\n\n  findLast(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlastindex */\n\n\n  findLastIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.every */\n\n\n  every(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      if (!ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.some */\n\n\n  some(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      if (ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.set */\n\n\n  set(input, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const targetOffset = ToIntegerOrInfinity(opts[0]);\n\n    if (targetOffset < 0) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    if (input == null) {\n      throw NativeTypeError(CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT);\n    }\n\n    if (isNativeBigIntTypedArray(input)) {\n      throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n    } // for optimization\n\n\n    if (isFloat16Array(input)) {\n      // peel off Proxy\n      return TypedArrayPrototypeSet(getFloat16BitsArray(this), getFloat16BitsArray(input), targetOffset);\n    }\n\n    if (isNativeTypedArray(input)) {\n      const buffer = TypedArrayPrototypeGetBuffer(input);\n\n      if (IsDetachedBuffer(buffer)) {\n        throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n      }\n    }\n\n    const targetLength = TypedArrayPrototypeGetLength(float16bitsArray);\n    const src = NativeObject(input);\n    const srcLength = ToLength(src.length);\n\n    if (targetOffset === Infinity || srcLength + targetOffset > targetLength) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    for (let i = 0; i < srcLength; ++i) {\n      float16bitsArray[i + targetOffset] = roundToFloat16Bits(src[i]);\n    }\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse */\n\n\n  reverse() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    TypedArrayPrototypeReverse(float16bitsArray);\n    return this;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill */\n\n\n  fill(value, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    TypedArrayPrototypeFill(float16bitsArray, roundToFloat16Bits(value), ...safeIfNeeded(opts));\n    return this;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin */\n\n\n  copyWithin(target, start, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    TypedArrayPrototypeCopyWithin(float16bitsArray, target, start, ...safeIfNeeded(opts));\n    return this;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort */\n\n\n  sort(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const compare = opts[0] !== undefined ? opts[0] : defaultCompare;\n    TypedArrayPrototypeSort(float16bitsArray, (x, y) => {\n      return compare(convertToNumber(x), convertToNumber(y));\n    });\n    return this;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice */\n\n\n  slice(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array); // for optimization\n\n    if (Constructor === Float16Array) {\n      const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n      return new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16, ...safeIfNeeded(opts))));\n    }\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const start = ToIntegerOrInfinity(opts[0]);\n    const end = opts[1] === undefined ? length : ToIntegerOrInfinity(opts[1]);\n    let k;\n\n    if (start === -Infinity) {\n      k = 0;\n    } else if (start < 0) {\n      k = length + start > 0 ? length + start : 0;\n    } else {\n      k = length < start ? length : start;\n    }\n\n    let final;\n\n    if (end === -Infinity) {\n      final = 0;\n    } else if (end < 0) {\n      final = length + end > 0 ? length + end : 0;\n    } else {\n      final = length < end ? length : end;\n    }\n\n    const count = final - k > 0 ? final - k : 0;\n    const array = new Constructor(count);\n    assertSpeciesTypedArray(array, count);\n\n    if (count === 0) {\n      return array;\n    }\n\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    let n = 0;\n\n    while (k < final) {\n      array[n] = convertToNumber(float16bitsArray[k]);\n      ++k;\n      ++n;\n    }\n\n    return (\n      /** @type {any} */\n      array\n    );\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray */\n\n\n  subarray(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n    const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n    const uint16Subarray = TypedArrayPrototypeSubarray(uint16, ...safeIfNeeded(opts));\n    const array = new Constructor(TypedArrayPrototypeGetBuffer(uint16Subarray), TypedArrayPrototypeGetByteOffset(uint16Subarray), TypedArrayPrototypeGetLength(uint16Subarray));\n    assertSpeciesTypedArray(array);\n    return (\n      /** @type {any} */\n      array\n    );\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof */\n\n\n  indexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    let from = ToIntegerOrInfinity(opts[0]);\n\n    if (from === Infinity) {\n      return -1;\n    }\n\n    if (from < 0) {\n      from += length;\n\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    for (let i = from; i < length; ++i) {\n      if (ObjectHasOwn(float16bitsArray, i) && convertToNumber(float16bitsArray[i]) === element) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof */\n\n\n  lastIndexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    let from = opts.length >= 1 ? ToIntegerOrInfinity(opts[0]) : length - 1;\n\n    if (from === -Infinity) {\n      return -1;\n    }\n\n    if (from >= 0) {\n      from = from < length - 1 ? from : length - 1;\n    } else {\n      from += length;\n    }\n\n    for (let i = from; i >= 0; --i) {\n      if (ObjectHasOwn(float16bitsArray, i) && convertToNumber(float16bitsArray[i]) === element) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes */\n\n\n  includes(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    let from = ToIntegerOrInfinity(opts[0]);\n\n    if (from === Infinity) {\n      return false;\n    }\n\n    if (from < 0) {\n      from += length;\n\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    const isNaN = NumberIsNaN(element);\n\n    for (let i = from; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n\n      if (isNaN && NumberIsNaN(value)) {\n        return true;\n      }\n\n      if (value === element) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.join */\n\n\n  join(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const array = copyToArray(float16bitsArray);\n    return ArrayPrototypeJoin(array, ...safeIfNeeded(opts));\n  }\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring */\n\n\n  toLocaleString(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const array = copyToArray(float16bitsArray);\n    return ArrayPrototypeToLocaleString(array, ...safeIfNeeded(opts));\n  }\n  /** @see https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag */\n\n\n  get [SymbolToStringTag]() {\n    if (isFloat16Array(this)) {\n      return (\n        /** @type {any} */\n        \"Float16Array\"\n      );\n    }\n  }\n\n}\n/** @see https://tc39.es/ecma262/#sec-typedarray.bytes_per_element */\n\nObjectDefineProperty(Float16Array, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT\n}); // limitation: It is peaked by `Object.getOwnPropertySymbols(Float16Array)` and `Reflect.ownKeys(Float16Array)`\n\nObjectDefineProperty(Float16Array, brand, {});\n/** @see https://tc39.es/ecma262/#sec-properties-of-the-typedarray-constructors */\n\nReflectSetPrototypeOf(Float16Array, TypedArray);\nconst Float16ArrayPrototype = Float16Array.prototype;\n/** @see https://tc39.es/ecma262/#sec-typedarray.prototype.bytes_per_element */\n\nObjectDefineProperty(Float16ArrayPrototype, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT\n});\n/** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator */\n\nObjectDefineProperty(Float16ArrayPrototype, SymbolIterator, {\n  value: Float16ArrayPrototype.values,\n  writable: true,\n  configurable: true\n}); // To make `new Float16Array() instanceof Uint16Array` returns `false`\n\nReflectSetPrototypeOf(Float16ArrayPrototype, TypedArrayPrototype);","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@petamoriken/float16/src/Float16Array.mjs"],"names":["safeIfNeeded","wrap","brand","hasFloat16ArrayBrand","convertToNumber","roundToFloat16Bits","isArrayBuffer","isCanonicalIntegerIndexString","isNativeBigIntTypedArray","isNativeTypedArray","isObject","isOrdinaryArray","isOrdinaryNativeTypedArray","isSharedArrayBuffer","ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER","CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT","CANNOT_MIX_BIGINT_AND_OTHER_TYPES","DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH","ITERATOR_PROPERTY_IS_NOT_CALLABLE","OFFSET_IS_OUT_OF_BOUNDS","REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE","SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT","THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY","THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT","ArrayBufferIsView","ArrayPrototypeJoin","ArrayPrototypePush","ArrayPrototypeToLocaleString","NativeArrayBuffer","NativeObject","NativeProxy","NativeRangeError","NativeTypeError","NativeUint16Array","NativeWeakMap","NativeWeakSet","NumberIsNaN","ObjectDefineProperty","ObjectFreeze","ObjectHasOwn","ObjectPrototype__lookupGetter__","ReflectApply","ReflectConstruct","ReflectDefineProperty","ReflectGet","ReflectGetOwnPropertyDescriptor","ReflectHas","ReflectOwnKeys","ReflectSet","ReflectSetPrototypeOf","SymbolIterator","SymbolToStringTag","TypedArray","TypedArrayPrototype","TypedArrayPrototypeCopyWithin","TypedArrayPrototypeEntries","TypedArrayPrototypeFill","TypedArrayPrototypeGetBuffer","TypedArrayPrototypeGetByteOffset","TypedArrayPrototypeGetLength","TypedArrayPrototypeKeys","TypedArrayPrototypeReverse","TypedArrayPrototypeSet","TypedArrayPrototypeSlice","TypedArrayPrototypeSort","TypedArrayPrototypeSubarray","TypedArrayPrototypeValues","Uint16ArrayFrom","WeakMapPrototypeGet","WeakMapPrototypeHas","WeakMapPrototypeSet","WeakSetPrototypeAdd","WeakSetPrototypeHas","IsDetachedBuffer","SpeciesConstructor","ToIntegerOrInfinity","ToLength","defaultCompare","BYTES_PER_ELEMENT","float16bitsArrays","isFloat16Array","target","assertFloat16Array","assertSpeciesTypedArray","count","isTargetFloat16Array","isTargetTypedArray","length","float16bitsArray","getFloat16BitsArray","float16","undefined","buffer","cloned","Float16Array","byteOffset","constructor","copyToArray","array","i","TypedArrayPrototypeGetters","key","descriptor","get","handler","receiver","set","value","getOwnPropertyDescriptor","defineProperty","input","_byteOffset","_length","new","list","BufferConstructor","data","iterator","arguments","proxy","from","src","opts","Constructor","uint16","mapFunc","thisArg","val","args","of","items","keys","values","entries","at","index","relativeIndex","k","map","callback","filter","kept","reduce","accumulator","start","reduceRight","forEach","find","findIndex","findLast","findLastIndex","every","some","targetOffset","targetLength","srcLength","Infinity","reverse","fill","copyWithin","sort","compare","x","y","slice","end","final","n","subarray","uint16Subarray","indexOf","element","lastIndexOf","includes","isNaN","join","toLocaleString","Float16ArrayPrototype","prototype","writable","configurable"],"mappings":"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","sourcesContent":["import { safeIfNeeded, wrap } from \"./_util/arrayIterator.mjs\";\nimport { brand, hasFloat16ArrayBrand } from \"./_util/brand.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport {\n  isArrayBuffer,\n  isCanonicalIntegerIndexString,\n  isNativeBigIntTypedArray,\n  isNativeTypedArray,\n  isObject,\n  isOrdinaryArray,\n  isOrdinaryNativeTypedArray,\n  isSharedArrayBuffer,\n} from \"./_util/is.mjs\";\nimport {\n  ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER,\n  CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT,\n  CANNOT_MIX_BIGINT_AND_OTHER_TYPES,\n  DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH,\n  ITERATOR_PROPERTY_IS_NOT_CALLABLE,\n  OFFSET_IS_OUT_OF_BOUNDS,\n  REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE,\n  SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT,\n  THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY,\n  THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT,\n} from \"./_util/messages.mjs\";\nimport {\n  ArrayBufferIsView,\n  ArrayPrototypeJoin,\n  ArrayPrototypePush,\n  ArrayPrototypeToLocaleString,\n  NativeArrayBuffer,\n  NativeObject,\n  NativeProxy,\n  NativeRangeError,\n  NativeTypeError,\n  NativeUint16Array,\n  NativeWeakMap,\n  NativeWeakSet,\n  NumberIsNaN,\n  ObjectDefineProperty,\n  ObjectFreeze,\n  ObjectHasOwn,\n  ObjectPrototype__lookupGetter__,\n  ReflectApply,\n  ReflectConstruct,\n  ReflectDefineProperty,\n  ReflectGet,\n  ReflectGetOwnPropertyDescriptor,\n  ReflectHas,\n  ReflectOwnKeys,\n  ReflectSet,\n  ReflectSetPrototypeOf,\n  SymbolIterator,\n  SymbolToStringTag,\n  TypedArray,\n  TypedArrayPrototype,\n  TypedArrayPrototypeCopyWithin,\n  TypedArrayPrototypeEntries,\n  TypedArrayPrototypeFill,\n  TypedArrayPrototypeGetBuffer,\n  TypedArrayPrototypeGetByteOffset,\n  TypedArrayPrototypeGetLength,\n  TypedArrayPrototypeKeys,\n  TypedArrayPrototypeReverse,\n  TypedArrayPrototypeSet,\n  TypedArrayPrototypeSlice,\n  TypedArrayPrototypeSort,\n  TypedArrayPrototypeSubarray,\n  TypedArrayPrototypeValues,\n  Uint16ArrayFrom,\n  WeakMapPrototypeGet,\n  WeakMapPrototypeHas,\n  WeakMapPrototypeSet,\n  WeakSetPrototypeAdd,\n  WeakSetPrototypeHas,\n} from \"./_util/primordials.mjs\";\nimport {\n  IsDetachedBuffer,\n  SpeciesConstructor,\n  ToIntegerOrInfinity,\n  ToLength,\n  defaultCompare,\n} from \"./_util/spec.mjs\";\n\nconst BYTES_PER_ELEMENT = 2;\n\n/** @typedef {Uint16Array & { __float16bits: never }} Float16BitsArray */\n\n/** @type {WeakMap<Float16Array, Float16BitsArray>} */\nconst float16bitsArrays = new NativeWeakMap();\n\n/**\n * @param {unknown} target\n * @returns {target is Float16Array}\n */\nexport function isFloat16Array(target) {\n  return WeakMapPrototypeHas(float16bitsArrays, target) ||\n    (!ArrayBufferIsView(target) && hasFloat16ArrayBrand(target));\n}\n\n/**\n * @param {unknown} target\n * @throws {TypeError}\n * @returns {asserts target is Float16Array}\n */\nfunction assertFloat16Array(target) {\n  if (!isFloat16Array(target)) {\n    throw NativeTypeError(THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT);\n  }\n}\n\n/**\n * @param {unknown} target\n * @param {number=} count\n * @throws {TypeError}\n * @returns {asserts target is Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float16Array|Float32Array|Float64Array}\n */\nfunction assertSpeciesTypedArray(target, count) {\n  const isTargetFloat16Array = isFloat16Array(target);\n  const isTargetTypedArray = isNativeTypedArray(target);\n\n  if (!isTargetFloat16Array && !isTargetTypedArray) {\n    throw NativeTypeError(SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT);\n  }\n\n  if (typeof count === \"number\") {\n    let length;\n    if (isTargetFloat16Array) {\n      const float16bitsArray = getFloat16BitsArray(target);\n      length = TypedArrayPrototypeGetLength(float16bitsArray);\n    } else {\n      length = TypedArrayPrototypeGetLength(target);\n    }\n\n    if (length < count) {\n      throw NativeTypeError(\n        DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH\n      );\n    }\n  }\n\n  if (isNativeBigIntTypedArray(target)) {\n    throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n  }\n}\n\n/**\n * @param {Float16Array} float16\n * @throws {TypeError}\n * @returns {Float16BitsArray}\n */\nfunction getFloat16BitsArray(float16) {\n  const float16bitsArray = WeakMapPrototypeGet(float16bitsArrays, float16);\n  if (float16bitsArray !== undefined) {\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    return float16bitsArray;\n  }\n\n  // from another Float16Array instance (a different version?)\n  const buffer = /** @type {any} */ (float16).buffer;\n\n  if (IsDetachedBuffer(buffer)) {\n    throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n  }\n\n  const cloned = ReflectConstruct(Float16Array, [\n    buffer,\n    /** @type {any} */ (float16).byteOffset,\n    /** @type {any} */ (float16).length,\n  ], float16.constructor);\n  return WeakMapPrototypeGet(float16bitsArrays, cloned);\n}\n\n/**\n * @param {Float16BitsArray} float16bitsArray\n * @returns {number[]}\n */\nfunction copyToArray(float16bitsArray) {\n  const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n  const array = [];\n  for (let i = 0; i < length; ++i) {\n    array[i] = convertToNumber(float16bitsArray[i]);\n  }\n\n  return array;\n}\n\n/** @type {WeakSet<Function>} */\nconst TypedArrayPrototypeGetters = new NativeWeakSet();\nfor (const key of ReflectOwnKeys(TypedArrayPrototype)) {\n  // @@toStringTag getter property is defined in Float16Array.prototype\n  if (key === SymbolToStringTag) {\n    continue;\n  }\n\n  const descriptor = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, key);\n  if (ObjectHasOwn(descriptor, \"get\") && typeof descriptor.get === \"function\") {\n    WeakSetPrototypeAdd(TypedArrayPrototypeGetters, descriptor.get);\n  }\n}\n\nconst handler = ObjectFreeze(/** @type {ProxyHandler<Float16BitsArray>} */ ({\n  get(target, key, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return convertToNumber(ReflectGet(target, key));\n    }\n\n    // %TypedArray%.prototype getter properties cannot called by Proxy receiver\n    if (WeakSetPrototypeHas(TypedArrayPrototypeGetters, ObjectPrototype__lookupGetter__(target, key))) {\n      return ReflectGet(target, key);\n    }\n\n    return ReflectGet(target, key, receiver);\n  },\n\n  set(target, key, value, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return ReflectSet(target, key, roundToFloat16Bits(value));\n    }\n\n    return ReflectSet(target, key, value, receiver);\n  },\n\n  getOwnPropertyDescriptor(target, key) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n      descriptor.value = convertToNumber(descriptor.value);\n      return descriptor;\n    }\n\n    return ReflectGetOwnPropertyDescriptor(target, key);\n  },\n\n  defineProperty(target, key, descriptor) {\n    if (\n      isCanonicalIntegerIndexString(key) &&\n      ObjectHasOwn(target, key) &&\n      ObjectHasOwn(descriptor, \"value\")\n    ) {\n      descriptor.value = roundToFloat16Bits(descriptor.value);\n      return ReflectDefineProperty(target, key, descriptor);\n    }\n\n    return ReflectDefineProperty(target, key, descriptor);\n  },\n}));\n\nexport class Float16Array {\n  /** @see https://tc39.es/ecma262/#sec-typedarray */\n  constructor(input, _byteOffset, _length) {\n    /** @type {Float16BitsArray} */\n    let float16bitsArray;\n\n    if (isFloat16Array(input)) {\n      float16bitsArray = ReflectConstruct(NativeUint16Array, [getFloat16BitsArray(input)], new.target);\n    } else if (isObject(input) && !isArrayBuffer(input)) { // object without ArrayBuffer\n      /** @type {ArrayLike<unknown>} */\n      let list;\n      /** @type {number} */\n      let length;\n\n      if (isNativeTypedArray(input)) { // TypedArray\n        list = input;\n        length = TypedArrayPrototypeGetLength(input);\n\n        const buffer = TypedArrayPrototypeGetBuffer(input);\n        const BufferConstructor = !isSharedArrayBuffer(buffer)\n          ? /** @type {ArrayBufferConstructor} */ (SpeciesConstructor(\n            buffer,\n            NativeArrayBuffer\n          ))\n          : NativeArrayBuffer;\n\n        if (IsDetachedBuffer(buffer)) {\n          throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n        }\n\n        if (isNativeBigIntTypedArray(input)) {\n          throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n        }\n\n        const data = new BufferConstructor(\n          length * BYTES_PER_ELEMENT\n        );\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [data], new.target);\n      } else {\n        const iterator = input[SymbolIterator];\n        if (iterator != null && typeof iterator !== \"function\") {\n          throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n        }\n\n        if (iterator != null) { // Iterable (Array)\n          // for optimization\n          if (isOrdinaryArray(input)) {\n            list = input;\n            length = input.length;\n          } else {\n            // eslint-disable-next-line no-restricted-syntax\n            list = [... /** @type {Iterable<unknown>} */ (input)];\n            length = list.length;\n          }\n        } else { // ArrayLike\n          list = /** @type {ArrayLike<unknown>} */ (input);\n          length = ToLength(list.length);\n        }\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [length], new.target);\n      }\n\n      // set values\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(list[i]);\n      }\n    } else { // primitive, ArrayBuffer\n      float16bitsArray = ReflectConstruct(NativeUint16Array, arguments, new.target);\n    }\n\n    /** @type {Float16Array} */\n    const proxy = /** @type {any} */ (new NativeProxy(float16bitsArray, handler));\n\n    // proxy private storage\n    WeakMapPrototypeSet(float16bitsArrays, proxy, float16bitsArray);\n\n    return proxy;\n  }\n\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.from\n   */\n  static from(src, ...opts) {\n    const Constructor = this;\n\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(\n        THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY\n      );\n    }\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      if (isFloat16Array(src) && opts.length === 0) {\n        const float16bitsArray = getFloat16BitsArray(src);\n        const uint16 = new NativeUint16Array(\n          TypedArrayPrototypeGetBuffer(float16bitsArray),\n          TypedArrayPrototypeGetByteOffset(float16bitsArray),\n          TypedArrayPrototypeGetLength(float16bitsArray)\n        );\n        return new Float16Array(\n          TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16))\n        );\n      }\n\n      if (opts.length === 0) {\n        return new Float16Array(\n          TypedArrayPrototypeGetBuffer(\n            Uint16ArrayFrom(src, roundToFloat16Bits)\n          )\n        );\n      }\n\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n\n      return new Float16Array(\n        TypedArrayPrototypeGetBuffer(\n          Uint16ArrayFrom(src, function (val, ...args) {\n            return roundToFloat16Bits(\n              ReflectApply(mapFunc, this, [val, ...safeIfNeeded(args)])\n            );\n          }, thisArg)\n        )\n      );\n    }\n\n    /** @type {ArrayLike<unknown>} */\n    let list;\n    /** @type {number} */\n    let length;\n\n    const iterator = src[SymbolIterator];\n    if (iterator != null && typeof iterator !== \"function\") {\n      throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n    }\n\n    if (iterator != null) { // Iterable (TypedArray, Array)\n      // for optimization\n      if (isOrdinaryArray(src)) {\n        list = src;\n        length = src.length;\n      } else if (isOrdinaryNativeTypedArray(src)) {\n        list = src;\n        length = TypedArrayPrototypeGetLength(src);\n      } else {\n        // eslint-disable-next-line no-restricted-syntax\n        list = [...src];\n        length = list.length;\n      }\n    } else { // ArrayLike\n      if (src == null) {\n        throw NativeTypeError(\n          CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT\n        );\n      }\n      list = NativeObject(src);\n      length = ToLength(list.length);\n    }\n\n    const array = new Constructor(length);\n\n    if (opts.length === 0) {\n      for (let i = 0; i < length; ++i) {\n        array[i] = /** @type {number} */ (list[i]);\n      }\n    } else {\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n      for (let i = 0; i < length; ++i) {\n        array[i] = ReflectApply(mapFunc, thisArg, [list[i], i]);\n      }\n    }\n\n    return array;\n  }\n\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.of\n   */\n  static of(...items) {\n    const Constructor = this;\n\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(\n        THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY\n      );\n    }\n\n    const length = items.length;\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const float16bitsArray = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(items[i]);\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n\n    for (let i = 0; i < length; ++i) {\n      array[i] = items[i];\n    }\n\n    return array;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys */\n  keys() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return TypedArrayPrototypeKeys(float16bitsArray);\n  }\n\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.values\n   */\n  values() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return wrap((function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const val of TypedArrayPrototypeValues(float16bitsArray)) {\n        yield convertToNumber(val);\n      }\n    })());\n  }\n\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries\n   */\n  entries() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return wrap((function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const [i, val] of TypedArrayPrototypeEntries(float16bitsArray)) {\n        yield /** @type {[Number, number]} */ ([i, convertToNumber(val)]);\n      }\n    })());\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.at */\n  at(index) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeIndex = ToIntegerOrInfinity(index);\n    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n\n    if (k < 0 || k >= length) {\n      return;\n    }\n\n    return convertToNumber(float16bitsArray[k]);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.map */\n  map(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const array = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        const val = convertToNumber(float16bitsArray[i]);\n        array[i] = roundToFloat16Bits(\n          ReflectApply(callback, thisArg, [val, i, this])\n        );\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n    assertSpeciesTypedArray(array, length);\n\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      array[i] = ReflectApply(callback, thisArg, [val, i, this]);\n    }\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter */\n  filter(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    const kept = [];\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [val, i, this])) {\n        ArrayPrototypePush(kept, val);\n      }\n    }\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n    const array = new Constructor(kept);\n    assertSpeciesTypedArray(array);\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce */\n  reduce(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    if (length === 0 && opts.length === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n    if (opts.length === 0) {\n      accumulator = convertToNumber(float16bitsArray[0]);\n      start = 1;\n    } else {\n      accumulator = opts[0];\n      start = 0;\n    }\n\n    for (let i = start; i < length; ++i) {\n      accumulator = callback(\n        accumulator,\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this\n      );\n    }\n\n    return accumulator;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright */\n  reduceRight(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    if (length === 0 && opts.length === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n    if (opts.length === 0) {\n      accumulator = convertToNumber(float16bitsArray[length - 1]);\n      start = length - 2;\n    } else {\n      accumulator = opts[0];\n      start = length - 1;\n    }\n\n    for (let i = start; i >= 0; --i) {\n      accumulator = callback(\n        accumulator,\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this\n      );\n    }\n\n    return accumulator;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach */\n  forEach(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      ReflectApply(callback, thisArg, [\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this,\n      ]);\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.find */\n  find(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex */\n  findIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlast */\n  findLast(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlastindex */\n  findLastIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.every */\n  every(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      if (\n        !ReflectApply(callback, thisArg, [\n          convertToNumber(float16bitsArray[i]),\n          i,\n          this,\n        ])\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.some */\n  some(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      if (\n        ReflectApply(callback, thisArg, [\n          convertToNumber(float16bitsArray[i]),\n          i,\n          this,\n        ])\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.set */\n  set(input, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const targetOffset = ToIntegerOrInfinity(opts[0]);\n    if (targetOffset < 0) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    if (input == null) {\n      throw NativeTypeError(\n        CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT\n      );\n    }\n\n    if (isNativeBigIntTypedArray(input)) {\n      throw NativeTypeError(\n        CANNOT_MIX_BIGINT_AND_OTHER_TYPES\n      );\n    }\n\n    // for optimization\n    if (isFloat16Array(input)) {\n      // peel off Proxy\n      return TypedArrayPrototypeSet(\n        getFloat16BitsArray(this),\n        getFloat16BitsArray(input),\n        targetOffset\n      );\n    }\n\n    if (isNativeTypedArray(input)) {\n      const buffer = TypedArrayPrototypeGetBuffer(input);\n      if (IsDetachedBuffer(buffer)) {\n        throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n      }\n    }\n\n    const targetLength = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    const src = NativeObject(input);\n    const srcLength = ToLength(src.length);\n\n    if (targetOffset === Infinity || srcLength + targetOffset > targetLength) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    for (let i = 0; i < srcLength; ++i) {\n      float16bitsArray[i + targetOffset] = roundToFloat16Bits(src[i]);\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse */\n  reverse() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeReverse(float16bitsArray);\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill */\n  fill(value, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeFill(\n      float16bitsArray,\n      roundToFloat16Bits(value),\n      ...safeIfNeeded(opts)\n    );\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin */\n  copyWithin(target, start, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeCopyWithin(float16bitsArray, target, start, ...safeIfNeeded(opts));\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort */\n  sort(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const compare = opts[0] !== undefined ? opts[0] : defaultCompare;\n    TypedArrayPrototypeSort(float16bitsArray, (x, y) => {\n      return compare(convertToNumber(x), convertToNumber(y));\n    });\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice */\n  slice(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const uint16 = new NativeUint16Array(\n        TypedArrayPrototypeGetBuffer(float16bitsArray),\n        TypedArrayPrototypeGetByteOffset(float16bitsArray),\n        TypedArrayPrototypeGetLength(float16bitsArray)\n      );\n      return new Float16Array(\n        TypedArrayPrototypeGetBuffer(\n          TypedArrayPrototypeSlice(uint16, ...safeIfNeeded(opts))\n        )\n      );\n    }\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const start = ToIntegerOrInfinity(opts[0]);\n    const end = opts[1] === undefined ? length : ToIntegerOrInfinity(opts[1]);\n\n    let k;\n    if (start === -Infinity) {\n      k = 0;\n    } else if (start < 0) {\n      k = length + start > 0 ? length + start : 0;\n    } else {\n      k = length < start ? length : start;\n    }\n\n    let final;\n    if (end === -Infinity) {\n      final = 0;\n    } else if (end < 0) {\n      final = length + end > 0 ? length + end : 0;\n    } else {\n      final = length < end ? length : end;\n    }\n\n    const count = final - k > 0 ? final - k : 0;\n    const array = new Constructor(count);\n    assertSpeciesTypedArray(array, count);\n\n    if (count === 0) {\n      return array;\n    }\n\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    let n = 0;\n    while (k < final) {\n      array[n] = convertToNumber(float16bitsArray[k]);\n      ++k;\n      ++n;\n    }\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray */\n  subarray(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    const uint16 = new NativeUint16Array(\n      TypedArrayPrototypeGetBuffer(float16bitsArray),\n      TypedArrayPrototypeGetByteOffset(float16bitsArray),\n      TypedArrayPrototypeGetLength(float16bitsArray)\n    );\n    const uint16Subarray = TypedArrayPrototypeSubarray(uint16, ...safeIfNeeded(opts));\n\n    const array = new Constructor(\n      TypedArrayPrototypeGetBuffer(uint16Subarray),\n      TypedArrayPrototypeGetByteOffset(uint16Subarray),\n      TypedArrayPrototypeGetLength(uint16Subarray)\n    );\n    assertSpeciesTypedArray(array);\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof */\n  indexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = ToIntegerOrInfinity(opts[0]);\n    if (from === Infinity) {\n      return -1;\n    }\n\n    if (from < 0) {\n      from += length;\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    for (let i = from; i < length; ++i) {\n      if (\n        ObjectHasOwn(float16bitsArray, i) &&\n        convertToNumber(float16bitsArray[i]) === element\n      ) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof */\n  lastIndexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = opts.length >= 1 ? ToIntegerOrInfinity(opts[0]) : length - 1;\n    if (from === -Infinity) {\n      return -1;\n    }\n\n    if (from >= 0) {\n      from = from < length - 1 ? from : length - 1;\n    } else {\n      from += length;\n    }\n\n    for (let i = from; i >= 0; --i) {\n      if (\n        ObjectHasOwn(float16bitsArray, i) &&\n        convertToNumber(float16bitsArray[i]) === element\n      ) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes */\n  includes(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = ToIntegerOrInfinity(opts[0]);\n    if (from === Infinity) {\n      return false;\n    }\n\n    if (from < 0) {\n      from += length;\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    const isNaN = NumberIsNaN(element);\n    for (let i = from; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n\n      if (isNaN && NumberIsNaN(value)) {\n        return true;\n      }\n\n      if (value === element) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.join */\n  join(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const array = copyToArray(float16bitsArray);\n\n    return ArrayPrototypeJoin(array, ...safeIfNeeded(opts));\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring */\n  toLocaleString(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const array = copyToArray(float16bitsArray);\n\n    return ArrayPrototypeToLocaleString(array, ...safeIfNeeded(opts));\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag */\n  get [SymbolToStringTag]() {\n    if (isFloat16Array(this)) {\n      return /** @type {any} */ (\"Float16Array\");\n    }\n  }\n}\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.bytes_per_element */\nObjectDefineProperty(Float16Array, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT,\n});\n\n// limitation: It is peaked by `Object.getOwnPropertySymbols(Float16Array)` and `Reflect.ownKeys(Float16Array)`\nObjectDefineProperty(Float16Array, brand, {});\n\n/** @see https://tc39.es/ecma262/#sec-properties-of-the-typedarray-constructors */\nReflectSetPrototypeOf(Float16Array, TypedArray);\n\nconst Float16ArrayPrototype = Float16Array.prototype;\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.prototype.bytes_per_element */\nObjectDefineProperty(Float16ArrayPrototype, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT,\n});\n\n/** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator */\nObjectDefineProperty(Float16ArrayPrototype, SymbolIterator, {\n  value: Float16ArrayPrototype.values,\n  writable: true,\n  configurable: true,\n});\n\n// To make `new Float16Array() instanceof Uint16Array` returns `false`\nReflectSetPrototypeOf(Float16ArrayPrototype, TypedArrayPrototype);\n"]},"metadata":{},"sourceType":"module"}