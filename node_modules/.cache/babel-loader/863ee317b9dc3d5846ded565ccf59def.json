{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.map.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/MapBrowserEvent\n */\n\n\nimport MapEvent from './MapEvent.js';\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.\n * @template {UIEvent} EVENT\n */\n\nvar MapBrowserEvent =\n/** @class */\nfunction (_super) {\n  __extends(MapBrowserEvent, _super);\n  /**\n   * @param {string} type Event type.\n   * @param {import(\"./PluggableMap.js\").default} map Map.\n   * @param {EVENT} originalEvent Original event.\n   * @param {boolean} [opt_dragging] Is the map currently being dragged?\n   * @param {?import(\"./PluggableMap.js\").FrameState} [opt_frameState] Frame state.\n   */\n\n\n  function MapBrowserEvent(type, map, originalEvent, opt_dragging, opt_frameState) {\n    var _this = _super.call(this, type, map, opt_frameState) || this;\n    /**\n     * The original browser event.\n     * @const\n     * @type {EVENT}\n     * @api\n     */\n\n\n    _this.originalEvent = originalEvent;\n    /**\n     * The map pixel relative to the viewport corresponding to the original browser event.\n     * @type {?import(\"./pixel.js\").Pixel}\n     */\n\n    _this.pixel_ = null;\n    /**\n     * The coordinate in the user projection corresponding to the original browser event.\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n\n    _this.coordinate_ = null;\n    /**\n     * Indicates if the map is currently being dragged. Only set for\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n     *\n     * @type {boolean}\n     * @api\n     */\n\n    _this.dragging = opt_dragging !== undefined ? opt_dragging : false;\n    return _this;\n  }\n\n  Object.defineProperty(MapBrowserEvent.prototype, \"pixel\", {\n    /**\n     * The map pixel relative to the viewport corresponding to the original event.\n     * @type {import(\"./pixel.js\").Pixel}\n     * @api\n     */\n    get: function get() {\n      if (!this.pixel_) {\n        this.pixel_ = this.map.getEventPixel(this.originalEvent);\n      }\n\n      return this.pixel_;\n    },\n    set: function set(pixel) {\n      this.pixel_ = pixel;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MapBrowserEvent.prototype, \"coordinate\", {\n    /**\n     * The coordinate corresponding to the original browser event.  This will be in the user\n     * projection if one is set.  Otherwise it will be in the view projection.\n     * @type {import(\"./coordinate.js\").Coordinate}\n     * @api\n     */\n    get: function get() {\n      if (!this.coordinate_) {\n        this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);\n      }\n\n      return this.coordinate_;\n    },\n    set: function set(coordinate) {\n      this.coordinate_ = coordinate;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Prevents the default browser action.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n   * @api\n   */\n\n  MapBrowserEvent.prototype.preventDefault = function () {\n    _super.prototype.preventDefault.call(this);\n\n    if ('preventDefault' in this.originalEvent) {\n      /** @type {UIEvent} */\n      this.originalEvent.preventDefault();\n    }\n  };\n  /**\n   * Prevents further propagation of the current event.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n   * @api\n   */\n\n\n  MapBrowserEvent.prototype.stopPropagation = function () {\n    _super.prototype.stopPropagation.call(this);\n\n    if ('stopPropagation' in this.originalEvent) {\n      /** @type {UIEvent} */\n      this.originalEvent.stopPropagation();\n    }\n  };\n\n  return MapBrowserEvent;\n}(MapEvent);\n\nexport default MapBrowserEvent;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAGA,OAAOA,QAAP,MAAqB,eAArB;AAEA;;;;;;;AAMA;AAAA;AAAA;AAA8BC;AAC5B;;;;;;;;;AAOA,2BAAYC,IAAZ,EAAkBC,GAAlB,EAAuBC,aAAvB,EAAsCC,YAAtC,EAAoDC,cAApD,EAAkE;AAAlE,gBACEC,kBAAML,IAAN,EAAYC,GAAZ,EAAiBG,cAAjB,KAAgC,IADlC;AAGE;;;;;;;;AAMAE,SAAI,CAACJ,aAAL,GAAqBA,aAArB;AAEA;;;;;AAIAI,SAAI,CAACC,MAAL,GAAc,IAAd;AAEA;;;;;AAIAD,SAAI,CAACE,WAAL,GAAmB,IAAnB;AAEA;;;;;;;;AAOAF,SAAI,CAACG,QAAL,GAAgBN,YAAY,KAAKO,SAAjB,GAA6BP,YAA7B,GAA4C,KAA5D;;AACD;;AAODQ,wBAAIC,yBAAJ,EAAI,OAAJ,EAAS;AALT;;;;;SAKA;AACE,UAAI,CAAC,KAAKL,MAAV,EAAkB;AAChB,aAAKA,MAAL,GAAc,KAAKN,GAAL,CAASY,aAAT,CAAuB,KAAKX,aAA5B,CAAd;AACD;;AACD,aAAO,KAAKK,MAAZ;AACD,KALQ;SAMT,aAAUO,KAAV,EAAe;AACb,WAAKP,MAAL,GAAcO,KAAd;AACD,KARQ;qBAAA;;AAAA,GAAT;AAgBAH,wBAAIC,yBAAJ,EAAI,YAAJ,EAAc;AANd;;;;;;SAMA;AACE,UAAI,CAAC,KAAKJ,WAAV,EAAuB;AACrB,aAAKA,WAAL,GAAmB,KAAKP,GAAL,CAASc,sBAAT,CAAgC,KAAKD,KAArC,CAAnB;AACD;;AACD,aAAO,KAAKN,WAAZ;AACD,KALa;SAMd,aAAeQ,UAAf,EAAyB;AACvB,WAAKR,WAAL,GAAmBQ,UAAnB;AACD,KARa;qBAAA;;AAAA,GAAd;AAUA;;;;;;AAKAJ;AACEP,qBAAMY,cAAN,CAAoBC,IAApB,CAAoB,IAApB;;AACA,QAAI,oBAAoB,KAAKhB,aAA7B,EAA4C;AAC1C;AAAwB,WAAKA,aAAN,CAAqBe,cAArB;AACxB;AACF,GALD;AAOA;;;;;;;AAKAL;AACEP,qBAAMc,eAAN,CAAqBD,IAArB,CAAqB,IAArB;;AACA,QAAI,qBAAqB,KAAKhB,aAA9B,EAA6C;AAC3C;AAAwB,WAAKA,aAAN,CAAqBiB,eAArB;AACxB;AACF,GALD;;AAMF;AA/FA,EAA8BrB,QAA9B;;AAiGA,eAAec,eAAf","names":["MapEvent","__extends","type","map","originalEvent","opt_dragging","opt_frameState","_super","_this","pixel_","coordinate_","dragging","undefined","Object","MapBrowserEvent","getEventPixel","pixel","getCoordinateFromPixel","coordinate","preventDefault","call","stopPropagation"],"sourceRoot":"","sources":["src/MapBrowserEvent.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}