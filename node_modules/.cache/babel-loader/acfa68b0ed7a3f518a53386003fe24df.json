{"ast":null,"code":"import { isObject, isSharedArrayBuffer } from \"./is.mjs\";\nimport { CANNOT_CONVERT_A_BIGINT_VALUE_TO_A_NUMBER, THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT, THIS_IS_NOT_AN_OBJECT } from \"./messages.mjs\";\nimport { ArrayBufferPrototypeSlice, MathTrunc, NativeNumber, NativeTypeError, NumberIsNaN, ObjectIs, SymbolSpecies } from \"./primordials.mjs\";\nvar MAX_SAFE_INTEGER = NativeNumber.MAX_SAFE_INTEGER;\n/**\n * @see https://tc39.es/ecma262/#sec-tointegerorinfinity\n * @param {unknown} target\n * @returns {number}\n */\n\nexport function ToIntegerOrInfinity(target) {\n  if (typeof target === \"bigint\") {\n    throw NativeTypeError(CANNOT_CONVERT_A_BIGINT_VALUE_TO_A_NUMBER);\n  }\n\n  var number = NativeNumber(target);\n\n  if (NumberIsNaN(number) || number === 0) {\n    return 0;\n  }\n\n  return MathTrunc(number);\n}\n/**\n * @see https://tc39.es/ecma262/#sec-tolength\n * @param {unknown} target\n * @returns {number}\n */\n\nexport function ToLength(target) {\n  var length = ToIntegerOrInfinity(target);\n\n  if (length < 0) {\n    return 0;\n  }\n\n  return length < MAX_SAFE_INTEGER ? length : MAX_SAFE_INTEGER;\n}\n/**\n * @see https://tc39.es/ecma262/#sec-speciesconstructor\n * @param {object} target\n * @param {{ new(...args: any[]): any; }} defaultConstructor\n * @returns {{ new(...args: any[]): any; }}\n */\n\nexport function SpeciesConstructor(target, defaultConstructor) {\n  if (!isObject(target)) {\n    throw NativeTypeError(THIS_IS_NOT_AN_OBJECT);\n  }\n\n  var constructor = target.constructor;\n\n  if (constructor === undefined) {\n    return defaultConstructor;\n  }\n\n  if (!isObject(constructor)) {\n    throw NativeTypeError(THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT);\n  }\n\n  var species = constructor[SymbolSpecies];\n\n  if (species == null) {\n    return defaultConstructor;\n  }\n\n  return species;\n}\n/**\n * @see https://tc39.es/ecma262/#sec-isdetachedbuffer\n * @param {ArrayBufferLike} buffer\n * @returns {boolean}\n */\n\nexport function IsDetachedBuffer(buffer) {\n  if (isSharedArrayBuffer(buffer)) {\n    return false;\n  }\n\n  try {\n    ArrayBufferPrototypeSlice(buffer, 0, 0);\n    return false;\n  } catch (e) {\n    /* empty */\n  }\n\n  return true;\n}\n/**\n * bigint comparisons are not supported\n *\n * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort\n * @param {number} x\n * @param {number} y\n * @returns {-1 | 0 | 1}\n */\n\nexport function defaultCompare(x, y) {\n  var isXNaN = NumberIsNaN(x);\n  var isYNaN = NumberIsNaN(y);\n\n  if (isXNaN && isYNaN) {\n    return 0;\n  }\n\n  if (isXNaN) {\n    return 1;\n  }\n\n  if (isYNaN) {\n    return -1;\n  }\n\n  if (x < y) {\n    return -1;\n  }\n\n  if (x > y) {\n    return 1;\n  }\n\n  if (x === 0 && y === 0) {\n    var isXPlusZero = ObjectIs(x, 0);\n    var isYPlusZero = ObjectIs(y, 0);\n\n    if (!isXPlusZero && isYPlusZero) {\n      return -1;\n    }\n\n    if (isXPlusZero && !isYPlusZero) {\n      return 1;\n    }\n  }\n\n  return 0;\n}","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@petamoriken/float16/src/_util/spec.mjs"],"names":["isObject","isSharedArrayBuffer","CANNOT_CONVERT_A_BIGINT_VALUE_TO_A_NUMBER","THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT","THIS_IS_NOT_AN_OBJECT","ArrayBufferPrototypeSlice","MathTrunc","NativeNumber","NativeTypeError","NumberIsNaN","ObjectIs","SymbolSpecies","MAX_SAFE_INTEGER","ToIntegerOrInfinity","target","number","ToLength","length","SpeciesConstructor","defaultConstructor","constructor","undefined","species","IsDetachedBuffer","buffer","e","defaultCompare","x","y","isXNaN","isYNaN","isXPlusZero","isYPlusZero"],"mappings":"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","sourcesContent":["import { isObject, isSharedArrayBuffer } from \"./is.mjs\";\nimport {\n  CANNOT_CONVERT_A_BIGINT_VALUE_TO_A_NUMBER,\n  THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT,\n  THIS_IS_NOT_AN_OBJECT,\n} from \"./messages.mjs\";\nimport {\n  ArrayBufferPrototypeSlice,\n  MathTrunc,\n  NativeNumber,\n  NativeTypeError,\n  NumberIsNaN,\n  ObjectIs,\n  SymbolSpecies,\n} from \"./primordials.mjs\";\n\nconst MAX_SAFE_INTEGER = NativeNumber.MAX_SAFE_INTEGER;\n\n/**\n * @see https://tc39.es/ecma262/#sec-tointegerorinfinity\n * @param {unknown} target\n * @returns {number}\n */\nexport function ToIntegerOrInfinity(target) {\n  if (typeof target === \"bigint\") {\n    throw NativeTypeError(CANNOT_CONVERT_A_BIGINT_VALUE_TO_A_NUMBER);\n  }\n\n  const number = NativeNumber(target);\n\n  if (NumberIsNaN(number) || number === 0) {\n    return 0;\n  }\n\n  return MathTrunc(number);\n}\n\n/**\n * @see https://tc39.es/ecma262/#sec-tolength\n * @param {unknown} target\n * @returns {number}\n */\nexport function ToLength(target) {\n  const length = ToIntegerOrInfinity(target);\n  if (length < 0) {\n    return 0;\n  }\n\n  return length < MAX_SAFE_INTEGER\n    ? length\n    : MAX_SAFE_INTEGER;\n}\n\n/**\n * @see https://tc39.es/ecma262/#sec-speciesconstructor\n * @param {object} target\n * @param {{ new(...args: any[]): any; }} defaultConstructor\n * @returns {{ new(...args: any[]): any; }}\n */\nexport function SpeciesConstructor(target, defaultConstructor) {\n  if (!isObject(target)) {\n    throw NativeTypeError(THIS_IS_NOT_AN_OBJECT);\n  }\n\n  const constructor = target.constructor;\n  if (constructor === undefined) {\n    return defaultConstructor;\n  }\n  if (!isObject(constructor)) {\n    throw NativeTypeError(THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT);\n  }\n\n  const species = constructor[SymbolSpecies];\n  if (species == null) {\n    return defaultConstructor;\n  }\n\n  return species;\n}\n\n/**\n * @see https://tc39.es/ecma262/#sec-isdetachedbuffer\n * @param {ArrayBufferLike} buffer\n * @returns {boolean}\n */\nexport function IsDetachedBuffer(buffer) {\n  if (isSharedArrayBuffer(buffer)) {\n    return false;\n  }\n\n  try {\n    ArrayBufferPrototypeSlice(buffer, 0, 0);\n    return false;\n  } catch (e) {/* empty */}\n\n  return true;\n}\n\n/**\n * bigint comparisons are not supported\n *\n * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort\n * @param {number} x\n * @param {number} y\n * @returns {-1 | 0 | 1}\n */\nexport function defaultCompare(x, y) {\n  const isXNaN = NumberIsNaN(x);\n  const isYNaN = NumberIsNaN(y);\n\n  if (isXNaN && isYNaN) {\n    return 0;\n  }\n\n  if (isXNaN) {\n    return 1;\n  }\n\n  if (isYNaN) {\n    return -1;\n  }\n\n  if (x < y) {\n    return -1;\n  }\n\n  if (x > y) {\n    return 1;\n  }\n\n  if (x === 0 && y === 0) {\n    const isXPlusZero = ObjectIs(x, 0);\n    const isYPlusZero = ObjectIs(y, 0);\n\n    if (!isXPlusZero && isYPlusZero) {\n      return -1;\n    }\n\n    if (isXPlusZero && !isYPlusZero) {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n"]},"metadata":{},"sourceType":"module"}