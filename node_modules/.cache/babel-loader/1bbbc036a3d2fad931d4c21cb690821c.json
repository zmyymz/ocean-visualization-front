{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.slice.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/Polygon\n */\n\n\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { arrayMaxSquaredDelta, assignClosestArrayPoint } from './flat/closest.js';\nimport { closestSquaredDistanceXY, getCenter } from '../extent.js';\nimport { deflateCoordinatesArray } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { getInteriorPointOfArray } from './flat/interiorpoint.js';\nimport { inflateCoordinatesArray } from './flat/inflate.js';\nimport { intersectsLinearRingArray } from './flat/intersectsextent.js';\nimport { linearRingsAreOriented, orientLinearRings } from './flat/orient.js';\nimport { linearRings as linearRingsArea } from './flat/area.js';\nimport { linearRingsContainsXY } from './flat/contains.js';\nimport { modulo } from '../math.js';\nimport { quantizeArray } from './flat/simplify.js';\nimport { offset as sphereOffset } from '../sphere.js';\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\n\nvar Polygon =\n/** @class */\nfunction (_super) {\n  __extends(Polygon, _super);\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `opt_layout` and `opt_ends` are also accepted.)\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @param {Array<number>} [opt_ends] Ends (for internal use with flat coordinates).\n   */\n\n\n  function Polygon(coordinates, opt_layout, opt_ends) {\n    var _this = _super.call(this) || this;\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n\n\n    _this.ends_ = [];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.flatInteriorPointRevision_ = -1;\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n\n    _this.flatInteriorPoint_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.maxDeltaRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.orientedRevision_ = -1;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    _this.orientedFlatCoordinates_ = null;\n\n    if (opt_layout !== undefined && opt_ends) {\n      _this.setFlatCoordinates(opt_layout,\n      /** @type {Array<number>} */\n      coordinates);\n\n      _this.ends_ = opt_ends;\n    } else {\n      _this.setCoordinates(\n      /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */\n      coordinates, opt_layout);\n    }\n\n    return _this;\n  }\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n\n\n  Polygon.prototype.appendLinearRing = function (linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @api\n   */\n\n\n  Polygon.prototype.clone = function () {\n    var polygon = new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n    polygon.applyProperties(this);\n    return polygon;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  Polygon.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n\n    return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n\n\n  Polygon.prototype.containsXY = function (x, y) {\n    return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);\n  };\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n\n\n  Polygon.prototype.getArea = function () {\n    return linearRingsArea(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);\n  };\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean} [opt_right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n\n\n  Polygon.prototype.getCoordinates = function (opt_right) {\n    var flatCoordinates;\n\n    if (opt_right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, opt_right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n  };\n  /**\n   * @return {Array<number>} Ends.\n   */\n\n\n  Polygon.prototype.getEnds = function () {\n    return this.ends_;\n  };\n  /**\n   * @return {Array<number>} Interior point.\n   */\n\n\n  Polygon.prototype.getFlatInteriorPoint = function () {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      var flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n\n    return this.flatInteriorPoint_;\n  };\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n\n\n  Polygon.prototype.getInteriorPoint = function () {\n    return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);\n  };\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n\n\n  Polygon.prototype.getLinearRingCount = function () {\n    return this.ends_.length;\n  };\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing|null} Linear ring.\n   * @api\n   */\n\n\n  Polygon.prototype.getLinearRing = function (index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n\n    return new LinearRing(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n  };\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n\n\n  Polygon.prototype.getLinearRings = function () {\n    var layout = this.layout;\n    var flatCoordinates = this.flatCoordinates;\n    var ends = this.ends_;\n    var linearRings = [];\n    var offset = 0;\n\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      var end = ends[i];\n      var linearRing = new LinearRing(flatCoordinates.slice(offset, end), layout);\n      linearRings.push(linearRing);\n      offset = end;\n    }\n\n    return linearRings;\n  };\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n\n\n  Polygon.prototype.getOrientedFlatCoordinates = function () {\n    if (this.orientedRevision_ != this.getRevision()) {\n      var flatCoordinates = this.flatCoordinates;\n\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRings(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);\n      }\n\n      this.orientedRevision_ = this.getRevision();\n    }\n\n    return this.orientedFlatCoordinates_;\n  };\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Polygon} Simplified Polygon.\n   * @protected\n   */\n\n\n  Polygon.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    var simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);\n    return new Polygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n\n\n  Polygon.prototype.getType = function () {\n    return GeometryType.POLYGON;\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  Polygon.prototype.intersectsExtent = function (extent) {\n    return intersectsLinearRingArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);\n  };\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n\n\n  Polygon.prototype.setCoordinates = function (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 2);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  };\n\n  return Polygon;\n}(SimpleGeometry);\n\nexport default Polygon;\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices in meters.\n * @param {number} [opt_n] Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number} [opt_sphereRadius] Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\n\nexport function circular(center, radius, opt_n, opt_sphereRadius) {\n  var n = opt_n ? opt_n : 32;\n  /** @type {Array<number>} */\n\n  var flatCoordinates = [];\n\n  for (var i = 0; i < n; ++i) {\n    extend(flatCoordinates, sphereOffset(center, radius, 2 * Math.PI * i / n, opt_sphereRadius));\n  }\n\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\n}\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\n\nexport function fromExtent(extent) {\n  var minX = extent[0];\n  var minY = extent[1];\n  var maxX = extent[2];\n  var maxY = extent[3];\n  var flatCoordinates = [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\n}\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number} [opt_sides] Number of sides of the polygon. Default is 32.\n * @param {number} [opt_angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\n\nexport function fromCircle(circle, opt_sides, opt_angle) {\n  var sides = opt_sides ? opt_sides : 32;\n  var stride = circle.getStride();\n  var layout = circle.getLayout();\n  var center = circle.getCenter();\n  var arrayLength = stride * (sides + 1);\n  var flatCoordinates = new Array(arrayLength);\n\n  for (var i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n\n    for (var j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n\n  var ends = [flatCoordinates.length];\n  var polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), opt_angle);\n  return polygon;\n}\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number} [opt_angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n */\n\nexport function makeRegular(polygon, center, radius, opt_angle) {\n  var flatCoordinates = polygon.getFlatCoordinates();\n  var stride = polygon.getStride();\n  var sides = flatCoordinates.length / stride - 1;\n  var startAngle = opt_angle ? opt_angle : 0;\n\n  for (var i = 0; i <= sides; ++i) {\n    var offset = i * stride;\n    var angle = startAngle + modulo(i, sides) * 2 * Math.PI / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n\n  polygon.changed();\n}","map":{"version":3,"mappings":"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","names":["GeometryLayout","GeometryType","LinearRing","Point","SimpleGeometry","arrayMaxSquaredDelta","assignClosestArrayPoint","closestSquaredDistanceXY","getCenter","deflateCoordinatesArray","extend","getInteriorPointOfArray","inflateCoordinatesArray","intersectsLinearRingArray","linearRingsAreOriented","orientLinearRings","linearRings","linearRingsArea","linearRingsContainsXY","modulo","quantizeArray","offset","sphereOffset","__extends","coordinates","opt_layout","opt_ends","_super","_this","ends_","flatInteriorPointRevision_","flatInteriorPoint_","maxDelta_","maxDeltaRevision_","orientedRevision_","orientedFlatCoordinates_","undefined","setFlatCoordinates","setCoordinates","Polygon","linearRing","flatCoordinates","getFlatCoordinates","slice","push","length","changed","polygon","layout","applyProperties","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","stride","getOrientedFlatCoordinates","opt_right","flatCenter","getFlatInteriorPoint","XYM","index","ends","i","ii","end","squaredTolerance","simplifiedFlatCoordinates","simplifiedEnds","XY","POLYGON","extent","setLayout","circular","center","radius","opt_n","opt_sphereRadius","n","PI","fromExtent","minX","minY","maxX","maxY","fromCircle","circle","opt_sides","opt_angle","sides","getStride","getLayout","arrayLength","Array","j","makeRegular","getRadius","startAngle","angle","cos","sin"],"sourceRoot":"","sources":["../src/geom/Polygon.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}