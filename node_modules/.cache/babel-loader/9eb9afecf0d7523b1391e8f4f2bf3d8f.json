{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\n\n/**\n * @module ol/coordinate\n */\nimport { getWidth } from './extent.js';\nimport { modulo } from './math.js';\nimport { padNumber } from './string.js';\n/**\n * An array of numbers representing an xy coordinate. Example: `[16, 48]`.\n * @typedef {Array<number>} Coordinate\n * @api\n */\n\n/**\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\n * transforms it into a `{string}`.\n *\n * @typedef {function((Coordinate|undefined)): string} CoordinateFormat\n * @api\n */\n\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {add} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {Coordinate} delta Delta.\n * @return {Coordinate} The input coordinate adjusted by\n * the given delta.\n * @api\n */\n\nexport function add(coordinate, delta) {\n  coordinate[0] += +delta[0];\n  coordinate[1] += +delta[1];\n  return coordinate;\n}\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {import(\"./geom/Circle.js\").default} circle The circle.\n * @return {Coordinate} Closest point on the circumference.\n */\n\nexport function closestOnCircle(coordinate, circle) {\n  var r = circle.getRadius();\n  var center = circle.getCenter();\n  var x0 = center[0];\n  var y0 = center[1];\n  var x1 = coordinate[0];\n  var y1 = coordinate[1];\n  var dx = x1 - x0;\n  var dy = y1 - y0;\n\n  if (dx === 0 && dy === 0) {\n    dx = 1;\n  }\n\n  var d = Math.sqrt(dx * dx + dy * dy);\n  var x = x0 + r * dx / d;\n  var y = y0 + r * dy / d;\n  return [x, y];\n}\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {Array<Coordinate>} segment The two coordinates\n * of the segment.\n * @return {Coordinate} The foot of the perpendicular of\n * the coordinate to the segment.\n */\n\nexport function closestOnSegment(coordinate, segment) {\n  var x0 = coordinate[0];\n  var y0 = coordinate[1];\n  var start = segment[0];\n  var end = segment[1];\n  var x1 = start[0];\n  var y1 = start[1];\n  var x2 = end[0];\n  var y2 = end[1];\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  var along = dx === 0 && dy === 0 ? 0 : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n  var x, y;\n\n  if (along <= 0) {\n    x = x1;\n    y = y1;\n  } else if (along >= 1) {\n    x = x2;\n    y = y2;\n  } else {\n    x = x1 + along * dx;\n    y = y1 + along * dy;\n  }\n\n  return [x, y];\n}\n/**\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\n * used to format\n * a {Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = createStringXY();\n *     var out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = createStringXY(2);\n *     var out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number} [opt_fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {CoordinateFormat} Coordinate format.\n * @api\n */\n\nexport function createStringXY(opt_fractionDigits) {\n  return (\n    /**\n     * @param {Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function (coordinate) {\n      return toStringXY(coordinate, opt_fractionDigits);\n    }\n  );\n}\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number} [opt_fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\n\nexport function degreesToStringHDMS(hemispheres, degrees, opt_fractionDigits) {\n  var normalizedDegrees = modulo(degrees + 180, 360) - 180;\n  var x = Math.abs(3600 * normalizedDegrees);\n  var dflPrecision = opt_fractionDigits || 0;\n  var precision = Math.pow(10, dflPrecision);\n  var deg = Math.floor(x / 3600);\n  var min = Math.floor((x - deg * 3600) / 60);\n  var sec = x - deg * 3600 - min * 60;\n  sec = Math.ceil(sec * precision) / precision;\n\n  if (sec >= 60) {\n    sec = 0;\n    min += 1;\n  }\n\n  if (min >= 60) {\n    min = 0;\n    deg += 1;\n  }\n\n  return deg + \"\\xB0 \" + padNumber(min, 2) + \"\\u2032 \" + padNumber(sec, 2, dflPrecision) + \"\\u2033\" + (normalizedDegrees == 0 ? '' : ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0));\n}\n/**\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\n * using the given string template. The strings `{x}` and `{y}` in the template\n * will be replaced with the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number} [opt_fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\n\nexport function format(coordinate, template, opt_fractionDigits) {\n  if (coordinate) {\n    return template.replace('{x}', coordinate[0].toFixed(opt_fractionDigits)).replace('{y}', coordinate[1].toFixed(opt_fractionDigits));\n  } else {\n    return '';\n  }\n}\n/**\n * @param {Coordinate} coordinate1 First coordinate.\n * @param {Coordinate} coordinate2 Second coordinate.\n * @return {boolean} The two coordinates are equal.\n */\n\nexport function equals(coordinate1, coordinate2) {\n  var equals = true;\n\n  for (var i = coordinate1.length - 1; i >= 0; --i) {\n    if (coordinate1[i] != coordinate2[i]) {\n      equals = false;\n      break;\n    }\n  }\n\n  return equals;\n}\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     import {rotate} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var rotateRadians = Math.PI / 2; // 90 degrees\n *     rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {Coordinate} Coordinate.\n * @api\n */\n\nexport function rotate(coordinate, angle) {\n  var cosAngle = Math.cos(angle);\n  var sinAngle = Math.sin(angle);\n  var x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  var y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  coordinate[0] = x;\n  coordinate[1] = y;\n  return coordinate;\n}\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {scale as scaleCoordinate} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var scale = 1.2;\n *     scaleCoordinate(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {Coordinate} Coordinate.\n */\n\nexport function scale(coordinate, scale) {\n  coordinate[0] *= scale;\n  coordinate[1] *= scale;\n  return coordinate;\n}\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\n\nexport function squaredDistance(coord1, coord2) {\n  var dx = coord1[0] - coord2[0];\n  var dy = coord1[1] - coord2[1];\n  return dx * dx + dy * dy;\n}\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\n\nexport function distance(coord1, coord2) {\n  return Math.sqrt(squaredDistance(coord1, coord2));\n}\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {Coordinate} coordinate Coordinate of the point.\n * @param {Array<Coordinate>} segment Line segment (2\n * coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\n\nexport function squaredDistanceToSegment(coordinate, segment) {\n  return squaredDistance(coordinate, closestOnSegment(coordinate, segment));\n}\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [opt_fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\n\nexport function toStringHDMS(coordinate, opt_fractionDigits) {\n  if (coordinate) {\n    return degreesToStringHDMS('NS', coordinate[1], opt_fractionDigits) + ' ' + degreesToStringHDMS('EW', coordinate[0], opt_fractionDigits);\n  } else {\n    return '';\n  }\n}\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [opt_fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\n\nexport function toStringXY(coordinate, opt_fractionDigits) {\n  return format(coordinate, '{x}, {y}', opt_fractionDigits);\n}\n/**\n * Modifies the provided coordinate in-place to be within the real world\n * extent. The lower projection extent boundary is inclusive, the upper one\n * exclusive.\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {Coordinate} The coordinate within the real world extent.\n */\n\nexport function wrapX(coordinate, projection) {\n  if (projection.canWrapX()) {\n    var worldWidth = getWidth(projection.getExtent());\n    var worldsAway = getWorldsAway(coordinate, projection, worldWidth);\n\n    if (worldsAway) {\n      coordinate[0] -= worldsAway * worldWidth;\n    }\n  }\n\n  return coordinate;\n}\n/**\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {number} [opt_sourceExtentWidth] Width of the source extent.\n * @return {number} Offset in world widths.\n */\n\nexport function getWorldsAway(coordinate, projection, opt_sourceExtentWidth) {\n  var projectionExtent = projection.getExtent();\n  var worldsAway = 0;\n\n  if (projection.canWrapX() && (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])) {\n    var sourceExtentWidth = opt_sourceExtentWidth || getWidth(projectionExtent);\n    worldsAway = Math.floor((coordinate[0] - projectionExtent[0]) / sourceExtentWidth);\n  }\n\n  return worldsAway;\n}","map":{"version":3,"mappings":"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","names":["getWidth","modulo","padNumber","add","coordinate","delta","closestOnCircle","circle","r","getRadius","center","getCenter","x0","y0","x1","y1","dx","dy","d","Math","sqrt","x","y","closestOnSegment","segment","start","end","x2","y2","along","createStringXY","opt_fractionDigits","toStringXY","degreesToStringHDMS","hemispheres","degrees","normalizedDegrees","abs","dflPrecision","precision","pow","deg","floor","min","sec","ceil","charAt","format","template","replace","toFixed","equals","coordinate1","coordinate2","i","length","rotate","angle","cosAngle","cos","sinAngle","sin","scale","squaredDistance","coord1","coord2","distance","squaredDistanceToSegment","toStringHDMS","wrapX","projection","canWrapX","worldWidth","getExtent","worldsAway","getWorldsAway","opt_sourceExtentWidth","projectionExtent","sourceExtentWidth"],"sourceRoot":"","sources":["src/coordinate.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}