{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/Polyline\n */\n\n\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport TextFeature from './TextFeature.js';\nimport { assert } from '../asserts.js';\nimport { flipXY } from '../geom/flat/flip.js';\nimport { get as getProjection } from '../proj.js';\nimport { getStrideForLayout } from '../geom/SimpleGeometry.js';\nimport { inflateCoordinates } from '../geom/flat/inflate.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @typedef {Object} Options\n * @property {number} [factor=1e5] The factor by which the coordinates values will be scaled.\n * @property {GeometryLayout} [geometryLayout='XY'] Layout of the\n * feature geometries created by the format reader.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the Encoded\n * Polyline Algorithm Format.\n *\n * When reading features, the coordinates are assumed to be in two dimensions\n * and in [latitude, longitude] order.\n *\n * As Polyline sources contain a single feature,\n * {@link module:ol/format/Polyline~Polyline#readFeatures} will return the\n * feature in an array.\n *\n * @api\n */\n\nvar Polyline =\n/** @class */\nfunction (_super) {\n  __extends(Polyline, _super);\n  /**\n   * @param {Options} [opt_options] Optional configuration object.\n   */\n\n\n  function Polyline(opt_options) {\n    var _this = _super.call(this) || this;\n\n    var options = opt_options ? opt_options : {};\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n    _this.dataProjection = getProjection('EPSG:4326');\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.factor_ = options.factor ? options.factor : 1e5;\n    /**\n     * @private\n     * @type {import(\"../geom/GeometryLayout\").default}\n     */\n\n    _this.geometryLayout_ = options.geometryLayout ? options.geometryLayout : GeometryLayout.XY;\n    return _this;\n  }\n  /**\n   * @protected\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  Polyline.prototype.readFeatureFromText = function (text, opt_options) {\n    var geometry = this.readGeometryFromText(text, opt_options);\n    return new Feature(geometry);\n  };\n  /**\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n\n\n  Polyline.prototype.readFeaturesFromText = function (text, opt_options) {\n    var feature = this.readFeatureFromText(text, opt_options);\n    return [feature];\n  };\n  /**\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  Polyline.prototype.readGeometryFromText = function (text, opt_options) {\n    var stride = getStrideForLayout(this.geometryLayout_);\n    var flatCoordinates = decodeDeltas(text, stride, this.factor_);\n    flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\n    var coordinates = inflateCoordinates(flatCoordinates, 0, flatCoordinates.length, stride);\n    var lineString = new LineString(coordinates, this.geometryLayout_);\n    return transformGeometryWithOptions(lineString, false, this.adaptOptions(opt_options));\n  };\n  /**\n   * @param {import(\"../Feature.js\").default<LineString>} feature Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n\n\n  Polyline.prototype.writeFeatureText = function (feature, opt_options) {\n    var geometry = feature.getGeometry();\n\n    if (geometry) {\n      return this.writeGeometryText(geometry, opt_options);\n    } else {\n      assert(false, 40); // Expected `feature` to have a geometry\n\n      return '';\n    }\n  };\n  /**\n   * @param {Array<import(\"../Feature.js\").default<LineString>>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n\n\n  Polyline.prototype.writeFeaturesText = function (features, opt_options) {\n    return this.writeFeatureText(features[0], opt_options);\n  };\n  /**\n   * @param {LineString} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n\n\n  Polyline.prototype.writeGeometryText = function (geometry, opt_options) {\n    geometry =\n    /** @type {LineString} */\n    transformGeometryWithOptions(geometry, true, this.adaptOptions(opt_options));\n    var flatCoordinates = geometry.getFlatCoordinates();\n    var stride = geometry.getStride();\n    flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\n    return encodeDeltas(flatCoordinates, stride, this.factor_);\n  };\n\n  return Polyline;\n}(TextFeature);\n/**\n * Encode a list of n-dimensional points and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array<number>} numbers A list of n-dimensional points.\n * @param {number} stride The number of dimension of the points in the list.\n * @param {number} [opt_factor] The factor by which the numbers will be\n *     multiplied. The remaining decimal places will get rounded away.\n *     Default is `1e5`.\n * @return {string} The encoded string.\n * @api\n */\n\n\nexport function encodeDeltas(numbers, stride, opt_factor) {\n  var factor = opt_factor ? opt_factor : 1e5;\n  var d;\n  var lastNumbers = new Array(stride);\n\n  for (d = 0; d < stride; ++d) {\n    lastNumbers[d] = 0;\n  }\n\n  for (var i = 0, ii = numbers.length; i < ii;) {\n    for (d = 0; d < stride; ++d, ++i) {\n      var num = numbers[i];\n      var delta = num - lastNumbers[d];\n      lastNumbers[d] = num;\n      numbers[i] = delta;\n    }\n  }\n\n  return encodeFloats(numbers, factor);\n}\n/**\n * Decode a list of n-dimensional points from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @param {number} stride The number of dimension of the points in the\n *     encoded string.\n * @param {number} [opt_factor] The factor by which the resulting numbers will\n *     be divided. Default is `1e5`.\n * @return {Array<number>} A list of n-dimensional points.\n * @api\n */\n\nexport function decodeDeltas(encoded, stride, opt_factor) {\n  var factor = opt_factor ? opt_factor : 1e5;\n  var d;\n  /** @type {Array<number>} */\n\n  var lastNumbers = new Array(stride);\n\n  for (d = 0; d < stride; ++d) {\n    lastNumbers[d] = 0;\n  }\n\n  var numbers = decodeFloats(encoded, factor);\n\n  for (var i = 0, ii = numbers.length; i < ii;) {\n    for (d = 0; d < stride; ++d, ++i) {\n      lastNumbers[d] += numbers[i];\n      numbers[i] = lastNumbers[d];\n    }\n  }\n\n  return numbers;\n}\n/**\n * Encode a list of floating point numbers and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array<number>} numbers A list of floating point numbers.\n * @param {number} [opt_factor] The factor by which the numbers will be\n *     multiplied. The remaining decimal places will get rounded away.\n *     Default is `1e5`.\n * @return {string} The encoded string.\n * @api\n */\n\nexport function encodeFloats(numbers, opt_factor) {\n  var factor = opt_factor ? opt_factor : 1e5;\n\n  for (var i = 0, ii = numbers.length; i < ii; ++i) {\n    numbers[i] = Math.round(numbers[i] * factor);\n  }\n\n  return encodeSignedIntegers(numbers);\n}\n/**\n * Decode a list of floating point numbers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @param {number} [opt_factor] The factor by which the result will be divided.\n *     Default is `1e5`.\n * @return {Array<number>} A list of floating point numbers.\n * @api\n */\n\nexport function decodeFloats(encoded, opt_factor) {\n  var factor = opt_factor ? opt_factor : 1e5;\n  var numbers = decodeSignedIntegers(encoded);\n\n  for (var i = 0, ii = numbers.length; i < ii; ++i) {\n    numbers[i] /= factor;\n  }\n\n  return numbers;\n}\n/**\n * Encode a list of signed integers and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array<number>} numbers A list of signed integers.\n * @return {string} The encoded string.\n */\n\nexport function encodeSignedIntegers(numbers) {\n  for (var i = 0, ii = numbers.length; i < ii; ++i) {\n    var num = numbers[i];\n    numbers[i] = num < 0 ? ~(num << 1) : num << 1;\n  }\n\n  return encodeUnsignedIntegers(numbers);\n}\n/**\n * Decode a list of signed integers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @return {Array<number>} A list of signed integers.\n */\n\nexport function decodeSignedIntegers(encoded) {\n  var numbers = decodeUnsignedIntegers(encoded);\n\n  for (var i = 0, ii = numbers.length; i < ii; ++i) {\n    var num = numbers[i];\n    numbers[i] = num & 1 ? ~(num >> 1) : num >> 1;\n  }\n\n  return numbers;\n}\n/**\n * Encode a list of unsigned integers and return an encoded string\n *\n * @param {Array<number>} numbers A list of unsigned integers.\n * @return {string} The encoded string.\n */\n\nexport function encodeUnsignedIntegers(numbers) {\n  var encoded = '';\n\n  for (var i = 0, ii = numbers.length; i < ii; ++i) {\n    encoded += encodeUnsignedInteger(numbers[i]);\n  }\n\n  return encoded;\n}\n/**\n * Decode a list of unsigned integers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @return {Array<number>} A list of unsigned integers.\n */\n\nexport function decodeUnsignedIntegers(encoded) {\n  var numbers = [];\n  var current = 0;\n  var shift = 0;\n\n  for (var i = 0, ii = encoded.length; i < ii; ++i) {\n    var b = encoded.charCodeAt(i) - 63;\n    current |= (b & 0x1f) << shift;\n\n    if (b < 0x20) {\n      numbers.push(current);\n      current = 0;\n      shift = 0;\n    } else {\n      shift += 5;\n    }\n  }\n\n  return numbers;\n}\n/**\n * Encode one single unsigned integer and return an encoded string\n *\n * @param {number} num Unsigned integer that should be encoded.\n * @return {string} The encoded string.\n */\n\nexport function encodeUnsignedInteger(num) {\n  var value,\n      encoded = '';\n\n  while (num >= 0x20) {\n    value = (0x20 | num & 0x1f) + 63;\n    encoded += String.fromCharCode(value);\n    num >>= 5;\n  }\n\n  value = num + 63;\n  encoded += String.fromCharCode(value);\n  return encoded;\n}\nexport default Polyline;","map":{"version":3,"mappings":"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","names":["Feature","GeometryLayout","LineString","TextFeature","assert","flipXY","get","getProjection","getStrideForLayout","inflateCoordinates","transformGeometryWithOptions","__extends","opt_options","_super","options","_this","dataProjection","factor_","factor","geometryLayout_","geometryLayout","XY","Polyline","text","geometry","readGeometryFromText","feature","readFeatureFromText","stride","flatCoordinates","decodeDeltas","length","coordinates","lineString","adaptOptions","getGeometry","writeGeometryText","features","writeFeatureText","getFlatCoordinates","getStride","encodeDeltas","numbers","opt_factor","d","lastNumbers","Array","i","ii","num","delta","encodeFloats","encoded","decodeFloats","Math","round","encodeSignedIntegers","decodeSignedIntegers","encodeUnsignedIntegers","decodeUnsignedIntegers","encodeUnsignedInteger","current","shift","b","charCodeAt","push","value","String","fromCharCode"],"sourceRoot":"","sources":["../src/format/Polyline.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}