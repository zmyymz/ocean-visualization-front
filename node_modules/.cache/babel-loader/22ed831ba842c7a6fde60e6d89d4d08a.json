{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.slice.js\";\n\n/**\n * @module ol/source/ImageCanvas\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport ImageCanvas from '../ImageCanvas.js';\nimport ImageSource from './Image.js';\nimport { containsExtent, getHeight, getWidth, scaleFromCenter } from '../extent.js';\n/**\n * A function returning the canvas element (`{HTMLCanvasElement}`)\n * used by the source as an image. The arguments passed to the function are:\n * {@link module:ol/extent~Extent} the image extent, `{number}` the image resolution,\n * `{number}` the pixel ratio of the map, {@link module:ol/size~Size} the image size,\n * and {@link module:ol/proj/Projection~Projection} the image projection. The canvas returned by\n * this function is cached by the source. The this keyword inside the function\n * references the {@link module:ol/source/ImageCanvas~ImageCanvasSource}.\n *\n * @typedef {function(this:import(\"../ImageCanvas.js\").default, import(\"../extent.js\").Extent, number,\n *     number, import(\"../size.js\").Size, import(\"../proj/Projection.js\").default): HTMLCanvasElement} FunctionType\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {FunctionType} [canvasFunction] Canvas function.\n * The function returning the canvas element used by the source\n * as an image. The arguments passed to the function are: {@link import(\"../extent.js\").Extent} the\n * image extent, `{number}` the image resolution, `{number}` the pixel ratio of the map,\n * {@link import(\"../size.js\").Size} the image size, and {@link import(\"../proj/Projection.js\").default} the image\n * projection. The canvas returned by this function is cached by the source. If\n * the value returned by the function is later changed then\n * `changed` should be called on the source for the source to\n * invalidate the current cached image. See: {@link module:ol/Observable~Observable#changed}\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. 1 means canvases are the size of the map viewport, 2 means twice the\n * width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, new canvases will be created for these resolutions\n * @property {import(\"./State.js\").default} [state] Source state.\n */\n\n/**\n * @classdesc\n * Base class for image sources where a canvas element is the image.\n * @api\n */\n\nvar ImageCanvasSource =\n/** @class */\nfunction (_super) {\n  __extends(ImageCanvasSource, _super);\n  /**\n   * @param {Options} [opt_options] ImageCanvas options.\n   */\n\n\n  function ImageCanvasSource(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      interpolate: interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n      state: options.state\n    }) || this;\n    /**\n     * @private\n     * @type {FunctionType}\n     */\n\n    _this.canvasFunction_ = options.canvasFunction;\n    /**\n     * @private\n     * @type {import(\"../ImageCanvas.js\").default}\n     */\n\n    _this.canvas_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.renderedRevision_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n    return _this;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\n   */\n\n\n  ImageCanvasSource.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    var canvas = this.canvas_;\n\n    if (canvas && this.renderedRevision_ == this.getRevision() && canvas.getResolution() == resolution && canvas.getPixelRatio() == pixelRatio && containsExtent(canvas.getExtent(), extent)) {\n      return canvas;\n    }\n\n    extent = extent.slice();\n    scaleFromCenter(extent, this.ratio_);\n    var width = getWidth(extent) / resolution;\n    var height = getHeight(extent) / resolution;\n    var size = [width * pixelRatio, height * pixelRatio];\n    var canvasElement = this.canvasFunction_.call(this, extent, resolution, pixelRatio, size, projection);\n\n    if (canvasElement) {\n      canvas = new ImageCanvas(extent, resolution, pixelRatio, canvasElement);\n    }\n\n    this.canvas_ = canvas;\n    this.renderedRevision_ = this.getRevision();\n    return canvas;\n  };\n\n  return ImageCanvasSource;\n}(ImageSource);\n\nexport default ImageCanvasSource;","map":{"version":3,"mappings":";;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,SACEC,cADF,EAEEC,SAFF,EAGEC,QAHF,EAIEC,eAJF,QAKO,cALP;AAOA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;AAKA;AAAA;AAAA;AAAgCC;AAC9B;;;;;AAGA,6BAAYC,WAAZ,EAAuB;AAAvB;;AACE,QAAMC,OAAO,GAAGD,WAAW,GAAGA,WAAH,GAAiB,EAA5C;AAEA,QAAIE,WAAW,GACbD,OAAO,CAACE,cAAR,KAA2BC,SAA3B,GAAuCH,OAAO,CAACE,cAA/C,GAAgE,IADlE;;AAEA,QAAIF,OAAO,CAACC,WAAR,KAAwBE,SAA5B,EAAuC;AACrCF,iBAAW,GAAGD,OAAO,CAACC,WAAtB;AACD;;YAEDG,kBAAM;AACJC,kBAAY,EAAEL,OAAO,CAACK,YADlB;AAEJJ,iBAAW,EAAEA,WAFT;AAGJK,gBAAU,EAAEN,OAAO,CAACM,UAHhB;AAIJC,iBAAW,EAAEP,OAAO,CAACO,WAJjB;AAKJC,WAAK,EAAER,OAAO,CAACQ;AALX,KAAN,KAME;AAEF;;;;;AAIAC,SAAI,CAACC,eAAL,GAAuBV,OAAO,CAACW,cAA/B;AAEA;;;;;AAIAF,SAAI,CAACG,OAAL,GAAe,IAAf;AAEA;;;;;AAIAH,SAAI,CAACI,iBAAL,GAAyB,CAAzB;AAEA;;;;;AAIAJ,SAAI,CAACK,MAAL,GAAcd,OAAO,CAACe,KAAR,KAAkBZ,SAAlB,GAA8BH,OAAO,CAACe,KAAtC,GAA8C,GAA5D;;AACD;AAED;;;;;;;;;AAOAC,2DAAiBC,MAAjB,EAAyBC,UAAzB,EAAqCC,UAArC,EAAiDb,UAAjD,EAA2D;AACzDY,cAAU,GAAG,KAAKE,qBAAL,CAA2BF,UAA3B,CAAb;AAEA,QAAIG,MAAM,GAAG,KAAKT,OAAlB;;AACA,QACES,MAAM,IACN,KAAKR,iBAAL,IAA0B,KAAKS,WAAL,EAD1B,IAEAD,MAAM,CAACE,aAAP,MAA0BL,UAF1B,IAGAG,MAAM,CAACG,aAAP,MAA0BL,UAH1B,IAIAzB,cAAc,CAAC2B,MAAM,CAACI,SAAP,EAAD,EAAqBR,MAArB,CALhB,EAME;AACA,aAAOI,MAAP;AACD;;AAEDJ,UAAM,GAAGA,MAAM,CAACS,KAAP,EAAT;AACA7B,mBAAe,CAACoB,MAAD,EAAS,KAAKH,MAAd,CAAf;AACA,QAAMa,KAAK,GAAG/B,QAAQ,CAACqB,MAAD,CAAR,GAAmBC,UAAjC;AACA,QAAMU,MAAM,GAAGjC,SAAS,CAACsB,MAAD,CAAT,GAAoBC,UAAnC;AACA,QAAMW,IAAI,GAAG,CAACF,KAAK,GAAGR,UAAT,EAAqBS,MAAM,GAAGT,UAA9B,CAAb;AAEA,QAAMW,aAAa,GAAG,KAAKpB,eAAL,CAAqBqB,IAArB,CACpB,IADoB,EAEpBd,MAFoB,EAGpBC,UAHoB,EAIpBC,UAJoB,EAKpBU,IALoB,EAMpBvB,UANoB,CAAtB;;AAQA,QAAIwB,aAAJ,EAAmB;AACjBT,YAAM,GAAG,IAAI7B,WAAJ,CAAgByB,MAAhB,EAAwBC,UAAxB,EAAoCC,UAApC,EAAgDW,aAAhD,CAAT;AACD;;AACD,SAAKlB,OAAL,GAAeS,MAAf;AACA,SAAKR,iBAAL,GAAyB,KAAKS,WAAL,EAAzB;AAEA,WAAOD,MAAP;AACD,GAnCD;;AAoCF;AAzFA,EAAgC5B,WAAhC;;AA2FA,eAAeuB,iBAAf","names":["ImageCanvas","ImageSource","containsExtent","getHeight","getWidth","scaleFromCenter","__extends","opt_options","options","interpolate","imageSmoothing","undefined","_super","attributions","projection","resolutions","state","_this","canvasFunction_","canvasFunction","canvas_","renderedRevision_","ratio_","ratio","ImageCanvasSource","extent","resolution","pixelRatio","findNearestResolution","canvas","getRevision","getResolution","getPixelRatio","getExtent","slice","width","height","size","canvasElement","call"],"sourceRoot":"","sources":["../src/source/ImageCanvas.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}