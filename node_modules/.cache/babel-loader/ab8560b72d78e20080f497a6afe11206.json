{"ast":null,"code":"import _classCallCheck from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport BaseDecoder from './basedecoder.js';\nimport { LercParameters, LercAddCompression } from '../globals.js';\n\nvar LercDecoder = /*#__PURE__*/function (_BaseDecoder) {\n  _inherits(LercDecoder, _BaseDecoder);\n\n  var _super = _createSuper(LercDecoder);\n\n  function LercDecoder(fileDirectory) {\n    var _this;\n\n    _classCallCheck(this, LercDecoder);\n\n    _this = _super.call(this);\n    _this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    _this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n    _this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n    return _this;\n  }\n\n  _createClass(LercDecoder, [{\n    key: \"decodeBlock\",\n    value: function decodeBlock(buffer) {\n      switch (this.addCompression) {\n        case LercAddCompression.None:\n          break;\n\n        case LercAddCompression.Deflate:\n          buffer = inflate(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n\n          break;\n\n        default:\n          throw new Error(\"Unsupported LERC additional compression method identifier: \".concat(this.addCompression));\n      }\n\n      var lercResult = Lerc.decode(buffer, {\n        returnPixelInterleavedDims: this.planarConfiguration === 1\n      });\n      var lercData = lercResult.pixels[0];\n      return lercData.buffer;\n    }\n  }]);\n\n  return LercDecoder;\n}(BaseDecoder);\n\nexport { LercDecoder as default };","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/geotiff/dist-module/compression/lerc.js"],"names":["inflate","Lerc","BaseDecoder","LercParameters","LercAddCompression","LercDecoder","fileDirectory","planarConfiguration","PlanarConfiguration","samplesPerPixel","SamplesPerPixel","addCompression","AddCompression","buffer","None","Deflate","Uint8Array","Error","lercResult","decode","returnPixelInterleavedDims","lercData","pixels"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,OAAT,QAAwB,MAAxB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,SAASC,cAAT,EAAyBC,kBAAzB,QAAmD,eAAnD;;IAEqBC,W;;;;;AACnB,uBAAYC,aAAZ,EAA2B;AAAA;;AAAA;;AACzB;AAEA,UAAKC,mBAAL,GAA2B,OAAOD,aAAa,CAACE,mBAArB,KAA6C,WAA7C,GAA2DF,aAAa,CAACE,mBAAzE,GAA+F,CAA1H;AACA,UAAKC,eAAL,GAAuB,OAAOH,aAAa,CAACI,eAArB,KAAyC,WAAzC,GAAuDJ,aAAa,CAACI,eAArE,GAAuF,CAA9G;AAEA,UAAKC,cAAL,GAAsBL,aAAa,CAACH,cAAd,CAA6BA,cAAc,CAACS,cAA5C,CAAtB;AANyB;AAO1B;;;;WAED,qBAAYC,MAAZ,EAAoB;AAClB,cAAQ,KAAKF,cAAb;AACE,aAAKP,kBAAkB,CAACU,IAAxB;AACE;;AACF,aAAKV,kBAAkB,CAACW,OAAxB;AACEF,UAAAA,MAAM,GAAGb,OAAO,CAAC,IAAIgB,UAAJ,CAAeH,MAAf,CAAD,CAAP,CAAgCA,MAAzC,CADF,CACmD;;AACjD;;AACF;AACE,gBAAM,IAAII,KAAJ,sEAAwE,KAAKN,cAA7E,EAAN;AAPJ;;AAUA,UAAMO,UAAU,GAAGjB,IAAI,CAACkB,MAAL,CAAYN,MAAZ,EAAoB;AAAEO,QAAAA,0BAA0B,EAAE,KAAKb,mBAAL,KAA6B;AAA3D,OAApB,CAAnB;AACA,UAAMc,QAAQ,GAAGH,UAAU,CAACI,MAAX,CAAkB,CAAlB,CAAjB;AACA,aAAOD,QAAQ,CAACR,MAAhB;AACD;;;;EAxBsCX,W;;SAApBG,W","sourcesContent":["import { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport BaseDecoder from './basedecoder.js';\nimport { LercParameters, LercAddCompression } from '../globals.js';\n\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n\n    const lercResult = Lerc.decode(buffer, { returnPixelInterleavedDims: this.planarConfiguration === 1 });\n    const lercData = lercResult.pixels[0];\n    return lercData.buffer;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}