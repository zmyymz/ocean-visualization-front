{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/MultiPoint\n */\n\n\nimport GeometryType from './GeometryType.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { closestSquaredDistanceXY, containsXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\n\nvar MultiPoint =\n/** @class */\nfunction (_super) {\n  __extends(MultiPoint, _super);\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n\n\n  function MultiPoint(coordinates, opt_layout) {\n    var _this = _super.call(this) || this;\n\n    if (opt_layout && !Array.isArray(coordinates[0])) {\n      _this.setFlatCoordinates(opt_layout,\n      /** @type {Array<number>} */\n      coordinates);\n    } else {\n      _this.setCoordinates(\n      /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n      coordinates, opt_layout);\n    }\n\n    return _this;\n  }\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n\n\n  MultiPoint.prototype.appendPoint = function (point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n    }\n\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @api\n   */\n\n\n  MultiPoint.prototype.clone = function () {\n    var multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);\n    multiPoint.applyProperties(this);\n    return multiPoint;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  MultiPoint.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    var flatCoordinates = this.flatCoordinates;\n    var stride = this.stride;\n\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var squaredDistance = squaredDx(x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n\n        for (var j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n\n        closestPoint.length = stride;\n      }\n    }\n\n    return minSquaredDistance;\n  };\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n\n\n  MultiPoint.prototype.getCoordinates = function () {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n\n\n  MultiPoint.prototype.getPoint = function (index) {\n    var n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;\n\n    if (index < 0 || n <= index) {\n      return null;\n    }\n\n    return new Point(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);\n  };\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n\n\n  MultiPoint.prototype.getPoints = function () {\n    var flatCoordinates = this.flatCoordinates;\n    var layout = this.layout;\n    var stride = this.stride;\n    /** @type {Array<Point>} */\n\n    var points = [];\n\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n\n    return points;\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n\n\n  MultiPoint.prototype.getType = function () {\n    return GeometryType.MULTI_POINT;\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  MultiPoint.prototype.intersectsExtent = function (extent) {\n    var flatCoordinates = this.flatCoordinates;\n    var stride = this.stride;\n\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var x = flatCoordinates[i];\n      var y = flatCoordinates[i + 1];\n\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n\n\n  MultiPoint.prototype.setCoordinates = function (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n\n  return MultiPoint;\n}(SimpleGeometry);\n\nexport default MultiPoint;","map":{"version":3,"mappings":"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","names":["GeometryType","Point","SimpleGeometry","closestSquaredDistanceXY","containsXY","deflateCoordinates","extend","inflateCoordinates","squaredDistance","squaredDx","__extends","coordinates","opt_layout","_super","Array","isArray","_this","setFlatCoordinates","setCoordinates","MultiPoint","point","flatCoordinates","getFlatCoordinates","slice","changed","multiPoint","layout","applyProperties","x","y","closestPoint","minSquaredDistance","getExtent","stride","i","ii","length","j","index","n","points","push","MULTI_POINT","extent","setLayout"],"sourceRoot":"","sources":["../src/geom/MultiPoint.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}