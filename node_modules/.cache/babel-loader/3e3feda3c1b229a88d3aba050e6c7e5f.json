{"ast":null,"code":"/**\n * @module ol/structs/RBush\n */\nimport RBush_ from 'rbush';\nimport { createOrUpdate, equals } from '../extent.js';\nimport { getUid } from '../util.js';\nimport { isEmpty } from '../obj.js';\n/**\n * @typedef {Object} Entry\n * @property {number} minX MinX.\n * @property {number} minY MinY.\n * @property {number} maxX MaxX.\n * @property {number} maxY MaxY.\n * @property {Object} [value] Value.\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\n\nvar RBush =\n/** @class */\nfunction () {\n  /**\n   * @param {number} [opt_maxEntries] Max entries.\n   */\n  function RBush(opt_maxEntries) {\n    /**\n     * @private\n     */\n    this.rbush_ = new RBush_(opt_maxEntries);\n    /**\n     * A mapping between the objects added to this rbush wrapper\n     * and the objects that are actually added to the internal rbush.\n     * @private\n     * @type {Object<string, Entry>}\n     */\n\n    this.items_ = {};\n  }\n  /**\n   * Insert a value into the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n\n\n  RBush.prototype.insert = function (extent, value) {\n    /** @type {Entry} */\n    var item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n    this.rbush_.insert(item);\n    this.items_[getUid(value)] = item;\n  };\n  /**\n   * Bulk-insert values into the RBush.\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n   * @param {Array<T>} values Values.\n   */\n\n\n  RBush.prototype.load = function (extents, values) {\n    var items = new Array(values.length);\n\n    for (var i = 0, l = values.length; i < l; i++) {\n      var extent = extents[i];\n      var value = values[i];\n      /** @type {Entry} */\n\n      var item = {\n        minX: extent[0],\n        minY: extent[1],\n        maxX: extent[2],\n        maxY: extent[3],\n        value: value\n      };\n      items[i] = item;\n      this.items_[getUid(value)] = item;\n    }\n\n    this.rbush_.load(items);\n  };\n  /**\n   * Remove a value from the RBush.\n   * @param {T} value Value.\n   * @return {boolean} Removed.\n   */\n\n\n  RBush.prototype.remove = function (value) {\n    var uid = getUid(value); // get the object in which the value was wrapped when adding to the\n    // internal rbush. then use that object to do the removal.\n\n    var item = this.items_[uid];\n    delete this.items_[uid];\n    return this.rbush_.remove(item) !== null;\n  };\n  /**\n   * Update the extent of a value in the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n\n\n  RBush.prototype.update = function (extent, value) {\n    var item = this.items_[getUid(value)];\n    var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n\n    if (!equals(bbox, extent)) {\n      this.remove(value);\n      this.insert(extent, value);\n    }\n  };\n  /**\n   * Return all values in the RBush.\n   * @return {Array<T>} All.\n   */\n\n\n  RBush.prototype.getAll = function () {\n    var items = this.rbush_.all();\n    return items.map(function (item) {\n      return item.value;\n    });\n  };\n  /**\n   * Return all values in the given extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<T>} All in extent.\n   */\n\n\n  RBush.prototype.getInExtent = function (extent) {\n    /** @type {Entry} */\n    var bbox = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3]\n    };\n    var items = this.rbush_.search(bbox);\n    return items.map(function (item) {\n      return item.value;\n    });\n  };\n  /**\n   * Calls a callback function with each value in the tree.\n   * If the callback returns a truthy value, this value is returned without\n   * checking the rest of the tree.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n\n\n  RBush.prototype.forEach = function (callback) {\n    return this.forEach_(this.getAll(), callback);\n  };\n  /**\n   * Calls a callback function with each value in the provided extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n\n\n  RBush.prototype.forEachInExtent = function (extent, callback) {\n    return this.forEach_(this.getInExtent(extent), callback);\n  };\n  /**\n   * @param {Array<T>} values Values.\n   * @param {function(T): *} callback Callback.\n   * @private\n   * @return {*} Callback return value.\n   */\n\n\n  RBush.prototype.forEach_ = function (values, callback) {\n    var result;\n\n    for (var i = 0, l = values.length; i < l; i++) {\n      result = callback(values[i]);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    return result;\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n\n\n  RBush.prototype.isEmpty = function () {\n    return isEmpty(this.items_);\n  };\n  /**\n   * Remove all values from the RBush.\n   */\n\n\n  RBush.prototype.clear = function () {\n    this.rbush_.clear();\n    this.items_ = {};\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Extent.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n\n\n  RBush.prototype.getExtent = function (opt_extent) {\n    var data = this.rbush_.toJSON();\n    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n  };\n  /**\n   * @param {RBush} rbush R-Tree.\n   */\n\n\n  RBush.prototype.concat = function (rbush) {\n    this.rbush_.load(rbush.rbush_.all());\n\n    for (var i in rbush.items_) {\n      this.items_[i] = rbush.items_[i];\n    }\n  };\n\n  return RBush;\n}();\n\nexport default RBush;","map":{"version":3,"mappings":"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","names":["RBush_","createOrUpdate","equals","getUid","isEmpty","opt_maxEntries","rbush_","items_","RBush","extent","value","item","minX","minY","maxX","maxY","insert","extents","values","items","Array","length","i","l","load","uid","remove","bbox","all","map","search","callback","forEach_","getAll","getInExtent","result","clear","opt_extent","data","toJSON","rbush"],"sourceRoot":"","sources":["../src/structs/RBush.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}