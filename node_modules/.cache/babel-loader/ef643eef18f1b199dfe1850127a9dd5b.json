{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/FullScreen\n */\n\n\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapProperty from '../MapProperty.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED } from '../css.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { replaceNode } from '../dom.js';\nvar events = ['fullscreenchange', 'webkitfullscreenchange', 'MSFullscreenChange'];\n/**\n * @enum {string}\n */\n\nvar FullScreenEventType = {\n  /**\n   * Triggered after the map entered fullscreen.\n   * @event FullScreenEventType#enterfullscreen\n   * @api\n   */\n  ENTERFULLSCREEN: 'enterfullscreen',\n\n  /**\n   * Triggered after the map leave fullscreen.\n   * @event FullScreenEventType#leavefullscreen\n   * @api\n   */\n  LEAVEFULLSCREEN: 'leavefullscreen'\n};\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\n\nvar FullScreen =\n/** @class */\nfunction (_super) {\n  __extends(FullScreen, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function FullScreen(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      target: options.target\n    }) || this;\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.on;\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {FullScreenOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.cssClassName_ = options.className !== undefined ? options.className : 'ol-full-screen';\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n\n    _this.documentListeners_ = [];\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n\n    _this.activeClassName_ = options.activeClassName !== undefined ? options.activeClassName.split(' ') : [_this.cssClassName_ + '-true'];\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n\n    _this.inactiveClassName_ = options.inactiveClassName !== undefined ? options.inactiveClassName.split(' ') : [_this.cssClassName_ + '-false'];\n    var label = options.label !== undefined ? options.label : '\\u2922';\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n\n    _this.labelNode_ = typeof label === 'string' ? document.createTextNode(label) : label;\n    var labelActive = options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n\n    _this.labelActiveNode_ = typeof labelActive === 'string' ? document.createTextNode(labelActive) : labelActive;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    _this.button_ = document.createElement('button');\n    var tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n\n    _this.button_.setAttribute('type', 'button');\n\n    _this.button_.title = tipLabel;\n\n    _this.button_.appendChild(_this.labelNode_);\n\n    _this.button_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n\n    _this.element.className = \"\".concat(_this.cssClassName_, \" \").concat(CLASS_UNSELECTABLE, \" \").concat(CLASS_CONTROL);\n\n    _this.element.appendChild(_this.button_);\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n\n    _this.keys_ = options.keys !== undefined ? options.keys : false;\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n\n    _this.source_ = options.source;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.isInFullscreen_ = false;\n    /**\n     * @private\n     */\n\n    _this.boundHandleMapTargetChange_ = _this.handleMapTargetChange_.bind(_this);\n    return _this;\n  }\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n\n  FullScreen.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleFullScreen_();\n  };\n  /**\n   * @private\n   */\n\n\n  FullScreen.prototype.handleFullScreen_ = function () {\n    var map = this.getMap();\n\n    if (!map) {\n      return;\n    }\n\n    var doc = map.getOwnerDocument();\n\n    if (!isFullScreenSupported(doc)) {\n      return;\n    }\n\n    if (isFullScreen(doc)) {\n      exitFullScreen(doc);\n    } else {\n      var element = void 0;\n\n      if (this.source_) {\n        element = typeof this.source_ === 'string' ? doc.getElementById(this.source_) : this.source_;\n      } else {\n        element = map.getTargetElement();\n      }\n\n      if (this.keys_) {\n        requestFullScreenWithKeys(element);\n      } else {\n        requestFullScreen(element);\n      }\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  FullScreen.prototype.handleFullScreenChange_ = function () {\n    var map = this.getMap();\n\n    if (!map) {\n      return;\n    }\n\n    var wasInFullscreen = this.isInFullscreen_;\n    this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\n\n    if (wasInFullscreen !== this.isInFullscreen_) {\n      this.setClassName_(this.button_, this.isInFullscreen_);\n\n      if (this.isInFullscreen_) {\n        replaceNode(this.labelActiveNode_, this.labelNode_);\n        this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n      } else {\n        replaceNode(this.labelNode_, this.labelActiveNode_);\n        this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n      }\n\n      map.updateSize();\n    }\n  };\n  /**\n   * @param {HTMLElement} element Target element\n   * @param {boolean} fullscreen True if fullscreen class name should be active\n   * @private\n   */\n\n\n  FullScreen.prototype.setClassName_ = function (element, fullscreen) {\n    var _a, _b, _c;\n\n    var activeClassName = this.activeClassName_;\n    var inactiveClassName = this.inactiveClassName_;\n    var nextClassName = fullscreen ? activeClassName : inactiveClassName;\n\n    (_a = element.classList).remove.apply(_a, activeClassName);\n\n    (_b = element.classList).remove.apply(_b, inactiveClassName);\n\n    (_c = element.classList).add.apply(_c, nextClassName);\n  };\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n\n\n  FullScreen.prototype.setMap = function (map) {\n    var oldMap = this.getMap();\n\n    if (oldMap) {\n      oldMap.removeChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n    }\n\n    _super.prototype.setMap.call(this, map);\n\n    this.handleMapTargetChange_();\n\n    if (map) {\n      map.addChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  FullScreen.prototype.handleMapTargetChange_ = function () {\n    var listeners = this.documentListeners_;\n\n    for (var i = 0, ii = listeners.length; i < ii; ++i) {\n      unlistenByKey(listeners[i]);\n    }\n\n    listeners.length = 0;\n    var map = this.getMap();\n\n    if (map) {\n      var doc = map.getOwnerDocument();\n\n      if (isFullScreenSupported(doc)) {\n        this.element.classList.remove(CLASS_UNSUPPORTED);\n      } else {\n        this.element.classList.add(CLASS_UNSUPPORTED);\n      }\n\n      for (var i = 0, ii = events.length; i < ii; ++i) {\n        listeners.push(listen(doc, events[i], this.handleFullScreenChange_, this));\n      }\n\n      this.handleFullScreenChange_();\n    }\n  };\n\n  return FullScreen;\n}(Control);\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Fullscreen is supported by the current platform.\n */\n\n\nfunction isFullScreenSupported(doc) {\n  var body = doc.body;\n  return !!(body['webkitRequestFullscreen'] || body['msRequestFullscreen'] && doc['msFullscreenEnabled'] || body.requestFullscreen && doc.fullscreenEnabled);\n}\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Element is currently in fullscreen.\n */\n\n\nfunction isFullScreen(doc) {\n  return !!(doc['webkitIsFullScreen'] || doc['msFullscreenElement'] || doc.fullscreenElement);\n}\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\n\n\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element['msRequestFullscreen']) {\n    element['msRequestFullscreen']();\n  } else if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  }\n}\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\n\n\nfunction requestFullScreenWithKeys(element) {\n  if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  } else {\n    requestFullScreen(element);\n  }\n}\n/**\n * Exit fullscreen.\n * @param {Document} doc The document to exit fullscren from\n */\n\n\nfunction exitFullScreen(doc) {\n  if (doc.exitFullscreen) {\n    doc.exitFullscreen();\n  } else if (doc['msExitFullscreen']) {\n    doc['msExitFullscreen']();\n  } else if (doc['webkitExitFullscreen']) {\n    doc['webkitExitFullscreen']();\n  }\n}\n\nexport default FullScreen;","map":{"version":3,"mappings":"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","names":["Control","EventType","MapProperty","CLASS_CONTROL","CLASS_UNSELECTABLE","CLASS_UNSUPPORTED","listen","unlistenByKey","replaceNode","events","FullScreenEventType","ENTERFULLSCREEN","LEAVEFULLSCREEN","__extends","opt_options","options","_super","element","document","createElement","target","_this","on","once","un","cssClassName_","className","undefined","documentListeners_","activeClassName_","activeClassName","split","inactiveClassName_","inactiveClassName","label","labelNode_","createTextNode","labelActive","labelActiveNode_","button_","tipLabel","setAttribute","title","appendChild","addEventListener","CLICK","handleClick_","bind","concat","keys_","keys","source_","source","isInFullscreen_","boundHandleMapTargetChange_","handleMapTargetChange_","FullScreen","event","preventDefault","handleFullScreen_","map","getMap","doc","getOwnerDocument","isFullScreenSupported","isFullScreen","exitFullScreen","getElementById","getTargetElement","requestFullScreenWithKeys","requestFullScreen","wasInFullscreen","setClassName_","dispatchEvent","updateSize","fullscreen","nextClassName","classList","remove","apply","_a","_b","add","_c","oldMap","removeChangeListener","TARGET","setMap","call","addChangeListener","listeners","i","ii","length","push","handleFullScreenChange_","body","requestFullscreen","fullscreenEnabled","fullscreenElement","exitFullscreen"],"sourceRoot":"","sources":["../src/control/FullScreen.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}