{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n\n/** @module geotiff */\nimport GeoTIFFImage from './geotiffimage.js';\nimport DataView64 from './dataview64.js';\nimport DataSlice from './dataslice.js';\nimport Pool from './pool.js';\nimport { makeRemoteSource } from './source/remote.js';\nimport { makeBufferSource } from './source/arraybuffer.js';\nimport { makeFileReaderSource } from './source/filereader.js';\nimport { makeFileSource } from './source/file.js';\nimport { fieldTypes, fieldTagNames, arrayFields, geoKeyNames } from './globals.js';\nimport { writeGeotiff } from './geotiffwriter.js';\nimport * as globals from './globals.js';\nimport * as rgb from './rgb.js';\nimport { getDecoder, addDecoder } from './compression/index.js';\nimport { setLogger } from './logging.js';\nexport { globals };\nexport { rgb };\nexport { getDecoder, addDecoder };\nexport { setLogger };\n/**\n * @typedef {Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array}\n * TypedArray\n */\n\nfunction getFieldTypeLength(fieldType) {\n  switch (fieldType) {\n    case fieldTypes.BYTE:\n    case fieldTypes.ASCII:\n    case fieldTypes.SBYTE:\n    case fieldTypes.UNDEFINED:\n      return 1;\n\n    case fieldTypes.SHORT:\n    case fieldTypes.SSHORT:\n      return 2;\n\n    case fieldTypes.LONG:\n    case fieldTypes.SLONG:\n    case fieldTypes.FLOAT:\n    case fieldTypes.IFD:\n      return 4;\n\n    case fieldTypes.RATIONAL:\n    case fieldTypes.SRATIONAL:\n    case fieldTypes.DOUBLE:\n    case fieldTypes.LONG8:\n    case fieldTypes.SLONG8:\n    case fieldTypes.IFD8:\n      return 8;\n\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n}\n\nfunction parseGeoKeyDirectory(fileDirectory) {\n  const rawGeoKeyDirectory = fileDirectory.GeoKeyDirectory;\n\n  if (!rawGeoKeyDirectory) {\n    return null;\n  }\n\n  const geoKeyDirectory = {};\n\n  for (let i = 4; i <= rawGeoKeyDirectory[3] * 4; i += 4) {\n    const key = geoKeyNames[rawGeoKeyDirectory[i]];\n    const location = rawGeoKeyDirectory[i + 1] ? fieldTagNames[rawGeoKeyDirectory[i + 1]] : null;\n    const count = rawGeoKeyDirectory[i + 2];\n    const offset = rawGeoKeyDirectory[i + 3];\n    let value = null;\n\n    if (!location) {\n      value = offset;\n    } else {\n      value = fileDirectory[location];\n\n      if (typeof value === 'undefined' || value === null) {\n        throw new Error(`Could not get value of geoKey '${key}'.`);\n      } else if (typeof value === 'string') {\n        value = value.substring(offset, offset + count - 1);\n      } else if (value.subarray) {\n        value = value.subarray(offset, offset + count);\n\n        if (count === 1) {\n          value = value[0];\n        }\n      }\n    }\n\n    geoKeyDirectory[key] = value;\n  }\n\n  return geoKeyDirectory;\n}\n\nfunction getValues(dataSlice, fieldType, count, offset) {\n  let values = null;\n  let readMethod = null;\n  const fieldTypeLength = getFieldTypeLength(fieldType);\n\n  switch (fieldType) {\n    case fieldTypes.BYTE:\n    case fieldTypes.ASCII:\n    case fieldTypes.UNDEFINED:\n      values = new Uint8Array(count);\n      readMethod = dataSlice.readUint8;\n      break;\n\n    case fieldTypes.SBYTE:\n      values = new Int8Array(count);\n      readMethod = dataSlice.readInt8;\n      break;\n\n    case fieldTypes.SHORT:\n      values = new Uint16Array(count);\n      readMethod = dataSlice.readUint16;\n      break;\n\n    case fieldTypes.SSHORT:\n      values = new Int16Array(count);\n      readMethod = dataSlice.readInt16;\n      break;\n\n    case fieldTypes.LONG:\n    case fieldTypes.IFD:\n      values = new Uint32Array(count);\n      readMethod = dataSlice.readUint32;\n      break;\n\n    case fieldTypes.SLONG:\n      values = new Int32Array(count);\n      readMethod = dataSlice.readInt32;\n      break;\n\n    case fieldTypes.LONG8:\n    case fieldTypes.IFD8:\n      values = new Array(count);\n      readMethod = dataSlice.readUint64;\n      break;\n\n    case fieldTypes.SLONG8:\n      values = new Array(count);\n      readMethod = dataSlice.readInt64;\n      break;\n\n    case fieldTypes.RATIONAL:\n      values = new Uint32Array(count * 2);\n      readMethod = dataSlice.readUint32;\n      break;\n\n    case fieldTypes.SRATIONAL:\n      values = new Int32Array(count * 2);\n      readMethod = dataSlice.readInt32;\n      break;\n\n    case fieldTypes.FLOAT:\n      values = new Float32Array(count);\n      readMethod = dataSlice.readFloat32;\n      break;\n\n    case fieldTypes.DOUBLE:\n      values = new Float64Array(count);\n      readMethod = dataSlice.readFloat64;\n      break;\n\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  } // normal fields\n\n\n  if (!(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n    for (let i = 0; i < count; ++i) {\n      values[i] = readMethod.call(dataSlice, offset + i * fieldTypeLength);\n    }\n  } else {\n    // RATIONAL or SRATIONAL\n    for (let i = 0; i < count; i += 2) {\n      values[i] = readMethod.call(dataSlice, offset + i * fieldTypeLength);\n      values[i + 1] = readMethod.call(dataSlice, offset + (i * fieldTypeLength + 4));\n    }\n  }\n\n  if (fieldType === fieldTypes.ASCII) {\n    return new TextDecoder('utf-8').decode(values);\n  }\n\n  return values;\n}\n/**\n * Data class to store the parsed file directory, geo key directory and\n * offset to the next IFD\n */\n\n\nclass ImageFileDirectory {\n  constructor(fileDirectory, geoKeyDirectory, nextIFDByteOffset) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeyDirectory = geoKeyDirectory;\n    this.nextIFDByteOffset = nextIFDByteOffset;\n  }\n\n}\n/**\n * Error class for cases when an IFD index was requested, that does not exist\n * in the file.\n */\n\n\nclass GeoTIFFImageIndexError extends Error {\n  constructor(index) {\n    super(`No image at index ${index}`);\n    this.index = index;\n  }\n\n}\n\nclass GeoTIFFBase {\n  /**\n   * (experimental) Reads raster data from the best fitting image. This function uses\n   * the image with the lowest resolution that is still a higher resolution than the\n   * requested resolution.\n   * When specified, the `bbox` option is translated to the `window` option and the\n   * `resX` and `resY` to `width` and `height` respectively.\n   * Then, the [readRasters]{@link GeoTIFFImage#readRasters} method of the selected\n   * image is called and the result returned.\n   * @see GeoTIFFImage.readRasters\n   * @param {import('./geotiffimage').ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<(TypedArray|TypedArray[])>} the decoded arrays as a promise\n   */\n  async readRasters(options = {}) {\n    const {\n      window: imageWindow,\n      width,\n      height\n    } = options;\n    let {\n      resX,\n      resY,\n      bbox\n    } = options;\n    const firstImage = await this.getImage();\n    let usedImage = firstImage;\n    const imageCount = await this.getImageCount();\n    const imgBBox = firstImage.getBoundingBox();\n\n    if (imageWindow && bbox) {\n      throw new Error('Both \"bbox\" and \"window\" passed.');\n    } // if width/height is passed, transform it to resolution\n\n\n    if (width || height) {\n      // if we have an image window (pixel coordinates), transform it to a BBox\n      // using the origin/resolution of the first image.\n      if (imageWindow) {\n        const [oX, oY] = firstImage.getOrigin();\n        const [rX, rY] = firstImage.getResolution();\n        bbox = [oX + imageWindow[0] * rX, oY + imageWindow[1] * rY, oX + imageWindow[2] * rX, oY + imageWindow[3] * rY];\n      } // if we have a bbox (or calculated one)\n\n\n      const usedBBox = bbox || imgBBox;\n\n      if (width) {\n        if (resX) {\n          throw new Error('Both width and resX passed');\n        }\n\n        resX = (usedBBox[2] - usedBBox[0]) / width;\n      }\n\n      if (height) {\n        if (resY) {\n          throw new Error('Both width and resY passed');\n        }\n\n        resY = (usedBBox[3] - usedBBox[1]) / height;\n      }\n    } // if resolution is set or calculated, try to get the image with the worst acceptable resolution\n\n\n    if (resX || resY) {\n      const allImages = [];\n\n      for (let i = 0; i < imageCount; ++i) {\n        const image = await this.getImage(i);\n        const {\n          SubfileType: subfileType,\n          NewSubfileType: newSubfileType\n        } = image.fileDirectory;\n\n        if (i === 0 || subfileType === 2 || newSubfileType & 1) {\n          allImages.push(image);\n        }\n      }\n\n      allImages.sort((a, b) => a.getWidth() - b.getWidth());\n\n      for (let i = 0; i < allImages.length; ++i) {\n        const image = allImages[i];\n        const imgResX = (imgBBox[2] - imgBBox[0]) / image.getWidth();\n        const imgResY = (imgBBox[3] - imgBBox[1]) / image.getHeight();\n        usedImage = image;\n\n        if (resX && resX > imgResX || resY && resY > imgResY) {\n          break;\n        }\n      }\n    }\n\n    let wnd = imageWindow;\n\n    if (bbox) {\n      const [oX, oY] = firstImage.getOrigin();\n      const [imageResX, imageResY] = usedImage.getResolution(firstImage);\n      wnd = [Math.round((bbox[0] - oX) / imageResX), Math.round((bbox[1] - oY) / imageResY), Math.round((bbox[2] - oX) / imageResX), Math.round((bbox[3] - oY) / imageResY)];\n      wnd = [Math.min(wnd[0], wnd[2]), Math.min(wnd[1], wnd[3]), Math.max(wnd[0], wnd[2]), Math.max(wnd[1], wnd[3])];\n    }\n\n    return usedImage.readRasters({ ...options,\n      window: wnd\n    });\n  }\n\n}\n/**\n * @typedef {Object} GeoTIFFOptions\n * @property {boolean} [cache=false] whether or not decoded tiles shall be cached.\n */\n\n/**\n * The abstraction for a whole GeoTIFF file.\n * @augments GeoTIFFBase\n */\n\n\nclass GeoTIFF extends GeoTIFFBase {\n  /**\n   * @constructor\n   * @param {*} source The datasource to read from.\n   * @param {boolean} littleEndian Whether the image uses little endian.\n   * @param {boolean} bigTiff Whether the image uses bigTIFF conventions.\n   * @param {number} firstIFDOffset The numeric byte-offset from the start of the image\n   *                                to the first IFD.\n   * @param {GeoTIFFOptions} [options] further options.\n   */\n  constructor(source, littleEndian, bigTiff, firstIFDOffset, options = {}) {\n    super();\n    this.source = source;\n    this.littleEndian = littleEndian;\n    this.bigTiff = bigTiff;\n    this.firstIFDOffset = firstIFDOffset;\n    this.cache = options.cache || false;\n    this.ifdRequests = [];\n    this.ghostValues = null;\n  }\n\n  async getSlice(offset, size) {\n    const fallbackSize = this.bigTiff ? 4048 : 1024;\n    return new DataSlice((await this.source.fetch([{\n      offset,\n      length: typeof size !== 'undefined' ? size : fallbackSize\n    }]))[0], offset, this.littleEndian, this.bigTiff);\n  }\n  /**\n   * Instructs to parse an image file directory at the given file offset.\n   * As there is no way to ensure that a location is indeed the start of an IFD,\n   * this function must be called with caution (e.g only using the IFD offsets from\n   * the headers or other IFDs).\n   * @param {number} offset the offset to parse the IFD at\n   * @returns {Promise<ImageFileDirectory>} the parsed IFD\n   */\n\n\n  async parseFileDirectoryAt(offset) {\n    const entrySize = this.bigTiff ? 20 : 12;\n    const offsetSize = this.bigTiff ? 8 : 2;\n    let dataSlice = await this.getSlice(offset);\n    const numDirEntries = this.bigTiff ? dataSlice.readUint64(offset) : dataSlice.readUint16(offset); // if the slice does not cover the whole IFD, request a bigger slice, where the\n    // whole IFD fits: num of entries + n x tag length + offset to next IFD\n\n    const byteSize = numDirEntries * entrySize + (this.bigTiff ? 16 : 6);\n\n    if (!dataSlice.covers(offset, byteSize)) {\n      dataSlice = await this.getSlice(offset, byteSize);\n    }\n\n    const fileDirectory = {}; // loop over the IFD and create a file directory object\n\n    let i = offset + (this.bigTiff ? 8 : 2);\n\n    for (let entryCount = 0; entryCount < numDirEntries; i += entrySize, ++entryCount) {\n      const fieldTag = dataSlice.readUint16(i);\n      const fieldType = dataSlice.readUint16(i + 2);\n      const typeCount = this.bigTiff ? dataSlice.readUint64(i + 4) : dataSlice.readUint32(i + 4);\n      let fieldValues;\n      let value;\n      const fieldTypeLength = getFieldTypeLength(fieldType);\n      const valueOffset = i + (this.bigTiff ? 12 : 8); // check whether the value is directly encoded in the tag or refers to a\n      // different external byte range\n\n      if (fieldTypeLength * typeCount <= (this.bigTiff ? 8 : 4)) {\n        fieldValues = getValues(dataSlice, fieldType, typeCount, valueOffset);\n      } else {\n        // resolve the reference to the actual byte range\n        const actualOffset = dataSlice.readOffset(valueOffset);\n        const length = getFieldTypeLength(fieldType) * typeCount; // check, whether we actually cover the referenced byte range; if not,\n        // request a new slice of bytes to read from it\n\n        if (dataSlice.covers(actualOffset, length)) {\n          fieldValues = getValues(dataSlice, fieldType, typeCount, actualOffset);\n        } else {\n          const fieldDataSlice = await this.getSlice(actualOffset, length);\n          fieldValues = getValues(fieldDataSlice, fieldType, typeCount, actualOffset);\n        }\n      } // unpack single values from the array\n\n\n      if (typeCount === 1 && arrayFields.indexOf(fieldTag) === -1 && !(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n        value = fieldValues[0];\n      } else {\n        value = fieldValues;\n      } // write the tags value to the file directly\n\n\n      fileDirectory[fieldTagNames[fieldTag]] = value;\n    }\n\n    const geoKeyDirectory = parseGeoKeyDirectory(fileDirectory);\n    const nextIFDByteOffset = dataSlice.readOffset(offset + offsetSize + entrySize * numDirEntries);\n    return new ImageFileDirectory(fileDirectory, geoKeyDirectory, nextIFDByteOffset);\n  }\n\n  async requestIFD(index) {\n    // see if we already have that IFD index requested.\n    if (this.ifdRequests[index]) {\n      // attach to an already requested IFD\n      return this.ifdRequests[index];\n    } else if (index === 0) {\n      // special case for index 0\n      this.ifdRequests[index] = this.parseFileDirectoryAt(this.firstIFDOffset);\n      return this.ifdRequests[index];\n    } else if (!this.ifdRequests[index - 1]) {\n      // if the previous IFD was not yet loaded, load that one first\n      // this is the recursive call.\n      try {\n        this.ifdRequests[index - 1] = this.requestIFD(index - 1);\n      } catch (e) {\n        // if the previous one already was an index error, rethrow\n        // with the current index\n        if (e instanceof GeoTIFFImageIndexError) {\n          throw new GeoTIFFImageIndexError(index);\n        } // rethrow anything else\n\n\n        throw e;\n      }\n    } // if the previous IFD was loaded, we can finally fetch the one we are interested in.\n    // we need to wrap this in an IIFE, otherwise this.ifdRequests[index] would be delayed\n\n\n    this.ifdRequests[index] = (async () => {\n      const previousIfd = await this.ifdRequests[index - 1];\n\n      if (previousIfd.nextIFDByteOffset === 0) {\n        throw new GeoTIFFImageIndexError(index);\n      }\n\n      return this.parseFileDirectoryAt(previousIfd.nextIFDByteOffset);\n    })();\n\n    return this.ifdRequests[index];\n  }\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n\n\n  async getImage(index = 0) {\n    const ifd = await this.requestIFD(index);\n    return new GeoTIFFImage(ifd.fileDirectory, ifd.geoKeyDirectory, this.dataView, this.littleEndian, this.cache, this.source);\n  }\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n\n\n  async getImageCount() {\n    let index = 0; // loop until we run out of IFDs\n\n    let hasNext = true;\n\n    while (hasNext) {\n      try {\n        await this.requestIFD(index);\n        ++index;\n      } catch (e) {\n        if (e instanceof GeoTIFFImageIndexError) {\n          hasNext = false;\n        } else {\n          throw e;\n        }\n      }\n    }\n\n    return index;\n  }\n  /**\n   * Get the values of the COG ghost area as a parsed map.\n   * See https://gdal.org/drivers/raster/cog.html#header-ghost-area for reference\n   * @returns {Promise<Object>} the parsed ghost area or null, if no such area was found\n   */\n\n\n  async getGhostValues() {\n    const offset = this.bigTiff ? 16 : 8;\n\n    if (this.ghostValues) {\n      return this.ghostValues;\n    }\n\n    const detectionString = 'GDAL_STRUCTURAL_METADATA_SIZE=';\n    const heuristicAreaSize = detectionString.length + 100;\n    let slice = await this.getSlice(offset, heuristicAreaSize);\n\n    if (detectionString === getValues(slice, fieldTypes.ASCII, detectionString.length, offset)) {\n      const valuesString = getValues(slice, fieldTypes.ASCII, heuristicAreaSize, offset);\n      const firstLine = valuesString.split('\\n')[0];\n      const metadataSize = Number(firstLine.split('=')[1].split(' ')[0]) + firstLine.length;\n\n      if (metadataSize > heuristicAreaSize) {\n        slice = await this.getSlice(offset, metadataSize);\n      }\n\n      const fullString = getValues(slice, fieldTypes.ASCII, metadataSize, offset);\n      this.ghostValues = {};\n      fullString.split('\\n').filter(line => line.length > 0).map(line => line.split('=')).forEach(([key, value]) => {\n        this.ghostValues[key] = value;\n      });\n    }\n\n    return this.ghostValues;\n  }\n  /**\n   * Parse a (Geo)TIFF file from the given source.\n   *\n   * @param {*} source The source of data to parse from.\n   * @param {GeoTIFFOptions} [options] Additional options.\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   */\n\n\n  static async fromSource(source, options, signal) {\n    const headerData = (await source.fetch([{\n      offset: 0,\n      length: 1024\n    }], signal))[0];\n    const dataView = new DataView64(headerData);\n    const BOM = dataView.getUint16(0, 0);\n    let littleEndian;\n\n    if (BOM === 0x4949) {\n      littleEndian = true;\n    } else if (BOM === 0x4D4D) {\n      littleEndian = false;\n    } else {\n      throw new TypeError('Invalid byte order value.');\n    }\n\n    const magicNumber = dataView.getUint16(2, littleEndian);\n    let bigTiff;\n\n    if (magicNumber === 42) {\n      bigTiff = false;\n    } else if (magicNumber === 43) {\n      bigTiff = true;\n      const offsetByteSize = dataView.getUint16(4, littleEndian);\n\n      if (offsetByteSize !== 8) {\n        throw new Error('Unsupported offset byte-size.');\n      }\n    } else {\n      throw new TypeError('Invalid magic number.');\n    }\n\n    const firstIFDOffset = bigTiff ? dataView.getUint64(8, littleEndian) : dataView.getUint32(4, littleEndian);\n    return new GeoTIFF(source, littleEndian, bigTiff, firstIFDOffset, options);\n  }\n  /**\n   * Closes the underlying file buffer\n   * N.B. After the GeoTIFF has been completely processed it needs\n   * to be closed but only if it has been constructed from a file.\n   */\n\n\n  close() {\n    if (typeof this.source.close === 'function') {\n      return this.source.close();\n    }\n\n    return false;\n  }\n\n}\n\nexport { GeoTIFF };\nexport default GeoTIFF;\n/**\n * Wrapper for GeoTIFF files that have external overviews.\n * @augments GeoTIFFBase\n */\n\nclass MultiGeoTIFF extends GeoTIFFBase {\n  /**\n   * Construct a new MultiGeoTIFF from a main and several overview files.\n   * @param {GeoTIFF} mainFile The main GeoTIFF file.\n   * @param {GeoTIFF[]} overviewFiles An array of overview files.\n   */\n  constructor(mainFile, overviewFiles) {\n    super();\n    this.mainFile = mainFile;\n    this.overviewFiles = overviewFiles;\n    this.imageFiles = [mainFile].concat(overviewFiles);\n    this.fileDirectoriesPerFile = null;\n    this.fileDirectoriesPerFileParsing = null;\n    this.imageCount = null;\n  }\n\n  async parseFileDirectoriesPerFile() {\n    const requests = [this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)].concat(this.overviewFiles.map(file => file.parseFileDirectoryAt(file.firstIFDOffset)));\n    this.fileDirectoriesPerFile = await Promise.all(requests);\n    return this.fileDirectoriesPerFile;\n  }\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n\n\n  async getImage(index = 0) {\n    await this.getImageCount();\n    await this.parseFileDirectoriesPerFile();\n    let visited = 0;\n    let relativeIndex = 0;\n\n    for (let i = 0; i < this.imageFiles.length; i++) {\n      const imageFile = this.imageFiles[i];\n\n      for (let ii = 0; ii < this.imageCounts[i]; ii++) {\n        if (index === visited) {\n          const ifd = await imageFile.requestIFD(relativeIndex);\n          return new GeoTIFFImage(ifd.fileDirectory, ifd.geoKeyDirectory, imageFile.dataView, imageFile.littleEndian, imageFile.cache, imageFile.source);\n        }\n\n        visited++;\n        relativeIndex++;\n      }\n\n      relativeIndex = 0;\n    }\n\n    throw new RangeError('Invalid image index');\n  }\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n\n\n  async getImageCount() {\n    if (this.imageCount !== null) {\n      return this.imageCount;\n    }\n\n    const requests = [this.mainFile.getImageCount()].concat(this.overviewFiles.map(file => file.getImageCount()));\n    this.imageCounts = await Promise.all(requests);\n    this.imageCount = this.imageCounts.reduce((count, ifds) => count + ifds, 0);\n    return this.imageCount;\n  }\n\n}\n\nexport { MultiGeoTIFF };\n/**\n * Creates a new GeoTIFF from a remote URL.\n * @param {string} url The URL to access the image from\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\n\nexport async function fromUrl(url, options = {}, signal) {\n  return GeoTIFF.fromSource(makeRemoteSource(url, options), signal);\n}\n/**\n * Construct a new GeoTIFF from an\n * [ArrayBuffer]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer}.\n * @param {ArrayBuffer} arrayBuffer The data to read the file from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\n\nexport async function fromArrayBuffer(arrayBuffer, signal) {\n  return GeoTIFF.fromSource(makeBufferSource(arrayBuffer), signal);\n}\n/**\n * Construct a GeoTIFF from a local file path. This uses the node\n * [filesystem API]{@link https://nodejs.org/api/fs.html} and is\n * not available on browsers.\n *\n * N.B. After the GeoTIFF has been completely processed it needs\n * to be closed but only if it has been constructed from a file.\n * @param {string} path The file path to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\n\nexport async function fromFile(path, signal) {\n  return GeoTIFF.fromSource(makeFileSource(path), signal);\n}\n/**\n * Construct a GeoTIFF from an HTML\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob} or\n * [File]{@link https://developer.mozilla.org/en-US/docs/Web/API/File}\n * object.\n * @param {Blob|File} blob The Blob or File object to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\n\nexport async function fromBlob(blob, signal) {\n  return GeoTIFF.fromSource(makeFileReaderSource(blob), signal);\n}\n/**\n * Construct a MultiGeoTIFF from the given URLs.\n * @param {string} mainUrl The URL for the main file.\n * @param {string[]} overviewUrls An array of URLs for the overview images.\n * @param {Object} [options] Additional options to pass to the source.\n *                           See [makeRemoteSource]{@link module:source.makeRemoteSource}\n *                           for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<MultiGeoTIFF>} The resulting MultiGeoTIFF file.\n */\n\nexport async function fromUrls(mainUrl, overviewUrls = [], options = {}, signal) {\n  const mainFile = await GeoTIFF.fromSource(makeRemoteSource(mainUrl, options), signal);\n  const overviewFiles = await Promise.all(overviewUrls.map(url => GeoTIFF.fromSource(makeRemoteSource(url, options))));\n  return new MultiGeoTIFF(mainFile, overviewFiles);\n}\n/**\n * Main creating function for GeoTIFF files.\n * @param {(Array)} array of pixel values\n * @returns {metadata} metadata\n */\n\nexport function writeArrayBuffer(values, metadata) {\n  return writeGeotiff(values, metadata);\n}\nexport { Pool };\nexport { GeoTIFFImage };","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/geotiff/dist-module/geotiff.js"],"names":["GeoTIFFImage","DataView64","DataSlice","Pool","makeRemoteSource","makeBufferSource","makeFileReaderSource","makeFileSource","fieldTypes","fieldTagNames","arrayFields","geoKeyNames","writeGeotiff","globals","rgb","getDecoder","addDecoder","setLogger","getFieldTypeLength","fieldType","BYTE","ASCII","SBYTE","UNDEFINED","SHORT","SSHORT","LONG","SLONG","FLOAT","IFD","RATIONAL","SRATIONAL","DOUBLE","LONG8","SLONG8","IFD8","RangeError","parseGeoKeyDirectory","fileDirectory","rawGeoKeyDirectory","GeoKeyDirectory","geoKeyDirectory","i","key","location","count","offset","value","Error","substring","subarray","getValues","dataSlice","values","readMethod","fieldTypeLength","Uint8Array","readUint8","Int8Array","readInt8","Uint16Array","readUint16","Int16Array","readInt16","Uint32Array","readUint32","Int32Array","readInt32","Array","readUint64","readInt64","Float32Array","readFloat32","Float64Array","readFloat64","call","TextDecoder","decode","ImageFileDirectory","constructor","nextIFDByteOffset","GeoTIFFImageIndexError","index","GeoTIFFBase","readRasters","options","window","imageWindow","width","height","resX","resY","bbox","firstImage","getImage","usedImage","imageCount","getImageCount","imgBBox","getBoundingBox","oX","oY","getOrigin","rX","rY","getResolution","usedBBox","allImages","image","SubfileType","subfileType","NewSubfileType","newSubfileType","push","sort","a","b","getWidth","length","imgResX","imgResY","getHeight","wnd","imageResX","imageResY","Math","round","min","max","GeoTIFF","source","littleEndian","bigTiff","firstIFDOffset","cache","ifdRequests","ghostValues","getSlice","size","fallbackSize","fetch","parseFileDirectoryAt","entrySize","offsetSize","numDirEntries","byteSize","covers","entryCount","fieldTag","typeCount","fieldValues","valueOffset","actualOffset","readOffset","fieldDataSlice","indexOf","requestIFD","e","previousIfd","ifd","dataView","hasNext","getGhostValues","detectionString","heuristicAreaSize","slice","valuesString","firstLine","split","metadataSize","Number","fullString","filter","line","map","forEach","fromSource","signal","headerData","BOM","getUint16","TypeError","magicNumber","offsetByteSize","getUint64","getUint32","close","MultiGeoTIFF","mainFile","overviewFiles","imageFiles","concat","fileDirectoriesPerFile","fileDirectoriesPerFileParsing","parseFileDirectoriesPerFile","requests","file","Promise","all","visited","relativeIndex","imageFile","ii","imageCounts","reduce","ifds","fromUrl","url","fromArrayBuffer","arrayBuffer","fromFile","path","fromBlob","blob","fromUrls","mainUrl","overviewUrls","writeArrayBuffer","metadata"],"mappings":"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","sourcesContent":["/** @module geotiff */\nimport GeoTIFFImage from './geotiffimage.js';\nimport DataView64 from './dataview64.js';\nimport DataSlice from './dataslice.js';\nimport Pool from './pool.js';\n\nimport { makeRemoteSource } from './source/remote.js';\nimport { makeBufferSource } from './source/arraybuffer.js';\nimport { makeFileReaderSource } from './source/filereader.js';\nimport { makeFileSource } from './source/file.js';\n\nimport { fieldTypes, fieldTagNames, arrayFields, geoKeyNames } from './globals.js';\nimport { writeGeotiff } from './geotiffwriter.js';\nimport * as globals from './globals.js';\nimport * as rgb from './rgb.js';\nimport { getDecoder, addDecoder } from './compression/index.js';\nimport { setLogger } from './logging.js';\n\nexport { globals };\nexport { rgb };\nexport { getDecoder, addDecoder };\nexport { setLogger };\n\n/**\n * @typedef {Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array}\n * TypedArray\n */\n\nfunction getFieldTypeLength(fieldType) {\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.SBYTE: case fieldTypes.UNDEFINED:\n      return 1;\n    case fieldTypes.SHORT: case fieldTypes.SSHORT:\n      return 2;\n    case fieldTypes.LONG: case fieldTypes.SLONG: case fieldTypes.FLOAT: case fieldTypes.IFD:\n      return 4;\n    case fieldTypes.RATIONAL: case fieldTypes.SRATIONAL: case fieldTypes.DOUBLE:\n    case fieldTypes.LONG8: case fieldTypes.SLONG8: case fieldTypes.IFD8:\n      return 8;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n}\n\nfunction parseGeoKeyDirectory(fileDirectory) {\n  const rawGeoKeyDirectory = fileDirectory.GeoKeyDirectory;\n  if (!rawGeoKeyDirectory) {\n    return null;\n  }\n\n  const geoKeyDirectory = {};\n  for (let i = 4; i <= rawGeoKeyDirectory[3] * 4; i += 4) {\n    const key = geoKeyNames[rawGeoKeyDirectory[i]];\n    const location = (rawGeoKeyDirectory[i + 1])\n      ? (fieldTagNames[rawGeoKeyDirectory[i + 1]]) : null;\n    const count = rawGeoKeyDirectory[i + 2];\n    const offset = rawGeoKeyDirectory[i + 3];\n\n    let value = null;\n    if (!location) {\n      value = offset;\n    } else {\n      value = fileDirectory[location];\n      if (typeof value === 'undefined' || value === null) {\n        throw new Error(`Could not get value of geoKey '${key}'.`);\n      } else if (typeof value === 'string') {\n        value = value.substring(offset, offset + count - 1);\n      } else if (value.subarray) {\n        value = value.subarray(offset, offset + count);\n        if (count === 1) {\n          value = value[0];\n        }\n      }\n    }\n    geoKeyDirectory[key] = value;\n  }\n  return geoKeyDirectory;\n}\n\nfunction getValues(dataSlice, fieldType, count, offset) {\n  let values = null;\n  let readMethod = null;\n  const fieldTypeLength = getFieldTypeLength(fieldType);\n\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.UNDEFINED:\n      values = new Uint8Array(count); readMethod = dataSlice.readUint8;\n      break;\n    case fieldTypes.SBYTE:\n      values = new Int8Array(count); readMethod = dataSlice.readInt8;\n      break;\n    case fieldTypes.SHORT:\n      values = new Uint16Array(count); readMethod = dataSlice.readUint16;\n      break;\n    case fieldTypes.SSHORT:\n      values = new Int16Array(count); readMethod = dataSlice.readInt16;\n      break;\n    case fieldTypes.LONG: case fieldTypes.IFD:\n      values = new Uint32Array(count); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SLONG:\n      values = new Int32Array(count); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.LONG8: case fieldTypes.IFD8:\n      values = new Array(count); readMethod = dataSlice.readUint64;\n      break;\n    case fieldTypes.SLONG8:\n      values = new Array(count); readMethod = dataSlice.readInt64;\n      break;\n    case fieldTypes.RATIONAL:\n      values = new Uint32Array(count * 2); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SRATIONAL:\n      values = new Int32Array(count * 2); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.FLOAT:\n      values = new Float32Array(count); readMethod = dataSlice.readFloat32;\n      break;\n    case fieldTypes.DOUBLE:\n      values = new Float64Array(count); readMethod = dataSlice.readFloat64;\n      break;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n\n  // normal fields\n  if (!(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n    for (let i = 0; i < count; ++i) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n    }\n  } else { // RATIONAL or SRATIONAL\n    for (let i = 0; i < count; i += 2) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n      values[i + 1] = readMethod.call(\n        dataSlice, offset + ((i * fieldTypeLength) + 4),\n      );\n    }\n  }\n\n  if (fieldType === fieldTypes.ASCII) {\n    return new TextDecoder('utf-8').decode(values);\n  }\n  return values;\n}\n\n/**\n * Data class to store the parsed file directory, geo key directory and\n * offset to the next IFD\n */\nclass ImageFileDirectory {\n  constructor(fileDirectory, geoKeyDirectory, nextIFDByteOffset) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeyDirectory = geoKeyDirectory;\n    this.nextIFDByteOffset = nextIFDByteOffset;\n  }\n}\n\n/**\n * Error class for cases when an IFD index was requested, that does not exist\n * in the file.\n */\nclass GeoTIFFImageIndexError extends Error {\n  constructor(index) {\n    super(`No image at index ${index}`);\n    this.index = index;\n  }\n}\n\nclass GeoTIFFBase {\n  /**\n   * (experimental) Reads raster data from the best fitting image. This function uses\n   * the image with the lowest resolution that is still a higher resolution than the\n   * requested resolution.\n   * When specified, the `bbox` option is translated to the `window` option and the\n   * `resX` and `resY` to `width` and `height` respectively.\n   * Then, the [readRasters]{@link GeoTIFFImage#readRasters} method of the selected\n   * image is called and the result returned.\n   * @see GeoTIFFImage.readRasters\n   * @param {import('./geotiffimage').ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<(TypedArray|TypedArray[])>} the decoded arrays as a promise\n   */\n  async readRasters(options = {}) {\n    const { window: imageWindow, width, height } = options;\n    let { resX, resY, bbox } = options;\n\n    const firstImage = await this.getImage();\n    let usedImage = firstImage;\n    const imageCount = await this.getImageCount();\n    const imgBBox = firstImage.getBoundingBox();\n\n    if (imageWindow && bbox) {\n      throw new Error('Both \"bbox\" and \"window\" passed.');\n    }\n\n    // if width/height is passed, transform it to resolution\n    if (width || height) {\n      // if we have an image window (pixel coordinates), transform it to a BBox\n      // using the origin/resolution of the first image.\n      if (imageWindow) {\n        const [oX, oY] = firstImage.getOrigin();\n        const [rX, rY] = firstImage.getResolution();\n\n        bbox = [\n          oX + (imageWindow[0] * rX),\n          oY + (imageWindow[1] * rY),\n          oX + (imageWindow[2] * rX),\n          oY + (imageWindow[3] * rY),\n        ];\n      }\n\n      // if we have a bbox (or calculated one)\n\n      const usedBBox = bbox || imgBBox;\n\n      if (width) {\n        if (resX) {\n          throw new Error('Both width and resX passed');\n        }\n        resX = (usedBBox[2] - usedBBox[0]) / width;\n      }\n      if (height) {\n        if (resY) {\n          throw new Error('Both width and resY passed');\n        }\n        resY = (usedBBox[3] - usedBBox[1]) / height;\n      }\n    }\n\n    // if resolution is set or calculated, try to get the image with the worst acceptable resolution\n    if (resX || resY) {\n      const allImages = [];\n      for (let i = 0; i < imageCount; ++i) {\n        const image = await this.getImage(i);\n        const { SubfileType: subfileType, NewSubfileType: newSubfileType } = image.fileDirectory;\n        if (i === 0 || subfileType === 2 || newSubfileType & 1) {\n          allImages.push(image);\n        }\n      }\n\n      allImages.sort((a, b) => a.getWidth() - b.getWidth());\n      for (let i = 0; i < allImages.length; ++i) {\n        const image = allImages[i];\n        const imgResX = (imgBBox[2] - imgBBox[0]) / image.getWidth();\n        const imgResY = (imgBBox[3] - imgBBox[1]) / image.getHeight();\n\n        usedImage = image;\n        if ((resX && resX > imgResX) || (resY && resY > imgResY)) {\n          break;\n        }\n      }\n    }\n\n    let wnd = imageWindow;\n    if (bbox) {\n      const [oX, oY] = firstImage.getOrigin();\n      const [imageResX, imageResY] = usedImage.getResolution(firstImage);\n\n      wnd = [\n        Math.round((bbox[0] - oX) / imageResX),\n        Math.round((bbox[1] - oY) / imageResY),\n        Math.round((bbox[2] - oX) / imageResX),\n        Math.round((bbox[3] - oY) / imageResY),\n      ];\n      wnd = [\n        Math.min(wnd[0], wnd[2]),\n        Math.min(wnd[1], wnd[3]),\n        Math.max(wnd[0], wnd[2]),\n        Math.max(wnd[1], wnd[3]),\n      ];\n    }\n\n    return usedImage.readRasters({ ...options, window: wnd });\n  }\n}\n\n/**\n * @typedef {Object} GeoTIFFOptions\n * @property {boolean} [cache=false] whether or not decoded tiles shall be cached.\n */\n\n/**\n * The abstraction for a whole GeoTIFF file.\n * @augments GeoTIFFBase\n */\nclass GeoTIFF extends GeoTIFFBase {\n  /**\n   * @constructor\n   * @param {*} source The datasource to read from.\n   * @param {boolean} littleEndian Whether the image uses little endian.\n   * @param {boolean} bigTiff Whether the image uses bigTIFF conventions.\n   * @param {number} firstIFDOffset The numeric byte-offset from the start of the image\n   *                                to the first IFD.\n   * @param {GeoTIFFOptions} [options] further options.\n   */\n  constructor(source, littleEndian, bigTiff, firstIFDOffset, options = {}) {\n    super();\n    this.source = source;\n    this.littleEndian = littleEndian;\n    this.bigTiff = bigTiff;\n    this.firstIFDOffset = firstIFDOffset;\n    this.cache = options.cache || false;\n    this.ifdRequests = [];\n    this.ghostValues = null;\n  }\n\n  async getSlice(offset, size) {\n    const fallbackSize = this.bigTiff ? 4048 : 1024;\n    return new DataSlice(\n      (await this.source.fetch([{\n        offset,\n        length: typeof size !== 'undefined' ? size : fallbackSize,\n      }]))[0],\n      offset,\n      this.littleEndian,\n      this.bigTiff,\n    );\n  }\n\n  /**\n   * Instructs to parse an image file directory at the given file offset.\n   * As there is no way to ensure that a location is indeed the start of an IFD,\n   * this function must be called with caution (e.g only using the IFD offsets from\n   * the headers or other IFDs).\n   * @param {number} offset the offset to parse the IFD at\n   * @returns {Promise<ImageFileDirectory>} the parsed IFD\n   */\n  async parseFileDirectoryAt(offset) {\n    const entrySize = this.bigTiff ? 20 : 12;\n    const offsetSize = this.bigTiff ? 8 : 2;\n\n    let dataSlice = await this.getSlice(offset);\n    const numDirEntries = this.bigTiff\n      ? dataSlice.readUint64(offset)\n      : dataSlice.readUint16(offset);\n\n    // if the slice does not cover the whole IFD, request a bigger slice, where the\n    // whole IFD fits: num of entries + n x tag length + offset to next IFD\n    const byteSize = (numDirEntries * entrySize) + (this.bigTiff ? 16 : 6);\n    if (!dataSlice.covers(offset, byteSize)) {\n      dataSlice = await this.getSlice(offset, byteSize);\n    }\n\n    const fileDirectory = {};\n\n    // loop over the IFD and create a file directory object\n    let i = offset + (this.bigTiff ? 8 : 2);\n    for (let entryCount = 0; entryCount < numDirEntries; i += entrySize, ++entryCount) {\n      const fieldTag = dataSlice.readUint16(i);\n      const fieldType = dataSlice.readUint16(i + 2);\n      const typeCount = this.bigTiff\n        ? dataSlice.readUint64(i + 4)\n        : dataSlice.readUint32(i + 4);\n\n      let fieldValues;\n      let value;\n      const fieldTypeLength = getFieldTypeLength(fieldType);\n      const valueOffset = i + (this.bigTiff ? 12 : 8);\n\n      // check whether the value is directly encoded in the tag or refers to a\n      // different external byte range\n      if (fieldTypeLength * typeCount <= (this.bigTiff ? 8 : 4)) {\n        fieldValues = getValues(dataSlice, fieldType, typeCount, valueOffset);\n      } else {\n        // resolve the reference to the actual byte range\n        const actualOffset = dataSlice.readOffset(valueOffset);\n        const length = getFieldTypeLength(fieldType) * typeCount;\n\n        // check, whether we actually cover the referenced byte range; if not,\n        // request a new slice of bytes to read from it\n        if (dataSlice.covers(actualOffset, length)) {\n          fieldValues = getValues(dataSlice, fieldType, typeCount, actualOffset);\n        } else {\n          const fieldDataSlice = await this.getSlice(actualOffset, length);\n          fieldValues = getValues(fieldDataSlice, fieldType, typeCount, actualOffset);\n        }\n      }\n\n      // unpack single values from the array\n      if (typeCount === 1 && arrayFields.indexOf(fieldTag) === -1\n        && !(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n        value = fieldValues[0];\n      } else {\n        value = fieldValues;\n      }\n\n      // write the tags value to the file directly\n      fileDirectory[fieldTagNames[fieldTag]] = value;\n    }\n    const geoKeyDirectory = parseGeoKeyDirectory(fileDirectory);\n    const nextIFDByteOffset = dataSlice.readOffset(\n      offset + offsetSize + (entrySize * numDirEntries),\n    );\n\n    return new ImageFileDirectory(\n      fileDirectory,\n      geoKeyDirectory,\n      nextIFDByteOffset,\n    );\n  }\n\n  async requestIFD(index) {\n    // see if we already have that IFD index requested.\n    if (this.ifdRequests[index]) {\n      // attach to an already requested IFD\n      return this.ifdRequests[index];\n    } else if (index === 0) {\n      // special case for index 0\n      this.ifdRequests[index] = this.parseFileDirectoryAt(this.firstIFDOffset);\n      return this.ifdRequests[index];\n    } else if (!this.ifdRequests[index - 1]) {\n      // if the previous IFD was not yet loaded, load that one first\n      // this is the recursive call.\n      try {\n        this.ifdRequests[index - 1] = this.requestIFD(index - 1);\n      } catch (e) {\n        // if the previous one already was an index error, rethrow\n        // with the current index\n        if (e instanceof GeoTIFFImageIndexError) {\n          throw new GeoTIFFImageIndexError(index);\n        }\n        // rethrow anything else\n        throw e;\n      }\n    }\n    // if the previous IFD was loaded, we can finally fetch the one we are interested in.\n    // we need to wrap this in an IIFE, otherwise this.ifdRequests[index] would be delayed\n    this.ifdRequests[index] = (async () => {\n      const previousIfd = await this.ifdRequests[index - 1];\n      if (previousIfd.nextIFDByteOffset === 0) {\n        throw new GeoTIFFImageIndexError(index);\n      }\n      return this.parseFileDirectoryAt(previousIfd.nextIFDByteOffset);\n    })();\n    return this.ifdRequests[index];\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    const ifd = await this.requestIFD(index);\n    return new GeoTIFFImage(\n      ifd.fileDirectory, ifd.geoKeyDirectory,\n      this.dataView, this.littleEndian, this.cache, this.source,\n    );\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    let index = 0;\n    // loop until we run out of IFDs\n    let hasNext = true;\n    while (hasNext) {\n      try {\n        await this.requestIFD(index);\n        ++index;\n      } catch (e) {\n        if (e instanceof GeoTIFFImageIndexError) {\n          hasNext = false;\n        } else {\n          throw e;\n        }\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Get the values of the COG ghost area as a parsed map.\n   * See https://gdal.org/drivers/raster/cog.html#header-ghost-area for reference\n   * @returns {Promise<Object>} the parsed ghost area or null, if no such area was found\n   */\n  async getGhostValues() {\n    const offset = this.bigTiff ? 16 : 8;\n    if (this.ghostValues) {\n      return this.ghostValues;\n    }\n    const detectionString = 'GDAL_STRUCTURAL_METADATA_SIZE=';\n    const heuristicAreaSize = detectionString.length + 100;\n    let slice = await this.getSlice(offset, heuristicAreaSize);\n    if (detectionString === getValues(slice, fieldTypes.ASCII, detectionString.length, offset)) {\n      const valuesString = getValues(slice, fieldTypes.ASCII, heuristicAreaSize, offset);\n      const firstLine = valuesString.split('\\n')[0];\n      const metadataSize = Number(firstLine.split('=')[1].split(' ')[0]) + firstLine.length;\n      if (metadataSize > heuristicAreaSize) {\n        slice = await this.getSlice(offset, metadataSize);\n      }\n      const fullString = getValues(slice, fieldTypes.ASCII, metadataSize, offset);\n      this.ghostValues = {};\n      fullString\n        .split('\\n')\n        .filter((line) => line.length > 0)\n        .map((line) => line.split('='))\n        .forEach(([key, value]) => {\n          this.ghostValues[key] = value;\n        });\n    }\n    return this.ghostValues;\n  }\n\n  /**\n   * Parse a (Geo)TIFF file from the given source.\n   *\n   * @param {*} source The source of data to parse from.\n   * @param {GeoTIFFOptions} [options] Additional options.\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   */\n  static async fromSource(source, options, signal) {\n    const headerData = (await source.fetch([{ offset: 0, length: 1024 }], signal))[0];\n    const dataView = new DataView64(headerData);\n\n    const BOM = dataView.getUint16(0, 0);\n    let littleEndian;\n    if (BOM === 0x4949) {\n      littleEndian = true;\n    } else if (BOM === 0x4D4D) {\n      littleEndian = false;\n    } else {\n      throw new TypeError('Invalid byte order value.');\n    }\n\n    const magicNumber = dataView.getUint16(2, littleEndian);\n    let bigTiff;\n    if (magicNumber === 42) {\n      bigTiff = false;\n    } else if (magicNumber === 43) {\n      bigTiff = true;\n      const offsetByteSize = dataView.getUint16(4, littleEndian);\n      if (offsetByteSize !== 8) {\n        throw new Error('Unsupported offset byte-size.');\n      }\n    } else {\n      throw new TypeError('Invalid magic number.');\n    }\n\n    const firstIFDOffset = bigTiff\n      ? dataView.getUint64(8, littleEndian)\n      : dataView.getUint32(4, littleEndian);\n    return new GeoTIFF(source, littleEndian, bigTiff, firstIFDOffset, options);\n  }\n\n  /**\n   * Closes the underlying file buffer\n   * N.B. After the GeoTIFF has been completely processed it needs\n   * to be closed but only if it has been constructed from a file.\n   */\n  close() {\n    if (typeof this.source.close === 'function') {\n      return this.source.close();\n    }\n    return false;\n  }\n}\n\nexport { GeoTIFF };\nexport default GeoTIFF;\n\n/**\n * Wrapper for GeoTIFF files that have external overviews.\n * @augments GeoTIFFBase\n */\nclass MultiGeoTIFF extends GeoTIFFBase {\n  /**\n   * Construct a new MultiGeoTIFF from a main and several overview files.\n   * @param {GeoTIFF} mainFile The main GeoTIFF file.\n   * @param {GeoTIFF[]} overviewFiles An array of overview files.\n   */\n  constructor(mainFile, overviewFiles) {\n    super();\n    this.mainFile = mainFile;\n    this.overviewFiles = overviewFiles;\n    this.imageFiles = [mainFile].concat(overviewFiles);\n\n    this.fileDirectoriesPerFile = null;\n    this.fileDirectoriesPerFileParsing = null;\n    this.imageCount = null;\n  }\n\n  async parseFileDirectoriesPerFile() {\n    const requests = [this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)]\n      .concat(this.overviewFiles.map((file) => file.parseFileDirectoryAt(file.firstIFDOffset)));\n\n    this.fileDirectoriesPerFile = await Promise.all(requests);\n    return this.fileDirectoriesPerFile;\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    await this.getImageCount();\n    await this.parseFileDirectoriesPerFile();\n    let visited = 0;\n    let relativeIndex = 0;\n    for (let i = 0; i < this.imageFiles.length; i++) {\n      const imageFile = this.imageFiles[i];\n      for (let ii = 0; ii < this.imageCounts[i]; ii++) {\n        if (index === visited) {\n          const ifd = await imageFile.requestIFD(relativeIndex);\n          return new GeoTIFFImage(\n            ifd.fileDirectory, ifd.geoKeyDirectory,\n            imageFile.dataView, imageFile.littleEndian, imageFile.cache, imageFile.source,\n          );\n        }\n        visited++;\n        relativeIndex++;\n      }\n      relativeIndex = 0;\n    }\n\n    throw new RangeError('Invalid image index');\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    if (this.imageCount !== null) {\n      return this.imageCount;\n    }\n    const requests = [this.mainFile.getImageCount()]\n      .concat(this.overviewFiles.map((file) => file.getImageCount()));\n    this.imageCounts = await Promise.all(requests);\n    this.imageCount = this.imageCounts.reduce((count, ifds) => count + ifds, 0);\n    return this.imageCount;\n  }\n}\n\nexport { MultiGeoTIFF };\n\n/**\n * Creates a new GeoTIFF from a remote URL.\n * @param {string} url The URL to access the image from\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromUrl(url, options = {}, signal) {\n  return GeoTIFF.fromSource(makeRemoteSource(url, options), signal);\n}\n\n/**\n * Construct a new GeoTIFF from an\n * [ArrayBuffer]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer}.\n * @param {ArrayBuffer} arrayBuffer The data to read the file from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromArrayBuffer(arrayBuffer, signal) {\n  return GeoTIFF.fromSource(makeBufferSource(arrayBuffer), signal);\n}\n\n/**\n * Construct a GeoTIFF from a local file path. This uses the node\n * [filesystem API]{@link https://nodejs.org/api/fs.html} and is\n * not available on browsers.\n *\n * N.B. After the GeoTIFF has been completely processed it needs\n * to be closed but only if it has been constructed from a file.\n * @param {string} path The file path to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromFile(path, signal) {\n  return GeoTIFF.fromSource(makeFileSource(path), signal);\n}\n\n/**\n * Construct a GeoTIFF from an HTML\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob} or\n * [File]{@link https://developer.mozilla.org/en-US/docs/Web/API/File}\n * object.\n * @param {Blob|File} blob The Blob or File object to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromBlob(blob, signal) {\n  return GeoTIFF.fromSource(makeFileReaderSource(blob), signal);\n}\n\n/**\n * Construct a MultiGeoTIFF from the given URLs.\n * @param {string} mainUrl The URL for the main file.\n * @param {string[]} overviewUrls An array of URLs for the overview images.\n * @param {Object} [options] Additional options to pass to the source.\n *                           See [makeRemoteSource]{@link module:source.makeRemoteSource}\n *                           for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<MultiGeoTIFF>} The resulting MultiGeoTIFF file.\n */\nexport async function fromUrls(mainUrl, overviewUrls = [], options = {}, signal) {\n  const mainFile = await GeoTIFF.fromSource(makeRemoteSource(mainUrl, options), signal);\n  const overviewFiles = await Promise.all(\n    overviewUrls.map((url) => GeoTIFF.fromSource(makeRemoteSource(url, options))),\n  );\n\n  return new MultiGeoTIFF(mainFile, overviewFiles);\n}\n\n/**\n * Main creating function for GeoTIFF files.\n * @param {(Array)} array of pixel values\n * @returns {metadata} metadata\n */\nexport function writeArrayBuffer(values, metadata) {\n  return writeGeotiff(values, metadata);\n}\n\nexport { Pool };\nexport { GeoTIFFImage };\n"]},"metadata":{},"sourceType":"module"}