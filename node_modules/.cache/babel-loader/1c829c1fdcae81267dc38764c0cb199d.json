{"ast":null,"code":"import _asyncToGenerator from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { applyPredictor } from '../predictor.js';\n\nvar BaseDecoder = /*#__PURE__*/function () {\n  function BaseDecoder() {\n    _classCallCheck(this, BaseDecoder);\n  }\n\n  _createClass(BaseDecoder, [{\n    key: \"decode\",\n    value: function () {\n      var _decode = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(fileDirectory, buffer) {\n        var decoded, predictor, isTiled, tileWidth, tileHeight;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.decodeBlock(buffer);\n\n              case 2:\n                decoded = _context.sent;\n                predictor = fileDirectory.Predictor || 1;\n\n                if (!(predictor !== 1)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                isTiled = !fileDirectory.StripOffsets;\n                tileWidth = isTiled ? fileDirectory.TileWidth : fileDirectory.ImageWidth;\n                tileHeight = isTiled ? fileDirectory.TileLength : fileDirectory.RowsPerStrip || fileDirectory.ImageLength;\n                return _context.abrupt(\"return\", applyPredictor(decoded, predictor, tileWidth, tileHeight, fileDirectory.BitsPerSample, fileDirectory.PlanarConfiguration));\n\n              case 9:\n                return _context.abrupt(\"return\", decoded);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function decode(_x, _x2) {\n        return _decode.apply(this, arguments);\n      }\n\n      return decode;\n    }()\n  }]);\n\n  return BaseDecoder;\n}();\n\nexport { BaseDecoder as default };","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/geotiff/dist-module/compression/basedecoder.js"],"names":["applyPredictor","BaseDecoder","fileDirectory","buffer","decodeBlock","decoded","predictor","Predictor","isTiled","StripOffsets","tileWidth","TileWidth","ImageWidth","tileHeight","TileLength","RowsPerStrip","ImageLength","BitsPerSample","PlanarConfiguration"],"mappings":";;;;AAAA,SAASA,cAAT,QAA+B,iBAA/B;;IAEqBC,W;;;;;;;;4EACnB,iBAAaC,aAAb,EAA4BC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACwB,KAAKC,WAAL,CAAiBD,MAAjB,CADxB;;AAAA;AACQE,gBAAAA,OADR;AAEQC,gBAAAA,SAFR,GAEoBJ,aAAa,CAACK,SAAd,IAA2B,CAF/C;;AAAA,sBAGMD,SAAS,KAAK,CAHpB;AAAA;AAAA;AAAA;;AAIUE,gBAAAA,OAJV,GAIoB,CAACN,aAAa,CAACO,YAJnC;AAKUC,gBAAAA,SALV,GAKsBF,OAAO,GAAGN,aAAa,CAACS,SAAjB,GAA6BT,aAAa,CAACU,UALxE;AAMUC,gBAAAA,UANV,GAMuBL,OAAO,GAAGN,aAAa,CAACY,UAAjB,GACxBZ,aAAa,CAACa,YAAd,IAA8Bb,aAAa,CAACc,WAPlD;AAAA,iDASWhB,cAAc,CACnBK,OADmB,EACVC,SADU,EACCI,SADD,EACYG,UADZ,EACwBX,aAAa,CAACe,aADtC,EAEnBf,aAAa,CAACgB,mBAFK,CATzB;;AAAA;AAAA,iDAcSb,OAdT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;SADmBJ,W","sourcesContent":["import { applyPredictor } from '../predictor.js';\n\nexport default class BaseDecoder {\n  async decode(fileDirectory, buffer) {\n    const decoded = await this.decodeBlock(buffer);\n    const predictor = fileDirectory.Predictor || 1;\n    if (predictor !== 1) {\n      const isTiled = !fileDirectory.StripOffsets;\n      const tileWidth = isTiled ? fileDirectory.TileWidth : fileDirectory.ImageWidth;\n      const tileHeight = isTiled ? fileDirectory.TileLength : (\n        fileDirectory.RowsPerStrip || fileDirectory.ImageLength\n      );\n      return applyPredictor(\n        decoded, predictor, tileWidth, tileHeight, fileDirectory.BitsPerSample,\n        fileDirectory.PlanarConfiguration,\n      );\n    }\n    return decoded;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}