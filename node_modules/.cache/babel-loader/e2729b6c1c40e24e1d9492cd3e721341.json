{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n\n/**\n * @module ol/reproj/Triangulation\n */\nimport { boundingExtent, createEmpty, extendCoordinate, getArea, getBottomLeft, getBottomRight, getTopLeft, getTopRight, getWidth, intersects } from '../extent.js';\nimport { getTransform } from '../proj.js';\nimport { log2, modulo } from '../math.js';\n/**\n * Single triangle; consists of 3 source points and 3 target points.\n * @typedef {Object} Triangle\n * @property {Array<import(\"../coordinate.js\").Coordinate>} source Source.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} target Target.\n */\n\n/**\n * Maximum number of subdivision steps during raster reprojection triangulation.\n * Prevents high memory usage and large number of proj4 calls (for certain\n * transformations and areas). At most `2*(2^this)` triangles are created for\n * each triangulated extent (tile/image).\n * @type {number}\n */\n\nvar MAX_SUBDIVISION = 10;\n/**\n * Maximum allowed size of triangle relative to world width. When transforming\n * corners of world extent between certain projections, the resulting\n * triangulation seems to have zero error and no subdivision is performed. If\n * the triangle width is more than this (relative to world width; 0-1),\n * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.\n * @type {number}\n */\n\nvar MAX_TRIANGLE_WIDTH = 0.25;\n/**\n * @classdesc\n * Class containing triangulation of the given target extent.\n * Used for determining source data and the reprojection itself.\n */\n\nvar Triangulation =\n/** @class */\nfunction () {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent to triangulate.\n   * @param {import(\"../extent.js\").Extent} maxSourceExtent Maximal source extent that can be used.\n   * @param {number} errorThreshold Acceptable error (in source units).\n   * @param {?number} opt_destinationResolution The (optional) resolution of the destination.\n   */\n  function Triangulation(sourceProj, targetProj, targetExtent, maxSourceExtent, errorThreshold, opt_destinationResolution) {\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */\n    this.sourceProj_ = sourceProj;\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */\n\n    this.targetProj_ = targetProj;\n    /** @type {!Object<string, import(\"../coordinate.js\").Coordinate>} */\n\n    var transformInvCache = {};\n    var transformInv = getTransform(this.targetProj_, this.sourceProj_);\n    /**\n     * @param {import(\"../coordinate.js\").Coordinate} c A coordinate.\n     * @return {import(\"../coordinate.js\").Coordinate} Transformed coordinate.\n     * @private\n     */\n\n    this.transformInv_ = function (c) {\n      var key = c[0] + '/' + c[1];\n\n      if (!transformInvCache[key]) {\n        transformInvCache[key] = transformInv(c);\n      }\n\n      return transformInvCache[key];\n    };\n    /**\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */\n\n\n    this.maxSourceExtent_ = maxSourceExtent;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.errorThresholdSquared_ = errorThreshold * errorThreshold;\n    /**\n     * @type {Array<Triangle>}\n     * @private\n     */\n\n    this.triangles_ = [];\n    /**\n     * Indicates that the triangulation crosses edge of the source projection.\n     * @type {boolean}\n     * @private\n     */\n\n    this.wrapsXInSource_ = false;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    this.canWrapXInSource_ = this.sourceProj_.canWrapX() && !!maxSourceExtent && !!this.sourceProj_.getExtent() && getWidth(maxSourceExtent) == getWidth(this.sourceProj_.getExtent());\n    /**\n     * @type {?number}\n     * @private\n     */\n\n    this.sourceWorldWidth_ = this.sourceProj_.getExtent() ? getWidth(this.sourceProj_.getExtent()) : null;\n    /**\n     * @type {?number}\n     * @private\n     */\n\n    this.targetWorldWidth_ = this.targetProj_.getExtent() ? getWidth(this.targetProj_.getExtent()) : null;\n    var destinationTopLeft = getTopLeft(targetExtent);\n    var destinationTopRight = getTopRight(targetExtent);\n    var destinationBottomRight = getBottomRight(targetExtent);\n    var destinationBottomLeft = getBottomLeft(targetExtent);\n    var sourceTopLeft = this.transformInv_(destinationTopLeft);\n    var sourceTopRight = this.transformInv_(destinationTopRight);\n    var sourceBottomRight = this.transformInv_(destinationBottomRight);\n    var sourceBottomLeft = this.transformInv_(destinationBottomLeft);\n    /*\n     * The maxSubdivision controls how many splittings of the target area can\n     * be done. The idea here is to do a linear mapping of the target areas\n     * but the actual overal reprojection (can be) extremely non-linear. The\n     * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256\n     * tile size. However this function is also called to remap canvas rendered\n     * layers which can be much larger. This calculation increases the maxSubdivision\n     * value by the right factor so that each 256x256 pixel area has\n     * MAX_SUBDIVISION divisions.\n     */\n\n    var maxSubdivision = MAX_SUBDIVISION + (opt_destinationResolution ? Math.max(0, Math.ceil(log2(getArea(targetExtent) / (opt_destinationResolution * opt_destinationResolution * 256 * 256)))) : 0);\n    this.addQuad_(destinationTopLeft, destinationTopRight, destinationBottomRight, destinationBottomLeft, sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft, maxSubdivision);\n\n    if (this.wrapsXInSource_) {\n      var leftBound_1 = Infinity;\n      this.triangles_.forEach(function (triangle, i, arr) {\n        leftBound_1 = Math.min(leftBound_1, triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);\n      }); // Shift triangles to be as close to `leftBound` as possible\n      // (if the distance is more than `worldWidth / 2` it can be closer.\n\n      this.triangles_.forEach(function (triangle) {\n        if (Math.max(triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]) - leftBound_1 > this.sourceWorldWidth_ / 2) {\n          var newTriangle = [[triangle.source[0][0], triangle.source[0][1]], [triangle.source[1][0], triangle.source[1][1]], [triangle.source[2][0], triangle.source[2][1]]];\n\n          if (newTriangle[0][0] - leftBound_1 > this.sourceWorldWidth_ / 2) {\n            newTriangle[0][0] -= this.sourceWorldWidth_;\n          }\n\n          if (newTriangle[1][0] - leftBound_1 > this.sourceWorldWidth_ / 2) {\n            newTriangle[1][0] -= this.sourceWorldWidth_;\n          }\n\n          if (newTriangle[2][0] - leftBound_1 > this.sourceWorldWidth_ / 2) {\n            newTriangle[2][0] -= this.sourceWorldWidth_;\n          } // Rarely (if the extent contains both the dateline and prime meridian)\n          // the shift can in turn break some triangles.\n          // Detect this here and don't shift in such cases.\n\n\n          var minX = Math.min(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);\n          var maxX = Math.max(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);\n\n          if (maxX - minX < this.sourceWorldWidth_ / 2) {\n            triangle.source = newTriangle;\n          }\n        }\n      }.bind(this));\n    }\n\n    transformInvCache = {};\n  }\n  /**\n   * Adds triangle to the triangulation.\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @private\n   */\n\n\n  Triangulation.prototype.addTriangle_ = function (a, b, c, aSrc, bSrc, cSrc) {\n    this.triangles_.push({\n      source: [aSrc, bSrc, cSrc],\n      target: [a, b, c]\n    });\n  };\n  /**\n   * Adds quad (points in clock-wise order) to the triangulation\n   * (and reprojects the vertices) if valid.\n   * Performs quad subdivision if needed to increase precision.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} d The target d coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} dSrc The source d coordinate.\n   * @param {number} maxSubdivision Maximal allowed subdivision of the quad.\n   * @private\n   */\n\n\n  Triangulation.prototype.addQuad_ = function (a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {\n    var sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);\n    var sourceCoverageX = this.sourceWorldWidth_ ? getWidth(sourceQuadExtent) / this.sourceWorldWidth_ : null;\n    var sourceWorldWidth =\n    /** @type {number} */\n    this.sourceWorldWidth_; // when the quad is wrapped in the source projection\n    // it covers most of the projection extent, but not fully\n\n    var wrapsX = this.sourceProj_.canWrapX() && sourceCoverageX > 0.5 && sourceCoverageX < 1;\n    var needsSubdivision = false;\n\n    if (maxSubdivision > 0) {\n      if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {\n        var targetQuadExtent = boundingExtent([a, b, c, d]);\n        var targetCoverageX = getWidth(targetQuadExtent) / this.targetWorldWidth_;\n        needsSubdivision = targetCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\n      }\n\n      if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {\n        needsSubdivision = sourceCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\n      }\n    }\n\n    if (!needsSubdivision && this.maxSourceExtent_) {\n      if (isFinite(sourceQuadExtent[0]) && isFinite(sourceQuadExtent[1]) && isFinite(sourceQuadExtent[2]) && isFinite(sourceQuadExtent[3])) {\n        if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {\n          // whole quad outside source projection extent -> ignore\n          return;\n        }\n      }\n    }\n\n    var isNotFinite = 0;\n\n    if (!needsSubdivision) {\n      if (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) || !isFinite(bSrc[0]) || !isFinite(bSrc[1]) || !isFinite(cSrc[0]) || !isFinite(cSrc[1]) || !isFinite(dSrc[0]) || !isFinite(dSrc[1])) {\n        if (maxSubdivision > 0) {\n          needsSubdivision = true;\n        } else {\n          // It might be the case that only 1 of the points is infinite. In this case\n          // we can draw a single triangle with the other three points\n          isNotFinite = (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) + (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) + (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) + (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);\n\n          if (isNotFinite != 1 && isNotFinite != 2 && isNotFinite != 4 && isNotFinite != 8) {\n            return;\n          }\n        }\n      }\n    }\n\n    if (maxSubdivision > 0) {\n      if (!needsSubdivision) {\n        var center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];\n        var centerSrc = this.transformInv_(center);\n        var dx = void 0;\n\n        if (wrapsX) {\n          var centerSrcEstimX = (modulo(aSrc[0], sourceWorldWidth) + modulo(cSrc[0], sourceWorldWidth)) / 2;\n          dx = centerSrcEstimX - modulo(centerSrc[0], sourceWorldWidth);\n        } else {\n          dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];\n        }\n\n        var dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];\n        var centerSrcErrorSquared = dx * dx + dy * dy;\n        needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;\n      }\n\n      if (needsSubdivision) {\n        if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {\n          // split horizontally (top & bottom)\n          var bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];\n          var bcSrc = this.transformInv_(bc);\n          var da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];\n          var daSrc = this.transformInv_(da);\n          this.addQuad_(a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);\n          this.addQuad_(da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);\n        } else {\n          // split vertically (left & right)\n          var ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];\n          var abSrc = this.transformInv_(ab);\n          var cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];\n          var cdSrc = this.transformInv_(cd);\n          this.addQuad_(a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);\n          this.addQuad_(ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);\n        }\n\n        return;\n      }\n    }\n\n    if (wrapsX) {\n      if (!this.canWrapXInSource_) {\n        return;\n      }\n\n      this.wrapsXInSource_ = true;\n    } // Exactly zero or one of *Src is not finite\n    // The triangles must have the diagonal line as the first side\n    // This is to allow easy code in reproj.s to make it straight for broken\n    // browsers that can't handle diagonal clipping\n\n\n    if ((isNotFinite & 0xb) == 0) {\n      this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);\n    }\n\n    if ((isNotFinite & 0xe) == 0) {\n      this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);\n    }\n\n    if (isNotFinite) {\n      // Try the other two triangles\n      if ((isNotFinite & 0xd) == 0) {\n        this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);\n      }\n\n      if ((isNotFinite & 0x7) == 0) {\n        this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);\n      }\n    }\n  };\n  /**\n   * Calculates extent of the `source` coordinates from all the triangles.\n   *\n   * @return {import(\"../extent.js\").Extent} Calculated extent.\n   */\n\n\n  Triangulation.prototype.calculateSourceExtent = function () {\n    var extent = createEmpty();\n    this.triangles_.forEach(function (triangle, i, arr) {\n      var src = triangle.source;\n      extendCoordinate(extent, src[0]);\n      extendCoordinate(extent, src[1]);\n      extendCoordinate(extent, src[2]);\n    });\n    return extent;\n  };\n  /**\n   * @return {Array<Triangle>} Array of the calculated triangles.\n   */\n\n\n  Triangulation.prototype.getTriangles = function () {\n    return this.triangles_;\n  };\n\n  return Triangulation;\n}();\n\nexport default Triangulation;","map":{"version":3,"mappings":"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","names":["boundingExtent","createEmpty","extendCoordinate","getArea","getBottomLeft","getBottomRight","getTopLeft","getTopRight","getWidth","intersects","getTransform","log2","modulo","MAX_SUBDIVISION","MAX_TRIANGLE_WIDTH","sourceProj","targetProj","targetExtent","maxSourceExtent","errorThreshold","opt_destinationResolution","sourceProj_","targetProj_","transformInvCache","transformInv","transformInv_","c","key","maxSourceExtent_","errorThresholdSquared_","triangles_","wrapsXInSource_","canWrapXInSource_","canWrapX","getExtent","sourceWorldWidth_","targetWorldWidth_","destinationTopLeft","destinationTopRight","destinationBottomRight","destinationBottomLeft","sourceTopLeft","sourceTopRight","sourceBottomRight","sourceBottomLeft","maxSubdivision","Math","max","ceil","addQuad_","leftBound_1","Infinity","forEach","triangle","i","arr","min","source","newTriangle","minX","maxX","bind","Triangulation","a","b","aSrc","bSrc","cSrc","push","target","d","dSrc","sourceQuadExtent","sourceCoverageX","sourceWorldWidth","wrapsX","needsSubdivision","isGlobal","targetQuadExtent","targetCoverageX","isFinite","isNotFinite","center","centerSrc","dx","centerSrcEstimX","dy","centerSrcErrorSquared","abs","bc","bcSrc","da","daSrc","ab","abSrc","cd","cdSrc","addTriangle_","extent","src"],"sourceRoot":"","sources":["../src/reproj/Triangulation.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}