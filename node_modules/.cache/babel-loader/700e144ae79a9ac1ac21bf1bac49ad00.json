{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-clamped-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/es.array.slice.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/Raster\n */\n\n\nimport Disposable from '../Disposable.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ImageCanvas from '../ImageCanvas.js';\nimport ImageLayer from '../layer/Image.js';\nimport ImageSource from './Image.js';\nimport Source from './Source.js';\nimport SourceState from './State.js';\nimport TileLayer from '../layer/Tile.js';\nimport TileQueue from '../TileQueue.js';\nimport TileSource from './Tile.js';\nimport { assign } from '../obj.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { create as createTransform } from '../transform.js';\nimport { equals, getCenter, getHeight, getWidth } from '../extent.js';\nimport { getUid } from '../util.js';\nvar hasImageData = true;\n\ntry {\n  new ImageData(10, 10);\n} catch (_) {\n  hasImageData = false;\n}\n/** @type {CanvasRenderingContext2D} */\n\n\nvar context;\n/**\n * @param {Uint8ClampedArray} data Image data.\n * @param {number} width Number of columns.\n * @param {number} height Number of rows.\n * @return {ImageData} Image data.\n */\n\nexport function newImageData(data, width, height) {\n  if (hasImageData) {\n    return new ImageData(data, width, height);\n  }\n\n  if (!context) {\n    context = document.createElement('canvas').getContext('2d');\n  }\n\n  var imageData = context.createImageData(width, height);\n  imageData.data.set(data);\n  return imageData;\n}\n/**\n * @typedef {Object} MinionData\n * @property {Array<ArrayBuffer>} buffers Array of buffers.\n * @property {Object} meta Operation metadata.\n * @property {boolean} imageOps The operation is an image operation.\n * @property {number} width The width of the image.\n * @property {number} height The height of the image.\n */\n\n/* istanbul ignore next */\n\n/**\n * Create a function for running operations.  This function is serialized for\n * use in a worker.\n * @param {function(Array, Object):*} operation The operation.\n * @return {function(MinionData):ArrayBuffer} A function that takes an object with\n * buffers, meta, imageOps, width, and height properties and returns an array\n * buffer.\n */\n\nfunction createMinion(operation) {\n  var workerHasImageData = true;\n\n  try {\n    new ImageData(10, 10);\n  } catch (_) {\n    workerHasImageData = false;\n  }\n\n  function newWorkerImageData(data, width, height) {\n    if (workerHasImageData) {\n      return new ImageData(data, width, height);\n    } else {\n      return {\n        data: data,\n        width: width,\n        height: height\n      };\n    }\n  }\n\n  return function (data) {\n    // bracket notation for minification support\n    var buffers = data['buffers'];\n    var meta = data['meta'];\n    var imageOps = data['imageOps'];\n    var width = data['width'];\n    var height = data['height'];\n    var numBuffers = buffers.length;\n    var numBytes = buffers[0].byteLength;\n\n    if (imageOps) {\n      var images = new Array(numBuffers);\n\n      for (var b = 0; b < numBuffers; ++b) {\n        images[b] = newWorkerImageData(new Uint8ClampedArray(buffers[b]), width, height);\n      }\n\n      var output_1 = operation(images, meta).data;\n      return output_1.buffer;\n    }\n\n    var output = new Uint8ClampedArray(numBytes);\n    var arrays = new Array(numBuffers);\n    var pixels = new Array(numBuffers);\n\n    for (var b = 0; b < numBuffers; ++b) {\n      arrays[b] = new Uint8ClampedArray(buffers[b]);\n      pixels[b] = [0, 0, 0, 0];\n    }\n\n    for (var i = 0; i < numBytes; i += 4) {\n      for (var j = 0; j < numBuffers; ++j) {\n        var array = arrays[j];\n        pixels[j][0] = array[i];\n        pixels[j][1] = array[i + 1];\n        pixels[j][2] = array[i + 2];\n        pixels[j][3] = array[i + 3];\n      }\n\n      var pixel = operation(pixels, meta);\n      output[i] = pixel[0];\n      output[i + 1] = pixel[1];\n      output[i + 2] = pixel[2];\n      output[i + 3] = pixel[3];\n    }\n\n    return output.buffer;\n  };\n}\n/**\n * Create a worker for running operations.\n * @param {ProcessorOptions} config Processor options.\n * @param {function(MessageEvent): void} onMessage Called with a message event.\n * @return {Worker} The worker.\n */\n\n\nfunction createWorker(config, onMessage) {\n  var lib = Object.keys(config.lib || {}).map(function (name) {\n    return 'var ' + name + ' = ' + config.lib[name].toString() + ';';\n  });\n  var lines = lib.concat(['var __minion__ = (' + createMinion.toString() + ')(', config.operation.toString(), ');', 'self.addEventListener(\"message\", function(event) {', '  var buffer = __minion__(event.data);', '  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);', '});']);\n  var worker = new Worker(typeof Blob === 'undefined' ? 'data:text/javascript;base64,' + Buffer.from(lines.join('\\n'), 'binary').toString('base64') : URL.createObjectURL(new Blob(lines, {\n    type: 'text/javascript'\n  })));\n  worker.addEventListener('message', onMessage);\n  return worker;\n}\n/**\n * @typedef {Object} FauxMessageEvent\n * @property {Object} data Message data.\n */\n\n/**\n * Create a faux worker for running operations.\n * @param {ProcessorOptions} config Configuration.\n * @param {function(FauxMessageEvent): void} onMessage Called with a message event.\n * @return {Object} The faux worker.\n */\n\n\nfunction createFauxWorker(config, onMessage) {\n  var minion = createMinion(config.operation);\n  var terminated = false;\n  return {\n    postMessage: function postMessage(data) {\n      setTimeout(function () {\n        if (terminated) {\n          return;\n        }\n\n        onMessage({\n          data: {\n            buffer: minion(data),\n            meta: data['meta']\n          }\n        });\n      }, 0);\n    },\n    terminate: function terminate() {\n      terminated = true;\n    }\n  };\n}\n/**\n * @typedef {function(Error, ImageData, (Object|Array<Object>)): void} JobCallback\n */\n\n/**\n * @typedef {Object} Job\n * @property {Object} meta Job metadata.\n * @property {Array<ImageData>} inputs Array of input data.\n * @property {JobCallback} callback Called when the job is complete.\n */\n\n/**\n * @typedef {Object} ProcessorOptions\n * @property {number} threads Number of workers to spawn.\n * @property {Operation} operation The operation.\n * @property {Object<string, Function>} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} queue The number of queued jobs to allow.\n * @property {boolean} [imageOps=false] Pass all the image data to the operation instead of a single pixel.\n */\n\n/**\n * @classdesc\n * A processor runs pixel or image operations in workers.\n */\n\n\nvar Processor =\n/** @class */\nfunction (_super) {\n  __extends(Processor, _super);\n  /**\n   * @param {ProcessorOptions} config Configuration.\n   */\n\n\n  function Processor(config) {\n    var _this = _super.call(this) || this;\n\n    _this._imageOps = !!config.imageOps;\n    var threads;\n\n    if (config.threads === 0) {\n      threads = 0;\n    } else if (_this._imageOps) {\n      threads = 1;\n    } else {\n      threads = config.threads || 1;\n    }\n    /**\n     * @type {Array<Worker>}\n     */\n\n\n    var workers = new Array(threads);\n\n    if (threads) {\n      for (var i = 0; i < threads; ++i) {\n        workers[i] = createWorker(config, _this._onWorkerMessage.bind(_this, i));\n      }\n    } else {\n      workers[0] = createFauxWorker(config, _this._onWorkerMessage.bind(_this, 0));\n    }\n\n    _this._workers = workers;\n    /**\n     * @type {Array<Job>}\n     * @private\n     */\n\n    _this._queue = [];\n    _this._maxQueueLength = config.queue || Infinity;\n    _this._running = 0;\n    /**\n     * @type {Object<number, any>}\n     * @private\n     */\n\n    _this._dataLookup = {};\n    /**\n     * @type {Job}\n     * @private\n     */\n\n    _this._job = null;\n    return _this;\n  }\n  /**\n   * Run operation on input data.\n   * @param {Array<ImageData>} inputs Array of image data.\n   * @param {Object} meta A user data object.  This is passed to all operations\n   *     and must be serializable.\n   * @param {function(Error, ImageData, Object): void} callback Called when work\n   *     completes.  The first argument is any error.  The second is the ImageData\n   *     generated by operations.  The third is the user data object.\n   */\n\n\n  Processor.prototype.process = function (inputs, meta, callback) {\n    this._enqueue({\n      inputs: inputs,\n      meta: meta,\n      callback: callback\n    });\n\n    this._dispatch();\n  };\n  /**\n   * Add a job to the queue.\n   * @param {Job} job The job.\n   */\n\n\n  Processor.prototype._enqueue = function (job) {\n    this._queue.push(job);\n\n    while (this._queue.length > this._maxQueueLength) {\n      this._queue.shift().callback(null, null);\n    }\n  };\n  /**\n   * Dispatch a job.\n   */\n\n\n  Processor.prototype._dispatch = function () {\n    if (this._running || this._queue.length === 0) {\n      return;\n    }\n\n    var job = this._queue.shift();\n\n    this._job = job;\n    var width = job.inputs[0].width;\n    var height = job.inputs[0].height;\n    var buffers = job.inputs.map(function (input) {\n      return input.data.buffer;\n    });\n    var threads = this._workers.length;\n    this._running = threads;\n\n    if (threads === 1) {\n      this._workers[0].postMessage({\n        buffers: buffers,\n        meta: job.meta,\n        imageOps: this._imageOps,\n        width: width,\n        height: height\n      }, buffers);\n\n      return;\n    }\n\n    var length = job.inputs[0].data.length;\n    var segmentLength = 4 * Math.ceil(length / 4 / threads);\n\n    for (var i = 0; i < threads; ++i) {\n      var offset = i * segmentLength;\n      var slices = [];\n\n      for (var j = 0, jj = buffers.length; j < jj; ++j) {\n        slices.push(buffers[j].slice(offset, offset + segmentLength));\n      }\n\n      this._workers[i].postMessage({\n        buffers: slices,\n        meta: job.meta,\n        imageOps: this._imageOps,\n        width: width,\n        height: height\n      }, slices);\n    }\n  };\n  /**\n   * Handle messages from the worker.\n   * @param {number} index The worker index.\n   * @param {MessageEvent} event The message event.\n   */\n\n\n  Processor.prototype._onWorkerMessage = function (index, event) {\n    if (this.disposed) {\n      return;\n    }\n\n    this._dataLookup[index] = event.data;\n    --this._running;\n\n    if (this._running === 0) {\n      this._resolveJob();\n    }\n  };\n  /**\n   * Resolve a job.  If there are no more worker threads, the processor callback\n   * will be called.\n   */\n\n\n  Processor.prototype._resolveJob = function () {\n    var job = this._job;\n    var threads = this._workers.length;\n    var data, meta;\n\n    if (threads === 1) {\n      data = new Uint8ClampedArray(this._dataLookup[0]['buffer']);\n      meta = this._dataLookup[0]['meta'];\n    } else {\n      var length_1 = job.inputs[0].data.length;\n      data = new Uint8ClampedArray(length_1);\n      meta = new Array(threads);\n      var segmentLength = 4 * Math.ceil(length_1 / 4 / threads);\n\n      for (var i = 0; i < threads; ++i) {\n        var buffer = this._dataLookup[i]['buffer'];\n        var offset = i * segmentLength;\n        data.set(new Uint8ClampedArray(buffer), offset);\n        meta[i] = this._dataLookup[i]['meta'];\n      }\n    }\n\n    this._job = null;\n    this._dataLookup = {};\n    job.callback(null, newImageData(data, job.inputs[0].width, job.inputs[0].height), meta);\n\n    this._dispatch();\n  };\n  /**\n   * Terminate all workers associated with the processor.\n   */\n\n\n  Processor.prototype.disposeInternal = function () {\n    for (var i = 0; i < this._workers.length; ++i) {\n      this._workers[i].terminate();\n    }\n\n    this._workers.length = 0;\n  };\n\n  return Processor;\n}(Disposable);\n\nexport { Processor };\n/**\n * A function that takes an array of input data, performs some operation, and\n * returns an array of output data.\n * For `pixel` type operations, the function will be called with an array of\n * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the\n * range of 0 - 255. It should return a single pixel array.\n * For `'image'` type operations, functions will be called with an array of\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)\n * and should return a single\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData).\n * The operations\n * are called with a second \"data\" argument, which can be used for storage.  The\n * data object is accessible from raster events, where it can be initialized in\n * \"beforeoperations\" and accessed again in \"afteroperations\".\n *\n * @typedef {function((Array<Array<number>>|Array<ImageData>), Object):\n *     (Array<number>|ImageData)} Operation\n */\n\n/**\n * @enum {string}\n */\n\nvar RasterEventType = {\n  /**\n   * Triggered before operations are run.  Listeners will receive an event object with\n   * a `data` property that can be used to make data available to operations.\n   * @event module:ol/source/Raster.RasterSourceEvent#beforeoperations\n   * @api\n   */\n  BEFOREOPERATIONS: 'beforeoperations',\n\n  /**\n   * Triggered after operations are run.  Listeners will receive an event object with\n   * a `data` property.  If more than one thread is used, `data` will be an array of\n   * objects.  If a single thread is used, `data` will be a single object.\n   * @event module:ol/source/Raster.RasterSourceEvent#afteroperations\n   * @api\n   */\n  AFTEROPERATIONS: 'afteroperations'\n};\n/**\n * Raster operation type. Supported values are `'pixel'` and `'image'`.\n * @enum {string}\n */\n\nvar RasterOperationType = {\n  PIXEL: 'pixel',\n  IMAGE: 'image'\n};\n/**\n * @typedef {import(\"./Image.js\").ImageSourceEventTypes|'beforeoperations'|'afteroperations'} RasterSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Raster~RasterSource} instances are instances of this\n * type.\n */\n\nvar RasterSourceEvent =\n/** @class */\nfunction (_super) {\n  __extends(RasterSourceEvent, _super);\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n   * @param {Object|Array<Object>} data An object made available to operations.  For \"afteroperations\" evenets\n   * this will be an array of objects if more than one thread is used.\n   */\n\n\n  function RasterSourceEvent(type, frameState, data) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The raster extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n\n\n    _this.extent = frameState.extent;\n    /**\n     * The pixel resolution (map units per pixel).\n     * @type {number}\n     * @api\n     */\n\n    _this.resolution = frameState.viewState.resolution / frameState.pixelRatio;\n    /**\n     * An object made available to all operations.  This can be used by operations\n     * as a storage object (e.g. for calculating statistics).\n     * @type {Object}\n     * @api\n     */\n\n    _this.data = data;\n    return _this;\n  }\n\n  return RasterSourceEvent;\n}(Event);\n\nexport { RasterSourceEvent };\n/**\n * @typedef {Object} Options\n * @property {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources Input\n * sources or layers.  For vector data, use an VectorImage layer.\n * @property {Operation} [operation] Raster operation.\n * The operation will be called with data from input sources\n * and the output will be assigned to the raster source.\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} [threads] By default, operations will be run in a single worker thread.\n * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can\n * be run in multiple worker threads.  Note that there is additional overhead in\n * transferring data to multiple workers, and that depending on the user's\n * system, it may not be possible to parallelize the work.\n * @property {RasterOperationType} [operationType='pixel'] Operation type.\n * Supported values are `'pixel'` and `'image'`.  By default,\n * `'pixel'` operations are assumed, and operations will be called with an\n * array of pixels from input sources.  If set to `'image'`, operations will\n * be called with an array of ImageData objects from input sources.\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Image.js\").ImageSourceEventTypes, import(\"./Image.js\").ImageSourceEvent, Return> &\n *   import(\"../Observable\").OnSignature<RasterSourceEventTypes, RasterSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |RasterSourceEventTypes, Return>} RasterSourceOnSignature\n */\n\n/**\n * @classdesc\n * A source that transforms data from any number of input sources using an\n * {@link module:ol/source/Raster~Operation} function to transform input pixel values into\n * output pixel values.\n *\n * @fires module:ol/source/Raster.RasterSourceEvent\n * @api\n */\n\nvar RasterSource =\n/** @class */\nfunction (_super) {\n  __extends(RasterSource, _super);\n  /**\n   * @param {Options} options Options.\n   */\n\n\n  function RasterSource(options) {\n    var _this = _super.call(this, {\n      projection: null\n    }) || this;\n    /***\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {RasterSourceOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @private\n     * @type {Processor}\n     */\n\n    _this.processor_ = null;\n    /**\n     * @private\n     * @type {RasterOperationType}\n     */\n\n    _this.operationType_ = options.operationType !== undefined ? options.operationType : RasterOperationType.PIXEL;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.threads_ = options.threads !== undefined ? options.threads : 1;\n    /**\n     * @private\n     * @type {Array<import(\"../layer/Layer.js\").default>}\n     */\n\n    _this.layers_ = createLayers(options.sources);\n\n    var changed = _this.changed.bind(_this);\n\n    for (var i = 0, ii = _this.layers_.length; i < ii; ++i) {\n      _this.layers_[i].addEventListener(EventType.CHANGE, changed);\n    }\n    /**\n     * @private\n     * @type {import(\"../TileQueue.js\").default}\n     */\n\n\n    _this.tileQueue_ = new TileQueue(function () {\n      return 1;\n    }, _this.changed.bind(_this));\n    /**\n     * The most recently requested frame state.\n     * @type {import(\"../PluggableMap.js\").FrameState}\n     * @private\n     */\n\n    _this.requestedFrameState_;\n    /**\n     * The most recently rendered image canvas.\n     * @type {import(\"../ImageCanvas.js\").default}\n     * @private\n     */\n\n    _this.renderedImageCanvas_ = null;\n    /**\n     * The most recently rendered revision.\n     * @type {number}\n     */\n\n    _this.renderedRevision_;\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").FrameState}\n     */\n\n    _this.frameState_ = {\n      animate: false,\n      coordinateToPixelTransform: createTransform(),\n      declutterTree: null,\n      extent: null,\n      index: 0,\n      layerIndex: 0,\n      layerStatesArray: getLayerStatesArray(_this.layers_),\n      pixelRatio: 1,\n      pixelToCoordinateTransform: createTransform(),\n      postRenderFunctions: [],\n      size: [0, 0],\n      tileQueue: _this.tileQueue_,\n      time: Date.now(),\n      usedTiles: {},\n      viewState:\n      /** @type {import(\"../View.js\").State} */\n      {\n        rotation: 0\n      },\n      viewHints: [],\n      wantedTiles: {},\n      mapId: getUid(_this),\n      renderTargets: {}\n    };\n\n    _this.setAttributions(function (frameState) {\n      var attributions = [];\n\n      for (var index = 0, iMax = options.sources.length; index < iMax; ++index) {\n        var sourceOrLayer = options.sources[index];\n        var source = sourceOrLayer instanceof Source ? sourceOrLayer : sourceOrLayer.getSource();\n        var attributionGetter = source.getAttributions();\n\n        if (typeof attributionGetter === 'function') {\n          var sourceAttribution = attributionGetter(frameState);\n          attributions.push.apply(attributions, sourceAttribution);\n        }\n      }\n\n      return attributions.length !== 0 ? attributions : null;\n    });\n\n    if (options.operation !== undefined) {\n      _this.setOperation(options.operation, options.lib);\n    }\n\n    return _this;\n  }\n  /**\n   * Set the operation.\n   * @param {Operation} operation New operation.\n   * @param {Object} [opt_lib] Functions that will be available to operations run\n   *     in a worker.\n   * @api\n   */\n\n\n  RasterSource.prototype.setOperation = function (operation, opt_lib) {\n    if (this.processor_) {\n      this.processor_.dispose();\n    }\n\n    this.processor_ = new Processor({\n      operation: operation,\n      imageOps: this.operationType_ === RasterOperationType.IMAGE,\n      queue: 1,\n      lib: opt_lib,\n      threads: this.threads_\n    });\n    this.changed();\n  };\n  /**\n   * Update the stored frame state.\n   * @param {import(\"../extent.js\").Extent} extent The view extent (in map units).\n   * @param {number} resolution The view resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n   * @return {import(\"../PluggableMap.js\").FrameState} The updated frame state.\n   * @private\n   */\n\n\n  RasterSource.prototype.updateFrameState_ = function (extent, resolution, projection) {\n    var frameState =\n    /** @type {import(\"../PluggableMap.js\").FrameState} */\n    assign({}, this.frameState_);\n    frameState.viewState =\n    /** @type {import(\"../View.js\").State} */\n    assign({}, frameState.viewState);\n    var center = getCenter(extent);\n    frameState.extent = extent.slice();\n    frameState.size[0] = Math.round(getWidth(extent) / resolution);\n    frameState.size[1] = Math.round(getHeight(extent) / resolution);\n    frameState.time = Date.now();\n    var viewState = frameState.viewState;\n    viewState.center = center;\n    viewState.projection = projection;\n    viewState.resolution = resolution;\n    return frameState;\n  };\n  /**\n   * Determine if all sources are ready.\n   * @return {boolean} All sources are ready.\n   * @private\n   */\n\n\n  RasterSource.prototype.allSourcesReady_ = function () {\n    var ready = true;\n    var source;\n\n    for (var i = 0, ii = this.layers_.length; i < ii; ++i) {\n      source = this.layers_[i].getSource();\n\n      if (source.getState() !== SourceState.READY) {\n        ready = false;\n        break;\n      }\n    }\n\n    return ready;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\n   */\n\n\n  RasterSource.prototype.getImage = function (extent, resolution, pixelRatio, projection) {\n    if (!this.allSourcesReady_()) {\n      return null;\n    }\n\n    var frameState = this.updateFrameState_(extent, resolution, projection);\n    this.requestedFrameState_ = frameState; // check if we can't reuse the existing ol/ImageCanvas\n\n    if (this.renderedImageCanvas_) {\n      var renderedResolution = this.renderedImageCanvas_.getResolution();\n      var renderedExtent = this.renderedImageCanvas_.getExtent();\n\n      if (resolution !== renderedResolution || !equals(extent, renderedExtent)) {\n        this.renderedImageCanvas_ = null;\n      }\n    }\n\n    if (!this.renderedImageCanvas_ || this.getRevision() !== this.renderedRevision_) {\n      this.processSources_();\n    }\n\n    frameState.tileQueue.loadMoreTiles(16, 16);\n\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    }\n\n    return this.renderedImageCanvas_;\n  };\n  /**\n   * Start processing source data.\n   * @private\n   */\n\n\n  RasterSource.prototype.processSources_ = function () {\n    var frameState = this.requestedFrameState_;\n    var len = this.layers_.length;\n    var imageDatas = new Array(len);\n\n    for (var i = 0; i < len; ++i) {\n      frameState.layerIndex = i;\n      var imageData = getImageData(this.layers_[i], frameState);\n\n      if (imageData) {\n        imageDatas[i] = imageData;\n      } else {\n        return;\n      }\n    }\n\n    var data = {};\n    this.dispatchEvent(new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data));\n    this.processor_.process(imageDatas, data, this.onWorkerComplete_.bind(this, frameState));\n  };\n  /**\n   * Called when pixel processing is complete.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n   * @param {Error} err Any error during processing.\n   * @param {ImageData} output The output image data.\n   * @param {Object|Array<Object>} data The user data (or an array if more than one thread).\n   * @private\n   */\n\n\n  RasterSource.prototype.onWorkerComplete_ = function (frameState, err, output, data) {\n    if (err || !output) {\n      return;\n    } // do nothing if extent or resolution changed\n\n\n    var extent = frameState.extent;\n    var resolution = frameState.viewState.resolution;\n\n    if (resolution !== this.requestedFrameState_.viewState.resolution || !equals(extent, this.requestedFrameState_.extent)) {\n      return;\n    }\n\n    var context;\n\n    if (this.renderedImageCanvas_) {\n      context = this.renderedImageCanvas_.getImage().getContext('2d');\n    } else {\n      var width = Math.round(getWidth(extent) / resolution);\n      var height = Math.round(getHeight(extent) / resolution);\n      context = createCanvasContext2D(width, height);\n      this.renderedImageCanvas_ = new ImageCanvas(extent, resolution, 1, context.canvas);\n    }\n\n    context.putImageData(output, 0, 0);\n    this.changed();\n    this.renderedRevision_ = this.getRevision();\n    this.dispatchEvent(new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data));\n\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    }\n  };\n\n  RasterSource.prototype.disposeInternal = function () {\n    if (this.processor_) {\n      this.processor_.dispose();\n    }\n\n    _super.prototype.disposeInternal.call(this);\n  };\n\n  return RasterSource;\n}(ImageSource);\n/**\n * Clean up and unregister the worker.\n * @function\n * @api\n */\n\n\nRasterSource.prototype.dispose;\n/**\n * A reusable canvas context.\n * @type {CanvasRenderingContext2D}\n * @private\n */\n\nvar sharedContext = null;\n/**\n * Get image data from a layer.\n * @param {import(\"../layer/Layer.js\").default} layer Layer to render.\n * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n * @return {ImageData} The image data.\n */\n\nfunction getImageData(layer, frameState) {\n  var renderer = layer.getRenderer();\n\n  if (!renderer) {\n    throw new Error('Unsupported layer type: ' + layer);\n  }\n\n  if (!renderer.prepareFrame(frameState)) {\n    return null;\n  }\n\n  var width = frameState.size[0];\n  var height = frameState.size[1];\n\n  if (width === 0 || height === 0) {\n    return null;\n  }\n\n  var container = renderer.renderFrame(frameState, null);\n  var element;\n\n  if (container instanceof HTMLCanvasElement) {\n    element = container;\n  } else {\n    if (container) {\n      element = container.firstElementChild;\n    }\n\n    if (!(element instanceof HTMLCanvasElement)) {\n      throw new Error('Unsupported rendered element: ' + element);\n    }\n\n    if (element.width === width && element.height === height) {\n      var context_1 = element.getContext('2d');\n      return context_1.getImageData(0, 0, width, height);\n    }\n  }\n\n  if (!sharedContext) {\n    sharedContext = createCanvasContext2D(width, height);\n  } else {\n    var canvas = sharedContext.canvas;\n\n    if (canvas.width !== width || canvas.height !== height) {\n      sharedContext = createCanvasContext2D(width, height);\n    } else {\n      sharedContext.clearRect(0, 0, width, height);\n    }\n  }\n\n  sharedContext.drawImage(element, 0, 0, width, height);\n  return sharedContext.getImageData(0, 0, width, height);\n}\n/**\n * Get a list of layer states from a list of layers.\n * @param {Array<import(\"../layer/Layer.js\").default>} layers Layers.\n * @return {Array<import(\"../layer/Layer.js\").State>} The layer states.\n */\n\n\nfunction getLayerStatesArray(layers) {\n  return layers.map(function (layer) {\n    return layer.getLayerState();\n  });\n}\n/**\n * Create layers for all sources.\n * @param {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources The sources.\n * @return {Array<import(\"../layer/Layer.js\").default>} Array of layers.\n */\n\n\nfunction createLayers(sources) {\n  var len = sources.length;\n  var layers = new Array(len);\n\n  for (var i = 0; i < len; ++i) {\n    layers[i] = createLayer(sources[i]);\n  }\n\n  return layers;\n}\n/**\n * Create a layer for the provided source.\n * @param {import(\"./Source.js\").default|import(\"../layer/Layer.js\").default} layerOrSource The layer or source.\n * @return {import(\"../layer/Layer.js\").default} The layer.\n */\n\n\nfunction createLayer(layerOrSource) {\n  // @type {import(\"../layer/Layer.js\").default}\n  var layer;\n\n  if (layerOrSource instanceof Source) {\n    if (layerOrSource instanceof TileSource) {\n      layer = new TileLayer({\n        source: layerOrSource\n      });\n    } else if (layerOrSource instanceof ImageSource) {\n      layer = new ImageLayer({\n        source: layerOrSource\n      });\n    }\n  } else {\n    layer = layerOrSource;\n  }\n\n  return layer;\n}\n\nexport default RasterSource;","map":{"version":3,"mappings":"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","names":["Disposable","Event","EventType","ImageCanvas","ImageLayer","ImageSource","Source","SourceState","TileLayer","TileQueue","TileSource","assign","createCanvasContext2D","create","createTransform","equals","getCenter","getHeight","getWidth","getUid","hasImageData","ImageData","_","context","newImageData","data","width","height","document","createElement","getContext","imageData","createImageData","set","createMinion","operation","workerHasImageData","newWorkerImageData","buffers","meta","imageOps","numBuffers","length","numBytes","byteLength","images","Array","b","Uint8ClampedArray","output_1","buffer","output","arrays","pixels","i","j","array","pixel","createWorker","config","onMessage","lib","Object","keys","map","name","toString","lines","concat","worker","Worker","Blob","Buffer","from","join","URL","createObjectURL","type","addEventListener","createFauxWorker","minion","terminated","postMessage","setTimeout","terminate","__extends","_super","_this","_imageOps","threads","workers","_onWorkerMessage","bind","_workers","_queue","_maxQueueLength","queue","Infinity","_running","_dataLookup","_job","Processor","inputs","callback","_enqueue","_dispatch","job","push","shift","input","segmentLength","Math","ceil","offset","slices","jj","slice","index","event","disposed","_resolveJob","length_1","RasterEventType","BEFOREOPERATIONS","AFTEROPERATIONS","RasterOperationType","PIXEL","IMAGE","frameState","extent","resolution","viewState","pixelRatio","options","projection","on","once","un","processor_","operationType_","operationType","undefined","threads_","layers_","createLayers","sources","changed","ii","CHANGE","tileQueue_","requestedFrameState_","renderedImageCanvas_","renderedRevision_","frameState_","animate","coordinateToPixelTransform","declutterTree","layerIndex","layerStatesArray","getLayerStatesArray","pixelToCoordinateTransform","postRenderFunctions","size","tileQueue","time","Date","now","usedTiles","rotation","viewHints","wantedTiles","mapId","renderTargets","setAttributions","attributions","iMax","sourceOrLayer","source","getSource","attributionGetter","getAttributions","sourceAttribution","apply","setOperation","RasterSource","opt_lib","dispose","center","round","ready","getState","READY","allSourcesReady_","updateFrameState_","renderedResolution","getResolution","renderedExtent","getExtent","getRevision","processSources_","loadMoreTiles","requestAnimationFrame","len","imageDatas","getImageData","dispatchEvent","RasterSourceEvent","process","onWorkerComplete_","err","getImage","canvas","putImageData","disposeInternal","call","prototype","sharedContext","layer","renderer","getRenderer","Error","prepareFrame","container","renderFrame","element","HTMLCanvasElement","firstElementChild","context_1","clearRect","drawImage","layers","getLayerState","createLayer","layerOrSource"],"sourceRoot":"","sources":["../src/source/Raster.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}