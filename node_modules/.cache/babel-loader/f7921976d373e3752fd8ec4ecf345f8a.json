{"ast":null,"code":"/**\n * @module ol/geom/flat/closest\n */\nimport { lerp, squaredDistance as squaredDx } from '../../math.js';\n/**\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\n * dimensions are linearly interpolated.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset1 Offset 1.\n * @param {number} offset2 Offset 2.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n */\n\nfunction assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {\n  var x1 = flatCoordinates[offset1];\n  var y1 = flatCoordinates[offset1 + 1];\n  var dx = flatCoordinates[offset2] - x1;\n  var dy = flatCoordinates[offset2 + 1] - y1;\n  var offset;\n\n  if (dx === 0 && dy === 0) {\n    offset = offset1;\n  } else {\n    var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      offset = offset2;\n    } else if (t > 0) {\n      for (var i = 0; i < stride; ++i) {\n        closestPoint[i] = lerp(flatCoordinates[offset1 + i], flatCoordinates[offset2 + i], t);\n      }\n\n      closestPoint.length = stride;\n      return;\n    } else {\n      offset = offset1;\n    }\n  }\n\n  for (var i = 0; i < stride; ++i) {\n    closestPoint[i] = flatCoordinates[offset + i];\n  }\n\n  closestPoint.length = stride;\n}\n/**\n * Return the squared of the largest distance between any pair of consecutive\n * coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\n\n\nexport function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\n  var x1 = flatCoordinates[offset];\n  var y1 = flatCoordinates[offset + 1];\n\n  for (offset += stride; offset < end; offset += stride) {\n    var x2 = flatCoordinates[offset];\n    var y2 = flatCoordinates[offset + 1];\n    var squaredDelta = squaredDx(x1, y1, x2, y2);\n\n    if (squaredDelta > max) {\n      max = squaredDelta;\n    }\n\n    x1 = x2;\n    y1 = y2;\n  }\n\n  return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\n\nexport function arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max) {\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);\n    offset = end;\n  }\n\n  return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\n\nexport function multiArrayMaxSquaredDelta(flatCoordinates, offset, endss, stride, max) {\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);\n    offset = ends[ends.length - 1];\n  }\n\n  return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\n\nexport function assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n  if (offset == end) {\n    return minSquaredDistance;\n  }\n\n  var i, squaredDistance;\n\n  if (maxDelta === 0) {\n    // All points are identical, so just test the first point.\n    squaredDistance = squaredDx(x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);\n\n    if (squaredDistance < minSquaredDistance) {\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[offset + i];\n      }\n\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n\n  var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n  var index = offset + stride;\n\n  while (index < end) {\n    assignClosest(flatCoordinates, index - stride, index, stride, x, y, tmpPoint);\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n\n      closestPoint.length = stride;\n      index += stride;\n    } else {\n      // Skip ahead multiple points, because we know that all the skipped\n      // points cannot be any closer than the closest point we have found so\n      // far.  We know this because we know how close the current point is, how\n      // close the closest point we have found so far is, and the maximum\n      // distance between consecutive points.  For example, if we're currently\n      // at distance 10, the best we've found so far is 3, and that the maximum\n      // distance between consecutive points is 2, then we'll need to skip at\n      // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\n      // finding a closer point.  We use Math.max(..., 1) to ensure that we\n      // always advance at least one point, to avoid an infinite loop.\n      index += stride * Math.max((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) / maxDelta | 0, 1);\n    }\n  }\n\n  if (isRing) {\n    // Check the closing segment.\n    assignClosest(flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n\n      closestPoint.length = stride;\n    }\n  }\n\n  return minSquaredDistance;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\n\nexport function assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n  var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    minSquaredDistance = assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n    offset = end;\n  }\n\n  return minSquaredDistance;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\n\nexport function assignClosestMultiArrayPoint(flatCoordinates, offset, endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n  var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    minSquaredDistance = assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n    offset = ends[ends.length - 1];\n  }\n\n  return minSquaredDistance;\n}","map":{"version":3,"mappings":"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","names":["lerp","squaredDistance","squaredDx","assignClosest","flatCoordinates","offset1","offset2","stride","x","y","closestPoint","x1","y1","dx","dy","offset","t","i","length","maxSquaredDelta","end","max","x2","y2","squaredDelta","arrayMaxSquaredDelta","ends","ii","multiArrayMaxSquaredDelta","endss","assignClosestPoint","maxDelta","isRing","minSquaredDistance","opt_tmpPoint","tmpPoint","NaN","index","Math","sqrt","assignClosestArrayPoint","assignClosestMultiArrayPoint"],"sourceRoot":"","sources":["../../src/geom/flat/closest.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}