{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.slice.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/Circle\n */\n\n\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { createOrUpdate, forEachCorner, intersects } from '../extent.js';\nimport { deflateCoordinate } from './flat/deflate.js';\nimport { rotate, translate } from './flat/transform.js';\n/**\n * @classdesc\n * Circle geometry.\n *\n * @api\n */\n\nvar Circle =\n/** @class */\nfunction (_super) {\n  __extends(Circle, _super);\n  /**\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   *     For internal use, flat coordinates in combination with `opt_layout` and no\n   *     `opt_radius` are also accepted.\n   * @param {number} [opt_radius] Radius.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n\n\n  function Circle(center, opt_radius, opt_layout) {\n    var _this = _super.call(this) || this;\n\n    if (opt_layout !== undefined && opt_radius === undefined) {\n      _this.setFlatCoordinates(opt_layout, center);\n    } else {\n      var radius = opt_radius ? opt_radius : 0;\n\n      _this.setCenterAndRadius(center, radius, opt_layout);\n    }\n\n    return _this;\n  }\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Circle} Clone.\n   * @api\n   */\n\n\n  Circle.prototype.clone = function () {\n    var circle = new Circle(this.flatCoordinates.slice(), undefined, this.layout);\n    circle.applyProperties(this);\n    return circle;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  Circle.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    var flatCoordinates = this.flatCoordinates;\n    var dx = x - flatCoordinates[0];\n    var dy = y - flatCoordinates[1];\n    var squaredDistance = dx * dx + dy * dy;\n\n    if (squaredDistance < minSquaredDistance) {\n      if (squaredDistance === 0) {\n        for (var i = 0; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      } else {\n        var delta = this.getRadius() / Math.sqrt(squaredDistance);\n        closestPoint[0] = flatCoordinates[0] + delta * dx;\n        closestPoint[1] = flatCoordinates[1] + delta * dy;\n\n        for (var i = 2; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      }\n\n      closestPoint.length = this.stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n\n\n  Circle.prototype.containsXY = function (x, y) {\n    var flatCoordinates = this.flatCoordinates;\n    var dx = x - flatCoordinates[0];\n    var dy = y - flatCoordinates[1];\n    return dx * dx + dy * dy <= this.getRadiusSquared_();\n  };\n  /**\n   * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @return {import(\"../coordinate.js\").Coordinate} Center.\n   * @api\n   */\n\n\n  Circle.prototype.getCenter = function () {\n    return this.flatCoordinates.slice(0, this.stride);\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n\n\n  Circle.prototype.computeExtent = function (extent) {\n    var flatCoordinates = this.flatCoordinates;\n    var radius = flatCoordinates[this.stride] - flatCoordinates[0];\n    return createOrUpdate(flatCoordinates[0] - radius, flatCoordinates[1] - radius, flatCoordinates[0] + radius, flatCoordinates[1] + radius, extent);\n  };\n  /**\n   * Return the radius of the circle.\n   * @return {number} Radius.\n   * @api\n   */\n\n\n  Circle.prototype.getRadius = function () {\n    return Math.sqrt(this.getRadiusSquared_());\n  };\n  /**\n   * @private\n   * @return {number} Radius squared.\n   */\n\n\n  Circle.prototype.getRadiusSquared_ = function () {\n    var dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];\n    var dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];\n    return dx * dx + dy * dy;\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n\n\n  Circle.prototype.getType = function () {\n    return GeometryType.CIRCLE;\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  Circle.prototype.intersectsExtent = function (extent) {\n    var circleExtent = this.getExtent();\n\n    if (intersects(extent, circleExtent)) {\n      var center = this.getCenter();\n\n      if (extent[0] <= center[0] && extent[2] >= center[0]) {\n        return true;\n      }\n\n      if (extent[1] <= center[1] && extent[3] >= center[1]) {\n        return true;\n      }\n\n      return forEachCorner(extent, this.intersectsCoordinate.bind(this));\n    }\n\n    return false;\n  };\n  /**\n   * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @api\n   */\n\n\n  Circle.prototype.setCenter = function (center) {\n    var stride = this.stride;\n    var radius = this.flatCoordinates[stride] - this.flatCoordinates[0];\n    var flatCoordinates = center.slice();\n    flatCoordinates[stride] = flatCoordinates[0] + radius;\n\n    for (var i = 1; i < stride; ++i) {\n      flatCoordinates[stride + i] = center[i];\n    }\n\n    this.setFlatCoordinates(this.layout, flatCoordinates);\n    this.changed();\n  };\n  /**\n   * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as\n   * number) of the circle.\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} radius Radius.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n\n\n  Circle.prototype.setCenterAndRadius = function (center, radius, opt_layout) {\n    this.setLayout(opt_layout, center, 0);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    /** @type {Array<number>} */\n\n\n    var flatCoordinates = this.flatCoordinates;\n    var offset = deflateCoordinate(flatCoordinates, 0, center, this.stride);\n    flatCoordinates[offset++] = flatCoordinates[0] + radius;\n\n    for (var i = 1, ii = this.stride; i < ii; ++i) {\n      flatCoordinates[offset++] = flatCoordinates[i];\n    }\n\n    flatCoordinates.length = offset;\n    this.changed();\n  };\n\n  Circle.prototype.getCoordinates = function () {\n    return null;\n  };\n\n  Circle.prototype.setCoordinates = function (coordinates, opt_layout) {};\n  /**\n   * Set the radius of the circle. The radius is in the units of the projection.\n   * @param {number} radius Radius.\n   * @api\n   */\n\n\n  Circle.prototype.setRadius = function (radius) {\n    this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;\n    this.changed();\n  };\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n\n\n  Circle.prototype.rotate = function (angle, anchor) {\n    var center = this.getCenter();\n    var stride = this.getStride();\n    this.setCenter(rotate(center, 0, center.length, stride, angle, anchor, center));\n    this.changed();\n  };\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n\n\n  Circle.prototype.translate = function (deltaX, deltaY) {\n    var center = this.getCenter();\n    var stride = this.getStride();\n    this.setCenter(translate(center, 0, center.length, stride, deltaX, deltaY, center));\n    this.changed();\n  };\n\n  return Circle;\n}(SimpleGeometry);\n/**\n * Transform each coordinate of the circle from one coordinate reference system\n * to another. The geometry is modified in place.\n * If you do not want the geometry modified in place, first clone() it and\n * then use this function on the clone.\n *\n * Internally a circle is currently represented by two points: the center of\n * the circle `[cx, cy]`, and the point to the right of the circle\n * `[cx + r, cy]`. This `transform` function just transforms these two points.\n * So the resulting geometry is also a circle, and that circle does not\n * correspond to the shape that would be obtained by transforming every point\n * of the original circle.\n *\n * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @return {Circle} This geometry.  Note that original geometry is\n *     modified in place.\n * @function\n * @api\n */\n\n\nCircle.prototype.transform;\nexport default Circle;","map":{"version":3,"mappings":"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","names":["GeometryType","SimpleGeometry","createOrUpdate","forEachCorner","intersects","deflateCoordinate","rotate","translate","__extends","center","opt_radius","opt_layout","_super","undefined","_this","setFlatCoordinates","radius","setCenterAndRadius","Circle","circle","flatCoordinates","slice","layout","applyProperties","x","y","closestPoint","minSquaredDistance","dx","dy","squaredDistance","i","stride","delta","getRadius","Math","sqrt","length","getRadiusSquared_","extent","CIRCLE","circleExtent","getExtent","getCenter","intersectsCoordinate","bind","changed","setLayout","offset","ii","coordinates","angle","anchor","getStride","setCenter","deltaX","deltaY","prototype","transform"],"sourceRoot":"","sources":["../src/geom/Circle.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}