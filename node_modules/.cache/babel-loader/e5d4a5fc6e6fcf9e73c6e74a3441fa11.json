{"ast":null,"code":"import \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.slice.js\";\n\n/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport TextPlacement from './TextPlacement.js';\nimport { toSize } from '../size.js';\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\n\nvar DEFAULT_FILL_COLOR = '#333';\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS 'font' value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is '10px sans-serif'\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {import(\"./TextPlacement.js\").default|string} [placement='point'] Text placement.\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\n * **Note:** Rich text is not supported for the immediate rendering API.\n * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.\n * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',\n * 'hanging', 'ideographic'.\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\n\nvar Text =\n/** @class */\nfunction () {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function Text(opt_options) {\n    var options = opt_options || {};\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.font_ = options.font;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.rotation_ = options.rotation;\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n\n    this.rotateWithView_ = options.rotateWithView;\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size|undefined}\n     */\n\n    this.scale_ = options.scale;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\n    /**\n     * @private\n     * @type {string|Array<string>|undefined}\n     */\n\n    this.text_ = options.text;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.textAlign_ = options.textAlign;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.textBaseline_ = options.textBaseline;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n\n    this.fill_ = options.fill !== undefined ? options.fill : new Fill({\n      color: DEFAULT_FILL_COLOR\n    });\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n    /**\n     * @private\n     * @type {import(\"./TextPlacement.js\").default|string}\n     */\n\n    this.placement_ = options.placement !== undefined ? options.placement : TextPlacement.POINT;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.overflow_ = !!options.overflow;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n\n    this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n\n    this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n\n    this.padding_ = options.padding === undefined ? null : options.padding;\n  }\n  /**\n   * Clones the style.\n   * @return {Text} The cloned style.\n   * @api\n   */\n\n\n  Text.prototype.clone = function () {\n    var scale = this.getScale();\n    return new Text({\n      font: this.getFont(),\n      placement: this.getPlacement(),\n      maxAngle: this.getMaxAngle(),\n      overflow: this.getOverflow(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      text: this.getText(),\n      textAlign: this.getTextAlign(),\n      textBaseline: this.getTextBaseline(),\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      offsetX: this.getOffsetX(),\n      offsetY: this.getOffsetY(),\n      backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,\n      backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined,\n      padding: this.getPadding() || undefined\n    });\n  };\n  /**\n   * Get the `overflow` configuration.\n   * @return {boolean} Let text overflow the length of the path they follow.\n   * @api\n   */\n\n\n  Text.prototype.getOverflow = function () {\n    return this.overflow_;\n  };\n  /**\n   * Get the font name.\n   * @return {string|undefined} Font.\n   * @api\n   */\n\n\n  Text.prototype.getFont = function () {\n    return this.font_;\n  };\n  /**\n   * Get the maximum angle between adjacent characters.\n   * @return {number} Angle in radians.\n   * @api\n   */\n\n\n  Text.prototype.getMaxAngle = function () {\n    return this.maxAngle_;\n  };\n  /**\n   * Get the label placement.\n   * @return {import(\"./TextPlacement.js\").default|string} Text placement.\n   * @api\n   */\n\n\n  Text.prototype.getPlacement = function () {\n    return this.placement_;\n  };\n  /**\n   * Get the x-offset for the text.\n   * @return {number} Horizontal text offset.\n   * @api\n   */\n\n\n  Text.prototype.getOffsetX = function () {\n    return this.offsetX_;\n  };\n  /**\n   * Get the y-offset for the text.\n   * @return {number} Vertical text offset.\n   * @api\n   */\n\n\n  Text.prototype.getOffsetY = function () {\n    return this.offsetY_;\n  };\n  /**\n   * Get the fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n\n\n  Text.prototype.getFill = function () {\n    return this.fill_;\n  };\n  /**\n   * Determine whether the text rotates with the map.\n   * @return {boolean|undefined} Rotate with map.\n   * @api\n   */\n\n\n  Text.prototype.getRotateWithView = function () {\n    return this.rotateWithView_;\n  };\n  /**\n   * Get the text rotation.\n   * @return {number|undefined} Rotation.\n   * @api\n   */\n\n\n  Text.prototype.getRotation = function () {\n    return this.rotation_;\n  };\n  /**\n   * Get the text scale.\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\n   * @api\n   */\n\n\n  Text.prototype.getScale = function () {\n    return this.scale_;\n  };\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n\n\n  Text.prototype.getScaleArray = function () {\n    return this.scaleArray_;\n  };\n  /**\n   * Get the stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n\n\n  Text.prototype.getStroke = function () {\n    return this.stroke_;\n  };\n  /**\n   * Get the text to be rendered.\n   * @return {string|Array<string>|undefined} Text.\n   * @api\n   */\n\n\n  Text.prototype.getText = function () {\n    return this.text_;\n  };\n  /**\n   * Get the text alignment.\n   * @return {string|undefined} Text align.\n   * @api\n   */\n\n\n  Text.prototype.getTextAlign = function () {\n    return this.textAlign_;\n  };\n  /**\n   * Get the text baseline.\n   * @return {string|undefined} Text baseline.\n   * @api\n   */\n\n\n  Text.prototype.getTextBaseline = function () {\n    return this.textBaseline_;\n  };\n  /**\n   * Get the background fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n\n\n  Text.prototype.getBackgroundFill = function () {\n    return this.backgroundFill_;\n  };\n  /**\n   * Get the background stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n\n\n  Text.prototype.getBackgroundStroke = function () {\n    return this.backgroundStroke_;\n  };\n  /**\n   * Get the padding for the text.\n   * @return {Array<number>|null} Padding.\n   * @api\n   */\n\n\n  Text.prototype.getPadding = function () {\n    return this.padding_;\n  };\n  /**\n   * Set the `overflow` property.\n   *\n   * @param {boolean} overflow Let text overflow the path that it follows.\n   * @api\n   */\n\n\n  Text.prototype.setOverflow = function (overflow) {\n    this.overflow_ = overflow;\n  };\n  /**\n   * Set the font.\n   *\n   * @param {string|undefined} font Font.\n   * @api\n   */\n\n\n  Text.prototype.setFont = function (font) {\n    this.font_ = font;\n  };\n  /**\n   * Set the maximum angle between adjacent characters.\n   *\n   * @param {number} maxAngle Angle in radians.\n   * @api\n   */\n\n\n  Text.prototype.setMaxAngle = function (maxAngle) {\n    this.maxAngle_ = maxAngle;\n  };\n  /**\n   * Set the x offset.\n   *\n   * @param {number} offsetX Horizontal text offset.\n   * @api\n   */\n\n\n  Text.prototype.setOffsetX = function (offsetX) {\n    this.offsetX_ = offsetX;\n  };\n  /**\n   * Set the y offset.\n   *\n   * @param {number} offsetY Vertical text offset.\n   * @api\n   */\n\n\n  Text.prototype.setOffsetY = function (offsetY) {\n    this.offsetY_ = offsetY;\n  };\n  /**\n   * Set the text placement.\n   *\n   * @param {import(\"./TextPlacement.js\").default|string} placement Placement.\n   * @api\n   */\n\n\n  Text.prototype.setPlacement = function (placement) {\n    this.placement_ = placement;\n  };\n  /**\n   * Set whether to rotate the text with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n\n\n  Text.prototype.setRotateWithView = function (rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  };\n  /**\n   * Set the fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n\n\n  Text.prototype.setFill = function (fill) {\n    this.fill_ = fill;\n  };\n  /**\n   * Set the rotation.\n   *\n   * @param {number|undefined} rotation Rotation.\n   * @api\n   */\n\n\n  Text.prototype.setRotation = function (rotation) {\n    this.rotation_ = rotation;\n  };\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\n   * @api\n   */\n\n\n  Text.prototype.setScale = function (scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\n  };\n  /**\n   * Set the stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n\n\n  Text.prototype.setStroke = function (stroke) {\n    this.stroke_ = stroke;\n  };\n  /**\n   * Set the text.\n   *\n   * @param {string|undefined} text Text.\n   * @api\n   */\n\n\n  Text.prototype.setText = function (text) {\n    this.text_ = text;\n  };\n  /**\n   * Set the text alignment.\n   *\n   * @param {string|undefined} textAlign Text align.\n   * @api\n   */\n\n\n  Text.prototype.setTextAlign = function (textAlign) {\n    this.textAlign_ = textAlign;\n  };\n  /**\n   * Set the text baseline.\n   *\n   * @param {string|undefined} textBaseline Text baseline.\n   * @api\n   */\n\n\n  Text.prototype.setTextBaseline = function (textBaseline) {\n    this.textBaseline_ = textBaseline;\n  };\n  /**\n   * Set the background fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n\n\n  Text.prototype.setBackgroundFill = function (fill) {\n    this.backgroundFill_ = fill;\n  };\n  /**\n   * Set the background stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n\n\n  Text.prototype.setBackgroundStroke = function (stroke) {\n    this.backgroundStroke_ = stroke;\n  };\n  /**\n   * Set the padding (`[top, right, bottom, left]`).\n   *\n   * @param {Array<number>|null} padding Padding.\n   * @api\n   */\n\n\n  Text.prototype.setPadding = function (padding) {\n    this.padding_ = padding;\n  };\n\n  return Text;\n}();\n\nexport default Text;","map":{"version":3,"mappings":"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","names":["Fill","TextPlacement","toSize","DEFAULT_FILL_COLOR","opt_options","options","font_","font","rotation_","rotation","rotateWithView_","rotateWithView","scale_","scale","scaleArray_","undefined","text_","text","textAlign_","textAlign","textBaseline_","textBaseline","fill_","fill","color","maxAngle_","maxAngle","Math","PI","placement_","placement","POINT","overflow_","overflow","stroke_","stroke","offsetX_","offsetX","offsetY_","offsetY","backgroundFill_","backgroundFill","backgroundStroke_","backgroundStroke","padding_","padding","Text","getScale","getFont","getPlacement","getMaxAngle","getOverflow","getRotation","getRotateWithView","Array","isArray","slice","getText","getTextAlign","getTextBaseline","getFill","clone","getStroke","getOffsetX","getOffsetY","getBackgroundFill","getBackgroundStroke","getPadding"],"sourceRoot":"","sources":["../src/style/Text.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}