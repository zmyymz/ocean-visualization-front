{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/JSONFeature\n */\n\n\nimport FeatureFormat from './Feature.js';\nimport FormatType from './FormatType.js';\nimport { abstract } from '../util.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @abstract\n */\n\nvar JSONFeature =\n/** @class */\nfunction (_super) {\n  __extends(JSONFeature, _super);\n\n  function JSONFeature() {\n    return _super.call(this) || this;\n  }\n  /**\n   * @return {import(\"./FormatType.js\").default} Format.\n   */\n\n\n  JSONFeature.prototype.getType = function () {\n    return FormatType.JSON;\n  };\n  /**\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\n   * read a feature collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n\n\n  JSONFeature.prototype.readFeature = function (source, opt_options) {\n    return this.readFeatureFromObject(getObject(source), this.getReadOptions(source, opt_options));\n  };\n  /**\n   * Read all features.  Works with both a single feature and a feature\n   * collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n\n\n  JSONFeature.prototype.readFeatures = function (source, opt_options) {\n    return this.readFeaturesFromObject(getObject(source), this.getReadOptions(source, opt_options));\n  };\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  JSONFeature.prototype.readFeatureFromObject = function (object, opt_options) {\n    return abstract();\n  };\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n\n\n  JSONFeature.prototype.readFeaturesFromObject = function (object, opt_options) {\n    return abstract();\n  };\n  /**\n   * Read a geometry.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @api\n   */\n\n\n  JSONFeature.prototype.readGeometry = function (source, opt_options) {\n    return this.readGeometryFromObject(getObject(source), this.getReadOptions(source, opt_options));\n  };\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  JSONFeature.prototype.readGeometryFromObject = function (object, opt_options) {\n    return abstract();\n  };\n  /**\n   * Read the projection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n\n\n  JSONFeature.prototype.readProjection = function (source) {\n    return this.readProjectionFromObject(getObject(source));\n  };\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  JSONFeature.prototype.readProjectionFromObject = function (object) {\n    return abstract();\n  };\n  /**\n   * Encode a feature as string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded feature.\n   * @api\n   */\n\n\n  JSONFeature.prototype.writeFeature = function (feature, opt_options) {\n    return JSON.stringify(this.writeFeatureObject(feature, opt_options));\n  };\n  /**\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {Object} Object.\n   */\n\n\n  JSONFeature.prototype.writeFeatureObject = function (feature, opt_options) {\n    return abstract();\n  };\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded features.\n   * @api\n   */\n\n\n  JSONFeature.prototype.writeFeatures = function (features, opt_options) {\n    return JSON.stringify(this.writeFeaturesObject(features, opt_options));\n  };\n  /**\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {Object} Object.\n   */\n\n\n  JSONFeature.prototype.writeFeaturesObject = function (features, opt_options) {\n    return abstract();\n  };\n  /**\n   * Encode a geometry as string.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded geometry.\n   * @api\n   */\n\n\n  JSONFeature.prototype.writeGeometry = function (geometry, opt_options) {\n    return JSON.stringify(this.writeGeometryObject(geometry, opt_options));\n  };\n  /**\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {Object} Object.\n   */\n\n\n  JSONFeature.prototype.writeGeometryObject = function (geometry, opt_options) {\n    return abstract();\n  };\n\n  return JSONFeature;\n}(FeatureFormat);\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {Object} Object.\n */\n\n\nfunction getObject(source) {\n  if (typeof source === 'string') {\n    var object = JSON.parse(source);\n    return object ?\n    /** @type {Object} */\n    object : null;\n  } else if (source !== null) {\n    return source;\n  } else {\n    return null;\n  }\n}\n\nexport default JSONFeature;","map":{"version":3,"mappings":"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","names":["FeatureFormat","FormatType","abstract","__extends","_super","JSONFeature","JSON","source","opt_options","readFeatureFromObject","getObject","getReadOptions","readFeaturesFromObject","object","readGeometryFromObject","readProjectionFromObject","feature","stringify","writeFeatureObject","features","writeFeaturesObject","geometry","writeGeometryObject","parse"],"sourceRoot":"","sources":["../src/format/JSONFeature.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}