{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/XMLFeature\n */\n\n\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\nimport { abstract } from '../util.js';\nimport { extend } from '../array.js';\nimport { getXMLSerializer, isDocument, parse } from '../xml.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for XML feature formats.\n *\n * @abstract\n */\n\nvar XMLFeature =\n/** @class */\nfunction (_super) {\n  __extends(XMLFeature, _super);\n\n  function XMLFeature() {\n    var _this = _super.call(this) || this;\n    /**\n     * @type {XMLSerializer}\n     * @private\n     */\n\n\n    _this.xmlSerializer_ = getXMLSerializer();\n    return _this;\n  }\n  /**\n   * @return {import(\"./FormatType.js\").default} Format.\n   */\n\n\n  XMLFeature.prototype.getType = function () {\n    return FormatType.XML;\n  };\n  /**\n   * Read a single feature.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n\n\n  XMLFeature.prototype.readFeature = function (source, opt_options) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readFeatureFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readFeatureFromDocument(\n      /** @type {Document} */\n      source, opt_options);\n    } else {\n      return this.readFeatureFromNode(\n      /** @type {Element} */\n      source, opt_options);\n    }\n  };\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  XMLFeature.prototype.readFeatureFromDocument = function (doc, opt_options) {\n    var features = this.readFeaturesFromDocument(doc, opt_options);\n\n    if (features.length > 0) {\n      return features[0];\n    } else {\n      return null;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  XMLFeature.prototype.readFeatureFromNode = function (node, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * Read all features from a feature collection.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n\n\n  XMLFeature.prototype.readFeatures = function (source, opt_options) {\n    if (!source) {\n      return [];\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readFeaturesFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readFeaturesFromDocument(\n      /** @type {Document} */\n      source, opt_options);\n    } else {\n      return this.readFeaturesFromNode(\n      /** @type {Element} */\n      source, opt_options);\n    }\n  };\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n\n\n  XMLFeature.prototype.readFeaturesFromDocument = function (doc, opt_options) {\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    var features = [];\n\n    for (var n = doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        extend(features, this.readFeaturesFromNode(\n        /** @type {Element} */\n        n, opt_options));\n      }\n    }\n\n    return features;\n  };\n  /**\n   * @abstract\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n\n\n  XMLFeature.prototype.readFeaturesFromNode = function (node, opt_options) {\n    return abstract();\n  };\n  /**\n   * Read a single geometry from a source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  XMLFeature.prototype.readGeometry = function (source, opt_options) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readGeometryFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readGeometryFromDocument(\n      /** @type {Document} */\n      source, opt_options);\n    } else {\n      return this.readGeometryFromNode(\n      /** @type {Element} */\n      source, opt_options);\n    }\n  };\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  XMLFeature.prototype.readGeometryFromDocument = function (doc, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  XMLFeature.prototype.readGeometryFromNode = function (node, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * Read the projection from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n\n\n  XMLFeature.prototype.readProjection = function (source) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readProjectionFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readProjectionFromDocument(\n      /** @type {Document} */\n      source);\n    } else {\n      return this.readProjectionFromNode(\n      /** @type {Element} */\n      source);\n    }\n  };\n  /**\n   * @param {Document} doc Document.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  XMLFeature.prototype.readProjectionFromDocument = function (doc) {\n    return this.dataProjection;\n  };\n  /**\n   * @param {Element} node Node.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  XMLFeature.prototype.readProjectionFromNode = function (node) {\n    return this.dataProjection;\n  };\n  /**\n   * Encode a feature as string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded feature.\n   */\n\n\n  XMLFeature.prototype.writeFeature = function (feature, opt_options) {\n    var node = this.writeFeatureNode(feature, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  };\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n   * @protected\n   * @return {Node} Node.\n   */\n\n\n  XMLFeature.prototype.writeFeatureNode = function (feature, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Result.\n   * @api\n   */\n\n\n  XMLFeature.prototype.writeFeatures = function (features, opt_options) {\n    var node = this.writeFeaturesNode(features, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  };\n  /**\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n   * @return {Node} Node.\n   */\n\n\n  XMLFeature.prototype.writeFeaturesNode = function (features, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * Encode a geometry as string.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded geometry.\n   */\n\n\n  XMLFeature.prototype.writeGeometry = function (geometry, opt_options) {\n    var node = this.writeGeometryNode(geometry, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  };\n  /**\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n   * @return {Node} Node.\n   */\n\n\n  XMLFeature.prototype.writeGeometryNode = function (geometry, opt_options) {\n    return null; // not implemented\n  };\n\n  return XMLFeature;\n}(FeatureFormat);\n\nexport default XMLFeature;","map":{"version":3,"mappings":"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","names":["FeatureFormat","FormatType","abstract","extend","getXMLSerializer","isDocument","parse","__extends","_super","_this","xmlSerializer_","XMLFeature","XML","source","opt_options","doc","readFeatureFromDocument","readFeatureFromNode","features","readFeaturesFromDocument","length","node","readFeaturesFromNode","n","firstChild","nextSibling","nodeType","Node","ELEMENT_NODE","readGeometryFromDocument","readGeometryFromNode","readProjectionFromDocument","readProjectionFromNode","dataProjection","feature","writeFeatureNode","serializeToString","writeFeaturesNode","geometry","writeGeometryNode"],"sourceRoot":"","sources":["../src/format/XMLFeature.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}