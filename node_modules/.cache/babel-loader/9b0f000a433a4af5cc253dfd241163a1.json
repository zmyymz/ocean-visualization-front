{"ast":null,"code":"import { getDecoder } from './compression/index.js';\nconst defaultPoolSize = typeof navigator !== 'undefined' ? navigator.hardwareConcurrency || 2 : 2;\n/**\n * @module pool\n */\n\n/**\n * Pool for workers to decode chunks of the images.\n */\n\nclass Pool {\n  /**\n   * @constructor\n   * @param {Number} [size] The size of the pool. Defaults to the number of CPUs\n   *                      available. When this parameter is `null` or 0, then the\n   *                      decoding will be done in the main thread.\n   * @param {function(): Worker} [createWorker] A function that creates the decoder worker.\n   * Defaults to a worker with all decoders that ship with geotiff.js. The `createWorker()`\n   * function is expected to return a `Worker` compatible with Web Workers. For code that\n   * runs in Node, [web-worker](https://www.npmjs.com/package/web-worker) is a good choice.\n   *\n   * A worker that uses a custom lzw decoder would look like this `my-custom-worker.js` file:\n   * ```js\n   * import { addDecoder, getDecoder } from 'geotiff';\n   * addDecoder(5, () => import ('./my-custom-lzw').then((m) => m.default));\n   * self.addEventListener('message', async (e) => {\n   *   const { id, fileDirectory, buffer } = e.data;\n   *   const decoder = await getDecoder(fileDirectory);\n   *   const decoded = await decoder.decode(fileDirectory, buffer);\n   *   self.postMessage({ decoded, id }, [decoded]);\n   * });\n   * ```\n   * The way the above code is built into a worker by the `createWorker()` function\n   * depends on the used bundler. For most bundlers, something like this will work:\n   * ```js\n   * function createWorker() {\n   *   return new Worker(new URL('./my-custom-worker.js', import.meta.url));\n   * }\n   * ```\n   */\n  constructor(size = defaultPoolSize, createWorker) {\n    this.workers = null;\n    this._awaitingDecoder = null;\n    this.size = size;\n    this.messageId = 0;\n\n    if (size) {\n      this._awaitingDecoder = createWorker ? Promise.resolve(createWorker) : new Promise(resolve => {\n        import('./worker/decoder.js').then(module => {\n          resolve(module.create);\n        });\n      });\n\n      this._awaitingDecoder.then(create => {\n        this._awaitingDecoder = null;\n        this.workers = [];\n\n        for (let i = 0; i < size; i++) {\n          this.workers.push({\n            worker: create(),\n            idle: true\n          });\n        }\n      });\n    }\n  }\n  /**\n   * Decode the given block of bytes with the set compression method.\n   * @param {ArrayBuffer} buffer the array buffer of bytes to decode.\n   * @returns {Promise<ArrayBuffer>} the decoded result as a `Promise`\n   */\n\n\n  async decode(fileDirectory, buffer) {\n    if (this._awaitingDecoder) {\n      await this._awaitingDecoder;\n    }\n\n    return this.size === 0 ? getDecoder(fileDirectory).then(decoder => decoder.decode(fileDirectory, buffer)) : new Promise(resolve => {\n      const worker = this.workers.find(candidate => candidate.idle) || this.workers[Math.floor(Math.random() * this.size)];\n      worker.idle = false;\n      const id = this.messageId++;\n\n      const onMessage = e => {\n        if (e.data.id === id) {\n          worker.idle = true;\n          resolve(e.data.decoded);\n          worker.worker.removeEventListener('message', onMessage);\n        }\n      };\n\n      worker.worker.addEventListener('message', onMessage);\n      worker.worker.postMessage({\n        fileDirectory,\n        buffer,\n        id\n      }, [buffer]);\n    });\n  }\n\n  destroy() {\n    if (this.workers) {\n      this.workers.forEach(worker => {\n        worker.worker.terminate();\n      });\n      this.workers = null;\n    }\n  }\n\n}\n\nexport default Pool;","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/geotiff/dist-module/pool.js"],"names":["getDecoder","defaultPoolSize","navigator","hardwareConcurrency","Pool","constructor","size","createWorker","workers","_awaitingDecoder","messageId","Promise","resolve","then","module","create","i","push","worker","idle","decode","fileDirectory","buffer","decoder","find","candidate","Math","floor","random","id","onMessage","e","data","decoded","removeEventListener","addEventListener","postMessage","destroy","forEach","terminate"],"mappings":"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","sourcesContent":["import { getDecoder } from './compression/index.js';\n\nconst defaultPoolSize = typeof navigator !== 'undefined' ? (navigator.hardwareConcurrency || 2) : 2;\n\n/**\n * @module pool\n */\n\n/**\n * Pool for workers to decode chunks of the images.\n */\nclass Pool {\n  /**\n   * @constructor\n   * @param {Number} [size] The size of the pool. Defaults to the number of CPUs\n   *                      available. When this parameter is `null` or 0, then the\n   *                      decoding will be done in the main thread.\n   * @param {function(): Worker} [createWorker] A function that creates the decoder worker.\n   * Defaults to a worker with all decoders that ship with geotiff.js. The `createWorker()`\n   * function is expected to return a `Worker` compatible with Web Workers. For code that\n   * runs in Node, [web-worker](https://www.npmjs.com/package/web-worker) is a good choice.\n   *\n   * A worker that uses a custom lzw decoder would look like this `my-custom-worker.js` file:\n   * ```js\n   * import { addDecoder, getDecoder } from 'geotiff';\n   * addDecoder(5, () => import ('./my-custom-lzw').then((m) => m.default));\n   * self.addEventListener('message', async (e) => {\n   *   const { id, fileDirectory, buffer } = e.data;\n   *   const decoder = await getDecoder(fileDirectory);\n   *   const decoded = await decoder.decode(fileDirectory, buffer);\n   *   self.postMessage({ decoded, id }, [decoded]);\n   * });\n   * ```\n   * The way the above code is built into a worker by the `createWorker()` function\n   * depends on the used bundler. For most bundlers, something like this will work:\n   * ```js\n   * function createWorker() {\n   *   return new Worker(new URL('./my-custom-worker.js', import.meta.url));\n   * }\n   * ```\n   */\n  constructor(size = defaultPoolSize, createWorker) {\n    this.workers = null;\n    this._awaitingDecoder = null;\n    this.size = size;\n    this.messageId = 0;\n    if (size) {\n      this._awaitingDecoder = createWorker ? Promise.resolve(createWorker) : new Promise((resolve) => {\n        import('./worker/decoder.js').then((module) => {\n          resolve(module.create);\n        });\n      });\n      this._awaitingDecoder.then((create) => {\n        this._awaitingDecoder = null;\n        this.workers = [];\n        for (let i = 0; i < size; i++) {\n          this.workers.push({ worker: create(), idle: true });\n        }\n      });\n    }\n  }\n\n  /**\n   * Decode the given block of bytes with the set compression method.\n   * @param {ArrayBuffer} buffer the array buffer of bytes to decode.\n   * @returns {Promise<ArrayBuffer>} the decoded result as a `Promise`\n   */\n  async decode(fileDirectory, buffer) {\n    if (this._awaitingDecoder) {\n      await this._awaitingDecoder;\n    }\n    return this.size === 0\n      ? getDecoder(fileDirectory).then((decoder) => decoder.decode(fileDirectory, buffer))\n      : new Promise((resolve) => {\n        const worker = this.workers.find((candidate) => candidate.idle)\n          || this.workers[Math.floor(Math.random() * this.size)];\n        worker.idle = false;\n        const id = this.messageId++;\n        const onMessage = (e) => {\n          if (e.data.id === id) {\n            worker.idle = true;\n            resolve(e.data.decoded);\n            worker.worker.removeEventListener('message', onMessage);\n          }\n        };\n        worker.worker.addEventListener('message', onMessage);\n        worker.worker.postMessage({ fileDirectory, buffer, id }, [buffer]);\n      });\n  }\n\n  destroy() {\n    if (this.workers) {\n      this.workers.forEach((worker) => {\n        worker.worker.terminate();\n      });\n      this.workers = null;\n    }\n  }\n}\n\nexport default Pool;\n"]},"metadata":{},"sourceType":"module"}