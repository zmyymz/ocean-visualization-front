{"ast":null,"code":"import \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n\n/**\n * @module ol/array\n */\n\n/**\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\n * https://github.com/darkskyapp/binary-search\n *\n * @param {Array<*>} haystack Items to search through.\n * @param {*} needle The item to look for.\n * @param {Function} [opt_comparator] Comparator function.\n * @return {number} The index of the item if found, -1 if not.\n */\nexport function binarySearch(haystack, needle, opt_comparator) {\n  var mid, cmp;\n  var comparator = opt_comparator || numberSafeCompareFunction;\n  var low = 0;\n  var high = haystack.length;\n  var found = false;\n\n  while (low < high) {\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */\n    mid = low + (high - low >> 1);\n    cmp = +comparator(haystack[mid], needle);\n\n    if (cmp < 0.0) {\n      /* Too low. */\n      low = mid + 1;\n    } else {\n      /* Key found or too high */\n      high = mid;\n      found = !cmp;\n    }\n  }\n  /* Key not found. */\n\n\n  return found ? low : ~low;\n}\n/**\n * Compare function for array sort that is safe for numbers.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\n\nexport function numberSafeCompareFunction(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n/**\n * Whether the array contains the given object.\n * @param {Array<*>} arr The array to test for the presence of the element.\n * @param {*} obj The object for which to test.\n * @return {boolean} The object is in the array.\n */\n\nexport function includes(arr, obj) {\n  return arr.indexOf(obj) >= 0;\n}\n/**\n * {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution} can use a function\n * of this type to determine which nearest resolution to use.\n *\n * This function takes a `{number}` representing a value between two array entries,\n * a `{number}` representing the value of the nearest higher entry and\n * a `{number}` representing the value of the nearest lower entry\n * as arguments and returns a `{number}`. If a negative number or zero is returned\n * the lower value will be used, if a positive number is returned the higher value\n * will be used.\n * @typedef {function(number, number, number): number} NearestDirectionFunction\n * @api\n */\n\n/**\n * @param {Array<number>} arr Array in descending order.\n * @param {number} target Target.\n * @param {number|NearestDirectionFunction} direction\n *    0 means return the nearest,\n *    > 0 means return the largest nearest,\n *    < 0 means return the smallest nearest.\n * @return {number} Index.\n */\n\nexport function linearFindNearest(arr, target, direction) {\n  var n = arr.length;\n\n  if (arr[0] <= target) {\n    return 0;\n  } else if (target <= arr[n - 1]) {\n    return n - 1;\n  } else {\n    var i = void 0;\n\n    if (direction > 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] < target) {\n          return i - 1;\n        }\n      }\n    } else if (direction < 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] <= target) {\n          return i;\n        }\n      }\n    } else {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] == target) {\n          return i;\n        } else if (arr[i] < target) {\n          if (typeof direction === 'function') {\n            if (direction(target, arr[i - 1], arr[i]) > 0) {\n              return i - 1;\n            } else {\n              return i;\n            }\n          } else if (arr[i - 1] - target < target - arr[i]) {\n            return i - 1;\n          } else {\n            return i;\n          }\n        }\n      }\n    }\n\n    return n - 1;\n  }\n}\n/**\n * @param {Array<*>} arr Array.\n * @param {number} begin Begin index.\n * @param {number} end End index.\n */\n\nexport function reverseSubArray(arr, begin, end) {\n  while (begin < end) {\n    var tmp = arr[begin];\n    arr[begin] = arr[end];\n    arr[end] = tmp;\n    ++begin;\n    --end;\n  }\n}\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.\n * @template VALUE\n */\n\nexport function extend(arr, data) {\n  var extension = Array.isArray(data) ? data : [data];\n  var length = extension.length;\n\n  for (var i = 0; i < length; i++) {\n    arr[arr.length] = extension[i];\n  }\n}\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {VALUE} obj The element to remove.\n * @template VALUE\n * @return {boolean} If the element was removed.\n */\n\nexport function remove(arr, obj) {\n  var i = arr.indexOf(obj);\n  var found = i > -1;\n\n  if (found) {\n    arr.splice(i, 1);\n  }\n\n  return found;\n}\n/**\n * @param {Array<VALUE>} arr The array to search in.\n * @param {function(VALUE, number, ?) : boolean} func The function to compare.\n * @template VALUE\n * @return {VALUE|null} The element found or null.\n */\n\nexport function find(arr, func) {\n  var length = arr.length >>> 0;\n  var value;\n\n  for (var i = 0; i < length; i++) {\n    value = arr[i];\n\n    if (func(value, i, arr)) {\n      return value;\n    }\n  }\n\n  return null;\n}\n/**\n * @param {Array|Uint8ClampedArray} arr1 The first array to compare.\n * @param {Array|Uint8ClampedArray} arr2 The second array to compare.\n * @return {boolean} Whether the two arrays are equal.\n */\n\nexport function equals(arr1, arr2) {\n  var len1 = arr1.length;\n\n  if (len1 !== arr2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < len1; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Sort the passed array such that the relative order of equal elements is preserved.\n * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.\n * @param {Array<*>} arr The array to sort (modifies original).\n * @param {!function(*, *): number} compareFnc Comparison function.\n * @api\n */\n\nexport function stableSort(arr, compareFnc) {\n  var length = arr.length;\n  var tmp = Array(arr.length);\n  var i;\n\n  for (i = 0; i < length; i++) {\n    tmp[i] = {\n      index: i,\n      value: arr[i]\n    };\n  }\n\n  tmp.sort(function (a, b) {\n    return compareFnc(a.value, b.value) || a.index - b.index;\n  });\n\n  for (i = 0; i < arr.length; i++) {\n    arr[i] = tmp[i].value;\n  }\n}\n/**\n * @param {Array<*>} arr The array to search in.\n * @param {Function} func Comparison function.\n * @return {number} Return index.\n */\n\nexport function findIndex(arr, func) {\n  var index;\n  var found = !arr.every(function (el, idx) {\n    index = idx;\n    return !func(el, idx, arr);\n  });\n  return found ? index : -1;\n}\n/**\n * @param {Array<*>} arr The array to test.\n * @param {Function} [opt_func] Comparison function.\n * @param {boolean} [opt_strict] Strictly sorted (default false).\n * @return {boolean} Return index.\n */\n\nexport function isSorted(arr, opt_func, opt_strict) {\n  var compare = opt_func || numberSafeCompareFunction;\n  return arr.every(function (currentVal, index) {\n    if (index === 0) {\n      return true;\n    }\n\n    var res = compare(arr[index - 1], currentVal);\n    return !(res > 0 || opt_strict && res === 0);\n  });\n}","map":{"version":3,"mappings":"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","names":["binarySearch","haystack","needle","opt_comparator","mid","cmp","comparator","numberSafeCompareFunction","low","high","length","found","a","b","includes","arr","obj","indexOf","linearFindNearest","target","direction","n","i","reverseSubArray","begin","end","tmp","extend","data","extension","Array","isArray","remove","splice","find","func","value","equals","arr1","arr2","len1","stableSort","compareFnc","index","sort","findIndex","every","el","idx","isSorted","opt_func","opt_strict","compare","currentVal","res"],"sourceRoot":"","sources":["src/array.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}