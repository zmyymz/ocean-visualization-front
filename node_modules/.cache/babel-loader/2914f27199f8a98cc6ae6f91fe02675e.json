{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/LinearRing\n */\n\n\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestPoint, maxSquaredDelta } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { douglasPeucker } from './flat/simplify.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { linearRing as linearRingArea } from './flat/area.js';\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */\n\nvar LinearRing =\n/** @class */\nfunction (_super) {\n  __extends(LinearRing, _super);\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n\n\n  function LinearRing(coordinates, opt_layout) {\n    var _this = _super.call(this) || this;\n    /**\n     * @private\n     * @type {number}\n     */\n\n\n    _this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.maxDeltaRevision_ = -1;\n\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n      _this.setFlatCoordinates(opt_layout,\n      /** @type {Array<number>} */\n      coordinates);\n    } else {\n      _this.setCoordinates(\n      /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n      coordinates, opt_layout);\n    }\n\n    return _this;\n  }\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LinearRing} Clone.\n   * @api\n   */\n\n\n  LinearRing.prototype.clone = function () {\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  LinearRing.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n\n    return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  };\n  /**\n   * Return the area of the linear ring on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n\n\n  LinearRing.prototype.getArea = function () {\n    return linearRingArea(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * Return the coordinates of the linear ring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n\n\n  LinearRing.prototype.getCoordinates = function () {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LinearRing} Simplified LinearRing.\n   * @protected\n   */\n\n\n  LinearRing.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    return new LinearRing(simplifiedFlatCoordinates, GeometryLayout.XY);\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n\n\n  LinearRing.prototype.getType = function () {\n    return GeometryType.LINEAR_RING;\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  LinearRing.prototype.intersectsExtent = function (extent) {\n    return false;\n  };\n  /**\n   * Set the coordinates of the linear ring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n\n\n  LinearRing.prototype.setCoordinates = function (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n\n  return LinearRing;\n}(SimpleGeometry);\n\nexport default LinearRing;","map":{"version":3,"mappings":"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","names":["GeometryLayout","GeometryType","SimpleGeometry","assignClosestPoint","maxSquaredDelta","closestSquaredDistanceXY","deflateCoordinates","douglasPeucker","inflateCoordinates","linearRing","linearRingArea","__extends","coordinates","opt_layout","_super","_this","maxDelta_","maxDeltaRevision_","undefined","Array","isArray","setFlatCoordinates","setCoordinates","LinearRing","flatCoordinates","slice","layout","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","length","stride","squaredTolerance","simplifiedFlatCoordinates","XY","LINEAR_RING","extent","setLayout","changed"],"sourceRoot":"","sources":["../src/geom/LinearRing.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}