{"ast":null,"code":"/**\n * @module ol/tilegrid/TileGrid\n */\nimport TileRange, { createOrUpdate as createOrUpdateTileRange } from '../TileRange.js';\nimport { DEFAULT_TILE_SIZE } from './common.js';\nimport { assert } from '../asserts.js';\nimport { ceil, clamp, floor } from '../math.js';\nimport { createOrUpdate, getTopLeft } from '../extent.js';\nimport { createOrUpdate as createOrUpdateTileCoord } from '../tilecoord.js';\nimport { isSorted, linearFindNearest } from '../array.js';\nimport { toSize } from '../size.js';\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */\n\nvar tmpTileCoord = [0, 0, 0];\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\n\nvar DECIMALS = 5;\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\n\nvar TileGrid =\n/** @class */\nfunction () {\n  /**\n   * @param {Options} options Tile grid options.\n   */\n  function TileGrid(options) {\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n    /**\n     * @private\n     * @type {!Array<number>}\n     */\n\n    this.resolutions_ = options.resolutions;\n    assert(isSorted(this.resolutions_, function (a, b) {\n      return b - a;\n    }, true), 17); // `resolutions` must be sorted in descending order\n    // check if we've got a consistent zoom factor and origin\n\n    var zoomFactor;\n\n    if (!options.origins) {\n      for (var i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n        if (!zoomFactor) {\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n        } else {\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n            zoomFactor = undefined;\n            break;\n          }\n        }\n      }\n    }\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n\n    this.zoomFactor_ = zoomFactor;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    this.maxZoom = this.resolutions_.length - 1;\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */\n\n    this.origin_ = options.origin !== undefined ? options.origin : null;\n    /**\n     * @private\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\n     */\n\n    this.origins_ = null;\n\n    if (options.origins !== undefined) {\n      this.origins_ = options.origins;\n      assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal\n    }\n\n    var extent = options.extent;\n\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\n      this.origin_ = getTopLeft(extent);\n    }\n\n    assert(!this.origin_ && this.origins_ || this.origin_ && !this.origins_, 18); // Either `origin` or `origins` must be configured, never both\n\n    /**\n     * @private\n     * @type {Array<number|import(\"../size.js\").Size>}\n     */\n\n    this.tileSizes_ = null;\n\n    if (options.tileSizes !== undefined) {\n      this.tileSizes_ = options.tileSizes;\n      assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal\n    }\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n\n\n    this.tileSize_ = options.tileSize !== undefined ? options.tileSize : !this.tileSizes_ ? DEFAULT_TILE_SIZE : null;\n    assert(!this.tileSize_ && this.tileSizes_ || this.tileSize_ && !this.tileSizes_, 22); // Either `tileSize` or `tileSizes` must be configured, never both\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.extent_ = extent !== undefined ? extent : null;\n    /**\n     * @private\n     * @type {Array<import(\"../TileRange.js\").default>}\n     */\n\n    this.fullTileRanges_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.tmpSize_ = [0, 0];\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.tmpExtent_ = [0, 0, 0, 0];\n\n    if (options.sizes !== undefined) {\n      this.fullTileRanges_ = options.sizes.map(function (size, z) {\n        var tileRange = new TileRange(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));\n\n        if (extent) {\n          var restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n        }\n\n        return tileRange;\n      }, this);\n    } else if (extent) {\n      this.calculateTileRanges_(extent);\n    }\n  }\n  /**\n   * Call a function with each tile coordinate for a given extent and zoom level.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} zoom Integer zoom level.\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n   * @api\n   */\n\n\n  TileGrid.prototype.forEachTileCoord = function (extent, zoom, callback) {\n    var tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n\n    for (var i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n      for (var j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n        callback([zoom, i, j]);\n      }\n    }\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {boolean} Callback succeeded.\n   */\n\n\n  TileGrid.prototype.forEachTileCoordParentTileRange = function (tileCoord, callback, opt_tileRange, opt_extent) {\n    var tileRange, x, y;\n    var tileCoordExtent = null;\n    var z = tileCoord[0] - 1;\n\n    if (this.zoomFactor_ === 2) {\n      x = tileCoord[1];\n      y = tileCoord[2];\n    } else {\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n    }\n\n    while (z >= this.minZoom) {\n      if (this.zoomFactor_ === 2) {\n        x = Math.floor(x / 2);\n        y = Math.floor(y / 2);\n        tileRange = createOrUpdateTileRange(x, x, y, y, opt_tileRange);\n      } else {\n        tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\n      }\n\n      if (callback(z, tileRange)) {\n        return true;\n      }\n\n      --z;\n    }\n\n    return false;\n  };\n  /**\n   * Get the extent for this tile grid, if it was configured.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  TileGrid.prototype.getExtent = function () {\n    return this.extent_;\n  };\n  /**\n   * Get the maximum zoom level for the grid.\n   * @return {number} Max zoom.\n   * @api\n   */\n\n\n  TileGrid.prototype.getMaxZoom = function () {\n    return this.maxZoom;\n  };\n  /**\n   * Get the minimum zoom level for the grid.\n   * @return {number} Min zoom.\n   * @api\n   */\n\n\n  TileGrid.prototype.getMinZoom = function () {\n    return this.minZoom;\n  };\n  /**\n   * Get the origin for the grid at the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\n   * @api\n   */\n\n\n  TileGrid.prototype.getOrigin = function (z) {\n    if (this.origin_) {\n      return this.origin_;\n    } else {\n      return this.origins_[z];\n    }\n  };\n  /**\n   * Get the resolution for the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {number} Resolution.\n   * @api\n   */\n\n\n  TileGrid.prototype.getResolution = function (z) {\n    return this.resolutions_[z];\n  };\n  /**\n   * Get the list of resolutions for the tile grid.\n   * @return {Array<number>} Resolutions.\n   * @api\n   */\n\n\n  TileGrid.prototype.getResolutions = function () {\n    return this.resolutions_;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n\n\n  TileGrid.prototype.getTileCoordChildTileRange = function (tileCoord, opt_tileRange, opt_extent) {\n    if (tileCoord[0] < this.maxZoom) {\n      if (this.zoomFactor_ === 2) {\n        var minX = tileCoord[1] * 2;\n        var minY = tileCoord[2] * 2;\n        return createOrUpdateTileRange(minX, minX + 1, minY, minY + 1, opt_tileRange);\n      }\n\n      var tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent || this.tmpExtent_);\n      return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, opt_tileRange);\n    }\n\n    return null;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n\n\n  TileGrid.prototype.getTileRangeForTileCoordAndZ = function (tileCoord, z, opt_tileRange) {\n    if (z > this.maxZoom || z < this.minZoom) {\n      return null;\n    }\n\n    var tileCoordZ = tileCoord[0];\n    var tileCoordX = tileCoord[1];\n    var tileCoordY = tileCoord[2];\n\n    if (z === tileCoordZ) {\n      return createOrUpdateTileRange(tileCoordX, tileCoordY, tileCoordX, tileCoordY, opt_tileRange);\n    }\n\n    if (this.zoomFactor_) {\n      var factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n      var minX = Math.floor(tileCoordX * factor);\n      var minY = Math.floor(tileCoordY * factor);\n\n      if (z < tileCoordZ) {\n        return createOrUpdateTileRange(minX, minX, minY, minY, opt_tileRange);\n      }\n\n      var maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n      var maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, opt_tileRange);\n    }\n\n    var tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\n  };\n  /**\n   * Get the extent for a tile range.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n\n\n  TileGrid.prototype.getTileRangeExtent = function (z, tileRange, opt_extent) {\n    var origin = this.getOrigin(z);\n    var resolution = this.getResolution(z);\n    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    var minX = origin[0] + tileRange.minX * tileSize[0] * resolution;\n    var maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;\n    var minY = origin[1] + tileRange.minY * tileSize[1] * resolution;\n    var maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  };\n  /**\n   * Get a tile range for the given extent and integer zoom level.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary tile range object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n\n\n  TileGrid.prototype.getTileRangeForExtentAndZ = function (extent, z, opt_tileRange) {\n    var tileCoord = tmpTileCoord;\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);\n    var minX = tileCoord[1];\n    var minY = tileCoord[2];\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);\n    return createOrUpdateTileRange(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n   */\n\n\n  TileGrid.prototype.getTileCoordCenter = function (tileCoord) {\n    var origin = this.getOrigin(tileCoord[0]);\n    var resolution = this.getResolution(tileCoord[0]);\n    var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    return [origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution, origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution];\n  };\n  /**\n   * Get the extent of a tile coordinate.\n   *\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  TileGrid.prototype.getTileCoordExtent = function (tileCoord, opt_extent) {\n    var origin = this.getOrigin(tileCoord[0]);\n    var resolution = this.getResolution(tileCoord[0]);\n    var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    var minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n    var minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n    var maxX = minX + tileSize[0] * resolution;\n    var maxY = minY + tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  };\n  /**\n   * Get the tile coordinate for the given map coordinate and resolution.  This\n   * method considers that coordinates that intersect tile boundaries should be\n   * assigned the higher tile coordinate.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n\n\n  TileGrid.prototype.getTileCoordForCoordAndResolution = function (coordinate, resolution, opt_tileCoord) {\n    return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);\n  };\n  /**\n   * Note that this method should not be called for resolutions that correspond\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {number} resolution Resolution (for a non-integer zoom level).\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n\n\n  TileGrid.prototype.getTileCoordForXYAndResolution_ = function (x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {\n    var z = this.getZForResolution(resolution);\n    var scale = resolution / this.getResolution(z);\n    var origin = this.getOrigin(z);\n    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    var tileCoordX = scale * (x - origin[0]) / resolution / tileSize[0];\n    var tileCoordY = scale * (origin[1] - y) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  };\n  /**\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n   * they should have separate implementations.  This method is for integer zoom\n   * levels.  The other method should only be called for resolutions corresponding\n   * to non-integer zoom levels.\n   * @param {number} x Map x coordinate.\n   * @param {number} y Map y coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n\n\n  TileGrid.prototype.getTileCoordForXYAndZ_ = function (x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n    var origin = this.getOrigin(z);\n    var resolution = this.getResolution(z);\n    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    var tileCoordX = (x - origin[0]) / resolution / tileSize[0];\n    var tileCoordY = (origin[1] - y) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  };\n  /**\n   * Get a tile coordinate given a map coordinate and zoom level.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} z Zoom level.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n\n\n  TileGrid.prototype.getTileCoordForCoordAndZ = function (coordinate, z, opt_tileCoord) {\n    return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {number} Tile resolution.\n   */\n\n\n  TileGrid.prototype.getTileCoordResolution = function (tileCoord) {\n    return this.resolutions_[tileCoord[0]];\n  };\n  /**\n   * Get the tile size for a zoom level. The type of the return value matches the\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n   * get an {@link import(\"../size.js\").Size}, run the result through {@link module:ol/size.toSize}.\n   * @param {number} z Z.\n   * @return {number|import(\"../size.js\").Size} Tile size.\n   * @api\n   */\n\n\n  TileGrid.prototype.getTileSize = function (z) {\n    if (this.tileSize_) {\n      return this.tileSize_;\n    } else {\n      return this.tileSizes_[z];\n    }\n  };\n  /**\n   * @param {number} z Zoom level.\n   * @return {import(\"../TileRange.js\").default} Extent tile range for the specified zoom level.\n   */\n\n\n  TileGrid.prototype.getFullTileRange = function (z) {\n    if (!this.fullTileRanges_) {\n      return this.extent_ ? this.getTileRangeForExtentAndZ(this.extent_, z) : null;\n    } else {\n      return this.fullTileRanges_[z];\n    }\n  };\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\n   *     If 0, the nearest resolution will be used.\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\n   *\n   * For example to change tile Z at the midpoint of zoom levels\n   * ```js\n   * function(value, high, low) {\n   *   return value - low * Math.sqrt(high / low);\n   * }\n   * ```\n   * @return {number} Z.\n   * @api\n   */\n\n\n  TileGrid.prototype.getZForResolution = function (resolution, opt_direction) {\n    var z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);\n    return clamp(z, this.minZoom, this.maxZoom);\n  };\n  /**\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n   * @private\n   */\n\n\n  TileGrid.prototype.calculateTileRanges_ = function (extent) {\n    var length = this.resolutions_.length;\n    var fullTileRanges = new Array(length);\n\n    for (var z = this.minZoom; z < length; ++z) {\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n    }\n\n    this.fullTileRanges_ = fullTileRanges;\n  };\n\n  return TileGrid;\n}();\n\nexport default TileGrid;","map":{"version":3,"mappings":"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","names":["TileRange","createOrUpdate","createOrUpdateTileRange","DEFAULT_TILE_SIZE","assert","ceil","clamp","floor","getTopLeft","createOrUpdateTileCoord","isSorted","linearFindNearest","toSize","tmpTileCoord","DECIMALS","options","minZoom","undefined","resolutions_","resolutions","a","b","zoomFactor","origins","i","ii","length","zoomFactor_","maxZoom","origin_","origin","origins_","extent","tileSizes_","tileSizes","tileSize_","tileSize","extent_","fullTileRanges_","tmpSize_","tmpExtent_","sizes","map","size","z","tileRange","Math","min","max","restrictedTileRange","getTileRangeForExtentAndZ","minX","maxX","minY","maxY","calculateTileRanges_","TileGrid","zoom","callback","j","jj","tileCoord","opt_tileRange","opt_extent","x","y","tileCoordExtent","getTileCoordExtent","tileCoordZ","tileCoordX","tileCoordY","factor","pow","getOrigin","resolution","getResolution","getTileSize","getTileCoordForXYAndZ_","coordinate","opt_tileCoord","getTileCoordForXYAndResolution_","reverseIntersectionPolicy","getZForResolution","scale","opt_direction","fullTileRanges","Array"],"sourceRoot":"","sources":["../src/tilegrid/TileGrid.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}