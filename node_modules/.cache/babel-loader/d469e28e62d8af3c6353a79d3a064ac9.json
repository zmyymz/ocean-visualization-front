{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/webgl/PointsLayer\n */\n\n\nimport BaseVector from '../../layer/BaseVector.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport VectorEventType from '../../source/VectorEventType.js';\nimport ViewHint from '../../ViewHint.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport WebGLLayerRenderer, { WebGLWorkerMessageType, colorDecodeId, colorEncodeId } from './Layer.js';\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\nimport { ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER } from '../../webgl.js';\nimport { AttributeType, DefaultUniform } from '../../webgl/Helper.js';\nimport { apply as applyTransform, create as createTransform, makeInverse as makeInverseTransform, multiply as multiplyTransform } from '../../transform.js';\nimport { assert } from '../../asserts.js';\nimport { buffer, createEmpty, equals } from '../../extent.js';\nimport { create as createWebGLWorker } from '../../worker/webgl.js';\nimport { getUid } from '../../util.js';\nimport { listen, unlistenByKey } from '../../events.js';\n/**\n * @typedef {Object} CustomAttribute A description of a custom attribute to be passed on to the GPU, with a value different\n * for each feature.\n * @property {string} name Attribute name.\n * @property {function(import(\"../../Feature\").default, Object<string, *>):number} callback This callback computes the numerical value of the\n * attribute for a given feature (properties are available as 2nd arg for quicker access).\n */\n\n/**\n * @typedef {Object} FeatureCacheItem Object that holds a reference to a feature, its geometry and properties. Used to optimize\n * rebuildBuffers by accessing these objects quicker.\n * @property {import(\"../../Feature\").default} feature Feature\n * @property {Object<string, *>} properties Feature properties\n * @property {import(\"../../geom\").Geometry} geometry Feature geometry\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\n * @property {Array<CustomAttribute>} [attributes] These attributes will be read from the features in the source and then\n * passed to the GPU. The `name` property of each attribute will serve as its identifier:\n *  * In the vertex shader as an `attribute` by prefixing it with `a_`\n *  * In the fragment shader as a `varying` by prefixing it with `v_`\n * Please note that these can only be numerical values.\n * @property {string} vertexShader Vertex shader source, mandatory.\n * @property {string} fragmentShader Fragment shader source, mandatory.\n * @property {string} [hitVertexShader] Vertex shader source for hit detection rendering.\n * @property {string} [hitFragmentShader] Fragment shader source for hit detection rendering.\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * Please note that `u_texture` is reserved for the main texture slot and `u_opacity` is reserved for the layer opacity.\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * WebGL vector renderer optimized for points.\n * All features will be rendered as quads (two triangles forming a square). New data will be flushed to the GPU\n * every time the vector source changes.\n *\n * You need to provide vertex and fragment shaders for rendering. This can be done using\n * {@link module:ol/webgl/ShaderBuilder~ShaderBuilder} utilities. These shaders shall expect a `a_position` attribute\n * containing the screen-space projected center of the quad, as well as a `a_index` attribute\n * whose value (0, 1, 2 or 3) indicates which quad vertex is currently getting processed (see structure below).\n *\n * To include variable attributes in the shaders, you need to declare them using the `attributes` property of\n * the options object like so:\n * ```js\n * new WebGLPointsLayerRenderer(layer, {\n *   attributes: [\n *     {\n *       name: 'size',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *     {\n *       name: 'weight',\n *       callback: function(feature) {\n *         // compute something with the feature\n *       }\n *     },\n *   ],\n *   vertexShader:\n *     // shader using attribute a_weight and a_size\n *   fragmentShader:\n *     // shader using varying v_weight and v_size\n * ```\n *\n * To enable hit detection, you must as well provide dedicated shaders using the `hitVertexShader`\n * and `hitFragmentShader` properties. These shall expect the `a_hitColor` attribute to contain\n * the final color that will have to be output for hit detection to work.\n *\n * The following uniform is used for the main texture: `u_texture`.\n * The following uniform is used for the layer opacity: `u_opacity`.\n *\n * Please note that the main shader output should have premultiplied alpha, otherwise visual anomalies may occur.\n *\n * Points are rendered as quads with the following structure:\n *\n * ```\n *   (u0, v1)      (u1, v1)\n *  [3]----------[2]\n *   |`           |\n *   |  `         |\n *   |    `       |\n *   |      `     |\n *   |        `   |\n *   |          ` |\n *  [0]----------[1]\n *   (u0, v0)      (u1, v0)\n *  ```\n *\n * This uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\n *\n * @api\n */\n\nvar WebGLPointsLayerRenderer =\n/** @class */\nfunction (_super) {\n  __extends(WebGLPointsLayerRenderer, _super);\n  /**\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n   * @param {Options} options Options.\n   */\n\n\n  function WebGLPointsLayerRenderer(layer, options) {\n    var _this = this;\n\n    var uniforms = options.uniforms || {};\n    var projectionMatrixTransform = createTransform();\n    uniforms[DefaultUniform.PROJECTION_MATRIX] = projectionMatrixTransform;\n    _this = _super.call(this, layer, {\n      uniforms: uniforms,\n      postProcesses: options.postProcesses\n    }) || this;\n    _this.ready = false;\n    _this.sourceRevision_ = -1;\n    _this.verticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n    _this.hitVerticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\n    _this.indicesBuffer_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, DYNAMIC_DRAW);\n    /**\n     * @private\n     */\n\n    _this.vertexShader_ = options.vertexShader;\n    /**\n     * @private\n     */\n\n    _this.fragmentShader_ = options.fragmentShader;\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n\n    _this.program_;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.hitDetectionEnabled_ = options.hitFragmentShader && options.hitVertexShader ? true : false;\n    /**\n     * @private\n     */\n\n    _this.hitVertexShader_ = options.hitVertexShader;\n    /**\n     * @private\n     */\n\n    _this.hitFragmentShader_ = options.hitFragmentShader;\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n\n    _this.hitProgram_;\n    var customAttributes = options.attributes ? options.attributes.map(function (attribute) {\n      return {\n        name: 'a_' + attribute.name,\n        size: 1,\n        type: AttributeType.FLOAT\n      };\n    }) : [];\n    /**\n     * A list of attributes used by the renderer. By default only the position and\n     * index of the vertex (0 to 3) are required.\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     */\n\n    _this.attributes = [{\n      name: 'a_position',\n      size: 2,\n      type: AttributeType.FLOAT\n    }, {\n      name: 'a_index',\n      size: 1,\n      type: AttributeType.FLOAT\n    }].concat(customAttributes);\n    /**\n     * A list of attributes used for hit detection.\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n     */\n\n    _this.hitDetectionAttributes = [{\n      name: 'a_position',\n      size: 2,\n      type: AttributeType.FLOAT\n    }, {\n      name: 'a_index',\n      size: 1,\n      type: AttributeType.FLOAT\n    }, {\n      name: 'a_hitColor',\n      size: 4,\n      type: AttributeType.FLOAT\n    }, {\n      name: 'a_featureUid',\n      size: 1,\n      type: AttributeType.FLOAT\n    }].concat(customAttributes);\n    _this.customAttributes = options.attributes ? options.attributes : [];\n    _this.previousExtent_ = createEmpty();\n    /**\n     * This transform is updated on every frame and is the composition of:\n     * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\n     * - current world->screen transform\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n\n    _this.currentTransform_ = projectionMatrixTransform;\n    /**\n     * This transform is updated when buffers are rebuilt and converts world space coordinates to screen space\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n\n    _this.renderTransform_ = createTransform();\n    /**\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n\n    _this.invertRenderTransform_ = createTransform();\n    /**\n     * @type {Float32Array}\n     * @private\n     */\n\n    _this.renderInstructions_ = new Float32Array(0);\n    /**\n     * These instructions are used for hit detection\n     * @type {Float32Array}\n     * @private\n     */\n\n    _this.hitRenderInstructions_ = new Float32Array(0);\n    /**\n     * @type {WebGLRenderTarget}\n     * @private\n     */\n\n    _this.hitRenderTarget_;\n    /**\n     * Keep track of latest message sent to worker\n     * @type {number}\n     * @private\n     */\n\n    _this.generateBuffersRun_ = 0;\n    _this.worker_ = createWebGLWorker();\n\n    _this.worker_.addEventListener('message',\n    /**\n     * @param {*} event Event.\n     * @this {WebGLPointsLayerRenderer}\n     */\n    function (event) {\n      var received = event.data;\n\n      if (received.type === WebGLWorkerMessageType.GENERATE_BUFFERS) {\n        var projectionTransform = received.projectionTransform;\n\n        if (received.hitDetection) {\n          this.hitVerticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n          this.helper.flushBufferData(this.hitVerticesBuffer_);\n        } else {\n          this.verticesBuffer_.fromArrayBuffer(received.vertexBuffer);\n          this.helper.flushBufferData(this.verticesBuffer_);\n        }\n\n        this.indicesBuffer_.fromArrayBuffer(received.indexBuffer);\n        this.helper.flushBufferData(this.indicesBuffer_);\n        this.renderTransform_ = projectionTransform;\n        makeInverseTransform(this.invertRenderTransform_, this.renderTransform_);\n\n        if (received.hitDetection) {\n          this.hitRenderInstructions_ = new Float32Array(event.data.renderInstructions);\n        } else {\n          this.renderInstructions_ = new Float32Array(event.data.renderInstructions);\n\n          if (received.generateBuffersRun === this.generateBuffersRun_) {\n            this.ready = true;\n          }\n        }\n\n        this.getLayer().changed();\n      }\n    }.bind(_this));\n    /**\n     * This object will be updated when the source changes. Key is uid.\n     * @type {Object<string, FeatureCacheItem>}\n     * @private\n     */\n\n\n    _this.featureCache_ = {};\n    /**\n     * Amount of features in the cache.\n     * @type {number}\n     * @private\n     */\n\n    _this.featureCount_ = 0;\n\n    var source = _this.getLayer().getSource();\n\n    _this.sourceListenKeys_ = [listen(source, VectorEventType.ADDFEATURE, _this.handleSourceFeatureAdded_, _this), listen(source, VectorEventType.CHANGEFEATURE, _this.handleSourceFeatureChanged_, _this), listen(source, VectorEventType.REMOVEFEATURE, _this.handleSourceFeatureDelete_, _this), listen(source, VectorEventType.CLEAR, _this.handleSourceFeatureClear_, _this)];\n    source.forEachFeature(function (feature) {\n      this.featureCache_[getUid(feature)] = {\n        feature: feature,\n        properties: feature.getProperties(),\n        geometry: feature.getGeometry()\n      };\n      this.featureCount_++;\n    }.bind(_this));\n    return _this;\n  }\n\n  WebGLPointsLayerRenderer.prototype.afterHelperCreated = function () {\n    this.program_ = this.helper.getProgram(this.fragmentShader_, this.vertexShader_);\n\n    if (this.hitDetectionEnabled_) {\n      this.hitProgram_ = this.helper.getProgram(this.hitFragmentShader_, this.hitVertexShader_);\n      this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);\n    }\n  };\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n\n\n  WebGLPointsLayerRenderer.prototype.handleSourceFeatureAdded_ = function (event) {\n    var feature = event.feature;\n    this.featureCache_[getUid(feature)] = {\n      feature: feature,\n      properties: feature.getProperties(),\n      geometry: feature.getGeometry()\n    };\n    this.featureCount_++;\n  };\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n\n\n  WebGLPointsLayerRenderer.prototype.handleSourceFeatureChanged_ = function (event) {\n    var feature = event.feature;\n    this.featureCache_[getUid(feature)] = {\n      feature: feature,\n      properties: feature.getProperties(),\n      geometry: feature.getGeometry()\n    };\n  };\n  /**\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n\n\n  WebGLPointsLayerRenderer.prototype.handleSourceFeatureDelete_ = function (event) {\n    var feature = event.feature;\n    delete this.featureCache_[getUid(feature)];\n    this.featureCount_--;\n  };\n  /**\n   * @private\n   */\n\n\n  WebGLPointsLayerRenderer.prototype.handleSourceFeatureClear_ = function () {\n    this.featureCache_ = {};\n    this.featureCount_ = 0;\n  };\n  /**\n   * Render the layer.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   */\n\n\n  WebGLPointsLayerRenderer.prototype.renderFrame = function (frameState) {\n    var gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n    var renderCount = this.indicesBuffer_.getSize();\n    this.helper.drawElements(0, renderCount);\n    this.helper.finalizeDraw(frameState, this.dispatchPreComposeEvent, this.dispatchPostComposeEvent);\n    var canvas = this.helper.getCanvas();\n\n    if (this.hitDetectionEnabled_) {\n      this.renderHitDetection(frameState);\n      this.hitRenderTarget_.clearCachedData();\n    }\n\n    this.postRender(gl, frameState);\n    return canvas;\n  };\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n\n\n  WebGLPointsLayerRenderer.prototype.prepareFrameInternal = function (frameState) {\n    var layer = this.getLayer();\n    var vectorSource = layer.getSource();\n    var viewState = frameState.viewState;\n    var viewNotMoving = !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING];\n    var extentChanged = !equals(this.previousExtent_, frameState.extent);\n    var sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\n\n    if (sourceChanged) {\n      this.sourceRevision_ = vectorSource.getRevision();\n    }\n\n    if (viewNotMoving && (extentChanged || sourceChanged)) {\n      var projection = viewState.projection;\n      var resolution = viewState.resolution;\n      var renderBuffer = layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\n      var extent = buffer(frameState.extent, renderBuffer * resolution);\n      vectorSource.loadFeatures(extent, resolution, projection);\n      this.rebuildBuffers_(frameState);\n      this.previousExtent_ = frameState.extent.slice();\n    } // apply the current projection transform with the invert of the one used to fill buffers\n\n\n    this.helper.makeProjectionTransform(frameState, this.currentTransform_);\n    multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\n    this.helper.useProgram(this.program_);\n    this.helper.prepareDraw(frameState); // write new data\n\n    this.helper.bindBuffer(this.verticesBuffer_);\n    this.helper.bindBuffer(this.indicesBuffer_);\n    this.helper.enableAttributes(this.attributes);\n    return true;\n  };\n  /**\n   * Rebuild internal webgl buffers based on current view extent; costly, should not be called too much\n   * @param {import(\"../../PluggableMap\").FrameState} frameState Frame state.\n   * @private\n   */\n\n\n  WebGLPointsLayerRenderer.prototype.rebuildBuffers_ = function (frameState) {\n    // saves the projection transform for the current frame state\n    var projectionTransform = createTransform();\n    this.helper.makeProjectionTransform(frameState, projectionTransform); // here we anticipate the amount of render instructions that we well generate\n    // this can be done since we know that for normal render we only have x, y as base instructions,\n    // and x, y, r, g, b, a and featureUid for hit render instructions\n    // and we also know the amount of custom attributes to append to these\n\n    var totalInstructionsCount = (2 + this.customAttributes.length) * this.featureCount_;\n\n    if (!this.renderInstructions_ || this.renderInstructions_.length !== totalInstructionsCount) {\n      this.renderInstructions_ = new Float32Array(totalInstructionsCount);\n    }\n\n    if (this.hitDetectionEnabled_) {\n      var totalHitInstructionsCount = (7 + this.customAttributes.length) * this.featureCount_;\n\n      if (!this.hitRenderInstructions_ || this.hitRenderInstructions_.length !== totalHitInstructionsCount) {\n        this.hitRenderInstructions_ = new Float32Array(totalHitInstructionsCount);\n      }\n    } // loop on features to fill the buffer\n\n\n    var featureCache, geometry;\n    var tmpCoords = [];\n    var tmpColor = [];\n    var renderIndex = 0;\n    var hitIndex = 0;\n    var hitColor;\n\n    for (var featureUid in this.featureCache_) {\n      featureCache = this.featureCache_[featureUid];\n      geometry =\n      /** @type {import(\"../../geom\").Point} */\n      featureCache.geometry;\n\n      if (!geometry || geometry.getType() !== GeometryType.POINT) {\n        continue;\n      }\n\n      tmpCoords[0] = geometry.getFlatCoordinates()[0];\n      tmpCoords[1] = geometry.getFlatCoordinates()[1];\n      applyTransform(projectionTransform, tmpCoords);\n      hitColor = colorEncodeId(hitIndex + 6, tmpColor);\n      this.renderInstructions_[renderIndex++] = tmpCoords[0];\n      this.renderInstructions_[renderIndex++] = tmpCoords[1]; // for hit detection, the feature uid is saved in the opacity value\n      // and the index of the opacity value is encoded in the color values\n\n      if (this.hitDetectionEnabled_) {\n        this.hitRenderInstructions_[hitIndex++] = tmpCoords[0];\n        this.hitRenderInstructions_[hitIndex++] = tmpCoords[1];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[0];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[1];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[2];\n        this.hitRenderInstructions_[hitIndex++] = hitColor[3];\n        this.hitRenderInstructions_[hitIndex++] = Number(featureUid);\n      } // pushing custom attributes\n\n\n      var value = void 0;\n\n      for (var j = 0; j < this.customAttributes.length; j++) {\n        value = this.customAttributes[j].callback(featureCache.feature, featureCache.properties);\n        this.renderInstructions_[renderIndex++] = value;\n\n        if (this.hitDetectionEnabled_) {\n          this.hitRenderInstructions_[hitIndex++] = value;\n        }\n      }\n    }\n    /** @type {import('./Layer').WebGLWorkerGenerateBuffersMessage} */\n\n\n    var message = {\n      type: WebGLWorkerMessageType.GENERATE_BUFFERS,\n      renderInstructions: this.renderInstructions_.buffer,\n      customAttributesCount: this.customAttributes.length\n    }; // additional properties will be sent back as-is by the worker\n\n    message['projectionTransform'] = projectionTransform;\n    message['generateBuffersRun'] = ++this.generateBuffersRun_;\n    this.ready = false;\n    this.worker_.postMessage(message, [this.renderInstructions_.buffer]);\n    this.renderInstructions_ = null;\n    /** @type {import('./Layer').WebGLWorkerGenerateBuffersMessage} */\n\n    if (this.hitDetectionEnabled_) {\n      var hitMessage = {\n        type: WebGLWorkerMessageType.GENERATE_BUFFERS,\n        renderInstructions: this.hitRenderInstructions_.buffer,\n        customAttributesCount: 5 + this.customAttributes.length\n      };\n      hitMessage['projectionTransform'] = projectionTransform;\n      hitMessage['hitDetection'] = true;\n      this.worker_.postMessage(hitMessage, [this.hitRenderInstructions_.buffer]);\n      this.hitRenderInstructions_ = null;\n    }\n  };\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n\n\n  WebGLPointsLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {\n    assert(this.hitDetectionEnabled_, 66);\n\n    if (!this.hitRenderInstructions_) {\n      return undefined;\n    }\n\n    var pixel = applyTransform(frameState.coordinateToPixelTransform, coordinate.slice());\n    var data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\n    var color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\n    var index = colorDecodeId(color);\n    var opacity = this.hitRenderInstructions_[index];\n    var uid = Math.floor(opacity).toString();\n    var source = this.getLayer().getSource();\n    var feature = source.getFeatureByUid(uid);\n\n    if (feature) {\n      return callback(feature, this.getLayer(), null);\n    }\n\n    return undefined;\n  };\n  /**\n   * Render the hit detection data to the corresponding render target\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState current frame state\n   */\n\n\n  WebGLPointsLayerRenderer.prototype.renderHitDetection = function (frameState) {\n    // skip render entirely if vertex buffers not ready/generated yet\n    if (!this.hitVerticesBuffer_.getSize()) {\n      return;\n    }\n\n    this.hitRenderTarget_.setSize([Math.floor(frameState.size[0] / 2), Math.floor(frameState.size[1] / 2)]);\n    this.helper.useProgram(this.hitProgram_);\n    this.helper.prepareDrawToRenderTarget(frameState, this.hitRenderTarget_, true);\n    this.helper.bindBuffer(this.hitVerticesBuffer_);\n    this.helper.bindBuffer(this.indicesBuffer_);\n    this.helper.enableAttributes(this.hitDetectionAttributes);\n    var renderCount = this.indicesBuffer_.getSize();\n    this.helper.drawElements(0, renderCount);\n  };\n  /**\n   * Clean up.\n   */\n\n\n  WebGLPointsLayerRenderer.prototype.disposeInternal = function () {\n    this.worker_.terminate();\n    this.layer_ = null;\n    this.sourceListenKeys_.forEach(function (key) {\n      unlistenByKey(key);\n    });\n    this.sourceListenKeys_ = null;\n\n    _super.prototype.disposeInternal.call(this);\n  };\n\n  return WebGLPointsLayerRenderer;\n}(WebGLLayerRenderer);\n\nexport default WebGLPointsLayerRenderer;","map":{"version":3,"mappings":"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","names":["BaseVector","GeometryType","VectorEventType","ViewHint","WebGLArrayBuffer","WebGLLayerRenderer","WebGLWorkerMessageType","colorDecodeId","colorEncodeId","WebGLRenderTarget","ARRAY_BUFFER","DYNAMIC_DRAW","ELEMENT_ARRAY_BUFFER","AttributeType","DefaultUniform","apply","applyTransform","create","createTransform","makeInverse","makeInverseTransform","multiply","multiplyTransform","assert","buffer","createEmpty","equals","createWebGLWorker","getUid","listen","unlistenByKey","__extends","layer","options","uniforms","projectionMatrixTransform","PROJECTION_MATRIX","_super","postProcesses","_this","ready","sourceRevision_","verticesBuffer_","hitVerticesBuffer_","indicesBuffer_","vertexShader_","vertexShader","fragmentShader_","fragmentShader","program_","hitDetectionEnabled_","hitFragmentShader","hitVertexShader","hitVertexShader_","hitFragmentShader_","hitProgram_","customAttributes","attributes","map","attribute","name","size","type","FLOAT","concat","hitDetectionAttributes","previousExtent_","currentTransform_","renderTransform_","invertRenderTransform_","renderInstructions_","Float32Array","hitRenderInstructions_","hitRenderTarget_","generateBuffersRun_","worker_","addEventListener","event","received","data","GENERATE_BUFFERS","projectionTransform","hitDetection","fromArrayBuffer","vertexBuffer","helper","flushBufferData","indexBuffer","renderInstructions","generateBuffersRun","getLayer","changed","bind","featureCache_","featureCount_","source","getSource","sourceListenKeys_","ADDFEATURE","handleSourceFeatureAdded_","CHANGEFEATURE","handleSourceFeatureChanged_","REMOVEFEATURE","handleSourceFeatureDelete_","CLEAR","handleSourceFeatureClear_","forEachFeature","feature","properties","getProperties","geometry","getGeometry","WebGLPointsLayerRenderer","getProgram","frameState","gl","getGL","preRender","renderCount","getSize","drawElements","finalizeDraw","dispatchPreComposeEvent","dispatchPostComposeEvent","canvas","getCanvas","renderHitDetection","clearCachedData","postRender","vectorSource","viewState","viewNotMoving","viewHints","ANIMATING","INTERACTING","extentChanged","extent","sourceChanged","getRevision","projection","resolution","renderBuffer","getRenderBuffer","loadFeatures","rebuildBuffers_","slice","makeProjectionTransform","useProgram","prepareDraw","bindBuffer","enableAttributes","totalInstructionsCount","length","totalHitInstructionsCount","featureCache","tmpCoords","tmpColor","renderIndex","hitIndex","hitColor","featureUid","getType","POINT","getFlatCoordinates","Number","value","j","callback","message","customAttributesCount","postMessage","hitMessage","coordinate","hitTolerance","matches","undefined","pixel","coordinateToPixelTransform","readPixel","color","index","opacity","uid","Math","floor","toString","getFeatureByUid","setSize","prepareDrawToRenderTarget","terminate","layer_","forEach","key","disposeInternal","call"],"sourceRoot":"","sources":["../../src/renderer/webgl/PointsLayer.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}