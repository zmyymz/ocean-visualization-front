{"ast":null,"code":"/**\n * @module ol/tilegrid\n */\nimport Corner from './extent/Corner.js';\nimport TileGrid from './tilegrid/TileGrid.js';\nimport Units from './proj/Units.js';\nimport { DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, get as getProjection } from './proj.js';\nimport { containsCoordinate, createOrUpdate, getCorner, getHeight, getWidth } from './extent.js';\nimport { toSize } from './size.js';\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\n\nexport function getForProjection(projection) {\n  var tileGrid = projection.getDefaultTileGrid();\n\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n\n  return tileGrid;\n}\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\n\nexport function wrapX(tileGrid, tileCoord, projection) {\n  var z = tileCoord[0];\n  var center = tileGrid.getTileCoordCenter(tileCoord);\n  var projectionExtent = extentFromProjection(projection);\n\n  if (!containsCoordinate(projectionExtent, center)) {\n    var worldWidth = getWidth(projectionExtent);\n    var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  } else {\n    return tileCoord;\n  }\n}\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent/Corner.js\").default} [opt_corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\n\nexport function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {\n  var corner = opt_corner !== undefined ? opt_corner : Corner.TOP_LEFT;\n  var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: opt_tileSize\n  });\n}\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions} [opt_options] Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\n\nexport function createXYZ(opt_options) {\n  var xyzOptions = opt_options || {};\n  var extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n  var gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution)\n  };\n  return new TileGrid(gridOptions);\n}\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [opt_maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\n\nfunction resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize, opt_maxResolution) {\n  var maxZoom = opt_maxZoom !== undefined ? opt_maxZoom : DEFAULT_MAX_ZOOM;\n  var height = getHeight(extent);\n  var width = getWidth(extent);\n  var tileSize = toSize(opt_tileSize !== undefined ? opt_tileSize : DEFAULT_TILE_SIZE);\n  var maxResolution = opt_maxResolution > 0 ? opt_maxResolution : Math.max(width / tileSize[0], height / tileSize[1]);\n  var length = maxZoom + 1;\n  var resolutions = new Array(length);\n\n  for (var z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n\n  return resolutions;\n}\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent/Corner.js\").default} [opt_corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\n\n\nexport function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {\n  var extent = extentFromProjection(projection);\n  return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);\n}\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\n\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  var extent = projection.getExtent();\n\n  if (!extent) {\n    var half = 180 * METERS_PER_UNIT[Units.DEGREES] / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n\n  return extent;\n}","map":{"version":3,"mappings":"AAAA;;;AAGA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,SAAQC,gBAAR,EAA0BC,iBAA1B,QAAkD,sBAAlD;AACA,SAAQC,eAAR,EAAyBC,GAAG,IAAIC,aAAhC,QAAoD,WAApD;AACA,SACEC,kBADF,EAEEC,cAFF,EAGEC,SAHF,EAIEC,SAJF,EAKEC,QALF,QAMO,aANP;AAOA,SAAQC,MAAR,QAAqB,WAArB;AAEA;;;;;;AAKA,OAAM,SAAUC,gBAAV,CAA2BC,UAA3B,EAAqC;AACzC,MAAIC,QAAQ,GAAGD,UAAU,CAACE,kBAAX,EAAf;;AACA,MAAI,CAACD,QAAL,EAAe;AACbA,YAAQ,GAAGE,mBAAmB,CAACH,UAAD,CAA9B;AACAA,cAAU,CAACI,kBAAX,CAA8BH,QAA9B;AACD;;AACD,SAAOA,QAAP;AACD;AAED;;;;;;;AAMA,OAAM,SAAUI,KAAV,CAAgBJ,QAAhB,EAA0BK,SAA1B,EAAqCN,UAArC,EAA+C;AACnD,MAAMO,CAAC,GAAGD,SAAS,CAAC,CAAD,CAAnB;AACA,MAAME,MAAM,GAAGP,QAAQ,CAACQ,kBAAT,CAA4BH,SAA5B,CAAf;AACA,MAAMI,gBAAgB,GAAGC,oBAAoB,CAACX,UAAD,CAA7C;;AACA,MAAI,CAACP,kBAAkB,CAACiB,gBAAD,EAAmBF,MAAnB,CAAvB,EAAmD;AACjD,QAAMI,UAAU,GAAGf,QAAQ,CAACa,gBAAD,CAA3B;AACA,QAAMG,UAAU,GAAGC,IAAI,CAACC,IAAL,CACjB,CAACL,gBAAgB,CAAC,CAAD,CAAhB,GAAsBF,MAAM,CAAC,CAAD,CAA7B,IAAoCI,UADnB,CAAnB;AAGAJ,UAAM,CAAC,CAAD,CAAN,IAAaI,UAAU,GAAGC,UAA1B;AACA,WAAOZ,QAAQ,CAACe,wBAAT,CAAkCR,MAAlC,EAA0CD,CAA1C,CAAP;AACD,GAPD,MAOO;AACL,WAAOD,SAAP;AACD;AACF;AAED;;;;;;;;;;AASA,OAAM,SAAUW,eAAV,CAA0BC,MAA1B,EAAkCC,WAAlC,EAA+CC,YAA/C,EAA6DC,UAA7D,EAAuE;AAC3E,MAAMC,MAAM,GAAGD,UAAU,KAAKE,SAAf,GAA2BF,UAA3B,GAAwCpC,MAAM,CAACuC,QAA9D;AAEA,MAAMC,WAAW,GAAGC,qBAAqB,CAACR,MAAD,EAASC,WAAT,EAAsBC,YAAtB,CAAzC;AAEA,SAAO,IAAIlC,QAAJ,CAAa;AAClBgC,UAAM,EAAEA,MADU;AAElBS,UAAM,EAAEhC,SAAS,CAACuB,MAAD,EAASI,MAAT,CAFC;AAGlBG,eAAW,EAAEA,WAHK;AAIlBG,YAAQ,EAAER;AAJQ,GAAb,CAAP;AAMD;AAED;;;;;;;;;;;;AAYA;;;;;;;AAMA,OAAM,SAAUS,SAAV,CAAoBC,WAApB,EAA+B;AACnC,MAAMC,UAAU,GAAGD,WAAW,IAAI,EAAlC;AAEA,MAAMZ,MAAM,GAAGa,UAAU,CAACb,MAAX,IAAqB1B,aAAa,CAAC,WAAD,CAAb,CAA2BwC,SAA3B,EAApC;AAEA,MAAMC,WAAW,GAAG;AAClBf,UAAM,EAAEA,MADU;AAElBgB,WAAO,EAAEH,UAAU,CAACG,OAFF;AAGlBN,YAAQ,EAAEG,UAAU,CAACH,QAHH;AAIlBH,eAAW,EAAEC,qBAAqB,CAChCR,MADgC,EAEhCa,UAAU,CAACI,OAFqB,EAGhCJ,UAAU,CAACH,QAHqB,EAIhCG,UAAU,CAACK,aAJqB;AAJhB,GAApB;AAWA,SAAO,IAAIlD,QAAJ,CAAa+C,WAAb,CAAP;AACD;AAED;;;;;;;;;;;AAUA,SAASP,qBAAT,CACER,MADF,EAEEC,WAFF,EAGEC,YAHF,EAIEiB,iBAJF,EAImB;AAEjB,MAAMF,OAAO,GAAGhB,WAAW,KAAKI,SAAhB,GAA4BJ,WAA5B,GAA0C/B,gBAA1D;AAEA,MAAMkD,MAAM,GAAG1C,SAAS,CAACsB,MAAD,CAAxB;AACA,MAAMqB,KAAK,GAAG1C,QAAQ,CAACqB,MAAD,CAAtB;AAEA,MAAMU,QAAQ,GAAG9B,MAAM,CACrBsB,YAAY,KAAKG,SAAjB,GAA6BH,YAA7B,GAA4C/B,iBADvB,CAAvB;AAGA,MAAM+C,aAAa,GACjBC,iBAAiB,GAAG,CAApB,GACIA,iBADJ,GAEIvB,IAAI,CAAC0B,GAAL,CAASD,KAAK,GAAGX,QAAQ,CAAC,CAAD,CAAzB,EAA8BU,MAAM,GAAGV,QAAQ,CAAC,CAAD,CAA/C,CAHN;AAKA,MAAMa,MAAM,GAAGN,OAAO,GAAG,CAAzB;AACA,MAAMV,WAAW,GAAG,IAAIiB,KAAJ,CAAUD,MAAV,CAApB;;AACA,OAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkC,MAApB,EAA4B,EAAElC,CAA9B,EAAiC;AAC/BkB,eAAW,CAAClB,CAAD,CAAX,GAAiB6B,aAAa,GAAGtB,IAAI,CAAC6B,GAAL,CAAS,CAAT,EAAYpC,CAAZ,CAAjC;AACD;;AACD,SAAOkB,WAAP;AACD;AAED;;;;;;;;;;;AASA,OAAM,SAAUtB,mBAAV,CACJH,UADI,EAEJmB,WAFI,EAGJC,YAHI,EAIJC,UAJI,EAIM;AAEV,MAAMH,MAAM,GAAGP,oBAAoB,CAACX,UAAD,CAAnC;AACA,SAAOiB,eAAe,CAACC,MAAD,EAASC,WAAT,EAAsBC,YAAtB,EAAoCC,UAApC,CAAtB;AACD;AAED;;;;;;;AAMA,OAAM,SAAUV,oBAAV,CAA+BX,UAA/B,EAAyC;AAC7CA,YAAU,GAAGR,aAAa,CAACQ,UAAD,CAA1B;AACA,MAAIkB,MAAM,GAAGlB,UAAU,CAACgC,SAAX,EAAb;;AACA,MAAI,CAACd,MAAL,EAAa;AACX,QAAM0B,IAAI,GACP,MAAMtD,eAAe,CAACH,KAAK,CAAC0D,OAAP,CAAtB,GAAyC7C,UAAU,CAAC8C,gBAAX,EAD3C;AAEA5B,UAAM,GAAGxB,cAAc,CAAC,CAACkD,IAAF,EAAQ,CAACA,IAAT,EAAeA,IAAf,EAAqBA,IAArB,CAAvB;AACD;;AACD,SAAO1B,MAAP;AACD","names":["Corner","TileGrid","Units","DEFAULT_MAX_ZOOM","DEFAULT_TILE_SIZE","METERS_PER_UNIT","get","getProjection","containsCoordinate","createOrUpdate","getCorner","getHeight","getWidth","toSize","getForProjection","projection","tileGrid","getDefaultTileGrid","createForProjection","setDefaultTileGrid","wrapX","tileCoord","z","center","getTileCoordCenter","projectionExtent","extentFromProjection","worldWidth","worldsAway","Math","ceil","getTileCoordForCoordAndZ","createForExtent","extent","opt_maxZoom","opt_tileSize","opt_corner","corner","undefined","TOP_LEFT","resolutions","resolutionsFromExtent","origin","tileSize","createXYZ","opt_options","xyzOptions","getExtent","gridOptions","minZoom","maxZoom","maxResolution","opt_maxResolution","height","width","max","length","Array","pow","half","DEGREES","getMetersPerUnit"],"sourceRoot":"","sources":["src/tilegrid.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}