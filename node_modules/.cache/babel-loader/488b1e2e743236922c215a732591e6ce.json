{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/Source\n */\n\n\nimport BaseObject from '../Object.js';\nimport SourceState from './State.js';\nimport { abstract } from '../util.js';\nimport { get as getProjection } from '../proj.js';\n/**\n * A function that takes a {@link module:ol/PluggableMap~FrameState} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../PluggableMap.js\").FrameState): (string|Array<string>)} Attribution\n */\n\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./State.js\").default} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */\n\nvar Source =\n/** @class */\nfunction (_super) {\n  __extends(Source, _super);\n  /**\n   * @param {Options} options Source options.\n   */\n\n\n  function Source(options) {\n    var _this = _super.call(this) || this;\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n\n    _this.projection = getProjection(options.projection);\n    /**\n     * @private\n     * @type {?Attribution}\n     */\n\n    _this.attributions_ = adaptAttributions(options.attributions);\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.attributionsCollapsible_ = options.attributionsCollapsible !== undefined ? options.attributionsCollapsible : true;\n    /**\n     * This source is currently loading data. Sources that defer loading to the\n     * map's tile queue never set this to `true`.\n     * @type {boolean}\n     */\n\n    _this.loading = false;\n    /**\n     * @private\n     * @type {import(\"./State.js\").default}\n     */\n\n    _this.state_ = options.state !== undefined ? options.state : SourceState.READY;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.interpolate_ = !!options.interpolate;\n    /**\n     * @protected\n     * @type {function(import(\"../View.js\").ViewOptions):void}\n     */\n\n    _this.viewResolver = null;\n    /**\n     * @protected\n     * @type {function(Error):void}\n     */\n\n    _this.viewRejector = null;\n    var self = _this;\n    /**\n     * @private\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\n     */\n\n    _this.viewPromise_ = new Promise(function (resolve, reject) {\n      self.viewResolver = resolve;\n      self.viewRejector = reject;\n    });\n    return _this;\n  }\n  /**\n   * Get the attribution function for the source.\n   * @return {?Attribution} Attribution function.\n   * @api\n   */\n\n\n  Source.prototype.getAttributions = function () {\n    return this.attributions_;\n  };\n  /**\n   * @return {boolean} Attributions are collapsible.\n   * @api\n   */\n\n\n  Source.prototype.getAttributionsCollapsible = function () {\n    return this.attributionsCollapsible_;\n  };\n  /**\n   * Get the projection of the source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n\n\n  Source.prototype.getProjection = function () {\n    return this.projection;\n  };\n  /**\n   * @abstract\n   * @return {Array<number>|null} Resolutions.\n   */\n\n\n  Source.prototype.getResolutions = function () {\n    return abstract();\n  };\n  /**\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n   */\n\n\n  Source.prototype.getView = function () {\n    return this.viewPromise_;\n  };\n  /**\n   * Get the state of the source, see {@link module:ol/source/State~State} for possible states.\n   * @return {import(\"./State.js\").default} State.\n   * @api\n   */\n\n\n  Source.prototype.getState = function () {\n    return this.state_;\n  };\n  /**\n   * @return {boolean|undefined} Wrap X.\n   */\n\n\n  Source.prototype.getWrapX = function () {\n    return this.wrapX_;\n  };\n  /**\n   * @return {boolean} Use linear interpolation when resampling.\n   */\n\n\n  Source.prototype.getInterpolate = function () {\n    return this.interpolate_;\n  };\n  /**\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n   * @api\n   */\n\n\n  Source.prototype.refresh = function () {\n    this.changed();\n  };\n  /**\n   * Set the attributions of the source.\n   * @param {AttributionLike|undefined} attributions Attributions.\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n   *     or `undefined`.\n   * @api\n   */\n\n\n  Source.prototype.setAttributions = function (attributions) {\n    this.attributions_ = adaptAttributions(attributions);\n    this.changed();\n  };\n  /**\n   * Set the state of the source.\n   * @param {import(\"./State.js\").default} state State.\n   */\n\n\n  Source.prototype.setState = function (state) {\n    this.state_ = state;\n    this.changed();\n  };\n\n  return Source;\n}(BaseObject);\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {Attribution|null} An attribution function (or null).\n */\n\n\nfunction adaptAttributions(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n\n  if (Array.isArray(attributionLike)) {\n    return function (frameState) {\n      return attributionLike;\n    };\n  }\n\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n\n  return function (frameState) {\n    return [attributionLike];\n  };\n}\n\nexport default Source;","map":{"version":3,"mappings":"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","names":["BaseObject","SourceState","abstract","get","getProjection","__extends","options","_super","_this","projection","attributions_","adaptAttributions","attributions","attributionsCollapsible_","attributionsCollapsible","undefined","loading","state_","state","READY","wrapX_","wrapX","interpolate_","interpolate","viewResolver","viewRejector","self","viewPromise_","Promise","resolve","reject","Source","changed","attributionLike","Array","isArray","frameState"],"sourceRoot":"","sources":["../src/source/Source.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}