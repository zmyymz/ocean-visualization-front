{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/GMLBase\n */\n// FIXME Envelopes should not be treated as geometries! readEnvelope_ is part\n// of GEOMETRY_PARSERS_ and methods using GEOMETRY_PARSERS_ do not expect\n// envelopes/extents, only geometries!\n\n\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport LinearRing from '../geom/LinearRing.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport XMLFeature from './XMLFeature.js';\nimport { assign } from '../obj.js';\nimport { extend } from '../array.js';\nimport { getAllTextContent, getAttributeNS, makeArrayPusher, makeReplacer, parseNode, pushParseAndPop } from '../xml.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformExtentWithOptions, transformGeometryWithOptions } from './Feature.js';\n/**\n * @const\n * @type {string}\n */\n\nexport var GMLNS = 'http://www.opengis.net/gml';\n/**\n * A regular expression that matches if a string only contains whitespace\n * characters. It will e.g. match `''`, `' '`, `'\\n'` etc. The non-breaking\n * space (0xa0) is explicitly included as IE doesn't include it in its\n * definition of `\\s`.\n *\n * Information from `goog.string.isEmptyOrWhitespace`: https://github.com/google/closure-library/blob/e877b1e/closure/goog/string/string.js#L156-L160\n *\n * @const\n * @type {RegExp}\n */\n\nvar ONLY_WHITESPACE_RE = /^[\\s\\xa0]*$/;\n/**\n * @typedef {Object} Options\n * @property {Object<string, string>|string} [featureNS] Feature\n * namespace. If not defined will be derived from GML. If multiple\n * feature types have been configured which come from different feature\n * namespaces, this will be an object with the keys being the prefixes used\n * in the entries of featureType array. The values of the object will be the\n * feature namespaces themselves. So for instance there might be a featureType\n * item `topp:states` in the `featureType` array and then there will be a key\n * `topp` in the featureNS object with value `http://www.openplans.org/topp`.\n * @property {Array<string>|string} [featureType] Feature type(s) to parse.\n * If multiple feature types need to be configured\n * which come from different feature namespaces, `featureNS` will be an object\n * with the keys being the prefixes used in the entries of featureType array.\n * The values of the object will be the feature namespaces themselves.\n * So for instance there might be a featureType item `topp:states` and then\n * there will be a key named `topp` in the featureNS object with value\n * `http://www.openplans.org/topp`.\n * @property {string} srsName srsName to use when writing geometries.\n * @property {boolean} [surface=false] Write gml:Surface instead of gml:Polygon\n * elements. This also affects the elements in multi-part geometries.\n * @property {boolean} [curve=false] Write gml:Curve instead of gml:LineString\n * elements. This also affects the elements in multi-part geometries.\n * @property {boolean} [multiCurve=true] Write gml:MultiCurve instead of gml:MultiLineString.\n * Since the latter is deprecated in GML 3.\n * @property {boolean} [multiSurface=true] Write gml:multiSurface instead of\n * gml:MultiPolygon. Since the latter is deprecated in GML 3.\n * @property {string} [schemaLocation] Optional schemaLocation to use when\n * writing out the GML, this will override the default provided.\n * @property {boolean} [hasZ=false] If coordinates have a Z value.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Feature base format for reading and writing data in the GML format.\n * This class cannot be instantiated, it contains only base content that\n * is shared with versioned format classes GML2 and GML3.\n *\n * @abstract\n * @api\n */\n\nvar GMLBase =\n/** @class */\nfunction (_super) {\n  __extends(GMLBase, _super);\n  /**\n   * @param {Options} [opt_options] Optional configuration object.\n   */\n\n\n  function GMLBase(opt_options) {\n    var _this = _super.call(this) || this;\n\n    var options =\n    /** @type {Options} */\n    opt_options ? opt_options : {};\n    /**\n     * @protected\n     * @type {Array<string>|string|undefined}\n     */\n\n    _this.featureType = options.featureType;\n    /**\n     * @protected\n     * @type {Object<string, string>|string|undefined}\n     */\n\n    _this.featureNS = options.featureNS;\n    /**\n     * @protected\n     * @type {string}\n     */\n\n    _this.srsName = options.srsName;\n    /**\n     * @protected\n     * @type {string}\n     */\n\n    _this.schemaLocation = '';\n    /**\n     * @type {Object<string, Object<string, Object>>}\n     */\n\n    _this.FEATURE_COLLECTION_PARSERS = {};\n    _this.FEATURE_COLLECTION_PARSERS[_this.namespace] = {\n      'featureMember': makeArrayPusher(_this.readFeaturesInternal),\n      'featureMembers': makeReplacer(_this.readFeaturesInternal)\n    };\n    _this.supportedMediaTypes = ['application/gml+xml'];\n    return _this;\n  }\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<Feature> | undefined} Features.\n   */\n\n\n  GMLBase.prototype.readFeaturesInternal = function (node, objectStack) {\n    var localName = node.localName;\n    var features = null;\n\n    if (localName == 'FeatureCollection') {\n      features = pushParseAndPop([], this.FEATURE_COLLECTION_PARSERS, node, objectStack, this);\n    } else if (localName == 'featureMembers' || localName == 'featureMember' || localName == 'member') {\n      var context = objectStack[0];\n      var featureType = context['featureType'];\n      var featureNS = context['featureNS'];\n      var prefix = 'p';\n      var defaultPrefix = 'p0';\n\n      if (!featureType && node.childNodes) {\n        featureType = [], featureNS = {};\n\n        for (var i = 0, ii = node.childNodes.length; i < ii; ++i) {\n          var child =\n          /** @type {Element} */\n          node.childNodes[i];\n\n          if (child.nodeType === 1) {\n            var ft = child.nodeName.split(':').pop();\n\n            if (featureType.indexOf(ft) === -1) {\n              var key = '';\n              var count = 0;\n              var uri = child.namespaceURI;\n\n              for (var candidate in featureNS) {\n                if (featureNS[candidate] === uri) {\n                  key = candidate;\n                  break;\n                }\n\n                ++count;\n              }\n\n              if (!key) {\n                key = prefix + count;\n                featureNS[key] = uri;\n              }\n\n              featureType.push(key + ':' + ft);\n            }\n          }\n        }\n\n        if (localName != 'featureMember') {\n          // recheck featureType for each featureMember\n          context['featureType'] = featureType;\n          context['featureNS'] = featureNS;\n        }\n      }\n\n      if (typeof featureNS === 'string') {\n        var ns = featureNS;\n        featureNS = {};\n        featureNS[defaultPrefix] = ns;\n      }\n      /** @type {Object<string, Object<string, import(\"../xml.js\").Parser>>} */\n\n\n      var parsersNS = {};\n      var featureTypes = Array.isArray(featureType) ? featureType : [featureType];\n\n      for (var p in featureNS) {\n        /** @type {Object<string, import(\"../xml.js\").Parser>} */\n        var parsers = {};\n\n        for (var i = 0, ii = featureTypes.length; i < ii; ++i) {\n          var featurePrefix = featureTypes[i].indexOf(':') === -1 ? defaultPrefix : featureTypes[i].split(':')[0];\n\n          if (featurePrefix === p) {\n            parsers[featureTypes[i].split(':').pop()] = localName == 'featureMembers' ? makeArrayPusher(this.readFeatureElement, this) : makeReplacer(this.readFeatureElement, this);\n          }\n        }\n\n        parsersNS[featureNS[p]] = parsers;\n      }\n\n      if (localName == 'featureMember' || localName == 'member') {\n        features = pushParseAndPop(undefined, parsersNS, node, objectStack);\n      } else {\n        features = pushParseAndPop([], parsersNS, node, objectStack);\n      }\n    }\n\n    if (features === null) {\n      features = [];\n    }\n\n    return features;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent|undefined} Geometry.\n   */\n\n\n  GMLBase.prototype.readGeometryElement = function (node, objectStack) {\n    var context =\n    /** @type {Object} */\n    objectStack[0];\n    context['srsName'] = node.firstElementChild.getAttribute('srsName');\n    context['srsDimension'] = node.firstElementChild.getAttribute('srsDimension');\n    var geometry = pushParseAndPop(null, this.GEOMETRY_PARSERS, node, objectStack, this);\n\n    if (geometry) {\n      if (Array.isArray(geometry)) {\n        return transformExtentWithOptions(\n        /** @type {import(\"../extent.js\").Extent} */\n        geometry, context);\n      } else {\n        return transformGeometryWithOptions(\n        /** @type {import(\"../geom/Geometry.js\").default} */\n        geometry, false, context);\n      }\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {boolean} asFeature whether result should be wrapped as a feature.\n   * @return {Feature|Object} Feature\n   */\n\n\n  GMLBase.prototype.readFeatureElementInternal = function (node, objectStack, asFeature) {\n    var geometryName;\n    var values = {};\n\n    for (var n = node.firstElementChild; n; n = n.nextElementSibling) {\n      var value = void 0;\n      var localName = n.localName; // first, check if it is simple attribute\n\n      if (n.childNodes.length === 0 || n.childNodes.length === 1 && (n.firstChild.nodeType === 3 || n.firstChild.nodeType === 4)) {\n        value = getAllTextContent(n, false);\n\n        if (ONLY_WHITESPACE_RE.test(value)) {\n          value = undefined;\n        }\n      } else {\n        if (asFeature) {\n          //if feature, try it as a geometry\n          value = this.readGeometryElement(n, objectStack);\n        }\n\n        if (!value) {\n          //if not a geometry or not a feature, treat it as a complex attribute\n          value = this.readFeatureElementInternal(n, objectStack, false);\n        } else if (localName !== 'boundedBy') {\n          // boundedBy is an extent and must not be considered as a geometry\n          geometryName = localName;\n        }\n      }\n\n      if (values[localName]) {\n        if (!(values[localName] instanceof Array)) {\n          values[localName] = [values[localName]];\n        }\n\n        values[localName].push(value);\n      } else {\n        values[localName] = value;\n      }\n\n      var len = n.attributes.length;\n\n      if (len > 0) {\n        values[localName] = {\n          _content_: values[localName]\n        };\n\n        for (var i = 0; i < len; i++) {\n          var attName = n.attributes[i].name;\n          values[localName][attName] = n.attributes[i].value;\n        }\n      }\n    }\n\n    if (!asFeature) {\n      return values;\n    } else {\n      var feature = new Feature(values);\n\n      if (geometryName) {\n        feature.setGeometryName(geometryName);\n      }\n\n      var fid = node.getAttribute('fid') || getAttributeNS(node, this.namespace, 'id');\n\n      if (fid) {\n        feature.setId(fid);\n      }\n\n      return feature;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Feature} Feature.\n   */\n\n\n  GMLBase.prototype.readFeatureElement = function (node, objectStack) {\n    return this.readFeatureElementInternal(node, objectStack, true);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Point|undefined} Point.\n   */\n\n\n  GMLBase.prototype.readPoint = function (node, objectStack) {\n    var flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);\n\n    if (flatCoordinates) {\n      return new Point(flatCoordinates, GeometryLayout.XYZ);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiPoint|undefined} MultiPoint.\n   */\n\n\n  GMLBase.prototype.readMultiPoint = function (node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    var coordinates = pushParseAndPop([], this.MULTIPOINT_PARSERS, node, objectStack, this);\n\n    if (coordinates) {\n      return new MultiPoint(coordinates);\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n\n\n  GMLBase.prototype.readMultiLineString = function (node, objectStack) {\n    /** @type {Array<LineString>} */\n    var lineStrings = pushParseAndPop([], this.MULTILINESTRING_PARSERS, node, objectStack, this);\n\n    if (lineStrings) {\n      return new MultiLineString(lineStrings);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n\n\n  GMLBase.prototype.readMultiPolygon = function (node, objectStack) {\n    /** @type {Array<Polygon>} */\n    var polygons = pushParseAndPop([], this.MULTIPOLYGON_PARSERS, node, objectStack, this);\n\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n\n\n  GMLBase.prototype.pointMemberParser = function (node, objectStack) {\n    parseNode(this.POINTMEMBER_PARSERS, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n\n\n  GMLBase.prototype.lineStringMemberParser = function (node, objectStack) {\n    parseNode(this.LINESTRINGMEMBER_PARSERS, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n\n\n  GMLBase.prototype.polygonMemberParser = function (node, objectStack) {\n    parseNode(this.POLYGONMEMBER_PARSERS, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {LineString|undefined} LineString.\n   */\n\n\n  GMLBase.prototype.readLineString = function (node, objectStack) {\n    var flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);\n\n    if (flatCoordinates) {\n      var lineString = new LineString(flatCoordinates, GeometryLayout.XYZ);\n      return lineString;\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} LinearRing flat coordinates.\n   */\n\n\n  GMLBase.prototype.readFlatLinearRing = function (node, objectStack) {\n    var ring = pushParseAndPop(null, this.GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack, this);\n\n    if (ring) {\n      return ring;\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {LinearRing|undefined} LinearRing.\n   */\n\n\n  GMLBase.prototype.readLinearRing = function (node, objectStack) {\n    var flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);\n\n    if (flatCoordinates) {\n      return new LinearRing(flatCoordinates, GeometryLayout.XYZ);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Polygon|undefined} Polygon.\n   */\n\n\n  GMLBase.prototype.readPolygon = function (node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    var flatLinearRings = pushParseAndPop([null], this.FLAT_LINEAR_RINGS_PARSERS, node, objectStack, this);\n\n    if (flatLinearRings && flatLinearRings[0]) {\n      var flatCoordinates = flatLinearRings[0];\n      var ends = [flatCoordinates.length];\n      var i = void 0,\n          ii = void 0;\n\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n\n      return new Polygon(flatCoordinates, GeometryLayout.XYZ, ends);\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>} Flat coordinates.\n   */\n\n\n  GMLBase.prototype.readFlatCoordinatesFromNode = function (node, objectStack) {\n    return pushParseAndPop(null, this.GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} Geometry.\n   */\n  //@ts-ignore\n\n\n  GMLBase.prototype.readGeometryFromNode = function (node, opt_options) {\n    var geometry = this.readGeometryElement(node, [this.getReadOptions(node, opt_options ? opt_options : {})]);\n    return geometry ? geometry : null;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n\n\n  GMLBase.prototype.readFeaturesFromNode = function (node, opt_options) {\n    var options = {\n      featureType: this.featureType,\n      featureNS: this.featureNS\n    };\n\n    if (opt_options) {\n      assign(options, this.getReadOptions(node, opt_options));\n    }\n\n    var features = this.readFeaturesInternal(node, [options]);\n    return features || [];\n  };\n  /**\n   * @param {Element} node Node.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  GMLBase.prototype.readProjectionFromNode = function (node) {\n    return getProjection(this.srsName ? this.srsName : node.firstElementChild.getAttribute('srsName'));\n  };\n\n  return GMLBase;\n}(XMLFeature);\n\nGMLBase.prototype.namespace = GMLNS;\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGMLBase.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {}\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGMLBase.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {}\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGMLBase.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {}\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGMLBase.prototype.MULTIPOINT_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser),\n    'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGMLBase.prototype.MULTILINESTRING_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeArrayPusher(GMLBase.prototype.lineStringMemberParser),\n    'lineStringMembers': makeArrayPusher(GMLBase.prototype.lineStringMemberParser)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGMLBase.prototype.MULTIPOLYGON_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\n    'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGMLBase.prototype.POINTMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGMLBase.prototype.LINESTRINGMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGMLBase.prototype.POLYGONMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGMLBase.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing)\n  }\n};\nexport default GMLBase;","map":{"version":3,"mappings":"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","names":["Feature","GeometryLayout","LineString","LinearRing","MultiLineString","MultiPoint","MultiPolygon","Point","Polygon","XMLFeature","assign","extend","getAllTextContent","getAttributeNS","makeArrayPusher","makeReplacer","parseNode","pushParseAndPop","get","getProjection","transformExtentWithOptions","transformGeometryWithOptions","GMLNS","ONLY_WHITESPACE_RE","__extends","opt_options","_super","options","_this","featureType","featureNS","srsName","schemaLocation","FEATURE_COLLECTION_PARSERS","namespace","readFeaturesInternal","supportedMediaTypes","GMLBase","node","objectStack","localName","features","context","prefix","defaultPrefix","childNodes","i","ii","length","child","nodeType","ft","nodeName","split","pop","indexOf","key","count","uri","namespaceURI","candidate","push","ns","parsersNS","featureTypes","Array","isArray","p","parsers","featurePrefix","readFeatureElement","undefined","firstElementChild","getAttribute","geometry","GEOMETRY_PARSERS","asFeature","geometryName","values","n","nextElementSibling","value","firstChild","test","readGeometryElement","readFeatureElementInternal","len","attributes","_content_","attName","name","feature","setGeometryName","fid","setId","flatCoordinates","readFlatCoordinatesFromNode","XYZ","coordinates","MULTIPOINT_PARSERS","lineStrings","MULTILINESTRING_PARSERS","polygons","MULTIPOLYGON_PARSERS","POINTMEMBER_PARSERS","LINESTRINGMEMBER_PARSERS","POLYGONMEMBER_PARSERS","lineString","ring","GEOMETRY_FLAT_COORDINATES_PARSERS","flatLinearRings","FLAT_LINEAR_RINGS_PARSERS","ends","getReadOptions","prototype","pointMemberParser","lineStringMemberParser","polygonMemberParser","readLineString","readPolygon","RING_PARSERS","readFlatLinearRing"],"sourceRoot":"","sources":["../src/format/GMLBase.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}