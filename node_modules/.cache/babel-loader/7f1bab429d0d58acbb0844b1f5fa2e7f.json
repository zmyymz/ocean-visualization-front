{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\n * @module ol/source/UTFGrid\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport EventType from '../events/EventType.js';\nimport SourceState from './State.js';\nimport Tile from '../Tile.js';\nimport TileSource from './Tile.js';\nimport TileState from '../TileState.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { assert } from '../asserts.js';\nimport { createFromTemplates, nullTileUrlFunction } from '../tileurlfunction.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { getKeyZXY } from '../tilecoord.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\nimport { listenOnce } from '../events.js';\nimport { jsonp as requestJSONP } from '../net.js';\n/**\n * @typedef {Object} UTFGridJSON\n * @property {Array<string>} grid The grid.\n * @property {Array<string>} keys The keys.\n * @property {Object<string, Object>} [data] Optional data.\n */\n\nvar CustomTile =\n/** @class */\nfunction (_super) {\n  __extends(CustomTile, _super);\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {import(\"../extent.js\").Extent} extent Extent of the tile.\n   * @param {boolean} preemptive Load the tile when visible (before it's needed).\n   * @param {boolean} jsonp Load the tile as a script.\n   */\n\n\n  function CustomTile(tileCoord, state, src, extent, preemptive, jsonp) {\n    var _this = _super.call(this, tileCoord, state) || this;\n    /**\n     * @private\n     * @type {string}\n     */\n\n\n    _this.src_ = src;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    _this.extent_ = extent;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.preemptive_ = preemptive;\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n\n    _this.grid_ = null;\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n\n    _this.keys_ = null;\n    /**\n     * @private\n     * @type {Object<string, Object>|undefined}\n     */\n\n    _this.data_ = null;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.jsonp_ = jsonp;\n    return _this;\n  }\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLImageElement} Image.\n   */\n\n\n  CustomTile.prototype.getImage = function () {\n    return null;\n  };\n  /**\n   * Synchronously returns data at given coordinate (if available).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {*} The data.\n   */\n\n\n  CustomTile.prototype.getData = function (coordinate) {\n    if (!this.grid_ || !this.keys_) {\n      return null;\n    }\n\n    var xRelative = (coordinate[0] - this.extent_[0]) / (this.extent_[2] - this.extent_[0]);\n    var yRelative = (coordinate[1] - this.extent_[1]) / (this.extent_[3] - this.extent_[1]);\n    var row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];\n\n    if (typeof row !== 'string') {\n      return null;\n    }\n\n    var code = row.charCodeAt(Math.floor(xRelative * row.length));\n\n    if (code >= 93) {\n      code--;\n    }\n\n    if (code >= 35) {\n      code--;\n    }\n\n    code -= 32;\n    var data = null;\n\n    if (code in this.keys_) {\n      var id = this.keys_[code];\n\n      if (this.data_ && id in this.data_) {\n        data = this.data_[id];\n      } else {\n        data = id;\n      }\n    }\n\n    return data;\n  };\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate (or `null` if not yet loaded).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [opt_request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   */\n\n\n  CustomTile.prototype.forDataAtCoordinate = function (coordinate, callback, opt_request) {\n    if (this.state == TileState.EMPTY && opt_request === true) {\n      this.state = TileState.IDLE;\n      listenOnce(this, EventType.CHANGE, function (e) {\n        callback(this.getData(coordinate));\n      }, this);\n      this.loadInternal_();\n    } else {\n      if (opt_request === true) {\n        setTimeout(function () {\n          callback(this.getData(coordinate));\n        }.bind(this), 0);\n      } else {\n        callback(this.getData(coordinate));\n      }\n    }\n  };\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n\n\n  CustomTile.prototype.getKey = function () {\n    return this.src_;\n  };\n  /**\n   * @private\n   */\n\n\n  CustomTile.prototype.handleError_ = function () {\n    this.state = TileState.ERROR;\n    this.changed();\n  };\n  /**\n   * @param {!UTFGridJSON} json UTFGrid data.\n   * @private\n   */\n\n\n  CustomTile.prototype.handleLoad_ = function (json) {\n    this.grid_ = json['grid'];\n    this.keys_ = json['keys'];\n    this.data_ = json['data'];\n    this.state = TileState.LOADED;\n    this.changed();\n  };\n  /**\n   * @private\n   */\n\n\n  CustomTile.prototype.loadInternal_ = function () {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n\n      if (this.jsonp_) {\n        requestJSONP(this.src_, this.handleLoad_.bind(this), this.handleError_.bind(this));\n      } else {\n        var client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', this.src_);\n        client.send();\n      }\n    }\n  };\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n\n\n  CustomTile.prototype.onXHRLoad_ = function (event) {\n    var client =\n    /** @type {XMLHttpRequest} */\n    event.target; // status will be 0 for file:// urls\n\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      var response = void 0;\n\n      try {\n        response =\n        /** @type {!UTFGridJSON} */\n        JSON.parse(client.responseText);\n      } catch (err) {\n        this.handleError_();\n        return;\n      }\n\n      this.handleLoad_(response);\n    } else {\n      this.handleError_();\n    }\n  };\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n\n\n  CustomTile.prototype.onXHRError_ = function (event) {\n    this.handleError_();\n  };\n  /**\n   */\n\n\n  CustomTile.prototype.load = function () {\n    if (this.preemptive_) {\n      this.loadInternal_();\n    } else {\n      this.setState(TileState.EMPTY);\n    }\n  };\n\n  return CustomTile;\n}(Tile);\n\nexport { CustomTile };\n/**\n * @typedef {Object} Options\n * @property {boolean} [preemptive=true]\n * If `true` the UTFGrid source loads the tiles based on their \"visibility\".\n * This improves the speed of response, but increases traffic.\n * Note that if set to `false` (lazy loading), you need to pass `true` as\n * `opt_request` to the `forDataAtCoordinateAndResolution` method otherwise no\n * data will ever be loaded.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {import(\"./TileJSON.js\").Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {string} [url] TileJSON endpoint that provides the configuration for this source.\n * Request will be made through JSONP. If not provided, `tileJSON` must be configured.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for UTFGrid interaction data loaded from TileJSON format.\n * @api\n */\n\nvar UTFGrid =\n/** @class */\nfunction (_super) {\n  __extends(UTFGrid, _super);\n  /**\n   * @param {Options} options Source options.\n   */\n\n\n  function UTFGrid(options) {\n    var _this = _super.call(this, {\n      projection: getProjection('EPSG:3857'),\n      state: SourceState.LOADING,\n      zDirection: options.zDirection\n    }) || this;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n\n    _this.preemptive_ = options.preemptive !== undefined ? options.preemptive : true;\n    /**\n     * @private\n     * @type {!import(\"../Tile.js\").UrlFunction}\n     */\n\n    _this.tileUrlFunction_ = nullTileUrlFunction;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    _this.template_ = undefined;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.jsonp_ = options.jsonp || false;\n\n    if (options.url) {\n      if (_this.jsonp_) {\n        requestJSONP(options.url, _this.handleTileJSONResponse.bind(_this), _this.handleTileJSONError.bind(_this));\n      } else {\n        var client = new XMLHttpRequest();\n        client.addEventListener('load', _this.onXHRLoad_.bind(_this));\n        client.addEventListener('error', _this.onXHRError_.bind(_this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      _this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\n    }\n\n    return _this;\n  }\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n\n\n  UTFGrid.prototype.onXHRLoad_ = function (event) {\n    var client =\n    /** @type {XMLHttpRequest} */\n    event.target; // status will be 0 for file:// urls\n\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      var response = void 0;\n\n      try {\n        response =\n        /** @type {import(\"./TileJSON.js\").Config} */\n        JSON.parse(client.responseText);\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  };\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n\n\n  UTFGrid.prototype.onXHRError_ = function (event) {\n    this.handleTileJSONError();\n  };\n  /**\n   * Return the template from TileJSON.\n   * @return {string|undefined} The template from TileJSON.\n   * @api\n   */\n\n\n  UTFGrid.prototype.getTemplate = function () {\n    return this.template_;\n  };\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate and resolution (or `null` if not yet loaded or\n   * in case of an error).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [opt_request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   * @api\n   */\n\n\n  UTFGrid.prototype.forDataAtCoordinateAndResolution = function (coordinate, resolution, callback, opt_request) {\n    if (this.tileGrid) {\n      var z = this.tileGrid.getZForResolution(resolution, this.zDirection);\n      var tileCoord = this.tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      var tile =\n      /** @type {!CustomTile} */\n      this.getTile(tileCoord[0], tileCoord[1], tileCoord[2], 1, this.getProjection());\n      tile.forDataAtCoordinate(coordinate, callback, opt_request);\n    } else {\n      if (opt_request === true) {\n        setTimeout(function () {\n          callback(null);\n        }, 0);\n      } else {\n        callback(null);\n      }\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  UTFGrid.prototype.handleTileJSONError = function () {\n    this.setState(SourceState.ERROR);\n  };\n  /**\n   * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse\n   * @protected\n   * @param {import(\"./TileJSON.js\").Config} tileJSON Tile JSON.\n   */\n\n\n  UTFGrid.prototype.handleTileJSONResponse = function (tileJSON) {\n    var epsg4326Projection = getProjection('EPSG:4326');\n    var sourceProjection = this.getProjection();\n    var extent;\n\n    if (tileJSON['bounds'] !== undefined) {\n      var transform = getTransformFromProjections(epsg4326Projection, sourceProjection);\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    var gridExtent = extentFromProjection(sourceProjection);\n    var minZoom = tileJSON['minzoom'] || 0;\n    var maxZoom = tileJSON['maxzoom'] || 22;\n    var tileGrid = createXYZ({\n      extent: gridExtent,\n      maxZoom: maxZoom,\n      minZoom: minZoom\n    });\n    this.tileGrid = tileGrid;\n    this.template_ = tileJSON['template'];\n    var grids = tileJSON['grids'];\n\n    if (!grids) {\n      this.setState(SourceState.ERROR);\n      return;\n    }\n\n    this.tileUrlFunction_ = createFromTemplates(grids, tileGrid);\n\n    if (tileJSON['attribution'] !== undefined) {\n      var attributionExtent_1 = extent !== undefined ? extent : gridExtent;\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent_1, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n\n        return null;\n      });\n    }\n\n    this.setState(SourceState.READY);\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!CustomTile} Tile.\n   */\n\n\n  UTFGrid.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n    var tileCoordKey = getKeyZXY(z, x, y);\n\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return this.tileCache.get(tileCoordKey);\n    } else {\n      var tileCoord = [z, x, y];\n      var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n      var tileUrl = this.tileUrlFunction_(urlTileCoord, pixelRatio, projection);\n      var tile = new CustomTile(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.tileGrid.getTileCoordExtent(tileCoord), this.preemptive_, this.jsonp_);\n      this.tileCache.set(tileCoordKey, tile);\n      return tile;\n    }\n  };\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n\n\n  UTFGrid.prototype.useTile = function (z, x, y) {\n    var tileCoordKey = getKeyZXY(z, x, y);\n\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  };\n\n  return UTFGrid;\n}(TileSource);\n\nexport default UTFGrid;","map":{"version":3,"mappings":"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","names":["EventType","SourceState","Tile","TileSource","TileState","applyTransform","intersects","assert","createFromTemplates","nullTileUrlFunction","createXYZ","extentFromProjection","getKeyZXY","get","getProjection","getTransformFromProjections","listenOnce","jsonp","requestJSONP","__extends","tileCoord","state","src","extent","preemptive","_super","_this","src_","extent_","preemptive_","grid_","keys_","data_","jsonp_","CustomTile","coordinate","xRelative","yRelative","row","Math","floor","length","code","charCodeAt","data","id","callback","opt_request","EMPTY","IDLE","CHANGE","e","getData","loadInternal_","setTimeout","bind","ERROR","changed","json","LOADED","LOADING","handleLoad_","handleError_","client","XMLHttpRequest","addEventListener","onXHRLoad_","onXHRError_","open","send","event","target","status","response","JSON","parse","responseText","err","setState","options","projection","zDirection","undefined","tileUrlFunction_","template_","url","handleTileJSONResponse","handleTileJSONError","tileJSON","UTFGrid","resolution","tileGrid","z","getZForResolution","getTileCoordForCoordAndZ","tile","getTile","forDataAtCoordinate","epsg4326Projection","sourceProjection","transform","gridExtent","minZoom","maxZoom","grids","attributionExtent_1","setAttributions","frameState","READY","x","y","pixelRatio","tileCoordKey","tileCache","containsKey","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","getTileCoordExtent","set"],"sourceRoot":"","sources":["../src/source/UTFGrid.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}