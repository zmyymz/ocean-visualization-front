{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Geolocation\n */\n\n\nimport BaseEvent from './events/Event.js';\nimport BaseObject from './Object.js';\nimport EventType from './events/EventType.js';\nimport { circular as circularPolygon } from './geom/Polygon.js';\nimport { get as getProjection, getTransformFromProjections, identityTransform } from './proj.js';\nimport { toRadians } from './math.js';\n/**\n * @enum {string}\n */\n\nvar Property = {\n  ACCURACY: 'accuracy',\n  ACCURACY_GEOMETRY: 'accuracyGeometry',\n  ALTITUDE: 'altitude',\n  ALTITUDE_ACCURACY: 'altitudeAccuracy',\n  HEADING: 'heading',\n  POSITION: 'position',\n  PROJECTION: 'projection',\n  SPEED: 'speed',\n  TRACKING: 'tracking',\n  TRACKING_OPTIONS: 'trackingOptions'\n};\n/**\n * @classdesc\n * Events emitted on Geolocation error.\n */\n\nvar GeolocationError =\n/** @class */\nfunction (_super) {\n  __extends(GeolocationError, _super);\n  /**\n   * @param {GeolocationPositionError} error error object.\n   */\n\n\n  function GeolocationError(error) {\n    var _this = _super.call(this, EventType.ERROR) || this;\n    /**\n     * @type {number}\n     */\n\n\n    _this.code = error.code;\n    /**\n     * @type {string}\n     */\n\n    _this.message = error.message;\n    return _this;\n  }\n\n  return GeolocationError;\n}(BaseEvent);\n/**\n * @typedef {Object} Options\n * @property {boolean} [tracking=false] Start Tracking right after\n * instantiation.\n * @property {PositionOptions} [trackingOptions] Tracking options.\n * See https://www.w3.org/TR/geolocation-API/#position_options_interface.\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\n * is reported in.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|\n *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|\n *    'change:trackingOptions'} GeolocationObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<GeolocationObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'error', GeolocationError, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|GeolocationObjectEventTypes|\n *     'error', Return>} GeolocationOnSignature\n */\n\n/**\n * @classdesc\n * Helper class for providing HTML5 Geolocation capabilities.\n * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)\n * is used to locate a user's position.\n *\n * To get notified of position changes, register a listener for the generic\n * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.\n *\n * Example:\n *\n *     var geolocation = new Geolocation({\n *       // take the projection to use from the map's view\n *       projection: view.getProjection()\n *     });\n *     // listen to changes in position\n *     geolocation.on('change', function(evt) {\n *       window.console.log(geolocation.getPosition());\n *     });\n *\n * @fires module:ol/events/Event~BaseEvent#event:error\n * @api\n */\n\n\nvar Geolocation =\n/** @class */\nfunction (_super) {\n  __extends(Geolocation, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function Geolocation(opt_options) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {GeolocationOnSignature<void>}\n     */\n\n    _this.un;\n    var options = opt_options || {};\n    /**\n     * The unprojected (EPSG:4326) device position.\n     * @private\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n\n    _this.position_ = null;\n    /**\n     * @private\n     * @type {import(\"./proj.js\").TransformFunction}\n     */\n\n    _this.transform_ = identityTransform;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.watchId_ = undefined;\n\n    _this.addChangeListener(Property.PROJECTION, _this.handleProjectionChanged_);\n\n    _this.addChangeListener(Property.TRACKING, _this.handleTrackingChanged_);\n\n    if (options.projection !== undefined) {\n      _this.setProjection(options.projection);\n    }\n\n    if (options.trackingOptions !== undefined) {\n      _this.setTrackingOptions(options.trackingOptions);\n    }\n\n    _this.setTracking(options.tracking !== undefined ? options.tracking : false);\n\n    return _this;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  Geolocation.prototype.disposeInternal = function () {\n    this.setTracking(false);\n\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\n   * @private\n   */\n\n\n  Geolocation.prototype.handleProjectionChanged_ = function () {\n    var projection = this.getProjection();\n\n    if (projection) {\n      this.transform_ = getTransformFromProjections(getProjection('EPSG:4326'), projection);\n\n      if (this.position_) {\n        this.set(Property.POSITION, this.transform_(this.position_));\n      }\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  Geolocation.prototype.handleTrackingChanged_ = function () {\n    if ('geolocation' in navigator) {\n      var tracking = this.getTracking();\n\n      if (tracking && this.watchId_ === undefined) {\n        this.watchId_ = navigator.geolocation.watchPosition(this.positionChange_.bind(this), this.positionError_.bind(this), this.getTrackingOptions());\n      } else if (!tracking && this.watchId_ !== undefined) {\n        navigator.geolocation.clearWatch(this.watchId_);\n        this.watchId_ = undefined;\n      }\n    }\n  };\n  /**\n   * @private\n   * @param {GeolocationPosition} position position event.\n   */\n\n\n  Geolocation.prototype.positionChange_ = function (position) {\n    var coords = position.coords;\n    this.set(Property.ACCURACY, coords.accuracy);\n    this.set(Property.ALTITUDE, coords.altitude === null ? undefined : coords.altitude);\n    this.set(Property.ALTITUDE_ACCURACY, coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy);\n    this.set(Property.HEADING, coords.heading === null ? undefined : toRadians(coords.heading));\n\n    if (!this.position_) {\n      this.position_ = [coords.longitude, coords.latitude];\n    } else {\n      this.position_[0] = coords.longitude;\n      this.position_[1] = coords.latitude;\n    }\n\n    var projectedPosition = this.transform_(this.position_);\n    this.set(Property.POSITION, projectedPosition);\n    this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\n    var geometry = circularPolygon(this.position_, coords.accuracy);\n    geometry.applyTransform(this.transform_);\n    this.set(Property.ACCURACY_GEOMETRY, geometry);\n    this.changed();\n  };\n  /**\n   * @private\n   * @param {GeolocationPositionError} error error object.\n   */\n\n\n  Geolocation.prototype.positionError_ = function (error) {\n    this.dispatchEvent(new GeolocationError(error));\n  };\n  /**\n   * Get the accuracy of the position in meters.\n   * @return {number|undefined} The accuracy of the position measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getAccuracy = function () {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.ACCURACY)\n    );\n  };\n  /**\n   * Get a geometry of the position accuracy.\n   * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getAccuracyGeometry = function () {\n    return (\n      /** @type {?import(\"./geom/Polygon.js\").default} */\n      this.get(Property.ACCURACY_GEOMETRY) || null\n    );\n  };\n  /**\n   * Get the altitude associated with the position.\n   * @return {number|undefined} The altitude of the position in meters above mean\n   *     sea level.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getAltitude = function () {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.ALTITUDE)\n    );\n  };\n  /**\n   * Get the altitude accuracy of the position.\n   * @return {number|undefined} The accuracy of the altitude measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getAltitudeAccuracy = function () {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.ALTITUDE_ACCURACY)\n    );\n  };\n  /**\n   * Get the heading as radians clockwise from North.\n   * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\n   * is set to `true` in the tracking options.\n   * @return {number|undefined} The heading of the device in radians from north.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getHeading = function () {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.HEADING)\n    );\n  };\n  /**\n   * Get the position of the device.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\n   *     in the current projection.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getPosition = function () {\n    return (\n      /** @type {import(\"./coordinate.js\").Coordinate|undefined} */\n      this.get(Property.POSITION)\n    );\n  };\n  /**\n   * Get the projection associated with the position.\n   * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getProjection = function () {\n    return (\n      /** @type {import(\"./proj/Projection.js\").default|undefined} */\n      this.get(Property.PROJECTION)\n    );\n  };\n  /**\n   * Get the speed in meters per second.\n   * @return {number|undefined} The instantaneous speed of the device in meters\n   *     per second.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getSpeed = function () {\n    return (\n      /** @type {number|undefined} */\n      this.get(Property.SPEED)\n    );\n  };\n  /**\n   * Determine if the device location is being tracked.\n   * @return {boolean} The device location is being tracked.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getTracking = function () {\n    return (\n      /** @type {boolean} */\n      this.get(Property.TRACKING)\n    );\n  };\n  /**\n   * Get the tracking options.\n   * See https://www.w3.org/TR/geolocation-API/#position-options.\n   * @return {PositionOptions|undefined} PositionOptions as defined by\n   *     the [HTML5 Geolocation spec\n   *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getTrackingOptions = function () {\n    return (\n      /** @type {PositionOptions|undefined} */\n      this.get(Property.TRACKING_OPTIONS)\n    );\n  };\n  /**\n   * Set the projection to use for transforming the coordinates.\n   * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.setProjection = function (projection) {\n    this.set(Property.PROJECTION, getProjection(projection));\n  };\n  /**\n   * Enable or disable tracking.\n   * @param {boolean} tracking Enable tracking.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.setTracking = function (tracking) {\n    this.set(Property.TRACKING, tracking);\n  };\n  /**\n   * Set the tracking options.\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\n   * @param {PositionOptions} options PositionOptions as defined by the\n   *     [HTML5 Geolocation spec\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.setTrackingOptions = function (options) {\n    this.set(Property.TRACKING_OPTIONS, options);\n  };\n\n  return Geolocation;\n}(BaseObject);\n\nexport default Geolocation;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAGA,OAAOA,SAAP,MAAsB,mBAAtB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,SAAQC,QAAQ,IAAIC,eAApB,QAA0C,mBAA1C;AACA,SACEC,GAAG,IAAIC,aADT,EAEEC,2BAFF,EAGEC,iBAHF,QAIO,WAJP;AAKA,SAAQC,SAAR,QAAwB,WAAxB;AAEA;;;;AAGA,IAAMC,QAAQ,GAAG;AACfC,UAAQ,EAAE,UADK;AAEfC,mBAAiB,EAAE,kBAFJ;AAGfC,UAAQ,EAAE,UAHK;AAIfC,mBAAiB,EAAE,kBAJJ;AAKfC,SAAO,EAAE,SALM;AAMfC,UAAQ,EAAE,UANK;AAOfC,YAAU,EAAE,YAPG;AAQfC,OAAK,EAAE,OARQ;AASfC,UAAQ,EAAE,UATK;AAUfC,kBAAgB,EAAE;AAVH,CAAjB;AAaA;;;;;AAIA;AAAA;AAAA;AAA+BC;AAC7B;;;;;AAGA,4BAAYC,KAAZ,EAAiB;AAAjB,gBACEC,kBAAMrB,SAAS,CAACsB,KAAhB,KAAsB,IADxB;AAGE;;;;;AAGAC,SAAI,CAACC,IAAL,GAAYJ,KAAK,CAACI,IAAlB;AAEA;;;;AAGAD,SAAI,CAACE,OAAL,GAAeL,KAAK,CAACK,OAArB;;AACD;;AACH;AAjBA,EAA+B3B,SAA/B;AAmBA;;;;;;;;;;AAUA;;;;;;AAMA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AAAA;AAAA;AAA0BqB;AACxB;;;;;AAGA,uBAAYO,WAAZ,EAAuB;AAAvB,gBACEL,qBAAO,IADT;AAGE;;;;;AAGAE,SAAI,CAACI,EAAL;AAEA;;;;AAGAJ,SAAI,CAACK,IAAL;AAEA;;;;AAGAL,SAAI,CAACM,EAAL;AAEA,QAAMC,OAAO,GAAGJ,WAAW,IAAI,EAA/B;AAEA;;;;;;AAKAH,SAAI,CAACQ,SAAL,GAAiB,IAAjB;AAEA;;;;;AAIAR,SAAI,CAACS,UAAL,GAAkB1B,iBAAlB;AAEA;;;;;AAIAiB,SAAI,CAACU,QAAL,GAAgBC,SAAhB;;AAEAX,SAAI,CAACY,iBAAL,CAAuB3B,QAAQ,CAACO,UAAhC,EAA4CQ,KAAI,CAACa,wBAAjD;;AACAb,SAAI,CAACY,iBAAL,CAAuB3B,QAAQ,CAACS,QAAhC,EAA0CM,KAAI,CAACc,sBAA/C;;AAEA,QAAIP,OAAO,CAACQ,UAAR,KAAuBJ,SAA3B,EAAsC;AACpCX,WAAI,CAACgB,aAAL,CAAmBT,OAAO,CAACQ,UAA3B;AACD;;AACD,QAAIR,OAAO,CAACU,eAAR,KAA4BN,SAAhC,EAA2C;AACzCX,WAAI,CAACkB,kBAAL,CAAwBX,OAAO,CAACU,eAAhC;AACD;;AAEDjB,SAAI,CAACmB,WAAL,CAAiBZ,OAAO,CAACa,QAAR,KAAqBT,SAArB,GAAiCJ,OAAO,CAACa,QAAzC,GAAoD,KAArE;;;AACD;AAED;;;;;AAGAC;AACE,SAAKF,WAAL,CAAiB,KAAjB;;AACArB,qBAAMwB,eAAN,CAAqBC,IAArB,CAAqB,IAArB;AACD,GAHD;AAKA;;;;;AAGAF;AACE,QAAMN,UAAU,GAAG,KAAKlC,aAAL,EAAnB;;AACA,QAAIkC,UAAJ,EAAgB;AACd,WAAKN,UAAL,GAAkB3B,2BAA2B,CAC3CD,aAAa,CAAC,WAAD,CAD8B,EAE3CkC,UAF2C,CAA7C;;AAIA,UAAI,KAAKP,SAAT,EAAoB;AAClB,aAAKgB,GAAL,CAASvC,QAAQ,CAACM,QAAlB,EAA4B,KAAKkB,UAAL,CAAgB,KAAKD,SAArB,CAA5B;AACD;AACF;AACF,GAXD;AAaA;;;;;AAGAa;AACE,QAAI,iBAAiBI,SAArB,EAAgC;AAC9B,UAAML,QAAQ,GAAG,KAAKM,WAAL,EAAjB;;AACA,UAAIN,QAAQ,IAAI,KAAKV,QAAL,KAAkBC,SAAlC,EAA6C;AAC3C,aAAKD,QAAL,GAAgBe,SAAS,CAACE,WAAV,CAAsBC,aAAtB,CACd,KAAKC,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CADc,EAEd,KAAKC,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAFc,EAGd,KAAKE,kBAAL,EAHc,CAAhB;AAKD,OAND,MAMO,IAAI,CAACZ,QAAD,IAAa,KAAKV,QAAL,KAAkBC,SAAnC,EAA8C;AACnDc,iBAAS,CAACE,WAAV,CAAsBM,UAAtB,CAAiC,KAAKvB,QAAtC;AACA,aAAKA,QAAL,GAAgBC,SAAhB;AACD;AACF;AACF,GAdD;AAgBA;;;;;;AAIAU,oDAAgBa,QAAhB,EAAwB;AACtB,QAAMC,MAAM,GAAGD,QAAQ,CAACC,MAAxB;AACA,SAAKX,GAAL,CAASvC,QAAQ,CAACC,QAAlB,EAA4BiD,MAAM,CAACC,QAAnC;AACA,SAAKZ,GAAL,CACEvC,QAAQ,CAACG,QADX,EAEE+C,MAAM,CAACE,QAAP,KAAoB,IAApB,GAA2B1B,SAA3B,GAAuCwB,MAAM,CAACE,QAFhD;AAIA,SAAKb,GAAL,CACEvC,QAAQ,CAACI,iBADX,EAEE8C,MAAM,CAACG,gBAAP,KAA4B,IAA5B,GAAmC3B,SAAnC,GAA+CwB,MAAM,CAACG,gBAFxD;AAIA,SAAKd,GAAL,CACEvC,QAAQ,CAACK,OADX,EAEE6C,MAAM,CAACI,OAAP,KAAmB,IAAnB,GAA0B5B,SAA1B,GAAsC3B,SAAS,CAACmD,MAAM,CAACI,OAAR,CAFjD;;AAIA,QAAI,CAAC,KAAK/B,SAAV,EAAqB;AACnB,WAAKA,SAAL,GAAiB,CAAC2B,MAAM,CAACK,SAAR,EAAmBL,MAAM,CAACM,QAA1B,CAAjB;AACD,KAFD,MAEO;AACL,WAAKjC,SAAL,CAAe,CAAf,IAAoB2B,MAAM,CAACK,SAA3B;AACA,WAAKhC,SAAL,CAAe,CAAf,IAAoB2B,MAAM,CAACM,QAA3B;AACD;;AACD,QAAMC,iBAAiB,GAAG,KAAKjC,UAAL,CAAgB,KAAKD,SAArB,CAA1B;AACA,SAAKgB,GAAL,CAASvC,QAAQ,CAACM,QAAlB,EAA4BmD,iBAA5B;AACA,SAAKlB,GAAL,CAASvC,QAAQ,CAACQ,KAAlB,EAAyB0C,MAAM,CAACQ,KAAP,KAAiB,IAAjB,GAAwBhC,SAAxB,GAAoCwB,MAAM,CAACQ,KAApE;AACA,QAAMC,QAAQ,GAAGjE,eAAe,CAAC,KAAK6B,SAAN,EAAiB2B,MAAM,CAACC,QAAxB,CAAhC;AACAQ,YAAQ,CAACC,cAAT,CAAwB,KAAKpC,UAA7B;AACA,SAAKe,GAAL,CAASvC,QAAQ,CAACE,iBAAlB,EAAqCyD,QAArC;AACA,SAAKE,OAAL;AACD,GA5BD;AA8BA;;;;;;AAIAzB,mDAAexB,KAAf,EAAoB;AAClB,SAAKkD,aAAL,CAAmB,IAAIC,gBAAJ,CAAqBnD,KAArB,CAAnB;AACD,GAFD;AAIA;;;;;;;;;AAOAwB;AACE;AAAO;AAAiC,WAAKzC,GAAL,CAASK,QAAQ,CAACC,QAAlB;AAAxC;AACD,GAFD;AAIA;;;;;;;;AAMAmC;AACE;AAAO;AACL,WAAKzC,GAAL,CAASK,QAAQ,CAACE,iBAAlB,KAAwC;AAD1C;AAGD,GAJD;AAMA;;;;;;;;;AAOAkC;AACE;AAAO;AAAiC,WAAKzC,GAAL,CAASK,QAAQ,CAACG,QAAlB;AAAxC;AACD,GAFD;AAIA;;;;;;;;;AAOAiC;AACE;AAAO;AACL,WAAKzC,GAAL,CAASK,QAAQ,CAACI,iBAAlB;AADF;AAGD,GAJD;AAMA;;;;;;;;;;AAQAgC;AACE;AAAO;AAAiC,WAAKzC,GAAL,CAASK,QAAQ,CAACK,OAAlB;AAAxC;AACD,GAFD;AAIA;;;;;;;;;AAOA+B;AACE;AAAO;AACL,WAAKzC,GAAL,CAASK,QAAQ,CAACM,QAAlB;AADF;AAGD,GAJD;AAMA;;;;;;;;;AAOA8B;AACE;AAAO;AACL,WAAKzC,GAAL,CAASK,QAAQ,CAACO,UAAlB;AADF;AAGD,GAJD;AAMA;;;;;;;;;AAOA6B;AACE;AAAO;AAAiC,WAAKzC,GAAL,CAASK,QAAQ,CAACQ,KAAlB;AAAxC;AACD,GAFD;AAIA;;;;;;;;AAMA4B;AACE;AAAO;AAAwB,WAAKzC,GAAL,CAASK,QAAQ,CAACS,QAAlB;AAA/B;AACD,GAFD;AAIA;;;;;;;;;;;AASA2B;AACE;AAAO;AACL,WAAKzC,GAAL,CAASK,QAAQ,CAACU,gBAAlB;AADF;AAGD,GAJD;AAMA;;;;;;;;;AAOA0B,kDAAcN,UAAd,EAAwB;AACtB,SAAKS,GAAL,CAASvC,QAAQ,CAACO,UAAlB,EAA8BX,aAAa,CAACkC,UAAD,CAA3C;AACD,GAFD;AAIA;;;;;;;;AAMAM,gDAAYD,QAAZ,EAAoB;AAClB,SAAKI,GAAL,CAASvC,QAAQ,CAACS,QAAlB,EAA4B0B,QAA5B;AACD,GAFD;AAIA;;;;;;;;;;;AASAC,uDAAmBd,OAAnB,EAA0B;AACxB,SAAKiB,GAAL,CAASvC,QAAQ,CAACU,gBAAlB,EAAoCY,OAApC;AACD,GAFD;;AAGF;AAvSA,EAA0B/B,UAA1B;;AAySA,eAAe6C,WAAf","names":["BaseEvent","BaseObject","EventType","circular","circularPolygon","get","getProjection","getTransformFromProjections","identityTransform","toRadians","Property","ACCURACY","ACCURACY_GEOMETRY","ALTITUDE","ALTITUDE_ACCURACY","HEADING","POSITION","PROJECTION","SPEED","TRACKING","TRACKING_OPTIONS","__extends","error","_super","ERROR","_this","code","message","opt_options","on","once","un","options","position_","transform_","watchId_","undefined","addChangeListener","handleProjectionChanged_","handleTrackingChanged_","projection","setProjection","trackingOptions","setTrackingOptions","setTracking","tracking","Geolocation","disposeInternal","call","set","navigator","getTracking","geolocation","watchPosition","positionChange_","bind","positionError_","getTrackingOptions","clearWatch","position","coords","accuracy","altitude","altitudeAccuracy","heading","longitude","latitude","projectedPosition","speed","geometry","applyTransform","changed","dispatchEvent","GeolocationError"],"sourceRoot":"","sources":["src/Geolocation.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}