{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/IGC\n */\n\n\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport TextFeature from './TextFeature.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * IGC altitude/z. One of 'barometric', 'gps', 'none'.\n * @enum {string}\n */\n\nvar IGCZ = {\n  BAROMETRIC: 'barometric',\n  GPS: 'gps',\n  NONE: 'none'\n};\n/**\n * @const\n * @type {RegExp}\n */\n\nvar B_RECORD_RE = /^B(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{5})([NS])(\\d{3})(\\d{5})([EW])([AV])(\\d{5})(\\d{5})/;\n/**\n * @const\n * @type {RegExp}\n */\n\nvar H_RECORD_RE = /^H.([A-Z]{3}).*?:(.*)/;\n/**\n * @const\n * @type {RegExp}\n */\n\nvar HFDTE_RECORD_RE = /^HFDTE(\\d{2})(\\d{2})(\\d{2})/;\n/**\n * A regular expression matching the newline characters `\\r\\n`, `\\r` and `\\n`.\n *\n * @const\n * @type {RegExp}\n */\n\nvar NEWLINE_RE = /\\r\\n|\\r|\\n/;\n/**\n * @typedef {Object} Options\n * @property {IGCZ|string} [altitudeMode='none'] Altitude mode. Possible\n * values are `'barometric'`, `'gps'`, and `'none'`.\n */\n\n/**\n * @classdesc\n * Feature format for `*.igc` flight recording files.\n *\n * As IGC sources contain a single feature,\n * {@link module:ol/format/IGC~IGC#readFeatures} will return the feature in an\n * array\n *\n * @api\n */\n\nvar IGC =\n/** @class */\nfunction (_super) {\n  __extends(IGC, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function IGC(opt_options) {\n    var _this = _super.call(this) || this;\n\n    var options = opt_options ? opt_options : {};\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n    _this.dataProjection = getProjection('EPSG:4326');\n    /**\n     * @private\n     * @type {IGCZ}\n     */\n\n    _this.altitudeMode_ = options.altitudeMode ? options.altitudeMode : IGCZ.NONE;\n    return _this;\n  }\n  /**\n   * @protected\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  IGC.prototype.readFeatureFromText = function (text, opt_options) {\n    var altitudeMode = this.altitudeMode_;\n    var lines = text.split(NEWLINE_RE);\n    /** @type {Object<string, string>} */\n\n    var properties = {};\n    var flatCoordinates = [];\n    var year = 2000;\n    var month = 0;\n    var day = 1;\n    var lastDateTime = -1;\n    var i, ii;\n\n    for (i = 0, ii = lines.length; i < ii; ++i) {\n      var line = lines[i];\n      var m = void 0;\n\n      if (line.charAt(0) == 'B') {\n        m = B_RECORD_RE.exec(line);\n\n        if (m) {\n          var hour = parseInt(m[1], 10);\n          var minute = parseInt(m[2], 10);\n          var second = parseInt(m[3], 10);\n          var y = parseInt(m[4], 10) + parseInt(m[5], 10) / 60000;\n\n          if (m[6] == 'S') {\n            y = -y;\n          }\n\n          var x = parseInt(m[7], 10) + parseInt(m[8], 10) / 60000;\n\n          if (m[9] == 'W') {\n            x = -x;\n          }\n\n          flatCoordinates.push(x, y);\n\n          if (altitudeMode != IGCZ.NONE) {\n            var z = void 0;\n\n            if (altitudeMode == IGCZ.GPS) {\n              z = parseInt(m[11], 10);\n            } else if (altitudeMode == IGCZ.BAROMETRIC) {\n              z = parseInt(m[12], 10);\n            } else {\n              z = 0;\n            }\n\n            flatCoordinates.push(z);\n          }\n\n          var dateTime = Date.UTC(year, month, day, hour, minute, second); // Detect UTC midnight wrap around.\n\n          if (dateTime < lastDateTime) {\n            dateTime = Date.UTC(year, month, day + 1, hour, minute, second);\n          }\n\n          flatCoordinates.push(dateTime / 1000);\n          lastDateTime = dateTime;\n        }\n      } else if (line.charAt(0) == 'H') {\n        m = HFDTE_RECORD_RE.exec(line);\n\n        if (m) {\n          day = parseInt(m[1], 10);\n          month = parseInt(m[2], 10) - 1;\n          year = 2000 + parseInt(m[3], 10);\n        } else {\n          m = H_RECORD_RE.exec(line);\n\n          if (m) {\n            properties[m[1]] = m[2].trim();\n          }\n        }\n      }\n    }\n\n    if (flatCoordinates.length === 0) {\n      return null;\n    }\n\n    var layout = altitudeMode == IGCZ.NONE ? GeometryLayout.XYM : GeometryLayout.XYZM;\n    var lineString = new LineString(flatCoordinates, layout);\n    var feature = new Feature(transformGeometryWithOptions(lineString, false, opt_options));\n    feature.setProperties(properties, true);\n    return feature;\n  };\n  /**\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n\n\n  IGC.prototype.readFeaturesFromText = function (text, opt_options) {\n    var feature = this.readFeatureFromText(text, opt_options);\n\n    if (feature) {\n      return [feature];\n    } else {\n      return [];\n    }\n  };\n\n  return IGC;\n}(TextFeature);\n\nexport default IGC;","map":{"version":3,"mappings":"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","names":["Feature","GeometryLayout","LineString","TextFeature","get","getProjection","transformGeometryWithOptions","IGCZ","BAROMETRIC","GPS","NONE","B_RECORD_RE","H_RECORD_RE","HFDTE_RECORD_RE","NEWLINE_RE","__extends","opt_options","_super","options","_this","dataProjection","altitudeMode_","altitudeMode","IGC","text","lines","split","properties","flatCoordinates","year","month","day","lastDateTime","i","ii","length","line","m","charAt","exec","hour","parseInt","minute","second","y","x","push","z","dateTime","Date","UTC","trim","layout","XYM","XYZM","lineString","feature","setProperties","readFeatureFromText"],"sourceRoot":"","sources":["../src/format/IGC.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}