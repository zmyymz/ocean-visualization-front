{"ast":null,"code":"/**\n * @module ol/geom/flat/orient\n */\nimport { coordinates as reverseCoordinates } from './reverse.js';\n/**\n * Is the linear ring oriented clockwise in a coordinate system with a bottom-left\n * coordinate origin? For a coordinate system with a top-left coordinate origin,\n * the ring's orientation is clockwise when this function returns false.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {boolean} Is clockwise.\n */\n\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\n  // https://stackoverflow.com/q/1165647/clockwise-method#1165943\n  // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\n  var edge = 0;\n  var x1 = flatCoordinates[end - stride];\n  var y1 = flatCoordinates[end - stride + 1];\n\n  for (; offset < end; offset += stride) {\n    var x2 = flatCoordinates[offset];\n    var y2 = flatCoordinates[offset + 1];\n    edge += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n\n  return edge === 0 ? undefined : edge > 0;\n}\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\n\nexport function linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right) {\n  var right = opt_right !== undefined ? opt_right : false;\n\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);\n\n    if (i === 0) {\n      if (right && isClockwise || !right && !isClockwise) {\n        return false;\n      }\n    } else {\n      if (right && !isClockwise || !right && isClockwise) {\n        return false;\n      }\n    }\n\n    offset = end;\n  }\n\n  return true;\n}\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\n\nexport function linearRingssAreOriented(flatCoordinates, offset, endss, stride, opt_right) {\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n\n    if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right)) {\n      return false;\n    }\n\n    if (ends.length) {\n      offset = ends[ends.length - 1];\n    }\n  }\n\n  return true;\n}\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\n\nexport function orientLinearRings(flatCoordinates, offset, ends, stride, opt_right) {\n  var right = opt_right !== undefined ? opt_right : false;\n\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);\n    var reverse = i === 0 ? right && isClockwise || !right && !isClockwise : right && !isClockwise || !right && isClockwise;\n\n    if (reverse) {\n      reverseCoordinates(flatCoordinates, offset, end, stride);\n    }\n\n    offset = end;\n  }\n\n  return offset;\n}\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\n\nexport function orientLinearRingsArray(flatCoordinates, offset, endss, stride, opt_right) {\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    offset = orientLinearRings(flatCoordinates, offset, endss[i], stride, opt_right);\n  }\n\n  return offset;\n}\n/**\n * Return a two-dimensional endss\n * @param {Array<number>} flatCoordinates Flat coordinates\n * @param {Array<number>} ends Linear ring end indexes\n * @return {Array<Array<number>>} Two dimensional endss array that can\n * be used to contruct a MultiPolygon\n */\n\nexport function inflateEnds(flatCoordinates, ends) {\n  var endss = [];\n  var offset = 0;\n  var prevEndIndex = 0;\n\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i]; // classifies an array of rings into polygons with outer rings and holes\n\n    if (!linearRingIsClockwise(flatCoordinates, offset, end, 2)) {\n      endss.push(ends.slice(prevEndIndex, i + 1));\n    } else {\n      if (endss.length === 0) {\n        continue;\n      }\n\n      endss[endss.length - 1].push(ends[prevEndIndex]);\n    }\n\n    prevEndIndex = i + 1;\n    offset = end;\n  }\n\n  return endss;\n}","map":{"version":3,"mappings":"AAAA;;;AAGA,SAAQA,WAAW,IAAIC,kBAAvB,QAAgD,cAAhD;AAEA;;;;;;;;;;;AAUA,OAAM,SAAUC,qBAAV,CAAgCC,eAAhC,EAAiDC,MAAjD,EAAyDC,GAAzD,EAA8DC,MAA9D,EAAoE;AACxE;AACA;AACA,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,EAAE,GAAGL,eAAe,CAACE,GAAG,GAAGC,MAAP,CAAxB;AACA,MAAIG,EAAE,GAAGN,eAAe,CAACE,GAAG,GAAGC,MAAN,GAAe,CAAhB,CAAxB;;AACA,SAAOF,MAAM,GAAGC,GAAhB,EAAqBD,MAAM,IAAIE,MAA/B,EAAuC;AACrC,QAAMI,EAAE,GAAGP,eAAe,CAACC,MAAD,CAA1B;AACA,QAAMO,EAAE,GAAGR,eAAe,CAACC,MAAM,GAAG,CAAV,CAA1B;AACAG,QAAI,IAAI,CAACG,EAAE,GAAGF,EAAN,KAAaG,EAAE,GAAGF,EAAlB,CAAR;AACAD,MAAE,GAAGE,EAAL;AACAD,MAAE,GAAGE,EAAL;AACD;;AACD,SAAOJ,IAAI,KAAK,CAAT,GAAaK,SAAb,GAAyBL,IAAI,GAAG,CAAvC;AACD;AAED;;;;;;;;;;;;;;AAaA,OAAM,SAAUM,sBAAV,CACJV,eADI,EAEJC,MAFI,EAGJU,IAHI,EAIJR,MAJI,EAKJS,SALI,EAKK;AAET,MAAMC,KAAK,GAAGD,SAAS,KAAKH,SAAd,GAA0BG,SAA1B,GAAsC,KAApD;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGJ,IAAI,CAACK,MAA1B,EAAkCF,CAAC,GAAGC,EAAtC,EAA0C,EAAED,CAA5C,EAA+C;AAC7C,QAAMZ,GAAG,GAAGS,IAAI,CAACG,CAAD,CAAhB;AACA,QAAMG,WAAW,GAAGlB,qBAAqB,CACvCC,eADuC,EAEvCC,MAFuC,EAGvCC,GAHuC,EAIvCC,MAJuC,CAAzC;;AAMA,QAAIW,CAAC,KAAK,CAAV,EAAa;AACX,UAAKD,KAAK,IAAII,WAAV,IAA2B,CAACJ,KAAD,IAAU,CAACI,WAA1C,EAAwD;AACtD,eAAO,KAAP;AACD;AACF,KAJD,MAIO;AACL,UAAKJ,KAAK,IAAI,CAACI,WAAX,IAA4B,CAACJ,KAAD,IAAUI,WAA1C,EAAwD;AACtD,eAAO,KAAP;AACD;AACF;;AACDhB,UAAM,GAAGC,GAAT;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;;;;;;;AAaA,OAAM,SAAUgB,uBAAV,CACJlB,eADI,EAEJC,MAFI,EAGJkB,KAHI,EAIJhB,MAJI,EAKJS,SALI,EAKK;AAET,OAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGI,KAAK,CAACH,MAA3B,EAAmCF,CAAC,GAAGC,EAAvC,EAA2C,EAAED,CAA7C,EAAgD;AAC9C,QAAMH,IAAI,GAAGQ,KAAK,CAACL,CAAD,CAAlB;;AACA,QACE,CAACJ,sBAAsB,CAACV,eAAD,EAAkBC,MAAlB,EAA0BU,IAA1B,EAAgCR,MAAhC,EAAwCS,SAAxC,CADzB,EAEE;AACA,aAAO,KAAP;AACD;;AACD,QAAID,IAAI,CAACK,MAAT,EAAiB;AACff,YAAM,GAAGU,IAAI,CAACA,IAAI,CAACK,MAAL,GAAc,CAAf,CAAb;AACD;AACF;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;;;;;;;AAaA,OAAM,SAAUI,iBAAV,CACJpB,eADI,EAEJC,MAFI,EAGJU,IAHI,EAIJR,MAJI,EAKJS,SALI,EAKK;AAET,MAAMC,KAAK,GAAGD,SAAS,KAAKH,SAAd,GAA0BG,SAA1B,GAAsC,KAApD;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGJ,IAAI,CAACK,MAA1B,EAAkCF,CAAC,GAAGC,EAAtC,EAA0C,EAAED,CAA5C,EAA+C;AAC7C,QAAMZ,GAAG,GAAGS,IAAI,CAACG,CAAD,CAAhB;AACA,QAAMG,WAAW,GAAGlB,qBAAqB,CACvCC,eADuC,EAEvCC,MAFuC,EAGvCC,GAHuC,EAIvCC,MAJuC,CAAzC;AAMA,QAAMkB,OAAO,GACXP,CAAC,KAAK,CAAN,GACKD,KAAK,IAAII,WAAV,IAA2B,CAACJ,KAAD,IAAU,CAACI,WAD1C,GAEKJ,KAAK,IAAI,CAACI,WAAX,IAA4B,CAACJ,KAAD,IAAUI,WAH5C;;AAIA,QAAII,OAAJ,EAAa;AACXvB,wBAAkB,CAACE,eAAD,EAAkBC,MAAlB,EAA0BC,GAA1B,EAA+BC,MAA/B,CAAlB;AACD;;AACDF,UAAM,GAAGC,GAAT;AACD;;AACD,SAAOD,MAAP;AACD;AAED;;;;;;;;;;;;;;AAaA,OAAM,SAAUqB,sBAAV,CACJtB,eADI,EAEJC,MAFI,EAGJkB,KAHI,EAIJhB,MAJI,EAKJS,SALI,EAKK;AAET,OAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGI,KAAK,CAACH,MAA3B,EAAmCF,CAAC,GAAGC,EAAvC,EAA2C,EAAED,CAA7C,EAAgD;AAC9Cb,UAAM,GAAGmB,iBAAiB,CACxBpB,eADwB,EAExBC,MAFwB,EAGxBkB,KAAK,CAACL,CAAD,CAHmB,EAIxBX,MAJwB,EAKxBS,SALwB,CAA1B;AAOD;;AACD,SAAOX,MAAP;AACD;AAED;;;;;;;;AAOA,OAAM,SAAUsB,WAAV,CAAsBvB,eAAtB,EAAuCW,IAAvC,EAA2C;AAC/C,MAAMQ,KAAK,GAAG,EAAd;AACA,MAAIlB,MAAM,GAAG,CAAb;AACA,MAAIuB,YAAY,GAAG,CAAnB;;AACA,OAAK,IAAIV,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGJ,IAAI,CAACK,MAA1B,EAAkCF,CAAC,GAAGC,EAAtC,EAA0C,EAAED,CAA5C,EAA+C;AAC7C,QAAMZ,GAAG,GAAGS,IAAI,CAACG,CAAD,CAAhB,CAD6C,CAE7C;;AACA,QAAI,CAACf,qBAAqB,CAACC,eAAD,EAAkBC,MAAlB,EAA0BC,GAA1B,EAA+B,CAA/B,CAA1B,EAA6D;AAC3DiB,WAAK,CAACM,IAAN,CAAWd,IAAI,CAACe,KAAL,CAAWF,YAAX,EAAyBV,CAAC,GAAG,CAA7B,CAAX;AACD,KAFD,MAEO;AACL,UAAIK,KAAK,CAACH,MAAN,KAAiB,CAArB,EAAwB;AACtB;AACD;;AACDG,WAAK,CAACA,KAAK,CAACH,MAAN,GAAe,CAAhB,CAAL,CAAwBS,IAAxB,CAA6Bd,IAAI,CAACa,YAAD,CAAjC;AACD;;AACDA,gBAAY,GAAGV,CAAC,GAAG,CAAnB;AACAb,UAAM,GAAGC,GAAT;AACD;;AACD,SAAOiB,KAAP;AACD","names":["coordinates","reverseCoordinates","linearRingIsClockwise","flatCoordinates","offset","end","stride","edge","x1","y1","x2","y2","undefined","linearRingsAreOriented","ends","opt_right","right","i","ii","length","isClockwise","linearRingssAreOriented","endss","orientLinearRings","reverse","orientLinearRingsArray","inflateEnds","prevEndIndex","push","slice"],"sourceRoot":"","sources":["../../src/geom/flat/orient.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}