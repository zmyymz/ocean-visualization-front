{"ast":null,"code":"/**\n * @module ol/featureloader\n */\nimport FormatType from './format/FormatType.js';\nimport { VOID } from './functions.js';\n/**\n *\n * @type {boolean}\n * @private\n */\n\nvar withCredentials = false;\n/**\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\n * load features.\n *\n * This function takes up to 5 arguments. These are an {@link module:ol/extent~Extent} representing\n * the area to be loaded, a `{number}` representing the resolution (map units per pixel), an\n * {@link module:ol/proj/Projection~Projection} for the projection, an optional success callback that should get\n * the loaded features passed as an argument and an optional failure callback with no arguments. If\n * the callbacks are not used, the corresponding vector source will not fire `'featuresloadend'` and\n * `'featuresloaderror'` events. `this` within the function is bound to the\n * {@link module:ol/source/Vector~VectorSource} it's called from.\n *\n * The function is responsible for loading the features and adding them to the\n * source.\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default),\n *           import(\"./extent.js\").Extent,\n *           number,\n *           import(\"./proj/Projection.js\").default,\n *           function(Array<import(\"./Feature.js\").default>): void=,\n *           function(): void=): void} FeatureLoader\n * @api\n */\n\n/**\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\n * get the url to load features from.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\n * and an {@link module:ol/proj/Projection~Projection} for the projection  as\n * arguments and returns a `{string}` representing the URL.\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\n * @api\n */\n\n/**\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {function(Array<import(\"./Feature.js\").default>, import(\"./proj/Projection.js\").default): void} success Success\n *      Function called with the loaded features and optionally with the data projection.\n * @param {function(): void} failure Failure\n *      Function called when loading failed.\n */\n\nexport function loadFeaturesXhr(url, format, extent, resolution, projection, success, failure) {\n  var xhr = new XMLHttpRequest();\n  xhr.open('GET', typeof url === 'function' ? url(extent, resolution, projection) : url, true);\n\n  if (format.getType() == FormatType.ARRAY_BUFFER) {\n    xhr.responseType = 'arraybuffer';\n  }\n\n  xhr.withCredentials = withCredentials;\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n\n  xhr.onload = function (event) {\n    // status will be 0 for file:// urls\n    if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {\n      var type = format.getType();\n      /** @type {Document|Node|Object|string|undefined} */\n\n      var source = void 0;\n\n      if (type == FormatType.JSON || type == FormatType.TEXT) {\n        source = xhr.responseText;\n      } else if (type == FormatType.XML) {\n        source = xhr.responseXML;\n\n        if (!source) {\n          source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');\n        }\n      } else if (type == FormatType.ARRAY_BUFFER) {\n        source =\n        /** @type {ArrayBuffer} */\n        xhr.response;\n      }\n\n      if (source) {\n        success(\n        /** @type {Array<import(\"./Feature.js\").default>} */\n        format.readFeatures(source, {\n          extent: extent,\n          featureProjection: projection\n        }), format.readProjection(source));\n      } else {\n        failure();\n      }\n    } else {\n      failure();\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  xhr.onerror = failure;\n  xhr.send();\n}\n/**\n * Create an XHR feature loader for a `url` and `format`. The feature loader\n * loads features (with XHR), parses the features, and adds them to the\n * vector source.\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @return {FeatureLoader} The feature loader.\n * @api\n */\n\nexport function xhr(url, format) {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"./proj/Projection.js\").default} projection Projection.\n   * @param {function(Array<import(\"./Feature.js\").default>): void} [success] Success\n   *      Function called when loading succeeded.\n   * @param {function(): void} [failure] Failure\n   *      Function called when loading failed.\n   * @this {import(\"./source/Vector\").default}\n   */\n  return function (extent, resolution, projection, success, failure) {\n    var source =\n    /** @type {import(\"./source/Vector\").default} */\n    this;\n    loadFeaturesXhr(url, format, extent, resolution, projection,\n    /**\n     * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n     * @param {import(\"./proj/Projection.js\").default} dataProjection Data\n     * projection.\n     */\n    function (features, dataProjection) {\n      source.addFeatures(features);\n\n      if (success !== undefined) {\n        success(features);\n      }\n    },\n    /* FIXME handle error */\n    failure ? failure : VOID);\n  };\n}\n/**\n * Setter for the withCredentials configuration for the XHR.\n *\n * @param {boolean} xhrWithCredentials The value of withCredentials to set.\n * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/\n * @api\n */\n\nexport function setWithCredentials(xhrWithCredentials) {\n  withCredentials = xhrWithCredentials;\n}","map":{"version":3,"mappings":"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","names":["FormatType","VOID","withCredentials","loadFeaturesXhr","url","format","extent","resolution","projection","success","failure","xhr","XMLHttpRequest","open","getType","ARRAY_BUFFER","responseType","onload","event","status","type","source","JSON","TEXT","responseText","XML","responseXML","DOMParser","parseFromString","response","readFeatures","featureProjection","readProjection","onerror","send","features","dataProjection","addFeatures","undefined","setWithCredentials","xhrWithCredentials"],"sourceRoot":"","sources":["src/featureloader.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}