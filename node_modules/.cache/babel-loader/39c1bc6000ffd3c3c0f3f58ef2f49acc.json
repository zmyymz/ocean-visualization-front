{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/TopoJSON\n */\n\n\nimport Feature from '../Feature.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @typedef {import(\"topojson-specification\").Topology} TopoJSONTopology\n * @typedef {import(\"topojson-specification\").GeometryCollection} TopoJSONGeometryCollection\n * @typedef {import(\"topojson-specification\").GeometryObject} TopoJSONGeometry\n * @typedef {import(\"topojson-specification\").Point} TopoJSONPoint\n * @typedef {import(\"topojson-specification\").MultiPoint} TopoJSONMultiPoint\n * @typedef {import(\"topojson-specification\").LineString} TopoJSONLineString\n * @typedef {import(\"topojson-specification\").MultiLineString} TopoJSONMultiLineString\n * @typedef {import(\"topojson-specification\").Polygon} TopoJSONPolygon\n * @typedef {import(\"topojson-specification\").MultiPolygon} TopoJSONMultiPolygon\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {string} [layerName] Set the name of the TopoJSON topology\n * `objects`'s children as feature property with the specified name. This means\n * that when set to `'layer'`, a topology like\n * ```\n * {\n *   \"type\": \"Topology\",\n *   \"objects\": {\n *     \"example\": {\n *       \"type\": \"GeometryCollection\",\n *       \"geometries\": []\n *     }\n *   }\n * }\n * ```\n * will result in features that have a property `'layer'` set to `'example'`.\n * When not set, no property will be added to features.\n * @property {Array<string>} [layers] Names of the TopoJSON topology's\n * `objects`'s children to read features from.  If not provided, features will\n * be read from all children.\n */\n\n/**\n * @classdesc\n * Feature format for reading data in the TopoJSON format.\n *\n * @api\n */\n\nvar TopoJSON =\n/** @class */\nfunction (_super) {\n  __extends(TopoJSON, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function TopoJSON(opt_options) {\n    var _this = _super.call(this) || this;\n\n    var options = opt_options ? opt_options : {};\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    _this.layerName_ = options.layerName;\n    /**\n     * @private\n     * @type {?Array<string>}\n     */\n\n    _this.layers_ = options.layers ? options.layers : null;\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n    _this.dataProjection = getProjection(options.dataProjection ? options.dataProjection : 'EPSG:4326');\n    return _this;\n  }\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n\n\n  TopoJSON.prototype.readFeaturesFromObject = function (object, opt_options) {\n    if (object.type == 'Topology') {\n      var topoJSONTopology =\n      /** @type {TopoJSONTopology} */\n      object;\n      var transform = void 0,\n          scale = null,\n          translate = null;\n\n      if (topoJSONTopology['transform']) {\n        transform = topoJSONTopology['transform'];\n        scale = transform['scale'];\n        translate = transform['translate'];\n      }\n\n      var arcs = topoJSONTopology['arcs'];\n\n      if (transform) {\n        transformArcs(arcs, scale, translate);\n      }\n      /** @type {Array<Feature>} */\n\n\n      var features = [];\n      var topoJSONFeatures = topoJSONTopology['objects'];\n      var property = this.layerName_;\n      var feature = void 0;\n\n      for (var objectName in topoJSONFeatures) {\n        if (this.layers_ && this.layers_.indexOf(objectName) == -1) {\n          continue;\n        }\n\n        if (topoJSONFeatures[objectName].type === 'GeometryCollection') {\n          feature =\n          /** @type {TopoJSONGeometryCollection} */\n          topoJSONFeatures[objectName];\n          features.push.apply(features, readFeaturesFromGeometryCollection(feature, arcs, scale, translate, property, objectName, opt_options));\n        } else {\n          feature =\n          /** @type {TopoJSONGeometry} */\n          topoJSONFeatures[objectName];\n          features.push(readFeatureFromGeometry(feature, arcs, scale, translate, property, objectName, opt_options));\n        }\n      }\n\n      return features;\n    } else {\n      return [];\n    }\n  };\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  TopoJSON.prototype.readProjectionFromObject = function (object) {\n    return this.dataProjection;\n  };\n\n  return TopoJSON;\n}(JSONFeature);\n/**\n * @const\n * @type {Object<string, function(TopoJSONGeometry, Array, ...Array=): import(\"../geom/Geometry.js\").default>}\n */\n\n\nvar GEOMETRY_READERS = {\n  'Point': readPointGeometry,\n  'LineString': readLineStringGeometry,\n  'Polygon': readPolygonGeometry,\n  'MultiPoint': readMultiPointGeometry,\n  'MultiLineString': readMultiLineStringGeometry,\n  'MultiPolygon': readMultiPolygonGeometry\n};\n/**\n * Concatenate arcs into a coordinate array.\n * @param {Array<number>} indices Indices of arcs to concatenate.  Negative\n *     values indicate arcs need to be reversed.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs (already\n *     transformed).\n * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates array.\n */\n\nfunction concatenateArcs(indices, arcs) {\n  /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n  var coordinates = [];\n  var index;\n\n  for (var i = 0, ii = indices.length; i < ii; ++i) {\n    index = indices[i];\n\n    if (i > 0) {\n      // splicing together arcs, discard last point\n      coordinates.pop();\n    }\n\n    if (index >= 0) {\n      // forward arc\n      var arc = arcs[index];\n\n      for (var j = 0, jj = arc.length; j < jj; ++j) {\n        coordinates.push(arc[j].slice(0));\n      }\n    } else {\n      // reverse arc\n      var arc = arcs[~index];\n\n      for (var j = arc.length - 1; j >= 0; --j) {\n        coordinates.push(arc[j].slice(0));\n      }\n    }\n  }\n\n  return coordinates;\n}\n/**\n * Create a point from a TopoJSON geometry object.\n *\n * @param {TopoJSONPoint} object TopoJSON object.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n * @return {Point} Geometry.\n */\n\n\nfunction readPointGeometry(object, scale, translate) {\n  var coordinates = object['coordinates'];\n\n  if (scale && translate) {\n    transformVertex(coordinates, scale, translate);\n  }\n\n  return new Point(coordinates);\n}\n/**\n * Create a multi-point from a TopoJSON geometry object.\n *\n * @param {TopoJSONMultiPoint} object TopoJSON object.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n * @return {MultiPoint} Geometry.\n */\n\n\nfunction readMultiPointGeometry(object, scale, translate) {\n  var coordinates = object['coordinates'];\n\n  if (scale && translate) {\n    for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n      transformVertex(coordinates[i], scale, translate);\n    }\n  }\n\n  return new MultiPoint(coordinates);\n}\n/**\n * Create a linestring from a TopoJSON geometry object.\n *\n * @param {TopoJSONLineString} object TopoJSON object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @return {LineString} Geometry.\n */\n\n\nfunction readLineStringGeometry(object, arcs) {\n  var coordinates = concatenateArcs(object['arcs'], arcs);\n  return new LineString(coordinates);\n}\n/**\n * Create a multi-linestring from a TopoJSON geometry object.\n *\n * @param {TopoJSONMultiLineString} object TopoJSON object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @return {MultiLineString} Geometry.\n */\n\n\nfunction readMultiLineStringGeometry(object, arcs) {\n  var coordinates = [];\n\n  for (var i = 0, ii = object['arcs'].length; i < ii; ++i) {\n    coordinates[i] = concatenateArcs(object['arcs'][i], arcs);\n  }\n\n  return new MultiLineString(coordinates);\n}\n/**\n * Create a polygon from a TopoJSON geometry object.\n *\n * @param {TopoJSONPolygon} object TopoJSON object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @return {Polygon} Geometry.\n */\n\n\nfunction readPolygonGeometry(object, arcs) {\n  var coordinates = [];\n\n  for (var i = 0, ii = object['arcs'].length; i < ii; ++i) {\n    coordinates[i] = concatenateArcs(object['arcs'][i], arcs);\n  }\n\n  return new Polygon(coordinates);\n}\n/**\n * Create a multi-polygon from a TopoJSON geometry object.\n *\n * @param {TopoJSONMultiPolygon} object TopoJSON object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @return {MultiPolygon} Geometry.\n */\n\n\nfunction readMultiPolygonGeometry(object, arcs) {\n  var coordinates = [];\n\n  for (var i = 0, ii = object['arcs'].length; i < ii; ++i) {\n    // for each polygon\n    var polyArray = object['arcs'][i];\n    var ringCoords = [];\n\n    for (var j = 0, jj = polyArray.length; j < jj; ++j) {\n      // for each ring\n      ringCoords[j] = concatenateArcs(polyArray[j], arcs);\n    }\n\n    coordinates[i] = ringCoords;\n  }\n\n  return new MultiPolygon(coordinates);\n}\n/**\n * Create features from a TopoJSON GeometryCollection object.\n *\n * @param {TopoJSONGeometryCollection} collection TopoJSON Geometry\n *     object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n * @param {string|undefined} property Property to set the `GeometryCollection`'s parent\n *     object to.\n * @param {string} name Name of the `Topology`'s child object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {Array<Feature>} Array of features.\n */\n\n\nfunction readFeaturesFromGeometryCollection(collection, arcs, scale, translate, property, name, opt_options) {\n  var geometries = collection['geometries'];\n  var features = [];\n\n  for (var i = 0, ii = geometries.length; i < ii; ++i) {\n    features[i] = readFeatureFromGeometry(geometries[i], arcs, scale, translate, property, name, opt_options);\n  }\n\n  return features;\n}\n/**\n * Create a feature from a TopoJSON geometry object.\n *\n * @param {TopoJSONGeometry} object TopoJSON geometry object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n * @param {string|undefined} property Property to set the `GeometryCollection`'s parent\n *     object to.\n * @param {string} name Name of the `Topology`'s child object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {Feature} Feature.\n */\n\n\nfunction readFeatureFromGeometry(object, arcs, scale, translate, property, name, opt_options) {\n  var geometry = null;\n  var type = object.type;\n\n  if (type) {\n    var geometryReader = GEOMETRY_READERS[type];\n\n    if (type === 'Point' || type === 'MultiPoint') {\n      geometry = geometryReader(object, scale, translate);\n    } else {\n      geometry = geometryReader(object, arcs);\n    }\n\n    geometry = transformGeometryWithOptions(geometry, false, opt_options);\n  }\n\n  var feature = new Feature({\n    geometry: geometry\n  });\n\n  if (object.id !== undefined) {\n    feature.setId(object.id);\n  }\n\n  var properties = object.properties;\n\n  if (property) {\n    if (!properties) {\n      properties = {};\n    }\n\n    properties[property] = name;\n  }\n\n  if (properties) {\n    feature.setProperties(properties, true);\n  }\n\n  return feature;\n}\n/**\n * Apply a linear transform to array of arcs.  The provided array of arcs is\n * modified in place.\n *\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n */\n\n\nfunction transformArcs(arcs, scale, translate) {\n  for (var i = 0, ii = arcs.length; i < ii; ++i) {\n    transformArc(arcs[i], scale, translate);\n  }\n}\n/**\n * Apply a linear transform to an arc.  The provided arc is modified in place.\n *\n * @param {Array<import(\"../coordinate.js\").Coordinate>} arc Arc.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n */\n\n\nfunction transformArc(arc, scale, translate) {\n  var x = 0;\n  var y = 0;\n\n  for (var i = 0, ii = arc.length; i < ii; ++i) {\n    var vertex = arc[i];\n    x += vertex[0];\n    y += vertex[1];\n    vertex[0] = x;\n    vertex[1] = y;\n    transformVertex(vertex, scale, translate);\n  }\n}\n/**\n * Apply a linear transform to a vertex.  The provided vertex is modified in\n * place.\n *\n * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n */\n\n\nfunction transformVertex(vertex, scale, translate) {\n  vertex[0] = vertex[0] * scale[0] + translate[0];\n  vertex[1] = vertex[1] * scale[1] + translate[1];\n}\n\nexport default TopoJSON;","map":{"version":3,"mappings":"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","names":["Feature","JSONFeature","LineString","MultiLineString","MultiPoint","MultiPolygon","Point","Polygon","get","getProjection","transformGeometryWithOptions","__extends","opt_options","_super","options","_this","layerName_","layerName","layers_","layers","dataProjection","TopoJSON","object","type","topoJSONTopology","transform","scale","translate","arcs","transformArcs","features","topoJSONFeatures","property","feature","objectName","indexOf","push","apply","readFeaturesFromGeometryCollection","readFeatureFromGeometry","GEOMETRY_READERS","readPointGeometry","readLineStringGeometry","readPolygonGeometry","readMultiPointGeometry","readMultiLineStringGeometry","readMultiPolygonGeometry","concatenateArcs","indices","coordinates","index","i","ii","length","pop","arc","j","jj","slice","transformVertex","polyArray","ringCoords","collection","name","geometries","geometry","geometryReader","id","undefined","setId","properties","setProperties","transformArc","x","y","vertex"],"sourceRoot":"","sources":["../src/format/TopoJSON.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}