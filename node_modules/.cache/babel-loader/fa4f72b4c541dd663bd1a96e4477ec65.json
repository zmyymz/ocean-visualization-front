{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\n * @module ol/source/TileDebug\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport XYZ from './XYZ.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Set to `1` when debugging `VectorTile` sources with a default configuration.\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {string} [template='z:{z} x:{x} y:{y}'] Template for labeling the tiles.\n * Should include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n */\n\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n * @api\n */\n\nvar TileDebug =\n/** @class */\nfunction (_super) {\n  __extends(TileDebug, _super);\n  /**\n   * @param {Options} [opt_options] Debug tile options.\n   */\n\n\n  function TileDebug(opt_options) {\n    var _this = this;\n    /**\n     * @type {Options}\n     */\n\n\n    var options = opt_options || {};\n    _this = _super.call(this, {\n      opaque: false,\n      projection: options.projection,\n      tileGrid: options.tileGrid,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      zDirection: options.zDirection,\n      url: options.template || 'z:{z} x:{x} y:{y}',\n      tileLoadFunction: function (tile, text) {\n        var z = tile.getTileCoord()[0];\n        var tileSize = toSize(_this.tileGrid.getTileSize(z));\n        var context = createCanvasContext2D(tileSize[0], tileSize[1]);\n        context.strokeStyle = 'grey';\n        context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n        context.fillStyle = 'grey';\n        context.strokeStyle = 'white';\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.font = '24px sans-serif';\n        context.lineWidth = 4;\n        context.strokeText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n        context.fillText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n        /** @type {import(\"../ImageTile.js\").default} */\n\n        tile.setImage(context.canvas);\n      }\n    }) || this;\n    return _this;\n  }\n\n  return TileDebug;\n}(XYZ);\n\nexport default TileDebug;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,OAAOA,GAAP,MAAgB,UAAhB;AACA,SAAQC,qBAAR,QAAoC,WAApC;AACA,SAAQC,MAAR,QAAqB,YAArB;AAEA;;;;;;;;;;;;;AAaA;;;;;;;;AAOA;AAAA;AAAA;AAAwBC;AACtB;;;;;AAGA,qBAAYC,WAAZ,EAAuB;AAAvB;AACE;;;;;AAGA,QAAMC,OAAO,GAAGD,WAAW,IAAI,EAA/B;YAEAE,kBAAM;AACJC,YAAM,EAAE,KADJ;AAEJC,gBAAU,EAAEH,OAAO,CAACG,UAFhB;AAGJC,cAAQ,EAAEJ,OAAO,CAACI,QAHd;AAIJC,WAAK,EAAEL,OAAO,CAACK,KAAR,KAAkBC,SAAlB,GAA8BN,OAAO,CAACK,KAAtC,GAA8C,IAJjD;AAKJE,gBAAU,EAAEP,OAAO,CAACO,UALhB;AAMJC,SAAG,EAAER,OAAO,CAACS,QAAR,IAAoB,mBANrB;AAOJC,sBAAgB,EAAE,UAACC,IAAD,EAAOC,IAAP,EAAW;AAC3B,YAAMC,CAAC,GAAGF,IAAI,CAACG,YAAL,GAAoB,CAApB,CAAV;AACA,YAAMC,QAAQ,GAAGlB,MAAM,CAACmB,KAAI,CAACZ,QAAL,CAAca,WAAd,CAA0BJ,CAA1B,CAAD,CAAvB;AACA,YAAMK,OAAO,GAAGtB,qBAAqB,CAACmB,QAAQ,CAAC,CAAD,CAAT,EAAcA,QAAQ,CAAC,CAAD,CAAtB,CAArC;AAEAG,eAAO,CAACC,WAAR,GAAsB,MAAtB;AACAD,eAAO,CAACE,UAAR,CAAmB,GAAnB,EAAwB,GAAxB,EAA6BL,QAAQ,CAAC,CAAD,CAAR,GAAc,GAA3C,EAAgDA,QAAQ,CAAC,CAAD,CAAR,GAAc,GAA9D;AAEAG,eAAO,CAACG,SAAR,GAAoB,MAApB;AACAH,eAAO,CAACC,WAAR,GAAsB,OAAtB;AACAD,eAAO,CAACI,SAAR,GAAoB,QAApB;AACAJ,eAAO,CAACK,YAAR,GAAuB,QAAvB;AACAL,eAAO,CAACM,IAAR,GAAe,iBAAf;AACAN,eAAO,CAACO,SAAR,GAAoB,CAApB;AACAP,eAAO,CAACQ,UAAR,CAAmBd,IAAnB,EAAyBG,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAvC,EAA0CA,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAxD,EAA2DA,QAAQ,CAAC,CAAD,CAAnE;AACAG,eAAO,CAACS,QAAR,CAAiBf,IAAjB,EAAuBG,QAAQ,CAAC,CAAD,CAAR,GAAc,CAArC,EAAwCA,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAtD,EAAyDA,QAAQ,CAAC,CAAD,CAAjE;AAEA;;AAAkDJ,YAAD,CAAOiB,QAAP,CAC/CV,OAAO,CAACW,MADuC;AAGlD;AA3BG,KAAN,KA4BE;;AACH;;AACH;AAxCA,EAAwBlC,GAAxB;;AA0CA,eAAemC,SAAf","names":["XYZ","createCanvasContext2D","toSize","__extends","opt_options","options","_super","opaque","projection","tileGrid","wrapX","undefined","zDirection","url","template","tileLoadFunction","tile","text","z","getTileCoord","tileSize","_this","getTileSize","context","strokeStyle","strokeRect","fillStyle","textAlign","textBaseline","font","lineWidth","strokeText","fillText","setImage","canvas","TileDebug"],"sourceRoot":"","sources":["../src/source/TileDebug.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}