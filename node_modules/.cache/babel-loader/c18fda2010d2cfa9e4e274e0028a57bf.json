{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.map.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/Zoomify\n */\n\n\nimport { DEFAULT_TILE_SIZE } from '../tilegrid/common.js';\nimport ImageTile from '../ImageTile.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport TileState from '../TileState.js';\nimport { assert } from '../asserts.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { createFromTileUrlFunctions, expandUrl } from '../tileurlfunction.js';\nimport { getCenter } from '../extent.js';\nimport { toSize } from '../size.js';\n/**\n * @enum {string}\n */\n\nvar TierSizeCalculation = {\n  DEFAULT: 'default',\n  TRUNCATED: 'truncated'\n};\n\nvar CustomTile =\n/** @class */\nfunction (_super) {\n  __extends(CustomTile, _super);\n  /**\n   * @param {import(\"../size.js\").Size} tileSize Full tile size.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"../Tile.js\").Options} [opt_options] Tile options.\n   */\n\n\n  function CustomTile(tileSize, tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {\n    var _this = _super.call(this, tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) || this;\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n\n\n    _this.zoomifyImage_ = null;\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n\n    _this.tileSize_ = tileSize;\n    return _this;\n  }\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   */\n\n\n  CustomTile.prototype.getImage = function () {\n    if (this.zoomifyImage_) {\n      return this.zoomifyImage_;\n    }\n\n    var image = _super.prototype.getImage.call(this);\n\n    if (this.state == TileState.LOADED) {\n      var tileSize = this.tileSize_;\n\n      if (image.width == tileSize[0] && image.height == tileSize[1]) {\n        this.zoomifyImage_ = image;\n        return image;\n      } else {\n        var context = createCanvasContext2D(tileSize[0], tileSize[1]);\n        context.drawImage(image, 0, 0);\n        this.zoomifyImage_ = context.canvas;\n        return context.canvas;\n      }\n    } else {\n      return image;\n    }\n  };\n\n  return CustomTile;\n}(ImageTile);\n\nexport { CustomTile };\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value  you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {number} [tilePixelRatio] The pixel ratio used by the tile service. For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px by 512px images (for retina/hidpi devices) then `tilePixelRatio` should be set to `2`\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {string} url URL template or base URL of the Zoomify service.\n * A base URL is the fixed part\n * of the URL, excluding the tile group, z, x, and y folder structure, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include\n * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.\n * Internet Imaging Protocol (IIP) with JTL extension can be also used with\n * `{tileIndex}` and `{z}` placeholders, e.g.\n * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {string} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.\n * @property {import(\"../size.js\").Size} size Size.\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the TileGrid that is created.\n * Default sets the TileGrid in the\n * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the\n * extent to the first quadrant (the default for OpenLayers 2) set the extent\n * as `[0, 0, width, height]`.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in Zoomify format (both Zoomify and Internet\n * Imaging Protocol are supported).\n * @api\n */\n\nvar Zoomify =\n/** @class */\nfunction (_super) {\n  __extends(Zoomify, _super);\n  /**\n   * @param {Options} opt_options Options.\n   */\n\n\n  function Zoomify(opt_options) {\n    var _this = this;\n\n    var options = opt_options;\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    var size = options.size;\n    var tierSizeCalculation = options.tierSizeCalculation !== undefined ? options.tierSizeCalculation : TierSizeCalculation.DEFAULT;\n    var tilePixelRatio = options.tilePixelRatio || 1;\n    var imageWidth = size[0];\n    var imageHeight = size[1];\n    var tierSizeInTiles = [];\n    var tileSize = options.tileSize || DEFAULT_TILE_SIZE;\n    var tileSizeForTierSizeCalculation = tileSize * tilePixelRatio;\n\n    switch (tierSizeCalculation) {\n      case TierSizeCalculation.DEFAULT:\n        while (imageWidth > tileSizeForTierSizeCalculation || imageHeight > tileSizeForTierSizeCalculation) {\n          tierSizeInTiles.push([Math.ceil(imageWidth / tileSizeForTierSizeCalculation), Math.ceil(imageHeight / tileSizeForTierSizeCalculation)]);\n          tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;\n        }\n\n        break;\n\n      case TierSizeCalculation.TRUNCATED:\n        var width = imageWidth;\n        var height = imageHeight;\n\n        while (width > tileSizeForTierSizeCalculation || height > tileSizeForTierSizeCalculation) {\n          tierSizeInTiles.push([Math.ceil(width / tileSizeForTierSizeCalculation), Math.ceil(height / tileSizeForTierSizeCalculation)]);\n          width >>= 1;\n          height >>= 1;\n        }\n\n        break;\n\n      default:\n        assert(false, 53); // Unknown `tierSizeCalculation` configured\n\n        break;\n    }\n\n    tierSizeInTiles.push([1, 1]);\n    tierSizeInTiles.reverse();\n    var resolutions = [tilePixelRatio];\n    var tileCountUpToTier = [0];\n\n    for (var i = 1, ii = tierSizeInTiles.length; i < ii; i++) {\n      resolutions.push(tilePixelRatio << i);\n      tileCountUpToTier.push(tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] + tileCountUpToTier[i - 1]);\n    }\n\n    resolutions.reverse();\n    var tileGrid = new TileGrid({\n      tileSize: tileSize,\n      extent: options.extent || [0, -imageHeight, imageWidth, 0],\n      resolutions: resolutions\n    });\n    var url = options.url;\n\n    if (url && url.indexOf('{TileGroup}') == -1 && url.indexOf('{tileIndex}') == -1) {\n      url += '{TileGroup}/{z}-{x}-{y}.jpg';\n    }\n\n    var urls = expandUrl(url);\n    var tileWidth = tileSize * tilePixelRatio;\n    /**\n     * @param {string} template Template.\n     * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n     */\n\n    function createFromTemplate(template) {\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function (tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          } else {\n            var tileCoordZ = tileCoord[0];\n            var tileCoordX = tileCoord[1];\n            var tileCoordY = tileCoord[2];\n            var tileIndex = tileCoordX + tileCoordY * tierSizeInTiles[tileCoordZ][0];\n            var tileGroup = (tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth | 0;\n            var localContext_1 = {\n              'z': tileCoordZ,\n              'x': tileCoordX,\n              'y': tileCoordY,\n              'tileIndex': tileIndex,\n              'TileGroup': 'TileGroup' + tileGroup\n            };\n            return template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n              return localContext_1[p];\n            });\n          }\n        }\n      );\n    }\n\n    var tileUrlFunction = createFromTileUrlFunctions(urls.map(createFromTemplate));\n    var ZoomifyTileClass = CustomTile.bind(null, toSize(tileSize * tilePixelRatio));\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: interpolate,\n      projection: options.projection,\n      tilePixelRatio: tilePixelRatio,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: ZoomifyTileClass,\n      tileGrid: tileGrid,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition\n    }) || this;\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n\n    _this.zDirection = options.zDirection; // Server retina tile detection (non-standard):\n    // Try loading the center tile for the highest resolution. If it is not\n    // available, we are dealing with retina tiles, and need to adjust the\n    // tile url calculation.\n\n    var tileUrl = tileGrid.getTileCoordForCoordAndResolution(getCenter(tileGrid.getExtent()), resolutions[resolutions.length - 1]);\n    var testTileUrl = tileUrlFunction(tileUrl, 1, null);\n    var image = new Image();\n    image.addEventListener('error', function () {\n      tileWidth = tileSize;\n      this.changed();\n    }.bind(_this));\n    image.src = testTileUrl;\n    return _this;\n  }\n\n  return Zoomify;\n}(TileImage);\n\nexport default Zoomify;","map":{"version":3,"mappings":"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","names":["DEFAULT_TILE_SIZE","ImageTile","TileGrid","TileImage","TileState","assert","createCanvasContext2D","createFromTileUrlFunctions","expandUrl","getCenter","toSize","TierSizeCalculation","DEFAULT","TRUNCATED","__extends","tileSize","tileCoord","state","src","crossOrigin","tileLoadFunction","opt_options","_super","_this","zoomifyImage_","tileSize_","CustomTile","image","getImage","call","LOADED","width","height","context","drawImage","canvas","options","interpolate","imageSmoothing","undefined","size","tierSizeCalculation","tilePixelRatio","imageWidth","imageHeight","tierSizeInTiles","tileSizeForTierSizeCalculation","push","Math","ceil","reverse","resolutions","tileCountUpToTier","i","ii","length","tileGrid","extent","url","indexOf","urls","tileWidth","createFromTemplate","template","pixelRatio","projection","tileCoordZ","tileCoordX","tileCoordY","tileIndex","tileGroup","localContext_1","replace","m","p","tileUrlFunction","map","ZoomifyTileClass","bind","attributions","cacheSize","reprojectionErrorThreshold","tileClass","transition","zDirection","tileUrl","getTileCoordForCoordAndResolution","getExtent","testTileUrl","Image","addEventListener","changed","Zoomify"],"sourceRoot":"","sources":["../src/source/Zoomify.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}