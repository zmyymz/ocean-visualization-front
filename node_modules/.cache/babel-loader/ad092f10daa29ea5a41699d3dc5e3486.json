{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\n * @module ol/source/ImageMapGuide\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport { appendParams } from '../uri.js';\nimport { assign } from '../obj.js';\nimport { containsExtent, getCenter, getHeight, getWidth, scaleFromCenter } from '../extent.js';\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object} [params] Additional parameters.\n */\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\n\nvar ImageMapGuide =\n/** @class */\nfunction (_super) {\n  __extends(ImageMapGuide, _super);\n  /**\n   * @param {Options} options ImageMapGuide options.\n   */\n\n\n  function ImageMapGuide(options) {\n    var _this = this;\n\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    _this = _super.call(this, {\n      interpolate: interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions\n    }) || this;\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.displayDpi_ = options.displayDpi !== undefined ? options.displayDpi : 96;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    _this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    _this.url_ = options.url;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n\n    _this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.metersPerUnit_ = options.metersPerUnit !== undefined ? options.metersPerUnit : 1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.useOverlay_ = options.useOverlay !== undefined ? options.useOverlay : false;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n\n    _this.image_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.renderedRevision_ = 0;\n    return _this;\n  }\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  ImageMapGuide.prototype.getParams = function () {\n    return this.params_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n\n\n  ImageMapGuide.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n    var image = this.image_;\n\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), extent)) {\n      return image;\n    }\n\n    if (this.ratio_ != 1) {\n      extent = extent.slice();\n      scaleFromCenter(extent, this.ratio_);\n    }\n\n    var width = getWidth(extent) / resolution;\n    var height = getHeight(extent) / resolution;\n    var size = [width * pixelRatio, height * pixelRatio];\n\n    if (this.url_ !== undefined) {\n      var imageUrl = this.getUrl(this.url_, this.params_, extent, size, projection);\n      image = new ImageWrapper(extent, resolution, pixelRatio, imageUrl, this.crossOrigin_, this.imageLoadFunction_);\n      image.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n    } else {\n      image = null;\n    }\n\n    this.image_ = image;\n    this.renderedRevision_ = this.getRevision();\n    return image;\n  };\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n\n\n  ImageMapGuide.prototype.getImageLoadFunction = function () {\n    return this.imageLoadFunction_;\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  ImageMapGuide.prototype.updateParams = function (params) {\n    assign(this.params_, params);\n    this.changed();\n  };\n  /**\n   * @param {string} baseUrl The mapagent url.\n   * @param {Object<string, string|number>} params Request parameters.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string} The mapagent map image request URL.\n   */\n\n\n  ImageMapGuide.prototype.getUrl = function (baseUrl, params, extent, size, projection) {\n    var scale = getScale(extent, size, this.metersPerUnit_, this.displayDpi_);\n    var center = getCenter(extent);\n    var baseParams = {\n      'OPERATION': this.useOverlay_ ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',\n      'VERSION': '2.0.0',\n      'LOCALE': 'en',\n      'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n      'CLIP': '1',\n      'SETDISPLAYDPI': this.displayDpi_,\n      'SETDISPLAYWIDTH': Math.round(size[0]),\n      'SETDISPLAYHEIGHT': Math.round(size[1]),\n      'SETVIEWSCALE': scale,\n      'SETVIEWCENTERX': center[0],\n      'SETVIEWCENTERY': center[1]\n    };\n    assign(baseParams, params);\n    return appendParams(baseUrl, baseParams);\n  };\n  /**\n   * Set the image load function of the MapGuide source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n\n\n  ImageMapGuide.prototype.setImageLoadFunction = function (imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  };\n\n  return ImageMapGuide;\n}(ImageSource);\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\n\n\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  var mcsW = getWidth(extent);\n  var mcsH = getHeight(extent);\n  var devW = size[0];\n  var devH = size[1];\n  var mpp = 0.0254 / dpi;\n\n  if (devH * mcsW > devW * mcsH) {\n    return mcsW * metersPerUnit / (devW * mpp); // width limited\n  } else {\n    return mcsH * metersPerUnit / (devH * mpp); // height limited\n  }\n}\n\nexport default ImageMapGuide;","map":{"version":3,"mappings":"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","names":["EventType","ImageSource","defaultImageLoadFunction","ImageWrapper","appendParams","assign","containsExtent","getCenter","getHeight","getWidth","scaleFromCenter","__extends","options","interpolate","imageSmoothing","undefined","_super","projection","resolutions","_this","crossOrigin_","crossOrigin","displayDpi_","displayDpi","params_","params","url_","url","imageLoadFunction_","imageLoadFunction","hidpi_","hidpi","metersPerUnit_","metersPerUnit","ratio_","ratio","useOverlay_","useOverlay","image_","renderedRevision_","ImageMapGuide","extent","resolution","pixelRatio","findNearestResolution","image","getRevision","getResolution","getPixelRatio","getExtent","slice","width","height","size","imageUrl","getUrl","addEventListener","CHANGE","handleImageChange","bind","changed","baseUrl","scale","getScale","center","baseParams","Math","round","dpi","mcsW","mcsH","devW","devH","mpp"],"sourceRoot":"","sources":["../src/source/ImageMapGuide.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}