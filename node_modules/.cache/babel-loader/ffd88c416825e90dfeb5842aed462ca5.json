{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\n * @module ol/render/Event\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport Event from '../events/Event.js';\n\nvar RenderEvent =\n/** @class */\nfunction (_super) {\n  __extends(RenderEvent, _super);\n  /**\n   * @param {import(\"./EventType.js\").default} type Type.\n   * @param {import(\"../transform.js\").Transform} [opt_inversePixelTransform] Transform for\n   *     CSS pixels to rendered pixels.\n   * @param {import(\"../PluggableMap.js\").FrameState} [opt_frameState] Frame state.\n   * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [opt_context] Context.\n   */\n\n\n  function RenderEvent(type, opt_inversePixelTransform, opt_frameState, opt_context) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * Transform from CSS pixels (relative to the top-left corner of the map viewport)\n     * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.\n     * @type {import(\"../transform.js\").Transform|undefined}\n     * @api\n     */\n\n\n    _this.inversePixelTransform = opt_inversePixelTransform;\n    /**\n     * An object representing the current render frame state.\n     * @type {import(\"../PluggableMap.js\").FrameState|undefined}\n     * @api\n     */\n\n    _this.frameState = opt_frameState;\n    /**\n     * Canvas context. Not available when the event is dispatched by the map. For Canvas 2D layers,\n     * the context will be the 2D rendering context.  For WebGL layers, the context will be the WebGL\n     * context.\n     * @type {CanvasRenderingContext2D|WebGLRenderingContext|undefined}\n     * @api\n     */\n\n    _this.context = opt_context;\n    return _this;\n  }\n\n  return RenderEvent;\n}(Event);\n\nexport default RenderEvent;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,OAAOA,KAAP,MAAkB,oBAAlB;;AAEA;AAAA;AAAA;AAA0BC;AACxB;;;;;;;;;AAOA,uBAAYC,IAAZ,EAAkBC,yBAAlB,EAA6CC,cAA7C,EAA6DC,WAA7D,EAAwE;AAAxE,gBACEC,kBAAMJ,IAAN,KAAW,IADb;AAGE;;;;;;;;AAMAK,SAAI,CAACC,qBAAL,GAA6BL,yBAA7B;AAEA;;;;;;AAKAI,SAAI,CAACE,UAAL,GAAkBL,cAAlB;AAEA;;;;;;;;AAOAG,SAAI,CAACG,OAAL,GAAeL,WAAf;;AACD;;AACH;AAnCA,EAA0BL,KAA1B;;AAqCA,eAAeW,WAAf","names":["Event","__extends","type","opt_inversePixelTransform","opt_frameState","opt_context","_super","_this","inversePixelTransform","frameState","context","RenderEvent"],"sourceRoot":"","sources":["../src/render/Event.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}