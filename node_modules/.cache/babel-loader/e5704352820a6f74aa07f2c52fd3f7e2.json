{"ast":null,"code":"require(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nrequire(\"core-js/modules/es.regexp.test.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\nrequire(\"core-js/modules/es.string.starts-with.js\");\n\nrequire(\"core-js/modules/es.array.join.js\");\n\nvar fontWeights = {\n  thin: 100,\n  hairline: 100,\n  'ultra-light': 100,\n  'extra-light': 100,\n  light: 200,\n  book: 300,\n  regular: 400,\n  normal: 400,\n  plain: 400,\n  roman: 400,\n  standard: 400,\n  medium: 500,\n  'semi-bold': 600,\n  'demi-bold': 600,\n  bold: 700,\n  heavy: 800,\n  black: 800,\n  'extra-bold': 800,\n  'ultra-black': 900,\n  'extra-black': 900,\n  'ultra-bold': 900,\n  'heavy-black': 900,\n  fat: 900,\n  poster: 900\n};\nvar sp = ' ';\nvar italicRE = /(italic|oblique)$/i;\nvar fontCache = {};\n\nmodule.exports = function (fonts, size, lineHeight) {\n  var cssData = fontCache[fonts];\n\n  if (!cssData) {\n    if (!Array.isArray(fonts)) {\n      fonts = [fonts];\n    }\n\n    var weight = 400;\n    var style = 'normal';\n    var fontFamilies = [];\n    var haveWeight, haveStyle;\n\n    for (var i = 0, ii = fonts.length; i < ii; ++i) {\n      var font = fonts[i];\n      var parts = font.split(' ');\n      var maybeWeight = parts[parts.length - 1].toLowerCase();\n\n      if (maybeWeight == 'normal' || maybeWeight == 'italic' || maybeWeight == 'oblique') {\n        style = haveStyle ? style : maybeWeight;\n        parts.pop();\n        maybeWeight = parts[parts.length - 1].toLowerCase();\n      } else if (italicRE.test(maybeWeight)) {\n        maybeWeight = maybeWeight.replace(italicRE, '');\n        style = haveStyle ? style : parts[parts.length - 1].replace(maybeWeight, '');\n      }\n\n      for (var w in fontWeights) {\n        var previousPart = parts.length > 1 ? parts[parts.length - 2].toLowerCase() : '';\n\n        if (maybeWeight == w || maybeWeight == w.replace('-', '') || previousPart + '-' + maybeWeight == w) {\n          weight = haveWeight ? weight : fontWeights[w];\n          parts.pop();\n\n          if (previousPart && w.startsWith(previousPart)) {\n            parts.pop();\n          }\n\n          break;\n        }\n      }\n\n      if (!haveWeight && typeof maybeWeight == 'number') {\n        weight = maybeWeight;\n      }\n\n      var fontFamily = parts.join(sp).replace('Klokantech Noto Sans', 'Noto Sans');\n\n      if (fontFamily.indexOf(sp) !== -1) {\n        fontFamily = '\"' + fontFamily + '\"';\n      }\n\n      fontFamilies.push(fontFamily);\n    } // CSS font property: font-style font-weight font-size/line-height font-family\n\n\n    cssData = fontCache[fonts] = [style, weight, fontFamilies];\n  }\n\n  return cssData[0] + sp + cssData[1] + sp + size + 'px' + (lineHeight ? '/' + lineHeight : '') + sp + cssData[2];\n};","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/mapbox-to-css-font/index.js"],"names":["fontWeights","thin","hairline","light","book","regular","normal","plain","roman","standard","medium","bold","heavy","black","fat","poster","sp","italicRE","fontCache","module","exports","fonts","size","lineHeight","cssData","Array","isArray","weight","style","fontFamilies","haveWeight","haveStyle","i","ii","length","font","parts","split","maybeWeight","toLowerCase","pop","test","replace","w","previousPart","startsWith","fontFamily","join","indexOf","push"],"mappings":";;;;;;;;;;;;AAAA,IAAIA,WAAW,GAAG;AAChBC,EAAAA,IAAI,EAAE,GADU;AAEhBC,EAAAA,QAAQ,EAAE,GAFM;AAGhB,iBAAe,GAHC;AAIhB,iBAAe,GAJC;AAKhBC,EAAAA,KAAK,EAAE,GALS;AAMhBC,EAAAA,IAAI,EAAE,GANU;AAOhBC,EAAAA,OAAO,EAAE,GAPO;AAQhBC,EAAAA,MAAM,EAAE,GARQ;AAShBC,EAAAA,KAAK,EAAE,GATS;AAUhBC,EAAAA,KAAK,EAAE,GAVS;AAWhBC,EAAAA,QAAQ,EAAE,GAXM;AAYhBC,EAAAA,MAAM,EAAE,GAZQ;AAahB,eAAa,GAbG;AAchB,eAAa,GAdG;AAehBC,EAAAA,IAAI,EAAE,GAfU;AAgBhBC,EAAAA,KAAK,EAAE,GAhBS;AAiBhBC,EAAAA,KAAK,EAAE,GAjBS;AAkBhB,gBAAc,GAlBE;AAmBhB,iBAAe,GAnBC;AAoBhB,iBAAe,GApBC;AAqBhB,gBAAc,GArBE;AAsBhB,iBAAe,GAtBC;AAuBhBC,EAAAA,GAAG,EAAE,GAvBW;AAwBhBC,EAAAA,MAAM,EAAE;AAxBQ,CAAlB;AA0BA,IAAIC,EAAE,GAAG,GAAT;AACA,IAAIC,QAAQ,GAAG,oBAAf;AAEA,IAAIC,SAAS,GAAG,EAAhB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,KAAT,EAAgBC,IAAhB,EAAsBC,UAAtB,EAAkC;AACjD,MAAIC,OAAO,GAAGN,SAAS,CAACG,KAAD,CAAvB;;AACA,MAAI,CAACG,OAAL,EAAc;AACZ,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAL,EAA2B;AACzBA,MAAAA,KAAK,GAAG,CAACA,KAAD,CAAR;AACD;;AACD,QAAIM,MAAM,GAAG,GAAb;AACA,QAAIC,KAAK,GAAG,QAAZ;AACA,QAAIC,YAAY,GAAG,EAAnB;AACA,QAAIC,UAAJ,EAAgBC,SAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGZ,KAAK,CAACa,MAA3B,EAAmCF,CAAC,GAAGC,EAAvC,EAA2C,EAAED,CAA7C,EAAgD;AAC9C,UAAIG,IAAI,GAAGd,KAAK,CAACW,CAAD,CAAhB;AACA,UAAII,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAZ;AACA,UAAIC,WAAW,GAAGF,KAAK,CAACA,KAAK,CAACF,MAAN,GAAe,CAAhB,CAAL,CAAwBK,WAAxB,EAAlB;;AACA,UAAID,WAAW,IAAI,QAAf,IAA2BA,WAAW,IAAI,QAA1C,IAAsDA,WAAW,IAAI,SAAzE,EAAoF;AAClFV,QAAAA,KAAK,GAAGG,SAAS,GAAGH,KAAH,GAAWU,WAA5B;AACAF,QAAAA,KAAK,CAACI,GAAN;AACAF,QAAAA,WAAW,GAAGF,KAAK,CAACA,KAAK,CAACF,MAAN,GAAe,CAAhB,CAAL,CAAwBK,WAAxB,EAAd;AACD,OAJD,MAIO,IAAItB,QAAQ,CAACwB,IAAT,CAAcH,WAAd,CAAJ,EAAgC;AACrCA,QAAAA,WAAW,GAAGA,WAAW,CAACI,OAAZ,CAAoBzB,QAApB,EAA8B,EAA9B,CAAd;AACAW,QAAAA,KAAK,GAAGG,SAAS,GAAGH,KAAH,GAAWQ,KAAK,CAACA,KAAK,CAACF,MAAN,GAAe,CAAhB,CAAL,CAAwBQ,OAAxB,CAAgCJ,WAAhC,EAA6C,EAA7C,CAA5B;AACD;;AACD,WAAK,IAAIK,CAAT,IAAc3C,WAAd,EAA2B;AACzB,YAAI4C,YAAY,GAAGR,KAAK,CAACF,MAAN,GAAe,CAAf,GAAmBE,KAAK,CAACA,KAAK,CAACF,MAAN,GAAe,CAAhB,CAAL,CAAwBK,WAAxB,EAAnB,GAA2D,EAA9E;;AACA,YAAID,WAAW,IAAIK,CAAf,IAAoBL,WAAW,IAAIK,CAAC,CAACD,OAAF,CAAU,GAAV,EAAe,EAAf,CAAnC,IAAyDE,YAAY,GAAG,GAAf,GAAqBN,WAArB,IAAoCK,CAAjG,EAAoG;AAClGhB,UAAAA,MAAM,GAAGG,UAAU,GAAGH,MAAH,GAAY3B,WAAW,CAAC2C,CAAD,CAA1C;AACAP,UAAAA,KAAK,CAACI,GAAN;;AACA,cAAII,YAAY,IAAID,CAAC,CAACE,UAAF,CAAaD,YAAb,CAApB,EAAgD;AAC9CR,YAAAA,KAAK,CAACI,GAAN;AACD;;AACD;AACD;AACF;;AACD,UAAI,CAACV,UAAD,IAAe,OAAOQ,WAAP,IAAsB,QAAzC,EAAmD;AACjDX,QAAAA,MAAM,GAAGW,WAAT;AACD;;AACD,UAAIQ,UAAU,GAAGV,KAAK,CAACW,IAAN,CAAW/B,EAAX,EACd0B,OADc,CACN,sBADM,EACkB,WADlB,CAAjB;;AAEA,UAAII,UAAU,CAACE,OAAX,CAAmBhC,EAAnB,MAA2B,CAAC,CAAhC,EAAmC;AACjC8B,QAAAA,UAAU,GAAG,MAAMA,UAAN,GAAmB,GAAhC;AACD;;AACDjB,MAAAA,YAAY,CAACoB,IAAb,CAAkBH,UAAlB;AACD,KAxCW,CAyCZ;;;AACAtB,IAAAA,OAAO,GAAGN,SAAS,CAACG,KAAD,CAAT,GAAmB,CAACO,KAAD,EAAQD,MAAR,EAAgBE,YAAhB,CAA7B;AACD;;AACD,SAAOL,OAAO,CAAC,CAAD,CAAP,GAAaR,EAAb,GAAkBQ,OAAO,CAAC,CAAD,CAAzB,GAA+BR,EAA/B,GAAoCM,IAApC,GAA2C,IAA3C,IAAmDC,UAAU,GAAG,MAAMA,UAAT,GAAsB,EAAnF,IAAyFP,EAAzF,GAA8FQ,OAAO,CAAC,CAAD,CAA5G;AACD,CA/CD","sourcesContent":["var fontWeights = {\n  thin: 100,\n  hairline: 100,\n  'ultra-light': 100,\n  'extra-light': 100,\n  light: 200,\n  book: 300,\n  regular: 400,\n  normal: 400,\n  plain: 400,\n  roman: 400,\n  standard: 400,\n  medium: 500,\n  'semi-bold': 600,\n  'demi-bold': 600,\n  bold: 700,\n  heavy: 800,\n  black: 800,\n  'extra-bold': 800,\n  'ultra-black': 900,\n  'extra-black': 900,\n  'ultra-bold': 900,\n  'heavy-black': 900,\n  fat: 900,\n  poster: 900\n};\nvar sp = ' ';\nvar italicRE = /(italic|oblique)$/i;\n\nvar fontCache = {};\n\nmodule.exports = function(fonts, size, lineHeight) {\n  var cssData = fontCache[fonts];\n  if (!cssData) {\n    if (!Array.isArray(fonts)) {\n      fonts = [fonts];\n    }\n    var weight = 400;\n    var style = 'normal';\n    var fontFamilies = [];\n    var haveWeight, haveStyle;\n    for (var i = 0, ii = fonts.length; i < ii; ++i) {\n      var font = fonts[i];\n      var parts = font.split(' ');\n      var maybeWeight = parts[parts.length - 1].toLowerCase();\n      if (maybeWeight == 'normal' || maybeWeight == 'italic' || maybeWeight == 'oblique') {\n        style = haveStyle ? style : maybeWeight;\n        parts.pop();\n        maybeWeight = parts[parts.length - 1].toLowerCase();\n      } else if (italicRE.test(maybeWeight)) {\n        maybeWeight = maybeWeight.replace(italicRE, '');\n        style = haveStyle ? style : parts[parts.length - 1].replace(maybeWeight, '');\n      }\n      for (var w in fontWeights) {\n        var previousPart = parts.length > 1 ? parts[parts.length - 2].toLowerCase() : '';\n        if (maybeWeight == w || maybeWeight == w.replace('-', '') || previousPart + '-' + maybeWeight == w) {\n          weight = haveWeight ? weight : fontWeights[w];\n          parts.pop();\n          if (previousPart && w.startsWith(previousPart)) {\n            parts.pop();\n          }\n          break;\n        }\n      }\n      if (!haveWeight && typeof maybeWeight == 'number') {\n        weight = maybeWeight;\n      }\n      var fontFamily = parts.join(sp)\n        .replace('Klokantech Noto Sans', 'Noto Sans');\n      if (fontFamily.indexOf(sp) !== -1) {\n        fontFamily = '\"' + fontFamily + '\"';\n      }\n      fontFamilies.push(fontFamily);\n    }\n    // CSS font property: font-style font-weight font-size/line-height font-family\n    cssData = fontCache[fonts] = [style, weight, fontFamilies];\n  }\n  return cssData[0] + sp + cssData[1] + sp + size + 'px' + (lineHeight ? '/' + lineHeight : '') + sp + cssData[2];\n};\n"]},"metadata":{},"sourceType":"script"}