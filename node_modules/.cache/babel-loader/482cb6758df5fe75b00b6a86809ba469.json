{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.join.js\";\n\n/**\n * @module ol/source/TileWMS\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { DEFAULT_WMS_VERSION } from './common.js';\nimport TileImage from './TileImage.js';\nimport WMSServerType from './WMSServerType.js';\nimport { appendParams } from '../uri.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { buffer, createEmpty } from '../extent.js';\nimport { buffer as bufferSize, scale as scaleSize, toSize } from '../size.js';\nimport { calculateSourceResolution } from '../reproj.js';\nimport { compareVersions } from '../string.js';\nimport { get as getProjection, transform, transformExtent } from '../proj.js';\nimport { modulo } from '../math.js';\nimport { hash as tileCoordHash } from '../tilecoord.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See https://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used..\n * @property {import(\"./WMSServerType.js\").default|string} [serverType]\n * The type of the remote WMS server. Currently only used when `hidpi` is\n * `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\n\nvar TileWMS =\n/** @class */\nfunction (_super) {\n  __extends(TileWMS, _super);\n  /**\n   * @param {Options} [opt_options] Tile WMS options.\n   */\n\n\n  function TileWMS(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options :\n    /** @type {Options} */\n    {};\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    var params = options.params || {};\n    var transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: interpolate,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    }) || this;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    _this.params_ = params;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.v13_ = true;\n    /**\n     * @private\n     * @type {import(\"./WMSServerType.js\").default|undefined}\n     */\n\n    _this.serverType_ =\n    /** @type {import(\"./WMSServerType.js\").default|undefined} */\n    options.serverType;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    _this.tmpExtent_ = createEmpty();\n\n    _this.updateV13_();\n\n    _this.setKey(_this.getKeyForParams_());\n\n    return _this;\n  }\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n\n\n  TileWMS.prototype.getFeatureInfoUrl = function (coordinate, resolution, projection, params) {\n    var projectionObj = getProjection(projection);\n    var sourceProjectionObj = this.getProjection();\n    var tileGrid = this.getTileGrid();\n\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projectionObj);\n    }\n\n    var z = tileGrid.getZForResolution(resolution, this.zDirection);\n    var tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    var tileResolution = tileGrid.getResolution(tileCoord[0]);\n    var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n    var gutter = this.gutter_;\n\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      tileResolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, tileResolution);\n      tileExtent = transformExtent(tileExtent, projectionObj, sourceProjectionObj);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    assign(baseParams, this.params_, params);\n    var x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n    var y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, 1, sourceProjectionObj || projectionObj, baseParams);\n  };\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n\n\n  TileWMS.prototype.getLegendUrl = function (resolution, params) {\n    if (this.urls[0] === undefined) {\n      return undefined;\n    }\n\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png'\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      var layers = this.params_.LAYERS;\n      var isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n\n      if (!isSingleLayer) {\n        return undefined;\n      }\n\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      var mpu = this.getProjection() ? this.getProjection().getMetersPerUnit() : 1;\n      var pixelSize = 0.00028;\n      baseParams['SCALE'] = resolution * mpu / pixelSize;\n    }\n\n    assign(baseParams, params);\n    return appendParams(\n    /** @type {string} */\n    this.urls[0], baseParams);\n  };\n  /**\n   * @return {number} Gutter.\n   */\n\n\n  TileWMS.prototype.getGutter = function () {\n    return this.gutter_;\n  };\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  TileWMS.prototype.getParams = function () {\n    return this.params_;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n\n\n  TileWMS.prototype.getRequestUrl_ = function (tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\n    var urls = this.urls;\n\n    if (!urls) {\n      return undefined;\n    }\n\n    params['WIDTH'] = tileSize[0];\n    params['HEIGHT'] = tileSize[1];\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          var dpi = 90 * pixelRatio + 0.5 | 0;\n\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n\n          break;\n\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n\n        default:\n          assert(false, 52); // Unknown `serverType` configured\n\n          break;\n      }\n    }\n\n    var axisOrientation = projection.getAxisOrientation();\n    var bbox = tileExtent;\n\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      var tmp = void 0;\n      tmp = tileExtent[0];\n      bbox[0] = tileExtent[1];\n      bbox[1] = tmp;\n      tmp = tileExtent[2];\n      bbox[2] = tileExtent[3];\n      bbox[3] = tmp;\n    }\n\n    params['BBOX'] = bbox.join(',');\n    var url;\n\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      var index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n\n    return appendParams(url, params);\n  };\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n\n\n  TileWMS.prototype.getTilePixelRatio = function (pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\n  };\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n\n\n  TileWMS.prototype.getKeyForParams_ = function () {\n    var i = 0;\n    var res = [];\n\n    for (var key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n\n    return res.join('/');\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  TileWMS.prototype.updateParams = function (params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  };\n  /**\n   * @private\n   */\n\n\n  TileWMS.prototype.updateV13_ = function () {\n    var version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n\n\n  TileWMS.prototype.tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n    var tileGrid = this.getTileGrid();\n\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    var tileResolution = tileGrid.getResolution(tileCoord[0]);\n    var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n    var gutter = this.gutter_;\n\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true\n    };\n    assign(baseParams, this.params_);\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, baseParams);\n  };\n\n  return TileWMS;\n}(TileImage);\n\nexport default TileWMS;","map":{"version":3,"mappings":"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","names":["DEFAULT_WMS_VERSION","TileImage","WMSServerType","appendParams","assert","assign","buffer","createEmpty","bufferSize","scale","scaleSize","toSize","calculateSourceResolution","compareVersions","get","getProjection","transform","transformExtent","modulo","hash","tileCoordHash","__extends","opt_options","options","interpolate","imageSmoothing","undefined","params","transparent","_super","attributions","attributionsCollapsible","cacheSize","crossOrigin","opaque","projection","reprojectionErrorThreshold","tileClass","tileGrid","tileLoadFunction","url","urls","wrapX","transition","zDirection","_this","gutter_","gutter","params_","v13_","serverType_","serverType","hidpi_","hidpi","tmpExtent_","updateV13_","setKey","getKeyForParams_","TileWMS","coordinate","resolution","projectionObj","sourceProjectionObj","getTileGrid","getTileGridForProjection","z","getZForResolution","tileCoord","getTileCoordForCoordAndZ","getResolutions","length","tileResolution","getResolution","tileExtent","getTileCoordExtent","tileSize","getTileSize","tmpSize","baseParams","x","Math","floor","y","getRequestUrl_","layers","LAYERS","isSingleLayer","Array","isArray","mpu","getMetersPerUnit","pixelSize","pixelRatio","getCode","GEOSERVER","dpi","MAPSERVER","CARMENTA_SERVER","QGIS","axisOrientation","getAxisOrientation","bbox","substr","tmp","join","index","i","res","key","version"],"sourceRoot":"","sources":["../src/source/TileWMS.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}