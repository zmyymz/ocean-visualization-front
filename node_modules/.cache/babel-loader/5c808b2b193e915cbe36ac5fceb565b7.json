{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.slice.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/MultiLineString\n */\n\n\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport LineString from './LineString.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { arrayMaxSquaredDelta, assignClosestArrayPoint } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinatesArray } from './flat/deflate.js';\nimport { douglasPeuckerArray } from './flat/simplify.js';\nimport { extend } from '../array.js';\nimport { inflateCoordinatesArray } from './flat/inflate.js';\nimport { interpolatePoint, lineStringsCoordinateAtM } from './flat/interpolate.js';\nimport { intersectsLineStringArray } from './flat/intersectsextent.js';\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @api\n */\n\nvar MultiLineString =\n/** @class */\nfunction (_super) {\n  __extends(MultiLineString, _super);\n  /**\n   * @param {Array<Array<import(\"../coordinate.js\").Coordinate>|LineString>|Array<number>} coordinates\n   *     Coordinates or LineString geometries. (For internal use, flat coordinates in\n   *     combination with `opt_layout` and `opt_ends` are also accepted.)\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @param {Array<number>} [opt_ends] Flat coordinate ends for internal use.\n   */\n\n\n  function MultiLineString(coordinates, opt_layout, opt_ends) {\n    var _this = _super.call(this) || this;\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n\n\n    _this.ends_ = [];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.maxDeltaRevision_ = -1;\n\n    if (Array.isArray(coordinates[0])) {\n      _this.setCoordinates(\n      /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */\n      coordinates, opt_layout);\n    } else if (opt_layout !== undefined && opt_ends) {\n      _this.setFlatCoordinates(opt_layout,\n      /** @type {Array<number>} */\n      coordinates);\n\n      _this.ends_ = opt_ends;\n    } else {\n      var layout = _this.getLayout();\n\n      var lineStrings =\n      /** @type {Array<LineString>} */\n      coordinates;\n      var flatCoordinates = [];\n      var ends = [];\n\n      for (var i = 0, ii = lineStrings.length; i < ii; ++i) {\n        var lineString = lineStrings[i];\n\n        if (i === 0) {\n          layout = lineString.getLayout();\n        }\n\n        extend(flatCoordinates, lineString.getFlatCoordinates());\n        ends.push(flatCoordinates.length);\n      }\n\n      _this.setFlatCoordinates(layout, flatCoordinates);\n\n      _this.ends_ = ends;\n    }\n\n    return _this;\n  }\n  /**\n   * Append the passed linestring to the multilinestring.\n   * @param {LineString} lineString LineString.\n   * @api\n   */\n\n\n  MultiLineString.prototype.appendLineString = function (lineString) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = lineString.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n    }\n\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiLineString} Clone.\n   * @api\n   */\n\n\n  MultiLineString.prototype.clone = function () {\n    var multiLineString = new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n    multiLineString.applyProperties(this);\n    return multiLineString;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  MultiLineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n\n    return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  };\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * `opt_interpolate` controls interpolation between consecutive LineStrings\n   * within the MultiLineString. If `opt_interpolate` is `true` the coordinates\n   * will be linearly interpolated between the last coordinate of one LineString\n   * and the first coordinate of the next LineString.  If `opt_interpolate` is\n   * `false` then the function will return `null` for Ms falling between\n   * LineStrings.\n   *\n   * @param {number} m M.\n   * @param {boolean} [opt_extrapolate] Extrapolate. Default is `false`.\n   * @param {boolean} [opt_interpolate] Interpolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */\n\n\n  MultiLineString.prototype.getCoordinateAtM = function (m, opt_extrapolate, opt_interpolate) {\n    if (this.layout != GeometryLayout.XYM && this.layout != GeometryLayout.XYZM || this.flatCoordinates.length === 0) {\n      return null;\n    }\n\n    var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    var interpolate = opt_interpolate !== undefined ? opt_interpolate : false;\n    return lineStringsCoordinateAtM(this.flatCoordinates, 0, this.ends_, this.stride, m, extrapolate, interpolate);\n  };\n  /**\n   * Return the coordinates of the multilinestring.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n\n\n  MultiLineString.prototype.getCoordinates = function () {\n    return inflateCoordinatesArray(this.flatCoordinates, 0, this.ends_, this.stride);\n  };\n  /**\n   * @return {Array<number>} Ends.\n   */\n\n\n  MultiLineString.prototype.getEnds = function () {\n    return this.ends_;\n  };\n  /**\n   * Return the linestring at the specified index.\n   * @param {number} index Index.\n   * @return {LineString} LineString.\n   * @api\n   */\n\n\n  MultiLineString.prototype.getLineString = function (index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n\n    return new LineString(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n  };\n  /**\n   * Return the linestrings of this multilinestring.\n   * @return {Array<LineString>} LineStrings.\n   * @api\n   */\n\n\n  MultiLineString.prototype.getLineStrings = function () {\n    var flatCoordinates = this.flatCoordinates;\n    var ends = this.ends_;\n    var layout = this.layout;\n    /** @type {Array<LineString>} */\n\n    var lineStrings = [];\n    var offset = 0;\n\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      var end = ends[i];\n      var lineString = new LineString(flatCoordinates.slice(offset, end), layout);\n      lineStrings.push(lineString);\n      offset = end;\n    }\n\n    return lineStrings;\n  };\n  /**\n   * @return {Array<number>} Flat midpoints.\n   */\n\n\n  MultiLineString.prototype.getFlatMidpoints = function () {\n    var midpoints = [];\n    var flatCoordinates = this.flatCoordinates;\n    var offset = 0;\n    var ends = this.ends_;\n    var stride = this.stride;\n\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      var end = ends[i];\n      var midpoint = interpolatePoint(flatCoordinates, offset, end, stride, 0.5);\n      extend(midpoints, midpoint);\n      offset = end;\n    }\n\n    return midpoints;\n  };\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {MultiLineString} Simplified MultiLineString.\n   * @protected\n   */\n\n\n  MultiLineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    var simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = douglasPeuckerArray(this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);\n    return new MultiLineString(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n\n\n  MultiLineString.prototype.getType = function () {\n    return GeometryType.MULTI_LINE_STRING;\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  MultiLineString.prototype.intersectsExtent = function (extent) {\n    return intersectsLineStringArray(this.flatCoordinates, 0, this.ends_, this.stride, extent);\n  };\n  /**\n   * Set the coordinates of the multilinestring.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {GeometryLayout} [opt_layout] Layout.\n   * @api\n   */\n\n\n  MultiLineString.prototype.setCoordinates = function (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 2);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  };\n\n  return MultiLineString;\n}(SimpleGeometry);\n\nexport default MultiLineString;","map":{"version":3,"mappings":"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","names":["GeometryLayout","GeometryType","LineString","SimpleGeometry","arrayMaxSquaredDelta","assignClosestArrayPoint","closestSquaredDistanceXY","deflateCoordinatesArray","douglasPeuckerArray","extend","inflateCoordinatesArray","interpolatePoint","lineStringsCoordinateAtM","intersectsLineStringArray","__extends","coordinates","opt_layout","opt_ends","_super","_this","ends_","maxDelta_","maxDeltaRevision_","Array","isArray","setCoordinates","undefined","setFlatCoordinates","layout","getLayout","lineStrings","flatCoordinates","ends","i","ii","length","lineString","getFlatCoordinates","push","MultiLineString","slice","changed","multiLineString","applyProperties","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","stride","m","opt_extrapolate","opt_interpolate","XYM","XYZM","extrapolate","interpolate","index","offset","end","midpoints","midpoint","squaredTolerance","simplifiedFlatCoordinates","simplifiedEnds","XY","MULTI_LINE_STRING","extent","setLayout"],"sourceRoot":"","sources":["../src/geom/MultiLineString.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}