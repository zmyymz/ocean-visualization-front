{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/Control\n */\n\n\nimport BaseObject from '../Object.js';\nimport MapEventType from '../MapEventType.js';\nimport { VOID } from '../functions.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { removeNode } from '../dom.js';\n/**\n * @typedef {Object} Options\n * @property {HTMLElement} [element] The element is the control's\n * container element. This only needs to be specified if you're developing\n * a custom control.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want\n * the control to be rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * var myControl = new Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @api\n */\n\nvar Control =\n/** @class */\nfunction (_super) {\n  __extends(Control, _super);\n  /**\n   * @param {Options} options Control options.\n   */\n\n\n  function Control(options) {\n    var _this = _super.call(this) || this;\n\n    var element = options.element;\n\n    if (element && !options.target && !element.style.pointerEvents) {\n      element.style.pointerEvents = 'auto';\n    }\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n\n\n    _this.element = element ? element : null;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    _this.target_ = null;\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").default|null}\n     */\n\n    _this.map_ = null;\n    /**\n     * @protected\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     */\n\n    _this.listenerKeys = [];\n\n    if (options.render) {\n      _this.render = options.render;\n    }\n\n    if (options.target) {\n      _this.setTarget(options.target);\n    }\n\n    return _this;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  Control.prototype.disposeInternal = function () {\n    removeNode(this.element);\n\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\n   * Get the map associated with this control.\n   * @return {import(\"../PluggableMap.js\").default|null} Map.\n   * @api\n   */\n\n\n  Control.prototype.getMap = function () {\n    return this.map_;\n  };\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n\n\n  Control.prototype.setMap = function (map) {\n    if (this.map_) {\n      removeNode(this.element);\n    }\n\n    for (var i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n      unlistenByKey(this.listenerKeys[i]);\n    }\n\n    this.listenerKeys.length = 0;\n    this.map_ = map;\n\n    if (map) {\n      var target = this.target_ ? this.target_ : map.getOverlayContainerStopEvent();\n      target.appendChild(this.element);\n\n      if (this.render !== VOID) {\n        this.listenerKeys.push(listen(map, MapEventType.POSTRENDER, this.render, this));\n      }\n\n      map.render();\n    }\n  };\n  /**\n   * Renders the control.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @api\n   */\n\n\n  Control.prototype.render = function (mapEvent) {};\n  /**\n   * This function is used to set a target element for the control. It has no\n   * effect if it is called after the control has been added to the map (i.e.\n   * after `setMap` is called on the control). If no `target` is set in the\n   * options passed to the control constructor and if `setTarget` is not called\n   * then the control is added to the map's overlay container.\n   * @param {HTMLElement|string} target Target.\n   * @api\n   */\n\n\n  Control.prototype.setTarget = function (target) {\n    this.target_ = typeof target === 'string' ? document.getElementById(target) : target;\n  };\n\n  return Control;\n}(BaseObject);\n\nexport default Control;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAGA,OAAOA,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,SAAQC,IAAR,QAAmB,iBAAnB;AACA,SAAQC,MAAR,EAAgBC,aAAhB,QAAoC,cAApC;AACA,SAAQC,UAAR,QAAyB,WAAzB;AAEA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AAAA;AAAA;AAAsBC;AACpB;;;;;AAGA,mBAAYC,OAAZ,EAAmB;AAAnB,gBACEC,qBAAO,IADT;;AAGE,QAAMC,OAAO,GAAGF,OAAO,CAACE,OAAxB;;AACA,QAAIA,OAAO,IAAI,CAACF,OAAO,CAACG,MAApB,IAA8B,CAACD,OAAO,CAACE,KAAR,CAAcC,aAAjD,EAAgE;AAC9DH,aAAO,CAACE,KAAR,CAAcC,aAAd,GAA8B,MAA9B;AACD;AAED;;;;;;AAIAC,SAAI,CAACJ,OAAL,GAAeA,OAAO,GAAGA,OAAH,GAAa,IAAnC;AAEA;;;;;AAIAI,SAAI,CAACC,OAAL,GAAe,IAAf;AAEA;;;;;AAIAD,SAAI,CAACE,IAAL,GAAY,IAAZ;AAEA;;;;;AAIAF,SAAI,CAACG,YAAL,GAAoB,EAApB;;AAEA,QAAIT,OAAO,CAACU,MAAZ,EAAoB;AAClBJ,WAAI,CAACI,MAAL,GAAcV,OAAO,CAACU,MAAtB;AACD;;AAED,QAAIV,OAAO,CAACG,MAAZ,EAAoB;AAClBG,WAAI,CAACK,SAAL,CAAeX,OAAO,CAACG,MAAvB;AACD;;;AACF;AAED;;;;;AAGAS;AACEd,cAAU,CAAC,KAAKI,OAAN,CAAV;;AACAD,qBAAMY,eAAN,CAAqBC,IAArB,CAAqB,IAArB;AACD,GAHD;AAKA;;;;;;;AAKAF;AACE,WAAO,KAAKJ,IAAZ;AACD,GAFD;AAIA;;;;;;;;;;AAQAI,uCAAOG,GAAP,EAAU;AACR,QAAI,KAAKP,IAAT,EAAe;AACbV,gBAAU,CAAC,KAAKI,OAAN,CAAV;AACD;;AACD,SAAK,IAAIc,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAG,KAAKR,YAAL,CAAkBS,MAAvC,EAA+CF,CAAC,GAAGC,EAAnD,EAAuD,EAAED,CAAzD,EAA4D;AAC1DnB,mBAAa,CAAC,KAAKY,YAAL,CAAkBO,CAAlB,CAAD,CAAb;AACD;;AACD,SAAKP,YAAL,CAAkBS,MAAlB,GAA2B,CAA3B;AACA,SAAKV,IAAL,GAAYO,GAAZ;;AACA,QAAIA,GAAJ,EAAS;AACP,UAAMZ,MAAM,GAAG,KAAKI,OAAL,GACX,KAAKA,OADM,GAEXQ,GAAG,CAACI,4BAAJ,EAFJ;AAGAhB,YAAM,CAACiB,WAAP,CAAmB,KAAKlB,OAAxB;;AACA,UAAI,KAAKQ,MAAL,KAAgBf,IAApB,EAA0B;AACxB,aAAKc,YAAL,CAAkBY,IAAlB,CACEzB,MAAM,CAACmB,GAAD,EAAMrB,YAAY,CAAC4B,UAAnB,EAA+B,KAAKZ,MAApC,EAA4C,IAA5C,CADR;AAGD;;AACDK,SAAG,CAACL,MAAJ;AACD;AACF,GArBD;AAuBA;;;;;;;AAKAE,uCAAOW,QAAP,EAAe,CAAI,CAAnB;AAEA;;;;;;;;;;;AASAX,0CAAUT,MAAV,EAAgB;AACd,SAAKI,OAAL,GACE,OAAOJ,MAAP,KAAkB,QAAlB,GAA6BqB,QAAQ,CAACC,cAAT,CAAwBtB,MAAxB,CAA7B,GAA+DA,MADjE;AAED,GAHD;;AAIF;AAjHA,EAAsBV,UAAtB;;AAmHA,eAAemB,OAAf","names":["BaseObject","MapEventType","VOID","listen","unlistenByKey","removeNode","__extends","options","_super","element","target","style","pointerEvents","_this","target_","map_","listenerKeys","render","setTarget","Control","disposeInternal","call","map","i","ii","length","getOverlayContainerStopEvent","appendChild","push","POSTRENDER","mapEvent","document","getElementById"],"sourceRoot":"","sources":["../src/control/Control.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}