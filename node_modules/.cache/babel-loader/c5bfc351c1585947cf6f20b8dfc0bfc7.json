{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/BaseVector\n */\n\n\nimport Layer from './Layer.js';\nimport RBush from 'rbush';\nimport { assign } from '../obj.js';\nimport { createDefaultStyle, toFunction as toStyleFunction } from '../style/Style.js';\n/**\n * @template {import(\"../source/Vector.js\").default|import(\"../source/VectorTile.js\").default} VectorSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\n * features before rendering. By default features are drawn in the order that they are created. Use\n * `null` to avoid the sort, but get an undefined draw order.\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\n * renderer when getting features from the vector source for the rendering or hit-detection.\n * Recommended value: the size of the largest symbol, line width or label.\n * @property {VectorSourceType} [source] Source.\n * @property {import(\"../PluggableMap.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../PluggableMap.js\").default#addLayer map.addLayer()}.\n * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all\n * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority\n * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.\n * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has\n * higher priority.\n *\n * As an optimization decluttered features from layers with the same `className` are rendered above\n * the fill and stroke styles of all of those layers regardless of z-index.  To opt out of this\n * behavior and place declutterd features with their own layer configure the layer with a `className`\n * other than `ol-layer`.\n * @property {import(\"../style/Style.js\").StyleLike|null} [style] Layer style. When set to `null`, only\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\n * which will be used if this is not set.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will\n * be recreated during animations. This means that no vectors will be shown clipped, but the\n * setting will have a performance impact for large amounts of vector data. When set to `false`,\n * batches will be recreated when no animation is active.\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will\n * be recreated during interactions. See also `updateWhileAnimating`.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\n\nvar Property = {\n  RENDER_ORDER: 'renderOrder'\n};\n/**\n * @classdesc\n * Vector data that is rendered client-side.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default|import(\"../source/VectorTile.js\").default} VectorSourceType\n * @template {import(\"../renderer/canvas/VectorLayer.js\").default|import(\"../renderer/canvas/VectorTileLayer.js\").default|import(\"../renderer/canvas/VectorImageLayer.js\").default|import(\"../renderer/webgl/PointsLayer.js\").default} RendererType\n * @extends {Layer<VectorSourceType, RendererType>}\n * @api\n */\n\nvar BaseVectorLayer =\n/** @class */\nfunction (_super) {\n  __extends(BaseVectorLayer, _super);\n  /**\n   * @param {Options<VectorSourceType>} [opt_options] Options.\n   */\n\n\n  function BaseVectorLayer(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    var baseOptions = assign({}, options);\n    delete baseOptions.style;\n    delete baseOptions.renderBuffer;\n    delete baseOptions.updateWhileAnimating;\n    delete baseOptions.updateWhileInteracting;\n    _this = _super.call(this, baseOptions) || this;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.declutter_ = options.declutter !== undefined ? options.declutter : false;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.renderBuffer_ = options.renderBuffer !== undefined ? options.renderBuffer : 100;\n    /**\n     * User provided style.\n     * @type {import(\"../style/Style.js\").StyleLike}\n     * @private\n     */\n\n    _this.style_ = null;\n    /**\n     * Style function for use within the library.\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\n     * @private\n     */\n\n    _this.styleFunction_ = undefined;\n\n    _this.setStyle(options.style);\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n\n    _this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ? options.updateWhileAnimating : false;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ? options.updateWhileInteracting : false;\n    return _this;\n  }\n  /**\n   * @return {boolean} Declutter.\n   */\n\n\n  BaseVectorLayer.prototype.getDeclutter = function () {\n    return this.declutter_;\n  };\n  /**\n   * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise\n   * that resolves with an array of features. The array will either contain the topmost feature\n   * when a hit was detected, or it will be empty.\n   *\n   * The hit detection algorithm used for this method is optimized for performance, but is less\n   * accurate than the one used in {@link import(\"../PluggableMap.js\").default#getFeaturesAtPixel}: Text\n   * is not considered, and icons are only represented by their bounding box instead of the exact\n   * image.\n   *\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with an array of features.\n   * @api\n   */\n\n\n  BaseVectorLayer.prototype.getFeatures = function (pixel) {\n    return _super.prototype.getFeatures.call(this, pixel);\n  };\n  /**\n   * @return {number|undefined} Render buffer.\n   */\n\n\n  BaseVectorLayer.prototype.getRenderBuffer = function () {\n    return this.renderBuffer_;\n  };\n  /**\n   * @return {function(import(\"../Feature.js\").default, import(\"../Feature.js\").default): number|null|undefined} Render\n   *     order.\n   */\n\n\n  BaseVectorLayer.prototype.getRenderOrder = function () {\n    return (\n      /** @type {import(\"../render.js\").OrderFunction|null|undefined} */\n      this.get(Property.RENDER_ORDER)\n    );\n  };\n  /**\n   * Get the style for features.  This returns whatever was passed to the `style`\n   * option at construction or to the `setStyle` method.\n   * @return {import(\"../style/Style.js\").StyleLike|null|undefined} Layer style.\n   * @api\n   */\n\n\n  BaseVectorLayer.prototype.getStyle = function () {\n    return this.style_;\n  };\n  /**\n   * Get the style function.\n   * @return {import(\"../style/Style.js\").StyleFunction|undefined} Layer style function.\n   * @api\n   */\n\n\n  BaseVectorLayer.prototype.getStyleFunction = function () {\n    return this.styleFunction_;\n  };\n  /**\n   * @return {boolean} Whether the rendered layer should be updated while\n   *     animating.\n   */\n\n\n  BaseVectorLayer.prototype.getUpdateWhileAnimating = function () {\n    return this.updateWhileAnimating_;\n  };\n  /**\n   * @return {boolean} Whether the rendered layer should be updated while\n   *     interacting.\n   */\n\n\n  BaseVectorLayer.prototype.getUpdateWhileInteracting = function () {\n    return this.updateWhileInteracting_;\n  };\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n\n\n  BaseVectorLayer.prototype.renderDeclutter = function (frameState) {\n    if (!frameState.declutterTree) {\n      frameState.declutterTree = new RBush(9);\n    }\n    /** @type {*} */\n\n\n    this.getRenderer().renderDeclutter(frameState);\n  };\n  /**\n   * @param {import(\"../render.js\").OrderFunction|null|undefined} renderOrder\n   *     Render order.\n   */\n\n\n  BaseVectorLayer.prototype.setRenderOrder = function (renderOrder) {\n    this.set(Property.RENDER_ORDER, renderOrder);\n  };\n  /**\n   * Set the style for features.  This can be a single style object, an array\n   * of styles, or a function that takes a feature and resolution and returns\n   * an array of styles. If set to `null`, the layer has no style (a `null` style),\n   * so only features that have their own styles will be rendered in the layer. Call\n   * `setStyle()` without arguments to reset to the default style. See\n   * {@link module:ol/style/Style~Style} for information on the default style.\n   * @param {import(\"../style/Style.js\").StyleLike|null} [opt_style] Layer style.\n   * @api\n   */\n\n\n  BaseVectorLayer.prototype.setStyle = function (opt_style) {\n    this.style_ = opt_style !== undefined ? opt_style : createDefaultStyle;\n    this.styleFunction_ = opt_style === null ? undefined : toStyleFunction(this.style_);\n    this.changed();\n  };\n\n  return BaseVectorLayer;\n}(Layer);\n\nexport default BaseVectorLayer;","map":{"version":3,"mappings":"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","names":["Layer","RBush","assign","createDefaultStyle","toFunction","toStyleFunction","Property","RENDER_ORDER","__extends","opt_options","options","baseOptions","style","renderBuffer","updateWhileAnimating","updateWhileInteracting","_super","_this","declutter_","declutter","undefined","renderBuffer_","style_","styleFunction_","setStyle","updateWhileAnimating_","updateWhileInteracting_","BaseVectorLayer","pixel","getFeatures","call","get","frameState","declutterTree","getRenderer","renderDeclutter","renderOrder","set","opt_style","changed"],"sourceRoot":"","sources":["../src/layer/BaseVector.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}