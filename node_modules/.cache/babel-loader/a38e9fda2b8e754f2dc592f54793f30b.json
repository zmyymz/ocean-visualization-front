{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/VectorRenderTile\n */\n\n\nimport Tile from './Tile.js';\nimport { createCanvasContext2D } from './dom.js';\nimport { getUid } from './util.js';\n/**\n * @typedef {Object} ReplayState\n * @property {boolean} dirty Dirty.\n * @property {null|import(\"./render.js\").OrderFunction} renderedRenderOrder RenderedRenderOrder.\n * @property {number} renderedTileRevision RenderedTileRevision.\n * @property {number} renderedResolution RenderedResolution.\n * @property {number} renderedRevision RenderedRevision.\n * @property {number} renderedTileResolution RenderedTileResolution.\n * @property {number} renderedTileZ RenderedTileZ.\n */\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\n\nvar canvasPool = [];\n\nvar VectorRenderTile =\n/** @class */\nfunction (_super) {\n  __extends(VectorRenderTile, _super);\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {import(\"./tilecoord.js\").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.\n   * @param {function(VectorRenderTile):Array<import(\"./VectorTile\").default>} getSourceTiles Function\n   * to get source tiles for this tile.\n   */\n\n\n  function VectorRenderTile(tileCoord, state, urlTileCoord, getSourceTiles) {\n    var _this = _super.call(this, tileCoord, state, {\n      transition: 0\n    }) || this;\n    /**\n     * @private\n     * @type {!Object<string, CanvasRenderingContext2D>}\n     */\n\n\n    _this.context_ = {};\n    /**\n     * Executor groups by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n\n    _this.executorGroups = {};\n    /**\n     * Executor groups for decluttering, by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n\n    _this.declutterExecutorGroups = {};\n    /**\n     * Number of loading source tiles. Read/written by the source.\n     * @type {number}\n     */\n\n    _this.loadingSourceTiles = 0;\n    /**\n     * @type {Object<number, ImageData>}\n     */\n\n    _this.hitDetectionImageData = {};\n    /**\n     * @private\n     * @type {!Object<string, ReplayState>}\n     */\n\n    _this.replayState_ = {};\n    /**\n     * @type {Array<import(\"./VectorTile.js\").default>}\n     */\n\n    _this.sourceTiles = [];\n    /**\n     * @type {Object<string, boolean>}\n     */\n\n    _this.errorTileKeys = {};\n    /**\n     * @type {number}\n     */\n\n    _this.wantedResolution;\n    /**\n     * @type {!function():Array<import(\"./VectorTile.js\").default>}\n     */\n\n    _this.getSourceTiles = getSourceTiles.bind(undefined, _this);\n    /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */\n\n    _this.wrappedTileCoord = urlTileCoord;\n    return _this;\n  }\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {CanvasRenderingContext2D} The rendering context.\n   */\n\n\n  VectorRenderTile.prototype.getContext = function (layer) {\n    var key = getUid(layer);\n\n    if (!(key in this.context_)) {\n      this.context_[key] = createCanvasContext2D(1, 1, canvasPool);\n    }\n\n    return this.context_[key];\n  };\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {boolean} Tile has a rendering context for the given layer.\n   */\n\n\n  VectorRenderTile.prototype.hasContext = function (layer) {\n    return getUid(layer) in this.context_;\n  };\n  /**\n   * Get the Canvas for this tile.\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n\n\n  VectorRenderTile.prototype.getImage = function (layer) {\n    return this.hasContext(layer) ? this.getContext(layer).canvas : null;\n  };\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {ReplayState} The replay state.\n   */\n\n\n  VectorRenderTile.prototype.getReplayState = function (layer) {\n    var key = getUid(layer);\n\n    if (!(key in this.replayState_)) {\n      this.replayState_[key] = {\n        dirty: false,\n        renderedRenderOrder: null,\n        renderedResolution: NaN,\n        renderedRevision: -1,\n        renderedTileResolution: NaN,\n        renderedTileRevision: -1,\n        renderedTileZ: -1\n      };\n    }\n\n    return this.replayState_[key];\n  };\n  /**\n   * Load the tile.\n   */\n\n\n  VectorRenderTile.prototype.load = function () {\n    this.getSourceTiles();\n  };\n  /**\n   * Remove from the cache due to expiry\n   */\n\n\n  VectorRenderTile.prototype.release = function () {\n    for (var key in this.context_) {\n      canvasPool.push(this.context_[key].canvas);\n      delete this.context_[key];\n    }\n\n    _super.prototype.release.call(this);\n  };\n\n  return VectorRenderTile;\n}(Tile);\n\nexport default VectorRenderTile;","map":{"version":3,"mappings":"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","names":["Tile","createCanvasContext2D","getUid","canvasPool","__extends","tileCoord","state","urlTileCoord","getSourceTiles","_super","transition","_this","context_","executorGroups","declutterExecutorGroups","loadingSourceTiles","hitDetectionImageData","replayState_","sourceTiles","errorTileKeys","wantedResolution","bind","undefined","wrappedTileCoord","VectorRenderTile","layer","key","hasContext","getContext","canvas","dirty","renderedRenderOrder","renderedResolution","NaN","renderedRevision","renderedTileResolution","renderedTileRevision","renderedTileZ","push","release","call"],"sourceRoot":"","sources":["src/VectorRenderTile.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}