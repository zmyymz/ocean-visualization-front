{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\n\n/**\n * @module ol/source\n */\nimport LRUCache from './structs/LRUCache.js';\nimport { getIntersection } from './extent.js';\nexport { default as BingMaps } from './source/BingMaps.js';\nexport { default as CartoDB } from './source/CartoDB.js';\nexport { default as Cluster } from './source/Cluster.js';\nexport { default as DataTile } from './source/DataTile.js';\nexport { default as GeoTIFF } from './source/GeoTIFF.js';\nexport { default as IIIF } from './source/IIIF.js';\nexport { default as Image } from './source/Image.js';\nexport { default as ImageArcGISRest } from './source/ImageArcGISRest.js';\nexport { default as ImageCanvas } from './source/ImageCanvas.js';\nexport { default as ImageMapGuide } from './source/ImageMapGuide.js';\nexport { default as ImageStatic } from './source/ImageStatic.js';\nexport { default as ImageWMS } from './source/ImageWMS.js';\nexport { default as OSM } from './source/OSM.js';\nexport { default as Raster } from './source/Raster.js';\nexport { default as Source } from './source/Source.js';\nexport { default as Stamen } from './source/Stamen.js';\nexport { default as Tile } from './source/Tile.js';\nexport { default as TileArcGISRest } from './source/TileArcGISRest.js';\nexport { default as TileDebug } from './source/TileDebug.js';\nexport { default as TileImage } from './source/TileImage.js';\nexport { default as TileJSON } from './source/TileJSON.js';\nexport { default as TileWMS } from './source/TileWMS.js';\nexport { default as UrlTile } from './source/UrlTile.js';\nexport { default as UTFGrid } from './source/UTFGrid.js';\nexport { default as Vector } from './source/Vector.js';\nexport { default as VectorTile } from './source/VectorTile.js';\nexport { default as WMTS } from './source/WMTS.js';\nexport { default as XYZ } from './source/XYZ.js';\nexport { default as Zoomify } from './source/Zoomify.js';\n/**\n * Creates a sources function from a tile grid. This function can be used as value for the\n * `sources` property of the {@link module:ol/layer/Layer~Layer} subclasses that support it.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @param {function(import(\"./tilecoord.js\").TileCoord): import(\"./source/Source.js\").default} factory Source factory.\n * This function takes a {@link module:ol/tilecoord~TileCoord} as argument and is expected to return a\n * {@link module:ol/source/Source~Source}. **Note**: The returned sources should have a tile grid with\n * a limited set of resolutions, matching the resolution range of a single zoom level of the pyramid\n * `tileGrid` that `createFromTileGrid` was called with.\n * @return {function(import(\"./extent.js\").Extent, number): Array<import(\"./source/Source.js\").default>} Sources function.\n * @api\n */\n\nexport function sourcesFromTileGrid(tileGrid, factory) {\n  var sourceCache = new LRUCache(32);\n  var tileGridExtent = tileGrid.getExtent();\n  return function (extent, resolution) {\n    sourceCache.expireCache();\n\n    if (tileGridExtent) {\n      extent = getIntersection(tileGridExtent, extent);\n    }\n\n    var z = tileGrid.getZForResolution(resolution);\n    var wantedSources = [];\n    tileGrid.forEachTileCoord(extent, z, function (tileCoord) {\n      var key = tileCoord.toString();\n\n      if (!sourceCache.containsKey(key)) {\n        var source = factory(tileCoord);\n        sourceCache.set(key, source);\n      }\n\n      wantedSources.push(sourceCache.get(key));\n    });\n    return wantedSources;\n  };\n}","map":{"version":3,"mappings":"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","names":["LRUCache","getIntersection","default","BingMaps","CartoDB","Cluster","DataTile","GeoTIFF","IIIF","Image","ImageArcGISRest","ImageCanvas","ImageMapGuide","ImageStatic","ImageWMS","OSM","Raster","Source","Stamen","Tile","TileArcGISRest","TileDebug","TileImage","TileJSON","TileWMS","UrlTile","UTFGrid","Vector","VectorTile","WMTS","XYZ","Zoomify","sourcesFromTileGrid","tileGrid","factory","sourceCache","tileGridExtent","getExtent","extent","resolution","expireCache","z","getZForResolution","wantedSources","forEachTileCoord","tileCoord","key","toString","containsKey","source","set","push","get"],"sourceRoot":"","sources":["src/source.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}