{"ast":null,"code":"/**\n * @module ol/format/Feature\n */\nimport Units from '../proj/Units.js';\nimport { abstract } from '../util.js';\nimport { assign } from '../obj.js';\nimport { equivalent as equivalentProjection, get as getProjection, transformExtent } from '../proj.js';\n/**\n * @typedef {Object} ReadOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are reading.\n * If not provided, the projection will be derived from the data (where possible) or\n * the `dataProjection` of the format is assigned (where set). If the projection\n * can not be derived from the data and if no `dataProjection` is set for a format,\n * the features will not be reprojected.\n * @property {import(\"../extent.js\").Extent} [extent] Tile extent in map units of the tile being read.\n * This is only required when reading data with tile pixels as geometry units. When configured,\n * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be\n * provided.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * created by the format reader. If not provided, features will be returned in the\n * `dataProjection`.\n */\n\n/**\n * @typedef {Object} WriteOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are writing.\n * If not provided, the `dataProjection` of the format is assigned (where set).\n * If no `dataProjection` is set for a format, the features will be returned\n * in the `featureProjection`.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * that will be serialized by the format writer. If not provided, geometries are assumed\n * to be in the `dataProjection` if that is set; in other words, they are not transformed.\n * @property {boolean} [rightHanded] When writing geometries, follow the right-hand\n * rule for linear ring orientation.  This means that polygons will have counter-clockwise\n * exterior rings and clockwise interior rings.  By default, coordinates are serialized\n * as they are provided at construction.  If `true`, the right-hand rule will\n * be applied.  If `false`, the left-hand rule will be applied (clockwise for\n * exterior and counter-clockwise for interior rings).  Note that not all\n * formats support this.  The GeoJSON format does use this property when writing\n * geometries.\n * @property {number} [decimals] Maximum number of decimal places for coordinates.\n * Coordinates are stored internally as floats, but floating-point arithmetic can create\n * coordinates with a large number of decimal places, not generally wanted on output.\n * Set a number here to round coordinates. Can also be used to ensure that\n * coordinates read in can be written back out with the same number of decimals.\n * Default is no rounding.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for feature formats.\n * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode\n * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial\n * file formats.  See the documentation for each format for more details.\n *\n * @abstract\n * @api\n */\n\nvar FeatureFormat =\n/** @class */\nfunction () {\n  function FeatureFormat() {\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     */\n    this.dataProjection = undefined;\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     */\n\n    this.defaultFeatureProjection = undefined;\n    /**\n     * A list media types supported by the format in descending order of preference.\n     * @type {Array<string>}\n     */\n\n    this.supportedMediaTypes = null;\n  }\n  /**\n   * Adds the data projection to the read options.\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [opt_options] Options.\n   * @return {ReadOptions|undefined} Options.\n   * @protected\n   */\n\n\n  FeatureFormat.prototype.getReadOptions = function (source, opt_options) {\n    var options;\n\n    if (opt_options) {\n      var dataProjection = opt_options.dataProjection ? getProjection(opt_options.dataProjection) : this.readProjection(source);\n\n      if (opt_options.extent && dataProjection && dataProjection.getUnits() === Units.TILE_PIXELS) {\n        dataProjection = getProjection(dataProjection);\n        dataProjection.setWorldExtent(opt_options.extent);\n      }\n\n      options = {\n        dataProjection: dataProjection,\n        featureProjection: opt_options.featureProjection\n      };\n    }\n\n    return this.adaptOptions(options);\n  };\n  /**\n   * Sets the `dataProjection` on the options, if no `dataProjection`\n   * is set.\n   * @param {WriteOptions|ReadOptions|undefined} options\n   *     Options.\n   * @protected\n   * @return {WriteOptions|ReadOptions|undefined}\n   *     Updated options.\n   */\n\n\n  FeatureFormat.prototype.adaptOptions = function (options) {\n    return assign({\n      dataProjection: this.dataProjection,\n      featureProjection: this.defaultFeatureProjection\n    }, options);\n  };\n  /**\n   * @abstract\n   * @return {import(\"./FormatType.js\").default} Format.\n   */\n\n\n  FeatureFormat.prototype.getType = function () {\n    return abstract();\n  };\n  /**\n   * Read a single feature from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [opt_options] Read options.\n   * @return {import(\"../Feature.js\").FeatureLike} Feature.\n   */\n\n\n  FeatureFormat.prototype.readFeature = function (source, opt_options) {\n    return abstract();\n  };\n  /**\n   * Read all features from a source.\n   *\n   * @abstract\n   * @param {Document|Element|ArrayBuffer|Object|string} source Source.\n   * @param {ReadOptions} [opt_options] Read options.\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   */\n\n\n  FeatureFormat.prototype.readFeatures = function (source, opt_options) {\n    return abstract();\n  };\n  /**\n   * Read a single geometry from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [opt_options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  FeatureFormat.prototype.readGeometry = function (source, opt_options) {\n    return abstract();\n  };\n  /**\n   * Read the projection from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n   */\n\n\n  FeatureFormat.prototype.readProjection = function (source) {\n    return abstract();\n  };\n  /**\n   * Encode a feature in this format.\n   *\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {WriteOptions} [opt_options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n\n\n  FeatureFormat.prototype.writeFeature = function (feature, opt_options) {\n    return abstract();\n  };\n  /**\n   * Encode an array of features in this format.\n   *\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {WriteOptions} [opt_options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n\n\n  FeatureFormat.prototype.writeFeatures = function (features, opt_options) {\n    return abstract();\n  };\n  /**\n   * Write a single geometry in this format.\n   *\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {WriteOptions} [opt_options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n\n\n  FeatureFormat.prototype.writeGeometry = function (geometry, opt_options) {\n    return abstract();\n  };\n\n  return FeatureFormat;\n}();\n\nexport default FeatureFormat;\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {boolean} write Set to true for writing, false for reading.\n * @param {WriteOptions|ReadOptions} [opt_options] Options.\n * @return {import(\"../geom/Geometry.js\").default} Transformed geometry.\n */\n\nexport function transformGeometryWithOptions(geometry, write, opt_options) {\n  var featureProjection = opt_options ? getProjection(opt_options.featureProjection) : null;\n  var dataProjection = opt_options ? getProjection(opt_options.dataProjection) : null;\n  var transformed;\n\n  if (featureProjection && dataProjection && !equivalentProjection(featureProjection, dataProjection)) {\n    transformed = (write ? geometry.clone() : geometry).transform(write ? featureProjection : dataProjection, write ? dataProjection : featureProjection);\n  } else {\n    transformed = geometry;\n  }\n\n  if (write && opt_options &&\n  /** @type {WriteOptions} */\n  opt_options.decimals !== undefined) {\n    var power_1 = Math.pow(10,\n    /** @type {WriteOptions} */\n    opt_options.decimals); // if decimals option on write, round each coordinate appropriately\n\n    /**\n     * @param {Array<number>} coordinates Coordinates.\n     * @return {Array<number>} Transformed coordinates.\n     */\n\n    var transform = function (coordinates) {\n      for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n        coordinates[i] = Math.round(coordinates[i] * power_1) / power_1;\n      }\n\n      return coordinates;\n    };\n\n    if (transformed === geometry) {\n      transformed = geometry.clone();\n    }\n\n    transformed.applyTransform(transform);\n  }\n\n  return transformed;\n}\n/**\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {ReadOptions} [opt_options] Read options.\n * @return {import(\"../extent.js\").Extent} Transformed extent.\n */\n\nexport function transformExtentWithOptions(extent, opt_options) {\n  var featureProjection = opt_options ? getProjection(opt_options.featureProjection) : null;\n  var dataProjection = opt_options ? getProjection(opt_options.dataProjection) : null;\n\n  if (featureProjection && dataProjection && !equivalentProjection(featureProjection, dataProjection)) {\n    return transformExtent(extent, dataProjection, featureProjection);\n  } else {\n    return extent;\n  }\n}","map":{"version":3,"mappings":"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","names":["Units","abstract","assign","equivalent","equivalentProjection","get","getProjection","transformExtent","dataProjection","undefined","defaultFeatureProjection","supportedMediaTypes","FeatureFormat","source","opt_options","options","readProjection","extent","getUnits","TILE_PIXELS","setWorldExtent","featureProjection","adaptOptions","feature","features","geometry","transformGeometryWithOptions","write","transformed","clone","transform","decimals","power_1","Math","pow","coordinates","i","ii","length","round","applyTransform","transformExtentWithOptions"],"sourceRoot":"","sources":["../src/format/Feature.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}