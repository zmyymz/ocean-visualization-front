{"ast":null,"code":"/**\n * @module ol/geom/flat/geodesic\n */\nimport { get as getProjection, getTransform } from '../../proj.js';\nimport { squaredSegmentDistance, toDegrees, toRadians } from '../../math.js';\n/**\n * @param {function(number): import(\"../../coordinate.js\").Coordinate} interpolate Interpolate function.\n * @param {import(\"../../proj.js\").TransformFunction} transform Transform from longitude/latitude to\n *     projected coordinates.\n * @param {number} squaredTolerance Squared tolerance.\n * @return {Array<number>} Flat coordinates.\n */\n\nfunction line(interpolate, transform, squaredTolerance) {\n  // FIXME reduce garbage generation\n  // FIXME optimize stack operations\n\n  /** @type {Array<number>} */\n  var flatCoordinates = [];\n  var geoA = interpolate(0);\n  var geoB = interpolate(1);\n  var a = transform(geoA);\n  var b = transform(geoB);\n  /** @type {Array<import(\"../../coordinate.js\").Coordinate>} */\n\n  var geoStack = [geoB, geoA];\n  /** @type {Array<import(\"../../coordinate.js\").Coordinate>} */\n\n  var stack = [b, a];\n  /** @type {Array<number>} */\n\n  var fractionStack = [1, 0];\n  /** @type {!Object<string, boolean>} */\n\n  var fractions = {};\n  var maxIterations = 1e5;\n  var geoM, m, fracA, fracB, fracM, key;\n\n  while (--maxIterations > 0 && fractionStack.length > 0) {\n    // Pop the a coordinate off the stack\n    fracA = fractionStack.pop();\n    geoA = geoStack.pop();\n    a = stack.pop(); // Add the a coordinate if it has not been added yet\n\n    key = fracA.toString();\n\n    if (!(key in fractions)) {\n      flatCoordinates.push(a[0], a[1]);\n      fractions[key] = true;\n    } // Pop the b coordinate off the stack\n\n\n    fracB = fractionStack.pop();\n    geoB = geoStack.pop();\n    b = stack.pop(); // Find the m point between the a and b coordinates\n\n    fracM = (fracA + fracB) / 2;\n    geoM = interpolate(fracM);\n    m = transform(geoM);\n\n    if (squaredSegmentDistance(m[0], m[1], a[0], a[1], b[0], b[1]) < squaredTolerance) {\n      // If the m point is sufficiently close to the straight line, then we\n      // discard it.  Just use the b coordinate and move on to the next line\n      // segment.\n      flatCoordinates.push(b[0], b[1]);\n      key = fracB.toString();\n      fractions[key] = true;\n    } else {\n      // Otherwise, we need to subdivide the current line segment.  Split it\n      // into two and push the two line segments onto the stack.\n      fractionStack.push(fracB, fracM, fracM, fracA);\n      stack.push(b, m, m, a);\n      geoStack.push(geoB, geoM, geoM, geoA);\n    }\n  }\n\n  return flatCoordinates;\n}\n/**\n * Generate a great-circle arcs between two lat/lon points.\n * @param {number} lon1 Longitude 1 in degrees.\n * @param {number} lat1 Latitude 1 in degrees.\n * @param {number} lon2 Longitude 2 in degrees.\n * @param {number} lat2 Latitude 2 in degrees.\n * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n * @param {number} squaredTolerance Squared tolerance.\n * @return {Array<number>} Flat coordinates.\n */\n\n\nexport function greatCircleArc(lon1, lat1, lon2, lat2, projection, squaredTolerance) {\n  var geoProjection = getProjection('EPSG:4326');\n  var cosLat1 = Math.cos(toRadians(lat1));\n  var sinLat1 = Math.sin(toRadians(lat1));\n  var cosLat2 = Math.cos(toRadians(lat2));\n  var sinLat2 = Math.sin(toRadians(lat2));\n  var cosDeltaLon = Math.cos(toRadians(lon2 - lon1));\n  var sinDeltaLon = Math.sin(toRadians(lon2 - lon1));\n  var d = sinLat1 * sinLat2 + cosLat1 * cosLat2 * cosDeltaLon;\n  return line(\n  /**\n   * @param {number} frac Fraction.\n   * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\n   */\n  function (frac) {\n    if (1 <= d) {\n      return [lon2, lat2];\n    }\n\n    var D = frac * Math.acos(d);\n    var cosD = Math.cos(D);\n    var sinD = Math.sin(D);\n    var y = sinDeltaLon * cosLat2;\n    var x = cosLat1 * sinLat2 - sinLat1 * cosLat2 * cosDeltaLon;\n    var theta = Math.atan2(y, x);\n    var lat = Math.asin(sinLat1 * cosD + cosLat1 * sinD * Math.cos(theta));\n    var lon = toRadians(lon1) + Math.atan2(Math.sin(theta) * sinD * cosLat1, cosD - sinLat1 * Math.sin(lat));\n    return [toDegrees(lon), toDegrees(lat)];\n  }, getTransform(geoProjection, projection), squaredTolerance);\n}\n/**\n * Generate a meridian (line at constant longitude).\n * @param {number} lon Longitude.\n * @param {number} lat1 Latitude 1.\n * @param {number} lat2 Latitude 2.\n * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n * @param {number} squaredTolerance Squared tolerance.\n * @return {Array<number>} Flat coordinates.\n */\n\nexport function meridian(lon, lat1, lat2, projection, squaredTolerance) {\n  var epsg4326Projection = getProjection('EPSG:4326');\n  return line(\n  /**\n   * @param {number} frac Fraction.\n   * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\n   */\n  function (frac) {\n    return [lon, lat1 + (lat2 - lat1) * frac];\n  }, getTransform(epsg4326Projection, projection), squaredTolerance);\n}\n/**\n * Generate a parallel (line at constant latitude).\n * @param {number} lat Latitude.\n * @param {number} lon1 Longitude 1.\n * @param {number} lon2 Longitude 2.\n * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n * @param {number} squaredTolerance Squared tolerance.\n * @return {Array<number>} Flat coordinates.\n */\n\nexport function parallel(lat, lon1, lon2, projection, squaredTolerance) {\n  var epsg4326Projection = getProjection('EPSG:4326');\n  return line(\n  /**\n   * @param {number} frac Fraction.\n   * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\n   */\n  function (frac) {\n    return [lon1 + (lon2 - lon1) * frac, lat];\n  }, getTransform(epsg4326Projection, projection), squaredTolerance);\n}","map":{"version":3,"mappings":"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","names":["get","getProjection","getTransform","squaredSegmentDistance","toDegrees","toRadians","line","interpolate","transform","squaredTolerance","flatCoordinates","geoA","geoB","a","b","geoStack","stack","fractionStack","fractions","maxIterations","geoM","m","fracA","fracB","fracM","key","length","pop","toString","push","greatCircleArc","lon1","lat1","lon2","lat2","projection","geoProjection","cosLat1","Math","cos","sinLat1","sin","cosLat2","sinLat2","cosDeltaLon","sinDeltaLon","d","frac","D","acos","cosD","sinD","y","x","theta","atan2","lat","asin","lon","meridian","epsg4326Projection","parallel"],"sourceRoot":"","sources":["../../src/geom/flat/geodesic.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}