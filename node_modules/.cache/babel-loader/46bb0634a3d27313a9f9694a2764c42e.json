{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/LineString\n */\n\n\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestPoint, maxSquaredDelta } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { douglasPeucker } from './flat/simplify.js';\nimport { extend } from '../array.js';\nimport { forEach as forEachSegment } from './flat/segments.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { interpolatePoint, lineStringCoordinateAtM } from './flat/interpolate.js';\nimport { intersectsLineString } from './flat/intersectsextent.js';\nimport { lineStringLength } from './flat/length.js';\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\n\nvar LineString =\n/** @class */\nfunction (_super) {\n  __extends(LineString, _super);\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n\n\n  function LineString(coordinates, opt_layout) {\n    var _this = _super.call(this) || this;\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n\n\n    _this.flatMidpoint_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.flatMidpointRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.maxDeltaRevision_ = -1;\n\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n      _this.setFlatCoordinates(opt_layout,\n      /** @type {Array<number>} */\n      coordinates);\n    } else {\n      _this.setCoordinates(\n      /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n      coordinates, opt_layout);\n    }\n\n    return _this;\n  }\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @api\n   */\n\n\n  LineString.prototype.appendCoordinate = function (coordinate) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = coordinate.slice();\n    } else {\n      extend(this.flatCoordinates, coordinate);\n    }\n\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LineString} Clone.\n   * @api\n   */\n\n\n  LineString.prototype.clone = function () {\n    var lineString = new LineString(this.flatCoordinates.slice(), this.layout);\n    lineString.applyProperties(this);\n    return lineString;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  LineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n\n    return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  };\n  /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n   *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */\n\n\n  LineString.prototype.forEachSegment = function (callback) {\n    return forEachSegment(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\n  };\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean} [opt_extrapolate] Extrapolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */\n\n\n  LineString.prototype.getCoordinateAtM = function (m, opt_extrapolate) {\n    if (this.layout != GeometryLayout.XYM && this.layout != GeometryLayout.XYZM) {\n      return null;\n    }\n\n    var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    return lineStringCoordinateAtM(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);\n  };\n  /**\n   * Return the coordinates of the linestring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n\n\n  LineString.prototype.getCoordinates = function () {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_dest] Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n   * @api\n   */\n\n\n  LineString.prototype.getCoordinateAt = function (fraction, opt_dest) {\n    return interpolatePoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, opt_dest, this.stride);\n  };\n  /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */\n\n\n  LineString.prototype.getLength = function () {\n    return lineStringLength(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n\n\n  LineString.prototype.getFlatMidpoint = function () {\n    if (this.flatMidpointRevision_ != this.getRevision()) {\n      this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n      this.flatMidpointRevision_ = this.getRevision();\n    }\n\n    return this.flatMidpoint_;\n  };\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} Simplified LineString.\n   * @protected\n   */\n\n\n  LineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n\n\n  LineString.prototype.getType = function () {\n    return GeometryType.LINE_STRING;\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  LineString.prototype.intersectsExtent = function (extent) {\n    return intersectsLineString(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n  };\n  /**\n   * Set the coordinates of the linestring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n\n\n  LineString.prototype.setCoordinates = function (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n\n  return LineString;\n}(SimpleGeometry);\n\nexport default LineString;","map":{"version":3,"mappings":"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","names":["GeometryLayout","GeometryType","SimpleGeometry","assignClosestPoint","maxSquaredDelta","closestSquaredDistanceXY","deflateCoordinates","douglasPeucker","extend","forEach","forEachSegment","inflateCoordinates","interpolatePoint","lineStringCoordinateAtM","intersectsLineString","lineStringLength","__extends","coordinates","opt_layout","_super","_this","flatMidpoint_","flatMidpointRevision_","maxDelta_","maxDeltaRevision_","undefined","Array","isArray","setFlatCoordinates","setCoordinates","LineString","coordinate","flatCoordinates","slice","changed","lineString","layout","applyProperties","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","length","stride","callback","m","opt_extrapolate","XYM","XYZM","extrapolate","fraction","opt_dest","getCoordinateAt","squaredTolerance","simplifiedFlatCoordinates","XY","LINE_STRING","extent","setLayout"],"sourceRoot":"","sources":["../src/geom/LineString.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}