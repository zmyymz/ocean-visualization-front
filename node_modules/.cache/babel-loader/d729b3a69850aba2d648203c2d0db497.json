{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/Point\n */\n\n\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { containsXY, createOrUpdateFromCoordinate } from '../extent.js';\nimport { deflateCoordinate } from './flat/deflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\n\nvar Point =\n/** @class */\nfunction (_super) {\n  __extends(Point, _super);\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n\n\n  function Point(coordinates, opt_layout) {\n    var _this = _super.call(this) || this;\n\n    _this.setCoordinates(coordinates, opt_layout);\n\n    return _this;\n  }\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @api\n   */\n\n\n  Point.prototype.clone = function () {\n    var point = new Point(this.flatCoordinates.slice(), this.layout);\n    point.applyProperties(this);\n    return point;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  Point.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    var flatCoordinates = this.flatCoordinates;\n    var squaredDistance = squaredDx(x, y, flatCoordinates[0], flatCoordinates[1]);\n\n    if (squaredDistance < minSquaredDistance) {\n      var stride = this.stride;\n\n      for (var i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  };\n  /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @api\n   */\n\n\n  Point.prototype.getCoordinates = function () {\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n\n\n  Point.prototype.computeExtent = function (extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n\n\n  Point.prototype.getType = function () {\n    return GeometryType.POINT;\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  Point.prototype.intersectsExtent = function (extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  };\n  /**\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n\n\n  Point.prototype.setCoordinates = function (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 0);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    this.flatCoordinates.length = deflateCoordinate(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n\n  return Point;\n}(SimpleGeometry);\n\nexport default Point;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAGA,OAAOA,YAAP,MAAyB,mBAAzB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,SAAQC,UAAR,EAAoBC,4BAApB,QAAuD,cAAvD;AACA,SAAQC,iBAAR,QAAgC,mBAAhC;AACA,SAAQC,eAAe,IAAIC,SAA3B,QAA2C,YAA3C;AAEA;;;;;;;AAMA;AAAA;AAAA;AAAoBC;AAClB;;;;;;AAIA,iBAAYC,WAAZ,EAAyBC,UAAzB,EAAmC;AAAnC,gBACEC,qBAAO,IADT;;AAEEC,SAAI,CAACC,cAAL,CAAoBJ,WAApB,EAAiCC,UAAjC;;;AACD;AAED;;;;;;;AAKAI;AACE,QAAMC,KAAK,GAAG,IAAID,KAAJ,CAAU,KAAKE,eAAL,CAAqBC,KAArB,EAAV,EAAwC,KAAKC,MAA7C,CAAd;AACAH,SAAK,CAACI,eAAN,CAAsB,IAAtB;AACA,WAAOJ,KAAP;AACD,GAJD;AAMA;;;;;;;;;AAOAD,6CAAeM,CAAf,EAAkBC,CAAlB,EAAqBC,YAArB,EAAmCC,kBAAnC,EAAqD;AACnD,QAAMP,eAAe,GAAG,KAAKA,eAA7B;AACA,QAAMV,eAAe,GAAGC,SAAS,CAC/Ba,CAD+B,EAE/BC,CAF+B,EAG/BL,eAAe,CAAC,CAAD,CAHgB,EAI/BA,eAAe,CAAC,CAAD,CAJgB,CAAjC;;AAMA,QAAIV,eAAe,GAAGiB,kBAAtB,EAA0C;AACxC,UAAMC,MAAM,GAAG,KAAKA,MAApB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4B,EAAEC,CAA9B,EAAiC;AAC/BH,oBAAY,CAACG,CAAD,CAAZ,GAAkBT,eAAe,CAACS,CAAD,CAAjC;AACD;;AACDH,kBAAY,CAACI,MAAb,GAAsBF,MAAtB;AACA,aAAOlB,eAAP;AACD,KAPD,MAOO;AACL,aAAOiB,kBAAP;AACD;AACF,GAlBD;AAoBA;;;;;;;AAKAT;AACE,WAAO,CAAC,KAAKE,eAAN,GAAwB,EAAxB,GAA6B,KAAKA,eAAL,CAAqBC,KAArB,EAApC;AACD,GAFD;AAIA;;;;;;;AAKAH,4CAAca,MAAd,EAAoB;AAClB,WAAOvB,4BAA4B,CAAC,KAAKY,eAAN,EAAuBW,MAAvB,CAAnC;AACD,GAFD;AAIA;;;;;;;AAKAb;AACE,WAAOb,YAAY,CAAC2B,KAApB;AACD,GAFD;AAIA;;;;;;;;AAMAd,+CAAiBa,MAAjB,EAAuB;AACrB,WAAOxB,UAAU,CAACwB,MAAD,EAAS,KAAKX,eAAL,CAAqB,CAArB,CAAT,EAAkC,KAAKA,eAAL,CAAqB,CAArB,CAAlC,CAAjB;AACD,GAFD;AAIA;;;;;;;AAKAF,6CAAeL,WAAf,EAA4BC,UAA5B,EAAsC;AACpC,SAAKmB,SAAL,CAAenB,UAAf,EAA2BD,WAA3B,EAAwC,CAAxC;;AACA,QAAI,CAAC,KAAKO,eAAV,EAA2B;AACzB,WAAKA,eAAL,GAAuB,EAAvB;AACD;;AACD,SAAKA,eAAL,CAAqBU,MAArB,GAA8BrB,iBAAiB,CAC7C,KAAKW,eADwC,EAE7C,CAF6C,EAG7CP,WAH6C,EAI7C,KAAKe,MAJwC,CAA/C;AAMA,SAAKM,OAAL;AACD,GAZD;;AAaF;AAvGA,EAAoB5B,cAApB;;AAyGA,eAAeY,KAAf","names":["GeometryType","SimpleGeometry","containsXY","createOrUpdateFromCoordinate","deflateCoordinate","squaredDistance","squaredDx","__extends","coordinates","opt_layout","_super","_this","setCoordinates","Point","point","flatCoordinates","slice","layout","applyProperties","x","y","closestPoint","minSquaredDistance","stride","i","length","extent","POINT","setLayout","changed"],"sourceRoot":"","sources":["../src/geom/Point.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}