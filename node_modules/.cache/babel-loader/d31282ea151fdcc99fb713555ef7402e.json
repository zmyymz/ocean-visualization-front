{"ast":null,"code":"const indexOfMatch = require(\"./index-of-match.js\");\n\nfunction findTagByName(xml, tagName, options) {\n  const debug = options && options.debug || false;\n  const startIndex = options && options.startIndex || 0;\n  if (debug) console.log(\"starting findTagByName with\", tagName, \" and \", options);\n  const start = indexOfMatch(xml, `\\<${tagName}[ \\>]`, startIndex);\n  if (debug) console.log(\"start:\", start);\n  if (start === -1) return undefined;\n  const afterStart = xml.slice(start + tagName.length);\n  let relativeEnd = indexOfMatch(afterStart, \"[ /]\" + tagName + \">\", 0);\n  const selfClosing = relativeEnd === -1;\n\n  if (selfClosing) {\n    relativeEnd = indexOfMatch(afterStart, \"[ /]>\", 0);\n  }\n\n  const end = start + tagName.length + relativeEnd + 1 + (selfClosing ? 0 : tagName.length) + 1;\n  if (debug) console.log(\"end:\", end);\n  if (end === -1) return undefined;\n  const outer = xml.slice(start, end); // tag is like <gml:identifier codeSpace=\"OGP\">urn:ogc:def:crs:EPSG::32617</gml:identifier>\n\n  let inner;\n\n  if (selfClosing) {\n    inner = null;\n  } else {\n    inner = outer.slice(outer.indexOf(\">\") + 1, outer.lastIndexOf(\"<\"));\n  }\n\n  return {\n    inner,\n    outer,\n    start,\n    end\n  };\n}\n\nmodule.exports = findTagByName;","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/xml-utils/find-tag-by-name.js"],"names":["indexOfMatch","require","findTagByName","xml","tagName","options","debug","startIndex","console","log","start","undefined","afterStart","slice","length","relativeEnd","selfClosing","end","outer","inner","indexOf","lastIndexOf","module","exports"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,qBAAD,CAA5B;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,OAA5B,EAAqCC,OAArC,EAA8C;AAC5C,QAAMC,KAAK,GAAID,OAAO,IAAIA,OAAO,CAACC,KAApB,IAA8B,KAA5C;AAEA,QAAMC,UAAU,GAAIF,OAAO,IAAIA,OAAO,CAACE,UAApB,IAAmC,CAAtD;AAEA,MAAID,KAAJ,EAAWE,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CL,OAA3C,EAAoD,OAApD,EAA6DC,OAA7D;AAEX,QAAMK,KAAK,GAAGV,YAAY,CAACG,GAAD,EAAO,KAAIC,OAAQ,OAAnB,EAA2BG,UAA3B,CAA1B;AACA,MAAID,KAAJ,EAAWE,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBC,KAAtB;AACX,MAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB,OAAOC,SAAP;AAElB,QAAMC,UAAU,GAAGT,GAAG,CAACU,KAAJ,CAAUH,KAAK,GAAGN,OAAO,CAACU,MAA1B,CAAnB;AACA,MAAIC,WAAW,GAAGf,YAAY,CAACY,UAAD,EAAa,SAASR,OAAT,GAAmB,GAAhC,EAAqC,CAArC,CAA9B;AACA,QAAMY,WAAW,GAAGD,WAAW,KAAK,CAAC,CAArC;;AAEA,MAAIC,WAAJ,EAAiB;AACfD,IAAAA,WAAW,GAAGf,YAAY,CAACY,UAAD,EAAa,OAAb,EAAsB,CAAtB,CAA1B;AACD;;AAED,QAAMK,GAAG,GAAGP,KAAK,GAAGN,OAAO,CAACU,MAAhB,GAAyBC,WAAzB,GAAuC,CAAvC,IAA4CC,WAAW,GAAG,CAAH,GAAOZ,OAAO,CAACU,MAAtE,IAAgF,CAA5F;AACA,MAAIR,KAAJ,EAAWE,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBQ,GAApB;AACX,MAAIA,GAAG,KAAK,CAAC,CAAb,EAAgB,OAAON,SAAP;AAEhB,QAAMO,KAAK,GAAGf,GAAG,CAACU,KAAJ,CAAUH,KAAV,EAAiBO,GAAjB,CAAd,CAvB4C,CAwB5C;;AAEA,MAAIE,KAAJ;;AACA,MAAIH,WAAJ,EAAiB;AACfG,IAAAA,KAAK,GAAG,IAAR;AACD,GAFD,MAEO;AACLA,IAAAA,KAAK,GAAGD,KAAK,CAACL,KAAN,CAAYK,KAAK,CAACE,OAAN,CAAc,GAAd,IAAqB,CAAjC,EAAoCF,KAAK,CAACG,WAAN,CAAkB,GAAlB,CAApC,CAAR;AACD;;AAED,SAAO;AAAEF,IAAAA,KAAF;AAASD,IAAAA,KAAT;AAAgBR,IAAAA,KAAhB;AAAuBO,IAAAA;AAAvB,GAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBrB,aAAjB","sourcesContent":["const indexOfMatch = require(\"./index-of-match.js\");\n\nfunction findTagByName(xml, tagName, options) {\n  const debug = (options && options.debug) || false;\n\n  const startIndex = (options && options.startIndex) || 0;\n\n  if (debug) console.log(\"starting findTagByName with\", tagName, \" and \", options);\n\n  const start = indexOfMatch(xml, `\\<${tagName}[ \\>]`, startIndex);\n  if (debug) console.log(\"start:\", start);\n  if (start === -1) return undefined;\n\n  const afterStart = xml.slice(start + tagName.length);\n  let relativeEnd = indexOfMatch(afterStart, \"[ /]\" + tagName + \">\", 0);\n  const selfClosing = relativeEnd === -1;\n\n  if (selfClosing) {\n    relativeEnd = indexOfMatch(afterStart, \"[ /]>\", 0);\n  }\n\n  const end = start + tagName.length + relativeEnd + 1 + (selfClosing ? 0 : tagName.length) + 1;\n  if (debug) console.log(\"end:\", end);\n  if (end === -1) return undefined;\n\n  const outer = xml.slice(start, end);\n  // tag is like <gml:identifier codeSpace=\"OGP\">urn:ogc:def:crs:EPSG::32617</gml:identifier>\n\n  let inner;\n  if (selfClosing) {\n    inner = null;\n  } else {\n    inner = outer.slice(outer.indexOf(\">\") + 1, outer.lastIndexOf(\"<\"));\n  }\n\n  return { inner, outer, start, end };\n}\n\nmodule.exports = findTagByName;\n"]},"metadata":{},"sourceType":"script"}