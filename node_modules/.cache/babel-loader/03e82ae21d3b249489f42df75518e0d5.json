{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.regexp.test.js\";\n\n/**\n * @module ol/color\n */\nimport { assert } from './asserts.js';\nimport { clamp } from './math.js';\n/**\n * A color represented as a short array [red, green, blue, alpha].\n * red, green, and blue should be integers in the range 0..255 inclusive.\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\n * given then `1` will be used.\n * @typedef {Array<number>} Color\n * @api\n */\n\n/**\n * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.\n * @const\n * @type {RegExp}\n * @private\n */\n\nvar HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;\n/**\n * Regular expression for matching potential named color style strings.\n * @const\n * @type {RegExp}\n * @private\n */\n\nvar NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\\(.*\\)$/i;\n/**\n * Return the color as an rgba string.\n * @param {Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\n\nexport function asString(color) {\n  if (typeof color === 'string') {\n    return color;\n  } else {\n    return toString(color);\n  }\n}\n/**\n * Return named color as an rgba string.\n * @param {string} color Named color.\n * @return {string} Rgb string.\n */\n\nfunction fromNamed(color) {\n  var el = document.createElement('div');\n  el.style.color = color;\n\n  if (el.style.color !== '') {\n    document.body.appendChild(el);\n    var rgb = getComputedStyle(el).color;\n    document.body.removeChild(el);\n    return rgb;\n  } else {\n    return '';\n  }\n}\n/**\n * @param {string} s String.\n * @return {Color} Color.\n */\n\n\nexport var fromString = function () {\n  // We maintain a small cache of parsed strings.  To provide cheap LRU-like\n  // semantics, whenever the cache grows too large we simply delete an\n  // arbitrary 25% of the entries.\n\n  /**\n   * @const\n   * @type {number}\n   */\n  var MAX_CACHE_SIZE = 1024;\n  /**\n   * @type {Object<string, Color>}\n   */\n\n  var cache = {};\n  /**\n   * @type {number}\n   */\n\n  var cacheSize = 0;\n  return (\n    /**\n     * @param {string} s String.\n     * @return {Color} Color.\n     */\n    function (s) {\n      var color;\n\n      if (cache.hasOwnProperty(s)) {\n        color = cache[s];\n      } else {\n        if (cacheSize >= MAX_CACHE_SIZE) {\n          var i = 0;\n\n          for (var key in cache) {\n            if ((i++ & 3) === 0) {\n              delete cache[key];\n              --cacheSize;\n            }\n          }\n        }\n\n        color = fromStringInternal_(s);\n        cache[s] = color;\n        ++cacheSize;\n      }\n\n      return color;\n    }\n  );\n}();\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {Color|string} color Color.\n * @return {Color} Color.\n * @api\n */\n\nexport function asArray(color) {\n  if (Array.isArray(color)) {\n    return color;\n  } else {\n    return fromString(color);\n  }\n}\n/**\n * @param {string} s String.\n * @private\n * @return {Color} Color.\n */\n\nfunction fromStringInternal_(s) {\n  var r, g, b, a, color;\n\n  if (NAMED_COLOR_RE_.exec(s)) {\n    s = fromNamed(s);\n  }\n\n  if (HEX_COLOR_RE_.exec(s)) {\n    // hex\n    var n = s.length - 1; // number of hex digits\n\n    var d = // number of digits per channel\n    void 0; // number of digits per channel\n\n    if (n <= 4) {\n      d = 1;\n    } else {\n      d = 2;\n    }\n\n    var hasAlpha = n === 4 || n === 8;\n    r = parseInt(s.substr(1 + 0 * d, d), 16);\n    g = parseInt(s.substr(1 + 1 * d, d), 16);\n    b = parseInt(s.substr(1 + 2 * d, d), 16);\n\n    if (hasAlpha) {\n      a = parseInt(s.substr(1 + 3 * d, d), 16);\n    } else {\n      a = 255;\n    }\n\n    if (d == 1) {\n      r = (r << 4) + r;\n      g = (g << 4) + g;\n      b = (b << 4) + b;\n\n      if (hasAlpha) {\n        a = (a << 4) + a;\n      }\n    }\n\n    color = [r, g, b, a / 255];\n  } else if (s.indexOf('rgba(') == 0) {\n    // rgba()\n    color = s.slice(5, -1).split(',').map(Number);\n    normalize(color);\n  } else if (s.indexOf('rgb(') == 0) {\n    // rgb()\n    color = s.slice(4, -1).split(',').map(Number);\n    color.push(1);\n    normalize(color);\n  } else {\n    assert(false, 14); // Invalid color\n  }\n\n  return color;\n}\n/**\n * TODO this function is only used in the test, we probably shouldn't export it\n * @param {Color} color Color.\n * @return {Color} Clamped color.\n */\n\n\nexport function normalize(color) {\n  color[0] = clamp(color[0] + 0.5 | 0, 0, 255);\n  color[1] = clamp(color[1] + 0.5 | 0, 0, 255);\n  color[2] = clamp(color[2] + 0.5 | 0, 0, 255);\n  color[3] = clamp(color[3], 0, 1);\n  return color;\n}\n/**\n * @param {Color} color Color.\n * @return {string} String.\n */\n\nexport function toString(color) {\n  var r = color[0];\n\n  if (r != (r | 0)) {\n    r = r + 0.5 | 0;\n  }\n\n  var g = color[1];\n\n  if (g != (g | 0)) {\n    g = g + 0.5 | 0;\n  }\n\n  var b = color[2];\n\n  if (b != (b | 0)) {\n    b = b + 0.5 | 0;\n  }\n\n  var a = color[3] === undefined ? 1 : Math.round(color[3] * 100) / 100;\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\n/**\n * @param {string} s String.\n * @return {boolean} Whether the string is actually a valid color\n */\n\nexport function isStringColor(s) {\n  if (NAMED_COLOR_RE_.test(s)) {\n    s = fromNamed(s);\n  }\n\n  return HEX_COLOR_RE_.test(s) || s.indexOf('rgba(') === 0 || s.indexOf('rgb(') === 0;\n}","map":{"version":3,"mappings":"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","names":["assert","clamp","HEX_COLOR_RE_","NAMED_COLOR_RE_","asString","color","toString","fromNamed","el","document","createElement","style","body","appendChild","rgb","getComputedStyle","removeChild","fromString","MAX_CACHE_SIZE","cache","cacheSize","s","hasOwnProperty","i","key","fromStringInternal_","asArray","Array","isArray","r","g","b","a","exec","n","length","d","hasAlpha","parseInt","substr","indexOf","slice","split","map","Number","normalize","push","undefined","Math","round","isStringColor","test"],"sourceRoot":"","sources":["src/color.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}