{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/Tile\n */\n\n\nimport Event from '../events/Event.js';\nimport Source from './Source.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport { abstract } from '../util.js';\nimport { assert } from '../asserts.js';\nimport { equivalent } from '../proj.js';\nimport { getKeyZXY, withinExtentAndZ } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection, wrapX } from '../tilegrid.js';\nimport { scale as scaleSize, toSize } from '../size.js';\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] CacheSize.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./State.js\").default} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */\n\nvar TileSource =\n/** @class */\nfunction (_super) {\n  __extends(TileSource, _super);\n  /**\n   * @param {Options} options SourceTile source options.\n   */\n\n\n  function TileSource(options) {\n    var _this = _super.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX,\n      interpolate: options.interpolate\n    }) || this;\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {TileSourceOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n    /**\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\n     */\n\n    _this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n    var tileSize = [256, 256];\n\n    if (_this.tileGrid) {\n      toSize(_this.tileGrid.getTileSize(_this.tileGrid.getMinZoom()), tileSize);\n    }\n    /**\n     * @protected\n     * @type {import(\"../TileCache.js\").default}\n     */\n\n\n    _this.tileCache = new TileCache(options.cacheSize || 0);\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n\n    _this.tmpSize = [0, 0];\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.key_ = options.key || '';\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n\n    _this.tileOptions = {\n      transition: options.transition,\n      interpolate: options.interpolate\n    };\n    /**\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\n     * by a renderer if the views resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n\n    _this.zDirection = options.zDirection ? options.zDirection : 0;\n    return _this;\n  }\n  /**\n   * @return {boolean} Can expire cache.\n   */\n\n\n  TileSource.prototype.canExpireCache = function () {\n    return this.tileCache.canExpireCache();\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n\n\n  TileSource.prototype.expireCache = function (projection, usedTiles) {\n    var tileCache = this.getTileCacheForProjection(projection);\n\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {number} z Zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n   *     loaded tile.  If the callback returns `false`, the tile will not be\n   *     considered loaded.\n   * @return {boolean} The tile range is fully covered with loaded tiles.\n   */\n\n\n  TileSource.prototype.forEachLoadedTile = function (projection, z, tileRange, callback) {\n    var tileCache = this.getTileCacheForProjection(projection);\n\n    if (!tileCache) {\n      return false;\n    }\n\n    var covered = true;\n    var tile, tileCoordKey, loaded;\n\n    for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile =\n          /** @type {!import(\"../Tile.js\").default} */\n          tileCache.get(tileCoordKey);\n          loaded = tile.getState() === TileState.LOADED;\n\n          if (loaded) {\n            loaded = callback(tile) !== false;\n          }\n        }\n\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n\n    return covered;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n\n\n  TileSource.prototype.getGutterForProjection = function (projection) {\n    return 0;\n  };\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n\n\n  TileSource.prototype.getKey = function () {\n    return this.key_;\n  };\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n\n\n  TileSource.prototype.setKey = function (key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n\n\n  TileSource.prototype.getOpaque = function (projection) {\n    return this.opaque_;\n  };\n  /**\n   * @return {Array<number>|null} Resolutions.\n   */\n\n\n  TileSource.prototype.getResolutions = function () {\n    if (!this.tileGrid) {\n      return null;\n    }\n\n    return this.tileGrid.getResolutions();\n  };\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   */\n\n\n  TileSource.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n    return abstract();\n  };\n  /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\n   * @api\n   */\n\n\n  TileSource.prototype.getTileGrid = function () {\n    return this.tileGrid;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n\n\n  TileSource.prototype.getTileGridForProjection = function (projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    } else {\n      return this.tileGrid;\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   * @protected\n   */\n\n\n  TileSource.prototype.getTileCacheForProjection = function (projection) {\n    assert(equivalent(this.getProjection(), projection), 68 // A VectorTile source can only be rendered if it has a projection compatible with the view projection.\n    );\n    return this.tileCache;\n  };\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n\n\n  TileSource.prototype.getTilePixelRatio = function (pixelRatio) {\n    return this.tilePixelRatio_;\n  };\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n\n\n  TileSource.prototype.getTilePixelSize = function (z, pixelRatio, projection) {\n    var tileGrid = this.getTileGridForProjection(projection);\n    var tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    } else {\n      return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n    }\n  };\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default} [opt_projection] Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n\n\n  TileSource.prototype.getTileCoordForTileUrlFunction = function (tileCoord, opt_projection) {\n    var projection = opt_projection !== undefined ? opt_projection : this.getProjection();\n    var tileGrid = this.getTileGridForProjection(projection);\n\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  };\n  /**\n   * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\n   * @api\n   */\n\n\n  TileSource.prototype.clear = function () {\n    this.tileCache.clear();\n  };\n\n  TileSource.prototype.refresh = function () {\n    this.clear();\n\n    _super.prototype.refresh.call(this);\n  };\n  /**\n   * Increases the cache size if needed\n   * @param {number} tileCount Minimum number of tiles needed.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n\n\n  TileSource.prototype.updateCacheSize = function (tileCount, projection) {\n    var tileCache = this.getTileCacheForProjection(projection);\n\n    if (tileCount > tileCache.highWaterMark) {\n      tileCache.highWaterMark = tileCount;\n    }\n  };\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n\n\n  TileSource.prototype.useTile = function (z, x, y, projection) {};\n\n  return TileSource;\n}(Source);\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\n\n\nvar TileSourceEvent =\n/** @class */\nfunction (_super) {\n  __extends(TileSourceEvent, _super);\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */\n\n\n  function TileSourceEvent(type, tile) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n\n\n    _this.tile = tile;\n    return _this;\n  }\n\n  return TileSourceEvent;\n}(Event);\n\nexport { TileSourceEvent };\nexport default TileSource;","map":{"version":3,"mappings":"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","names":["Event","Source","TileCache","TileState","abstract","assert","equivalent","getKeyZXY","withinExtentAndZ","getForProjection","getTileGridForProjection","wrapX","scale","scaleSize","toSize","__extends","options","_super","attributions","attributionsCollapsible","projection","state","interpolate","_this","on","once","un","opaque_","opaque","undefined","tilePixelRatio_","tilePixelRatio","tileGrid","tileSize","getTileSize","getMinZoom","tileCache","cacheSize","tmpSize","key_","key","tileOptions","transition","zDirection","TileSource","canExpireCache","usedTiles","getTileCacheForProjection","expireCache","z","tileRange","callback","covered","tile","tileCoordKey","loaded","x","minX","maxX","y","minY","maxY","containsKey","get","getState","LOADED","changed","getResolutions","pixelRatio","getProjection","getTilePixelRatio","tileCoord","opt_projection","getWrapX","isGlobal","clear","refresh","call","tileCount","highWaterMark","type"],"sourceRoot":"","sources":["../src/source/Tile.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}