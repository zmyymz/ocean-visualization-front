{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/OverviewMap\n */\n\n\nimport CompositeMapRenderer from '../renderer/Composite.js';\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport OverlayPositioning from '../OverlayPositioning.js';\nimport PluggableMap from '../PluggableMap.js';\nimport View from '../View.js';\nimport ViewProperty from '../ViewProperty.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { containsExtent, equals as equalsExtent, getBottomRight, getTopLeft, scaleFromCenter } from '../extent.js';\nimport { listen, listenOnce } from '../events.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\nimport { replaceNode } from '../dom.js';\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\n\nvar MAX_RATIO = 0.75;\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\n\nvar MIN_RATIO = 0.1;\n\nvar ControlledMap =\n/** @class */\nfunction (_super) {\n  __extends(ControlledMap, _super);\n\n  function ControlledMap() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ControlledMap.prototype.createRenderer = function () {\n    return new CompositeMapRenderer(this);\n  };\n\n  return ControlledMap;\n}(PluggableMap);\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Base.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Base.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\n * a default view with the same projection as the main map will be used.\n */\n\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\n\n\nvar OverviewMap =\n/** @class */\nfunction (_super) {\n  __extends(OverviewMap, _super);\n  /**\n   * @param {Options} [opt_options] OverviewMap options.\n   */\n\n\n  function OverviewMap(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target\n    }) || this;\n    /**\n     * @private\n     */\n\n    _this.boundHandleRotationChanged_ = _this.handleRotationChanged_.bind(_this);\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!_this.collapsible_) {\n      _this.collapsed_ = false;\n    }\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n\n    _this.rotateWithView_ = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n\n    _this.viewExtent_ = undefined;\n    var className = options.className !== undefined ? options.className : 'ol-overviewmap';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n    var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : \"\\u2039\";\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.collapseLabel_ = document.createElement('span');\n      _this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      _this.collapseLabel_ = collapseLabel;\n    }\n\n    var label = options.label !== undefined ? options.label : \"\\u203A\";\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.label_ = document.createElement('span');\n      _this.label_.textContent = label;\n    } else {\n      _this.label_ = label;\n    }\n\n    var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n    var button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n    button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n\n    _this.ovmapDiv_ = document.createElement('div');\n    _this.ovmapDiv_.className = 'ol-overviewmap-map';\n    /**\n     * Explicitly given view to be used instead of a view derived from the main map.\n     * @type {View}\n     * @private\n     */\n\n    _this.view_ = options.view;\n    /**\n     * @type {ControlledMap}\n     * @private\n     */\n\n    _this.ovmap_ = new ControlledMap({\n      view: options.view\n    });\n    var ovmap = _this.ovmap_;\n\n    if (options.layers) {\n      options.layers.forEach(function (layer) {\n        ovmap.addLayer(layer);\n      });\n    }\n\n    var box = document.createElement('div');\n    box.className = 'ol-overviewmap-box';\n    box.style.boxSizing = 'border-box';\n    /**\n     * @type {import(\"../Overlay.js\").default}\n     * @private\n     */\n\n    _this.boxOverlay_ = new Overlay({\n      position: [0, 0],\n      positioning: OverlayPositioning.CENTER_CENTER,\n      element: box\n    });\n\n    _this.ovmap_.addOverlay(_this.boxOverlay_);\n\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (_this.collapsible_ ? '' : ' ol-uncollapsible');\n    var element = _this.element;\n    element.className = cssClasses;\n    element.appendChild(_this.ovmapDiv_);\n    element.appendChild(button);\n    /* Interactive map */\n\n    var scope = _this;\n    var overlay = _this.boxOverlay_;\n\n    var overlayBox = _this.boxOverlay_.getElement();\n    /* Functions definition */\n\n\n    var computeDesiredMousePosition = function computeDesiredMousePosition(mousePosition) {\n      return {\n        clientX: mousePosition.clientX,\n        clientY: mousePosition.clientY\n      };\n    };\n\n    var move = function move(event) {\n      var position =\n      /** @type {?} */\n      computeDesiredMousePosition(event);\n      var coordinates = ovmap.getEventCoordinateInternal(\n      /** @type {MouseEvent} */\n      position);\n      overlay.setPosition(coordinates);\n    };\n\n    var endMoving = function endMoving(event) {\n      var coordinates = ovmap.getEventCoordinateInternal(event);\n      scope.getMap().getView().setCenterInternal(coordinates);\n      window.removeEventListener('mousemove', move);\n      window.removeEventListener('mouseup', endMoving);\n    };\n    /* Binding */\n\n\n    overlayBox.addEventListener('mousedown', function () {\n      window.addEventListener('mousemove', move);\n      window.addEventListener('mouseup', endMoving);\n    });\n    return _this;\n  }\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n\n\n  OverviewMap.prototype.setMap = function (map) {\n    var oldMap = this.getMap();\n\n    if (map === oldMap) {\n      return;\n    }\n\n    if (oldMap) {\n      var oldView = oldMap.getView();\n\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n\n      this.ovmap_.setTarget(null);\n    }\n\n    _super.prototype.setMap.call(this, map);\n\n    if (map) {\n      this.ovmap_.setTarget(this.ovmapDiv_);\n      this.listenerKeys.push(listen(map, ObjectEventType.PROPERTYCHANGE, this.handleMapPropertyChange_, this));\n      var view = map.getView();\n\n      if (view) {\n        this.bindView_(view);\n\n        if (view.isDef()) {\n          this.ovmap_.updateSize();\n          this.resetExtent_();\n        }\n      }\n\n      if (!this.ovmap_.isRendered()) {\n        this.updateBoxAfterOvmapIsRendered_();\n      }\n    }\n  };\n  /**\n   * Handle map property changes.  This only deals with changes to the map's view.\n   * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n   * @private\n   */\n\n\n  OverviewMap.prototype.handleMapPropertyChange_ = function (event) {\n    if (event.key === MapProperty.VIEW) {\n      var oldView =\n      /** @type {import(\"../View.js\").default} */\n      event.oldValue;\n\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n\n      var newView = this.getMap().getView();\n      this.bindView_(newView);\n    } else if (!this.ovmap_.isRendered() && (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)) {\n      this.ovmap_.updateSize();\n    }\n  };\n  /**\n   * Register listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n\n\n  OverviewMap.prototype.bindView_ = function (view) {\n    if (!this.view_) {\n      // Unless an explicit view definition was given, derive default from whatever main map uses.\n      var newView = new View({\n        projection: view.getProjection()\n      });\n      this.ovmap_.setView(newView);\n    }\n\n    view.addChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_); // Sync once with the new view\n\n    this.handleRotationChanged_();\n  };\n  /**\n   * Unregister listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n\n\n  OverviewMap.prototype.unbindView_ = function (view) {\n    view.removeChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n  };\n  /**\n   * Handle rotation changes to the main map.\n   * @private\n   */\n\n\n  OverviewMap.prototype.handleRotationChanged_ = function () {\n    if (this.rotateWithView_) {\n      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n    }\n  };\n  /**\n   * Reset the overview map extent if the box size (width or\n   * height) is less than the size of the overview map size times minRatio\n   * or is greater than the size of the overview size times maxRatio.\n   *\n   * If the map extent was not reset, the box size can fits in the defined\n   * ratio sizes. This method then checks if is contained inside the overview\n   * map current extent. If not, recenter the overview map to the current\n   * main map center location.\n   * @private\n   */\n\n\n  OverviewMap.prototype.validateExtent_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    var mapSize =\n    /** @type {import(\"../size.js\").Size} */\n    map.getSize();\n    var view = map.getView();\n    var extent = view.calculateExtentInternal(mapSize);\n\n    if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n      // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n      return;\n    }\n\n    this.viewExtent_ = extent;\n    var ovmapSize =\n    /** @type {import(\"../size.js\").Size} */\n    ovmap.getSize();\n    var ovview = ovmap.getView();\n    var ovextent = ovview.calculateExtentInternal(ovmapSize);\n    var topLeftPixel = ovmap.getPixelFromCoordinateInternal(getTopLeft(extent));\n    var bottomRightPixel = ovmap.getPixelFromCoordinateInternal(getBottomRight(extent));\n    var boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n    var boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n    var ovmapWidth = ovmapSize[0];\n    var ovmapHeight = ovmapSize[1];\n\n    if (boxWidth < ovmapWidth * MIN_RATIO || boxHeight < ovmapHeight * MIN_RATIO || boxWidth > ovmapWidth * MAX_RATIO || boxHeight > ovmapHeight * MAX_RATIO) {\n      this.resetExtent_();\n    } else if (!containsExtent(ovextent, extent)) {\n      this.recenter_();\n    }\n  };\n  /**\n   * Reset the overview map extent to half calculated min and max ratio times\n   * the extent of the main map.\n   * @private\n   */\n\n\n  OverviewMap.prototype.resetExtent_ = function () {\n    if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n      return;\n    }\n\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    var mapSize =\n    /** @type {import(\"../size.js\").Size} */\n    map.getSize();\n    var view = map.getView();\n    var extent = view.calculateExtentInternal(mapSize);\n    var ovview = ovmap.getView(); // get how many times the current map overview could hold different\n    // box sizes using the min and max ratio, pick the step in the middle used\n    // to calculate the extent from the main map to set it to the overview map,\n\n    var steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n    var ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n    scaleFromCenter(extent, ratio);\n    ovview.fitInternal(polygonFromExtent(extent));\n  };\n  /**\n   * Set the center of the overview map to the map center without changing its\n   * resolution.\n   * @private\n   */\n\n\n  OverviewMap.prototype.recenter_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    var view = map.getView();\n    var ovview = ovmap.getView();\n    ovview.setCenterInternal(view.getCenterInternal());\n  };\n  /**\n   * Update the box using the main map extent\n   * @private\n   */\n\n\n  OverviewMap.prototype.updateBox_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    var mapSize =\n    /** @type {import(\"../size.js\").Size} */\n    map.getSize();\n    var view = map.getView();\n    var ovview = ovmap.getView();\n    var rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n    var overlay = this.boxOverlay_;\n    var box = this.boxOverlay_.getElement();\n    var center = view.getCenterInternal();\n    var resolution = view.getResolution();\n    var ovresolution = ovview.getResolution();\n    var width = mapSize[0] * resolution / ovresolution;\n    var height = mapSize[1] * resolution / ovresolution; // set position using center coordinates\n\n    overlay.setPosition(center); // set box size calculated from map extent size and overview map resolution\n\n    if (box) {\n      box.style.width = width + 'px';\n      box.style.height = height + 'px';\n      var transform = 'rotate(' + rotation + 'rad)';\n      box.style.transform = transform;\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  OverviewMap.prototype.updateBoxAfterOvmapIsRendered_ = function () {\n    if (this.ovmapPostrenderKey_) {\n      return;\n    }\n\n    this.ovmapPostrenderKey_ = listenOnce(this.ovmap_, MapEventType.POSTRENDER, function (event) {\n      delete this.ovmapPostrenderKey_;\n      this.updateBox_();\n    }, this);\n  };\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n\n  OverviewMap.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleToggle_();\n  };\n  /**\n   * @private\n   */\n\n\n  OverviewMap.prototype.handleToggle_ = function () {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n\n    this.collapsed_ = !this.collapsed_; // manage overview map if it had not been rendered before and control\n    // is expanded\n\n    var ovmap = this.ovmap_;\n\n    if (!this.collapsed_) {\n      if (ovmap.isRendered()) {\n        this.viewExtent_ = undefined;\n        ovmap.render();\n        return;\n      }\n\n      ovmap.updateSize();\n      this.resetExtent_();\n      this.updateBoxAfterOvmapIsRendered_();\n    }\n  };\n  /**\n   * Return `true` if the overview map is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n\n\n  OverviewMap.prototype.getCollapsible = function () {\n    return this.collapsible_;\n  };\n  /**\n   * Set whether the overview map should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n\n\n  OverviewMap.prototype.setCollapsible = function (collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  };\n  /**\n   * Collapse or expand the overview map according to the passed parameter. Will\n   * not do anything if the overview map isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n\n\n  OverviewMap.prototype.setCollapsed = function (collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n\n    this.handleToggle_();\n  };\n  /**\n   * Determine if the overview map is collapsed.\n   * @return {boolean} The overview map is collapsed.\n   * @api\n   */\n\n\n  OverviewMap.prototype.getCollapsed = function () {\n    return this.collapsed_;\n  };\n  /**\n   * Return `true` if the overview map view can rotate, `false` otherwise.\n   * @return {boolean} True if the control view can rotate.\n   * @api\n   */\n\n\n  OverviewMap.prototype.getRotateWithView = function () {\n    return this.rotateWithView_;\n  };\n  /**\n   * Set whether the overview map view should rotate with the main map view.\n   * @param {boolean} rotateWithView True if the control view should rotate.\n   * @api\n   */\n\n\n  OverviewMap.prototype.setRotateWithView = function (rotateWithView) {\n    if (this.rotateWithView_ === rotateWithView) {\n      return;\n    }\n\n    this.rotateWithView_ = rotateWithView;\n\n    if (this.getMap().getView().getRotation() !== 0) {\n      if (this.rotateWithView_) {\n        this.handleRotationChanged_();\n      } else {\n        this.ovmap_.getView().setRotation(0);\n      }\n\n      this.viewExtent_ = undefined;\n      this.validateExtent_();\n      this.updateBox_();\n    }\n  };\n  /**\n   * Return the overview map.\n   * @return {import(\"../PluggableMap.js\").default} Overview map.\n   * @api\n   */\n\n\n  OverviewMap.prototype.getOverviewMap = function () {\n    return this.ovmap_;\n  };\n  /**\n   * Update the overview map element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n\n\n  OverviewMap.prototype.render = function (mapEvent) {\n    this.validateExtent_();\n    this.updateBox_();\n  };\n\n  return OverviewMap;\n}(Control);\n\nexport default OverviewMap;","map":{"version":3,"mappings":"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","names":["CompositeMapRenderer","Control","EventType","MapEventType","MapProperty","ObjectEventType","Overlay","OverlayPositioning","PluggableMap","View","ViewProperty","CLASS_COLLAPSED","CLASS_CONTROL","CLASS_UNSELECTABLE","containsExtent","equals","equalsExtent","getBottomRight","getTopLeft","scaleFromCenter","listen","listenOnce","fromExtent","polygonFromExtent","replaceNode","MAX_RATIO","MIN_RATIO","__extends","ControlledMap","opt_options","options","_super","element","document","createElement","render","target","_this","boundHandleRotationChanged_","handleRotationChanged_","bind","collapsed_","collapsed","undefined","collapsible_","collapsible","rotateWithView_","rotateWithView","viewExtent_","className","tipLabel","collapseLabel","collapseLabel_","textContent","label","label_","activeLabel","button","setAttribute","title","appendChild","addEventListener","CLICK","handleClick_","ovmapDiv_","view_","view","ovmap_","ovmap","layers","forEach","layer","addLayer","box","style","boxSizing","boxOverlay_","position","positioning","CENTER_CENTER","addOverlay","cssClasses","scope","overlay","overlayBox","getElement","computeDesiredMousePosition","mousePosition","clientX","clientY","move","event","coordinates","getEventCoordinateInternal","setPosition","endMoving","getMap","getView","setCenterInternal","window","removeEventListener","OverviewMap","map","oldMap","oldView","unbindView_","setTarget","setMap","call","listenerKeys","push","PROPERTYCHANGE","handleMapPropertyChange_","bindView_","isDef","updateSize","resetExtent_","isRendered","updateBoxAfterOvmapIsRendered_","key","VIEW","oldValue","newView","TARGET","SIZE","projection","getProjection","setView","addChangeListener","ROTATION","removeChangeListener","setRotation","getRotation","mapSize","getSize","extent","calculateExtentInternal","ovmapSize","ovview","ovextent","topLeftPixel","getPixelFromCoordinateInternal","bottomRightPixel","boxWidth","Math","abs","boxHeight","ovmapWidth","ovmapHeight","recenter_","steps","log","LN2","ratio","pow","fitInternal","getCenterInternal","rotation","center","resolution","getResolution","ovresolution","width","height","transform","ovmapPostrenderKey_","POSTRENDER","updateBox_","preventDefault","handleToggle_","classList","toggle","validateExtent_","mapEvent"],"sourceRoot":"","sources":["../src/control/OverviewMap.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}