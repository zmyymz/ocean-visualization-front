{"ast":null,"code":"/**\n * @module ol/resolutionconstraint\n */\nimport { clamp } from './math.js';\nimport { getHeight, getWidth } from './extent.js';\nimport { linearFindNearest } from './array.js';\n/**\n * @typedef {function((number|undefined), number, import(\"./size.js\").Size, boolean=): (number|undefined)} Type\n */\n\n/**\n * Returns a modified resolution taking into account the viewport size and maximum\n * allowed extent.\n * @param {number} resolution Resolution\n * @param {import(\"./extent.js\").Extent} maxExtent Maximum allowed extent.\n * @param {import(\"./size.js\").Size} viewportSize Viewport size.\n * @param {boolean} showFullExtent Whether to show the full extent.\n * @return {number} Capped resolution.\n */\n\nfunction getViewportClampedResolution(resolution, maxExtent, viewportSize, showFullExtent) {\n  var xResolution = getWidth(maxExtent) / viewportSize[0];\n  var yResolution = getHeight(maxExtent) / viewportSize[1];\n\n  if (showFullExtent) {\n    return Math.min(resolution, Math.max(xResolution, yResolution));\n  }\n\n  return Math.min(resolution, Math.min(xResolution, yResolution));\n}\n/**\n * Returns a modified resolution to be between maxResolution and minResolution while\n * still allowing the value to be slightly out of bounds.\n * Note: the computation is based on the logarithm function (ln):\n *  - at 1, ln(x) is 0\n *  - above 1, ln(x) keeps increasing but at a much slower pace than x\n * The final result is clamped to prevent getting too far away from bounds.\n * @param {number} resolution Resolution.\n * @param {number} maxResolution Max resolution.\n * @param {number} minResolution Min resolution.\n * @return {number} Smoothed resolution.\n */\n\n\nfunction getSmoothClampedResolution(resolution, maxResolution, minResolution) {\n  var result = Math.min(resolution, maxResolution);\n  var ratio = 50;\n  result *= Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio + 1;\n\n  if (minResolution) {\n    result = Math.max(result, minResolution);\n    result /= Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) / ratio + 1;\n  }\n\n  return clamp(result, minResolution / 2, maxResolution * 2);\n}\n/**\n * @param {Array<number>} resolutions Resolutions.\n * @param {boolean} [opt_smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [opt_maxExtent] Maximum allowed extent.\n * @param {boolean} [opt_showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\n\n\nexport function createSnapToResolutions(resolutions, opt_smooth, opt_maxExtent, opt_showFullExtent) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, opt_isMoving) {\n      if (resolution !== undefined) {\n        var maxResolution = resolutions[0];\n        var minResolution = resolutions[resolutions.length - 1];\n        var cappedMaxRes = opt_maxExtent ? getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent) : maxResolution; // during interacting or animating, allow intermediary values\n\n        if (opt_isMoving) {\n          var smooth = opt_smooth !== undefined ? opt_smooth : true;\n\n          if (!smooth) {\n            return clamp(resolution, minResolution, cappedMaxRes);\n          }\n\n          return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);\n        }\n\n        var capped = Math.min(cappedMaxRes, resolution);\n        var z = Math.floor(linearFindNearest(resolutions, capped, direction));\n\n        if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) {\n          return resolutions[z + 1];\n        }\n\n        return resolutions[z];\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n/**\n * @param {number} power Power.\n * @param {number} maxResolution Maximum resolution.\n * @param {number} [opt_minResolution] Minimum resolution.\n * @param {boolean} [opt_smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [opt_maxExtent] Maximum allowed extent.\n * @param {boolean} [opt_showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\n\nexport function createSnapToPower(power, maxResolution, opt_minResolution, opt_smooth, opt_maxExtent, opt_showFullExtent) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, opt_isMoving) {\n      if (resolution !== undefined) {\n        var cappedMaxRes = opt_maxExtent ? getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent) : maxResolution;\n        var minResolution = opt_minResolution !== undefined ? opt_minResolution : 0; // during interacting or animating, allow intermediary values\n\n        if (opt_isMoving) {\n          var smooth = opt_smooth !== undefined ? opt_smooth : true;\n\n          if (!smooth) {\n            return clamp(resolution, minResolution, cappedMaxRes);\n          }\n\n          return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);\n        }\n\n        var tolerance = 1e-9;\n        var minZoomLevel = Math.ceil(Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance);\n        var offset = -direction * (0.5 - tolerance) + 0.5;\n        var capped = Math.min(cappedMaxRes, resolution);\n        var cappedZoomLevel = Math.floor(Math.log(maxResolution / capped) / Math.log(power) + offset);\n        var zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);\n        var newResolution = maxResolution / Math.pow(power, zoomLevel);\n        return clamp(newResolution, minResolution, cappedMaxRes);\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n/**\n * @param {number} maxResolution Max resolution.\n * @param {number} minResolution Min resolution.\n * @param {boolean} [opt_smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [opt_maxExtent] Maximum allowed extent.\n * @param {boolean} [opt_showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\n\nexport function createMinMaxResolution(maxResolution, minResolution, opt_smooth, opt_maxExtent, opt_showFullExtent) {\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, opt_isMoving) {\n      if (resolution !== undefined) {\n        var cappedMaxRes = opt_maxExtent ? getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent) : maxResolution;\n        var smooth = opt_smooth !== undefined ? opt_smooth : true;\n\n        if (!smooth || !opt_isMoving) {\n          return clamp(resolution, minResolution, cappedMaxRes);\n        }\n\n        return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);\n      } else {\n        return undefined;\n      }\n    }\n  );\n}","map":{"version":3,"mappings":"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","names":["clamp","getHeight","getWidth","linearFindNearest","getViewportClampedResolution","resolution","maxExtent","viewportSize","showFullExtent","xResolution","yResolution","Math","min","max","getSmoothClampedResolution","maxResolution","minResolution","result","ratio","log","createSnapToResolutions","resolutions","opt_smooth","opt_maxExtent","opt_showFullExtent","direction","size","opt_isMoving","undefined","length","cappedMaxRes","smooth","capped","z","floor","createSnapToPower","power","opt_minResolution","tolerance","minZoomLevel","ceil","offset","cappedZoomLevel","zoomLevel","newResolution","pow","createMinMaxResolution"],"sourceRoot":"","sources":["src/resolutionconstraint.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}