{"ast":null,"code":"/**\n * @module ol/events\n */\nimport { clear } from './obj.js';\n/**\n * Key to use with {@link module:ol/Observable.unByKey}.\n * @typedef {Object} EventsKey\n * @property {ListenerFunction} listener Listener.\n * @property {import(\"./events/Target.js\").EventTargetLike} target Target.\n * @property {string} type Type.\n * @api\n */\n\n/**\n * Listener function. This function is called with an event object as argument.\n * When the function returns `false`, event propagation will stop.\n *\n * @typedef {function((Event|import(\"./events/Event.js\").default)): (void|boolean)} ListenerFunction\n * @api\n */\n\n/**\n * @typedef {Object} ListenerObject\n * @property {ListenerFunction} handleEvent HandleEvent listener function.\n */\n\n/**\n * @typedef {ListenerFunction|ListenerObject} Listener\n */\n\n/**\n * Registers an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` to a `this` object, and returns\n * a key for use with {@link module:ol/events.unlistenByKey}.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object} [opt_this] Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @param {boolean} [opt_once] If true, add the listener as one-off listener.\n * @return {EventsKey} Unique key for the listener.\n */\n\nexport function listen(target, type, listener, opt_this, opt_once) {\n  if (opt_this && opt_this !== target) {\n    listener = listener.bind(opt_this);\n  }\n\n  if (opt_once) {\n    var originalListener_1 = listener;\n\n    listener = function () {\n      target.removeEventListener(type, listener);\n      originalListener_1.apply(this, arguments);\n    };\n  }\n\n  var eventsKey = {\n    target: target,\n    type: type,\n    listener: listener\n  };\n  target.addEventListener(type, listener);\n  return eventsKey;\n}\n/**\n * Registers a one-off event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` as self-unregistering listener\n * to a `this` object, and returns a key for use with\n * {@link module:ol/events.unlistenByKey} in case the listener needs to be\n * unregistered before it is called.\n *\n * When {@link module:ol/events.listen} is called with the same arguments after this\n * function, the self-unregistering listener will be turned into a permanent\n * listener.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object} [opt_this] Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @return {EventsKey} Key for unlistenByKey.\n */\n\nexport function listenOnce(target, type, listener, opt_this) {\n  return listen(target, type, listener, opt_this, true);\n}\n/**\n * Unregisters event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * The argument passed to this function is the key returned from\n * {@link module:ol/events.listen} or {@link module:ol/events.listenOnce}.\n *\n * @param {EventsKey} key The key.\n */\n\nexport function unlistenByKey(key) {\n  if (key && key.target) {\n    key.target.removeEventListener(key.type, key.listener);\n    clear(key);\n  }\n}","map":{"version":3,"mappings":"AAAA;;;AAGA,SAAQA,KAAR,QAAoB,UAApB;AAEA;;;;;;;;;AASA;;;;;;;;AAQA;;;;;AAKA;;;;AAIA;;;;;;;;;;;;;;;;AAeA,OAAM,SAAUC,MAAV,CAAiBC,MAAjB,EAAyBC,IAAzB,EAA+BC,QAA/B,EAAyCC,QAAzC,EAAmDC,QAAnD,EAA2D;AAC/D,MAAID,QAAQ,IAAIA,QAAQ,KAAKH,MAA7B,EAAqC;AACnCE,YAAQ,GAAGA,QAAQ,CAACG,IAAT,CAAcF,QAAd,CAAX;AACD;;AACD,MAAIC,QAAJ,EAAc;AACZ,QAAME,kBAAgB,GAAGJ,QAAzB;;AACAA,YAAQ,GAAG;AACTF,YAAM,CAACO,mBAAP,CAA2BN,IAA3B,EAAiCC,QAAjC;AACAI,wBAAgB,CAACE,KAAjB,CAAuB,IAAvB,EAA6BC,SAA7B;AACD,KAHD;AAID;;AACD,MAAMC,SAAS,GAAG;AAChBV,UAAM,EAAEA,MADQ;AAEhBC,QAAI,EAAEA,IAFU;AAGhBC,YAAQ,EAAEA;AAHM,GAAlB;AAKAF,QAAM,CAACW,gBAAP,CAAwBV,IAAxB,EAA8BC,QAA9B;AACA,SAAOQ,SAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAoBA,OAAM,SAAUE,UAAV,CAAqBZ,MAArB,EAA6BC,IAA7B,EAAmCC,QAAnC,EAA6CC,QAA7C,EAAqD;AACzD,SAAOJ,MAAM,CAACC,MAAD,EAASC,IAAT,EAAeC,QAAf,EAAyBC,QAAzB,EAAmC,IAAnC,CAAb;AACD;AAED;;;;;;;;;;AASA,OAAM,SAAUU,aAAV,CAAwBC,GAAxB,EAA2B;AAC/B,MAAIA,GAAG,IAAIA,GAAG,CAACd,MAAf,EAAuB;AACrBc,OAAG,CAACd,MAAJ,CAAWO,mBAAX,CAA+BO,GAAG,CAACb,IAAnC,EAAyCa,GAAG,CAACZ,QAA7C;AACAJ,SAAK,CAACgB,GAAD,CAAL;AACD;AACF","names":["clear","listen","target","type","listener","opt_this","opt_once","bind","originalListener_1","removeEventListener","apply","arguments","eventsKey","addEventListener","listenOnce","unlistenByKey","key"],"sourceRoot":"","sources":["src/events.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}