{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.slice.js\";\n\n/**\n * @module ol/format/filter\n */\nimport And from './filter/And.js';\nimport Bbox from './filter/Bbox.js';\nimport Contains from './filter/Contains.js';\nimport DWithin from './filter/DWithin.js';\nimport Disjoint from './filter/Disjoint.js';\nimport During from './filter/During.js';\nimport EqualTo from './filter/EqualTo.js';\nimport GreaterThan from './filter/GreaterThan.js';\nimport GreaterThanOrEqualTo from './filter/GreaterThanOrEqualTo.js';\nimport Intersects from './filter/Intersects.js';\nimport IsBetween from './filter/IsBetween.js';\nimport IsLike from './filter/IsLike.js';\nimport IsNull from './filter/IsNull.js';\nimport LessThan from './filter/LessThan.js';\nimport LessThanOrEqualTo from './filter/LessThanOrEqualTo.js';\nimport Not from './filter/Not.js';\nimport NotEqualTo from './filter/NotEqualTo.js';\nimport Or from './filter/Or.js';\nimport ResourceId from './filter/ResourceId.js';\nimport Within from './filter/Within.js';\n/**\n * Create a logical `<And>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @return {!And} `<And>` operator.\n * @api\n */\n\nexport function and(conditions) {\n  var params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(And, params))();\n}\n/**\n * Create a logical `<Or>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @return {!Or} `<Or>` operator.\n * @api\n */\n\nexport function or(conditions) {\n  var params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(Or, params))();\n}\n/**\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @param {!import(\"./filter/Filter.js\").default} condition Filter condition.\n * @return {!Not} `<Not>` operator.\n * @api\n */\n\nexport function not(condition) {\n  return new Not(condition);\n}\n/**\n * Create a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../extent.js\").Extent} extent Extent.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Bbox} `<BBOX>` operator.\n * @api\n */\n\nexport function bbox(geometryName, extent, opt_srsName) {\n  return new Bbox(geometryName, extent, opt_srsName);\n}\n/**\n * Create a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Contains} `<Contains>` operator.\n * @api\n */\n\nexport function contains(geometryName, geometry, opt_srsName) {\n  return new Contains(geometryName, geometry, opt_srsName);\n}\n/**\n * Create a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Intersects} `<Intersects>` operator.\n * @api\n */\n\nexport function intersects(geometryName, geometry, opt_srsName) {\n  return new Intersects(geometryName, geometry, opt_srsName);\n}\n/**\n * Create a `<Disjoint>` operator to test whether a geometry-valued property\n * is disjoint to a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Disjoint} `<Disjoint>` operator.\n * @api\n */\n\nexport function disjoint(geometryName, geometry, opt_srsName) {\n  return new Disjoint(geometryName, geometry, opt_srsName);\n}\n/**\n * Create a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Within} `<Within>` operator.\n * @api\n */\n\nexport function within(geometryName, geometry, opt_srsName) {\n  return new Within(geometryName, geometry, opt_srsName);\n}\n/**\n * Create a `<DWithin>` operator to test whether a geometry-valued property\n * is within a distance to a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {!number} distance Distance.\n * @param {!string} unit Unit.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!DWithin} `<DWithin>` operator.\n * @api\n */\n\nexport function dwithin(geometryName, geometry, distance, unit, opt_srsName) {\n  return new DWithin(geometryName, geometry, distance, unit, opt_srsName);\n}\n/**\n * Creates a `<PropertyIsEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean} [opt_matchCase] Case-sensitive?\n * @return {!EqualTo} `<PropertyIsEqualTo>` operator.\n * @api\n */\n\nexport function equalTo(propertyName, expression, opt_matchCase) {\n  return new EqualTo(propertyName, expression, opt_matchCase);\n}\n/**\n * Creates a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean} [opt_matchCase] Case-sensitive?\n * @return {!NotEqualTo} `<PropertyIsNotEqualTo>` operator.\n * @api\n */\n\nexport function notEqualTo(propertyName, expression, opt_matchCase) {\n  return new NotEqualTo(propertyName, expression, opt_matchCase);\n}\n/**\n * Creates a `<PropertyIsLessThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!LessThan} `<PropertyIsLessThan>` operator.\n * @api\n */\n\nexport function lessThan(propertyName, expression) {\n  return new LessThan(propertyName, expression);\n}\n/**\n * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.\n * @api\n */\n\nexport function lessThanOrEqualTo(propertyName, expression) {\n  return new LessThanOrEqualTo(propertyName, expression);\n}\n/**\n * Creates a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!GreaterThan} `<PropertyIsGreaterThan>` operator.\n * @api\n */\n\nexport function greaterThan(propertyName, expression) {\n  return new GreaterThan(propertyName, expression);\n}\n/**\n * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.\n * @api\n */\n\nexport function greaterThanOrEqualTo(propertyName, expression) {\n  return new GreaterThanOrEqualTo(propertyName, expression);\n}\n/**\n * Creates a `<PropertyIsNull>` comparison operator to test whether a property value\n * is null.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @return {!IsNull} `<PropertyIsNull>` operator.\n * @api\n */\n\nexport function isNull(propertyName) {\n  return new IsNull(propertyName);\n}\n/**\n * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression\n * value lies within a range given by a lower and upper bound (inclusive).\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @return {!IsBetween} `<PropertyIsBetween>` operator.\n * @api\n */\n\nexport function between(propertyName, lowerBoundary, upperBoundary) {\n  return new IsBetween(propertyName, lowerBoundary, upperBoundary);\n}\n/**\n * Represents a `<PropertyIsLike>` comparison operator that matches a string property\n * value against a text pattern.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string} [opt_wildCard] Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string} [opt_singleChar] pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string} [opt_escapeChar] Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean} [opt_matchCase] Case-sensitive?\n * @return {!IsLike} `<PropertyIsLike>` operator.\n * @api\n */\n\nexport function like(propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n  return new IsLike(propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase);\n}\n/**\n * Create a `<During>` temporal operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @return {!During} `<During>` operator.\n * @api\n */\n\nexport function during(propertyName, begin, end) {\n  return new During(propertyName, begin, end);\n}\nexport function resourceId(rid) {\n  return new ResourceId(rid);\n}","map":{"version":3,"mappings":"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","names":["And","Bbox","Contains","DWithin","Disjoint","During","EqualTo","GreaterThan","GreaterThanOrEqualTo","Intersects","IsBetween","IsLike","IsNull","LessThan","LessThanOrEqualTo","Not","NotEqualTo","Or","ResourceId","Within","and","conditions","params","concat","Array","prototype","slice","call","arguments","Function","bind","apply","or","not","condition","bbox","geometryName","extent","opt_srsName","contains","geometry","intersects","disjoint","within","dwithin","distance","unit","equalTo","propertyName","expression","opt_matchCase","notEqualTo","lessThan","lessThanOrEqualTo","greaterThan","greaterThanOrEqualTo","isNull","between","lowerBoundary","upperBoundary","like","pattern","opt_wildCard","opt_singleChar","opt_escapeChar","during","begin","end","resourceId","rid"],"sourceRoot":"","sources":["../src/format/filter.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}