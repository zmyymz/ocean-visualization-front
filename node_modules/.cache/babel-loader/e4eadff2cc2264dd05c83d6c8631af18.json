{"ast":null,"code":"import { safeIfNeeded } from \"./_util/arrayIterator.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport { DataViewPrototypeGetUint16, DataViewPrototypeSetUint16 } from \"./_util/primordials.mjs\";\n/**\n * returns an unsigned 16-bit float at the specified byte offset from the start of the DataView\n *\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {[boolean]} opts\n * @returns {number}\n */\n\nexport function getFloat16(dataView, byteOffset, ...opts) {\n  return convertToNumber(DataViewPrototypeGetUint16(dataView, byteOffset, ...safeIfNeeded(opts)));\n}\n/**\n * stores an unsigned 16-bit float value at the specified byte offset from the start of the DataView\n *\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {number} value\n * @param {[boolean]} opts\n */\n\nexport function setFloat16(dataView, byteOffset, value, ...opts) {\n  return DataViewPrototypeSetUint16(dataView, byteOffset, roundToFloat16Bits(value), ...safeIfNeeded(opts));\n}","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@petamoriken/float16/src/DataView.mjs"],"names":["safeIfNeeded","convertToNumber","roundToFloat16Bits","DataViewPrototypeGetUint16","DataViewPrototypeSetUint16","getFloat16","dataView","byteOffset","opts","setFloat16","value"],"mappings":"AAAA,SAASA,YAAT,QAA6B,2BAA7B;AACA,SAASC,eAAT,EAA0BC,kBAA1B,QAAoD,uBAApD;AACA,SACEC,0BADF,EAEEC,0BAFF,QAGO,yBAHP;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,UAA9B,EAA0C,GAAGC,IAA7C,EAAmD;AACxD,SAAOP,eAAe,CACpBE,0BAA0B,CAACG,QAAD,EAAWC,UAAX,EAAuB,GAAGP,YAAY,CAACQ,IAAD,CAAtC,CADN,CAAtB;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBH,QAApB,EAA8BC,UAA9B,EAA0CG,KAA1C,EAAiD,GAAGF,IAApD,EAA0D;AAC/D,SAAOJ,0BAA0B,CAC/BE,QAD+B,EAE/BC,UAF+B,EAG/BL,kBAAkB,CAACQ,KAAD,CAHa,EAI/B,GAAGV,YAAY,CAACQ,IAAD,CAJgB,CAAjC;AAMD","sourcesContent":["import { safeIfNeeded } from \"./_util/arrayIterator.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport {\n  DataViewPrototypeGetUint16,\n  DataViewPrototypeSetUint16,\n} from \"./_util/primordials.mjs\";\n\n/**\n * returns an unsigned 16-bit float at the specified byte offset from the start of the DataView\n *\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {[boolean]} opts\n * @returns {number}\n */\nexport function getFloat16(dataView, byteOffset, ...opts) {\n  return convertToNumber(\n    DataViewPrototypeGetUint16(dataView, byteOffset, ...safeIfNeeded(opts))\n  );\n}\n\n/**\n * stores an unsigned 16-bit float value at the specified byte offset from the start of the DataView\n *\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {number} value\n * @param {[boolean]} opts\n */\nexport function setFloat16(dataView, byteOffset, value, ...opts) {\n  return DataViewPrototypeSetUint16(\n    dataView,\n    byteOffset,\n    roundToFloat16Bits(value),\n    ...safeIfNeeded(opts)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}