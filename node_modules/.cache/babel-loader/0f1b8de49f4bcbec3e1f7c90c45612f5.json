{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\n * @module ol/source/WMTS\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport TileImage from './TileImage.js';\nimport WMTSRequestEncoding from './WMTSRequestEncoding.js';\nimport { appendParams } from '../uri.js';\nimport { assign } from '../obj.js';\nimport { containsExtent } from '../extent.js';\nimport { createFromCapabilitiesMatrixSet } from '../tilegrid/WMTS.js';\nimport { createFromTileUrlFunctions, expandUrl } from '../tileurlfunction.js';\nimport { equivalent, get as getProjection, transformExtent } from '../proj.js';\nimport { find, findIndex, includes } from '../array.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./WMTSRequestEncoding.js\").default|string} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */\n\nvar WMTS =\n/** @class */\nfunction (_super) {\n  __extends(WMTS, _super);\n  /**\n   * @param {Options} options WMTS options.\n   */\n\n\n  function WMTS(options) {\n    var _this = this;\n\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    } // TODO: add support for TileMatrixLimits\n\n\n    var requestEncoding = options.requestEncoding !== undefined ?\n    /** @type {import(\"./WMTSRequestEncoding.js\").default} */\n    options.requestEncoding : WMTSRequestEncoding.KVP; // FIXME: should we create a default tileGrid?\n    // we could issue a getCapabilities xhr to retrieve missing configuration\n\n    var tileGrid = options.tileGrid;\n    var urls = options.urls;\n\n    if (urls === undefined && options.url !== undefined) {\n      urls = expandUrl(options.url);\n    }\n\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      urls: urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : false,\n      transition: options.transition,\n      zDirection: options.zDirection\n    }) || this;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.version_ = options.version !== undefined ? options.version : '1.0.0';\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    _this.dimensions_ = options.dimensions !== undefined ? options.dimensions : {};\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.layer_ = options.layer;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.matrixSet_ = options.matrixSet;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.style_ = options.style; // FIXME: should we guess this requestEncoding from options.url(s)\n    //        structure? that would mean KVP only if a template is not provided.\n\n    /**\n     * @private\n     * @type {import(\"./WMTSRequestEncoding.js\").default}\n     */\n\n    _this.requestEncoding_ = requestEncoding;\n\n    _this.setKey(_this.getKeyForDimensions_());\n\n    if (urls && urls.length > 0) {\n      _this.tileUrlFunction = createFromTileUrlFunctions(urls.map(_this.createFromWMTSTemplate.bind(_this)));\n    }\n\n    return _this;\n  }\n  /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @param {Array<string>} urls URLs.\n   */\n\n\n  WMTS.prototype.setUrls = function (urls) {\n    this.urls = urls;\n    var key = urls.join('\\n');\n    this.setTileUrlFunction(createFromTileUrlFunctions(urls.map(this.createFromWMTSTemplate.bind(this))), key);\n  };\n  /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */\n\n\n  WMTS.prototype.getDimensions = function () {\n    return this.dimensions_;\n  };\n  /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */\n\n\n  WMTS.prototype.getFormat = function () {\n    return this.format_;\n  };\n  /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */\n\n\n  WMTS.prototype.getLayer = function () {\n    return this.layer_;\n  };\n  /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */\n\n\n  WMTS.prototype.getMatrixSet = function () {\n    return this.matrixSet_;\n  };\n  /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {import(\"./WMTSRequestEncoding.js\").default} Request encoding.\n   * @api\n   */\n\n\n  WMTS.prototype.getRequestEncoding = function () {\n    return this.requestEncoding_;\n  };\n  /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */\n\n\n  WMTS.prototype.getStyle = function () {\n    return this.style_;\n  };\n  /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */\n\n\n  WMTS.prototype.getVersion = function () {\n    return this.version_;\n  };\n  /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */\n\n\n  WMTS.prototype.getKeyForDimensions_ = function () {\n    var i = 0;\n    var res = [];\n\n    for (var key in this.dimensions_) {\n      res[i++] = key + '-' + this.dimensions_[key];\n    }\n\n    return res.join('/');\n  };\n  /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */\n\n\n  WMTS.prototype.updateDimensions = function (dimensions) {\n    assign(this.dimensions_, dimensions);\n    this.setKey(this.getKeyForDimensions_());\n  };\n  /**\n   * @param {string} template Template.\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n   */\n\n\n  WMTS.prototype.createFromWMTSTemplate = function (template) {\n    var requestEncoding = this.requestEncoding_; // context property names are lower case to allow for a case insensitive\n    // replacement as some services use different naming conventions\n\n    var context = {\n      'layer': this.layer_,\n      'style': this.style_,\n      'tilematrixset': this.matrixSet_\n    };\n\n    if (requestEncoding == WMTSRequestEncoding.KVP) {\n      assign(context, {\n        'Service': 'WMTS',\n        'Request': 'GetTile',\n        'Version': this.version_,\n        'Format': this.format_\n      });\n    } // TODO: we may want to create our own appendParams function so that params\n    // order conforms to wmts spec guidance, and so that we can avoid to escape\n    // special template params\n\n\n    template = requestEncoding == WMTSRequestEncoding.KVP ? appendParams(template, context) : template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n      return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n    });\n    var tileGrid =\n    /** @type {import(\"../tilegrid/WMTS.js\").default} */\n    this.tileGrid;\n    var dimensions = this.dimensions_;\n    return (\n      /**\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */\n      function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n          return undefined;\n        } else {\n          var localContext_1 = {\n            'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n            'TileCol': tileCoord[1],\n            'TileRow': tileCoord[2]\n          };\n          assign(localContext_1, dimensions);\n          var url = template;\n\n          if (requestEncoding == WMTSRequestEncoding.KVP) {\n            url = appendParams(url, localContext_1);\n          } else {\n            url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n              return localContext_1[p];\n            });\n          }\n\n          return url;\n        }\n      }\n    );\n  };\n\n  return WMTS;\n}(TileImage);\n\nexport default WMTS;\n/**\n * Generate source options from a capabilities object.\n * @param {Object} wmtsCap An object representing the capabilities document.\n * @param {!Object} config Configuration properties for the layer.  Defaults for\n *                  the layer will apply if not provided.\n *\n * Required config properties:\n *  - layer - {string} The layer identifier.\n *\n * Optional config properties:\n *  - matrixSet - {string} The matrix set identifier, required if there is\n *       more than one matrix set in the layer capabilities.\n *  - projection - {string} The desired CRS when no matrixSet is specified.\n *       eg: \"EPSG:3857\". If the desired projection is not available,\n *       an error is thrown.\n *  - requestEncoding - {string} url encoding format for the layer. Default is\n *       the first tile url format found in the GetCapabilities response.\n *  - style - {string} The name of the style\n *  - format - {string} Image format for the layer. Default is the first\n *       format returned in the GetCapabilities response.\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\n * @return {Options|null} WMTS source options object or `null` if the layer was not found.\n * @api\n */\n\nexport function optionsFromCapabilities(wmtsCap, config) {\n  var layers = wmtsCap['Contents']['Layer'];\n  var l = find(layers, function (elt, index, array) {\n    return elt['Identifier'] == config['layer'];\n  });\n\n  if (l === null) {\n    return null;\n  }\n\n  var tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  var idx;\n\n  if (l['TileMatrixSetLink'].length > 1) {\n    if ('projection' in config) {\n      idx = findIndex(l['TileMatrixSetLink'], function (elt, index, array) {\n        var tileMatrixSet = find(tileMatrixSets, function (el) {\n          return el['Identifier'] == elt['TileMatrixSet'];\n        });\n        var supportedCRS = tileMatrixSet['SupportedCRS'];\n        var proj1 = getProjection(supportedCRS);\n        var proj2 = getProjection(config['projection']);\n\n        if (proj1 && proj2) {\n          return equivalent(proj1, proj2);\n        } else {\n          return supportedCRS == config['projection'];\n        }\n      });\n    } else {\n      idx = findIndex(l['TileMatrixSetLink'], function (elt, index, array) {\n        return elt['TileMatrixSet'] == config['matrixSet'];\n      });\n    }\n  } else {\n    idx = 0;\n  }\n\n  if (idx < 0) {\n    idx = 0;\n  }\n\n  var matrixSet =\n  /** @type {string} */\n  l['TileMatrixSetLink'][idx]['TileMatrixSet'];\n  var matrixLimits =\n  /** @type {Array<Object>} */\n  l['TileMatrixSetLink'][idx]['TileMatrixSetLimits'];\n  var format =\n  /** @type {string} */\n  l['Format'][0];\n\n  if ('format' in config) {\n    format = config['format'];\n  }\n\n  idx = findIndex(l['Style'], function (elt, index, array) {\n    if ('style' in config) {\n      return elt['Title'] == config['style'];\n    } else {\n      return elt['isDefault'];\n    }\n  });\n\n  if (idx < 0) {\n    idx = 0;\n  }\n\n  var style =\n  /** @type {string} */\n  l['Style'][idx]['Identifier'];\n  var dimensions = {};\n\n  if ('Dimension' in l) {\n    l['Dimension'].forEach(function (elt, index, array) {\n      var key = elt['Identifier'];\n      var value = elt['Default'];\n\n      if (value === undefined) {\n        value = elt['Value'][0];\n      }\n\n      dimensions[key] = value;\n    });\n  }\n\n  var matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  var matrixSetObj = find(matrixSets, function (elt, index, array) {\n    return elt['Identifier'] == matrixSet;\n  });\n  var projection;\n  var code = matrixSetObj['SupportedCRS'];\n\n  if (code) {\n    projection = getProjection(code);\n  }\n\n  if ('projection' in config) {\n    var projConfig = getProjection(config['projection']);\n\n    if (projConfig) {\n      if (!projection || equivalent(projConfig, projection)) {\n        projection = projConfig;\n      }\n    }\n  }\n\n  var wrapX = false;\n  var switchOriginXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n  var matrix = matrixSetObj.TileMatrix[0]; // create default matrixLimit\n\n  var selectedMatrixLimit = {\n    MinTileCol: 0,\n    MinTileRow: 0,\n    // subtract one to end up at tile top left\n    MaxTileCol: matrix.MatrixWidth - 1,\n    MaxTileRow: matrix.MatrixHeight - 1\n  }; //in case of matrix limits, use matrix limits to calculate extent\n\n  if (matrixLimits) {\n    selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\n    var m = find(matrixSetObj.TileMatrix, function (tileMatrixValue) {\n      return tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix || matrixSetObj.Identifier + ':' + tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix;\n    });\n\n    if (m) {\n      matrix = m;\n    }\n  }\n\n  var resolution = matrix.ScaleDenominator * 0.00028 / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\n\n  var origin = switchOriginXY ? [matrix.TopLeftCorner[1], matrix.TopLeftCorner[0]] : matrix.TopLeftCorner;\n  var tileSpanX = matrix.TileWidth * resolution;\n  var tileSpanY = matrix.TileHeight * resolution;\n  var matrixSetExtent = matrixSetObj['BoundingBox'];\n  var extent = [origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol, // add one to get proper bottom/right coordinate\n  origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow), origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol), origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow];\n\n  if (matrixSetExtent !== undefined && !containsExtent(matrixSetExtent, extent)) {\n    var wgs84BoundingBox = l['WGS84BoundingBox'];\n    var wgs84ProjectionExtent = getProjection('EPSG:4326').getExtent();\n    extent = matrixSetExtent;\n\n    if (wgs84BoundingBox) {\n      wrapX = wgs84BoundingBox[0] === wgs84ProjectionExtent[0] && wgs84BoundingBox[2] === wgs84ProjectionExtent[2];\n    } else {\n      var wgs84MatrixSetExtent = transformExtent(matrixSetExtent, matrixSetObj['SupportedCRS'], 'EPSG:4326'); // Ignore slight deviation from the correct x limits\n\n      wrapX = wgs84MatrixSetExtent[0] - 1e-10 <= wgs84ProjectionExtent[0] && wgs84MatrixSetExtent[2] + 1e-10 >= wgs84ProjectionExtent[2];\n    }\n  }\n\n  var tileGrid = createFromCapabilitiesMatrixSet(matrixSetObj, extent, matrixLimits);\n  /** @type {!Array<string>} */\n\n  var urls = [];\n  var requestEncoding = config['requestEncoding'];\n  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n\n  if ('OperationsMetadata' in wmtsCap && 'GetTile' in wmtsCap['OperationsMetadata']) {\n    var gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n\n    for (var i = 0, ii = gets.length; i < ii; ++i) {\n      if (gets[i]['Constraint']) {\n        var constraint = find(gets[i]['Constraint'], function (element) {\n          return element['name'] == 'GetEncoding';\n        });\n        var encodings = constraint['AllowedValues']['Value'];\n\n        if (requestEncoding === '') {\n          // requestEncoding not provided, use the first encoding from the list\n          requestEncoding = encodings[0];\n        }\n\n        if (requestEncoding === WMTSRequestEncoding.KVP) {\n          if (includes(encodings, WMTSRequestEncoding.KVP)) {\n            urls.push(\n            /** @type {string} */\n            gets[i]['href']);\n          }\n        } else {\n          break;\n        }\n      } else if (gets[i]['href']) {\n        requestEncoding = WMTSRequestEncoding.KVP;\n        urls.push(\n        /** @type {string} */\n        gets[i]['href']);\n      }\n    }\n  }\n\n  if (urls.length === 0) {\n    requestEncoding = WMTSRequestEncoding.REST;\n    l['ResourceURL'].forEach(function (element) {\n      if (element['resourceType'] === 'tile') {\n        format = element['format'];\n        urls.push(\n        /** @type {string} */\n        element['template']);\n      }\n    });\n  }\n\n  return {\n    urls: urls,\n    layer: config['layer'],\n    matrixSet: matrixSet,\n    format: format,\n    projection: projection,\n    requestEncoding: requestEncoding,\n    tileGrid: tileGrid,\n    style: style,\n    dimensions: dimensions,\n    wrapX: wrapX,\n    crossOrigin: config['crossOrigin']\n  };\n}","map":{"version":3,"mappings":"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","names":["TileImage","WMTSRequestEncoding","appendParams","assign","containsExtent","createFromCapabilitiesMatrixSet","createFromTileUrlFunctions","expandUrl","equivalent","get","getProjection","transformExtent","find","findIndex","includes","__extends","options","interpolate","imageSmoothing","undefined","requestEncoding","KVP","tileGrid","urls","url","_super","attributions","attributionsCollapsible","cacheSize","crossOrigin","projection","reprojectionErrorThreshold","tileClass","tileLoadFunction","tilePixelRatio","wrapX","transition","zDirection","_this","version_","version","format_","format","dimensions_","dimensions","layer_","layer","matrixSet_","matrixSet","style_","style","requestEncoding_","setKey","getKeyForDimensions_","length","tileUrlFunction","map","createFromWMTSTemplate","bind","WMTS","key","join","setTileUrlFunction","i","res","template","context","replace","m","p","toLowerCase","tileCoord","pixelRatio","localContext_1","getMatrixId","optionsFromCapabilities","wmtsCap","config","layers","l","elt","index","array","tileMatrixSets","idx","tileMatrixSet","el","supportedCRS","proj1","proj2","matrixLimits","forEach","value","matrixSets","matrixSetObj","code","projConfig","switchOriginXY","getAxisOrientation","substr","matrix","TileMatrix","selectedMatrixLimit","MinTileCol","MinTileRow","MaxTileCol","MatrixWidth","MaxTileRow","MatrixHeight","tileMatrixValue","Identifier","resolution","ScaleDenominator","getMetersPerUnit","origin","TopLeftCorner","tileSpanX","TileWidth","tileSpanY","TileHeight","matrixSetExtent","extent","wgs84BoundingBox","wgs84ProjectionExtent","getExtent","wgs84MatrixSetExtent","gets","ii","constraint","element","encodings","push","REST"],"sourceRoot":"","sources":["../src/source/WMTS.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}