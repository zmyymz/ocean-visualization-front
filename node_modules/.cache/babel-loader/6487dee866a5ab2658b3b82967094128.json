{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-clamped-array.js\";\nexport function fromWhiteIsZero(raster, max) {\n  var width = raster.width,\n      height = raster.height;\n  var rgbRaster = new Uint8Array(width * height * 3);\n  var value;\n\n  for (var i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = 256 - raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n\n  return rgbRaster;\n}\nexport function fromBlackIsZero(raster, max) {\n  var width = raster.width,\n      height = raster.height;\n  var rgbRaster = new Uint8Array(width * height * 3);\n  var value;\n\n  for (var i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n\n  return rgbRaster;\n}\nexport function fromPalette(raster, colorMap) {\n  var width = raster.width,\n      height = raster.height;\n  var rgbRaster = new Uint8Array(width * height * 3);\n  var greenOffset = colorMap.length / 3;\n  var blueOffset = colorMap.length / 3 * 2;\n\n  for (var i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    var mapIndex = raster[i];\n    rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;\n    rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;\n    rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;\n  }\n\n  return rgbRaster;\n}\nexport function fromCMYK(cmykRaster) {\n  var width = cmykRaster.width,\n      height = cmykRaster.height;\n  var rgbRaster = new Uint8Array(width * height * 3);\n\n  for (var i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {\n    var c = cmykRaster[i];\n    var m = cmykRaster[i + 1];\n    var y = cmykRaster[i + 2];\n    var k = cmykRaster[i + 3];\n    rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);\n  }\n\n  return rgbRaster;\n}\nexport function fromYCbCr(yCbCrRaster) {\n  var width = yCbCrRaster.width,\n      height = yCbCrRaster.height;\n  var rgbRaster = new Uint8ClampedArray(width * height * 3);\n\n  for (var i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {\n    var y = yCbCrRaster[i];\n    var cb = yCbCrRaster[i + 1];\n    var cr = yCbCrRaster[i + 2];\n    rgbRaster[j] = y + 1.40200 * (cr - 0x80);\n    rgbRaster[j + 1] = y - 0.34414 * (cb - 0x80) - 0.71414 * (cr - 0x80);\n    rgbRaster[j + 2] = y + 1.77200 * (cb - 0x80);\n  }\n\n  return rgbRaster;\n}\nvar Xn = 0.95047;\nvar Yn = 1.00000;\nvar Zn = 1.08883; // from https://github.com/antimatter15/rgb-lab/blob/master/color.js\n\nexport function fromCIELab(cieLabRaster) {\n  var width = cieLabRaster.width,\n      height = cieLabRaster.height;\n  var rgbRaster = new Uint8Array(width * height * 3);\n\n  for (var i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {\n    var L = cieLabRaster[i + 0];\n    var a_ = cieLabRaster[i + 1] << 24 >> 24; // conversion from uint8 to int8\n\n    var b_ = cieLabRaster[i + 2] << 24 >> 24; // same\n\n    var y = (L + 16) / 116;\n    var x = a_ / 500 + y;\n    var z = y - b_ / 200;\n    var r = void 0;\n    var g = void 0;\n    var b = void 0;\n    x = Xn * (x * x * x > 0.008856 ? x * x * x : (x - 16 / 116) / 7.787);\n    y = Yn * (y * y * y > 0.008856 ? y * y * y : (y - 16 / 116) / 7.787);\n    z = Zn * (z * z * z > 0.008856 ? z * z * z : (z - 16 / 116) / 7.787);\n    r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n    g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n    b = x * 0.0557 + y * -0.2040 + z * 1.0570;\n    r = r > 0.0031308 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : 12.92 * r;\n    g = g > 0.0031308 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : 12.92 * g;\n    b = b > 0.0031308 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : 12.92 * b;\n    rgbRaster[j] = Math.max(0, Math.min(1, r)) * 255;\n    rgbRaster[j + 1] = Math.max(0, Math.min(1, g)) * 255;\n    rgbRaster[j + 2] = Math.max(0, Math.min(1, b)) * 255;\n  }\n\n  return rgbRaster;\n}","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/geotiff/dist-module/rgb.js"],"names":["fromWhiteIsZero","raster","max","width","height","rgbRaster","Uint8Array","value","i","j","length","fromBlackIsZero","fromPalette","colorMap","greenOffset","blueOffset","mapIndex","fromCMYK","cmykRaster","c","m","y","k","fromYCbCr","yCbCrRaster","Uint8ClampedArray","cb","cr","Xn","Yn","Zn","fromCIELab","cieLabRaster","L","a_","b_","x","z","r","g","b","Math","min"],"mappings":"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","sourcesContent":["export function fromWhiteIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = 256 - (raster[i] / max * 256);\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromBlackIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromPalette(raster, colorMap) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  const greenOffset = colorMap.length / 3;\n  const blueOffset = colorMap.length / 3 * 2;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    const mapIndex = raster[i];\n    rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;\n    rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;\n    rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;\n  }\n  return rgbRaster;\n}\n\nexport function fromCMYK(cmykRaster) {\n  const { width, height } = cmykRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  for (let i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {\n    const c = cmykRaster[i];\n    const m = cmykRaster[i + 1];\n    const y = cmykRaster[i + 2];\n    const k = cmykRaster[i + 3];\n\n    rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);\n  }\n  return rgbRaster;\n}\n\nexport function fromYCbCr(yCbCrRaster) {\n  const { width, height } = yCbCrRaster;\n  const rgbRaster = new Uint8ClampedArray(width * height * 3);\n  for (let i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {\n    const y = yCbCrRaster[i];\n    const cb = yCbCrRaster[i + 1];\n    const cr = yCbCrRaster[i + 2];\n\n    rgbRaster[j] = (y + (1.40200 * (cr - 0x80)));\n    rgbRaster[j + 1] = (y - (0.34414 * (cb - 0x80)) - (0.71414 * (cr - 0x80)));\n    rgbRaster[j + 2] = (y + (1.77200 * (cb - 0x80)));\n  }\n  return rgbRaster;\n}\n\nconst Xn = 0.95047;\nconst Yn = 1.00000;\nconst Zn = 1.08883;\n\n// from https://github.com/antimatter15/rgb-lab/blob/master/color.js\n\nexport function fromCIELab(cieLabRaster) {\n  const { width, height } = cieLabRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n\n  for (let i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {\n    const L = cieLabRaster[i + 0];\n    const a_ = cieLabRaster[i + 1] << 24 >> 24; // conversion from uint8 to int8\n    const b_ = cieLabRaster[i + 2] << 24 >> 24; // same\n\n    let y = (L + 16) / 116;\n    let x = (a_ / 500) + y;\n    let z = y - (b_ / 200);\n    let r;\n    let g;\n    let b;\n\n    x = Xn * ((x * x * x > 0.008856) ? x * x * x : (x - (16 / 116)) / 7.787);\n    y = Yn * ((y * y * y > 0.008856) ? y * y * y : (y - (16 / 116)) / 7.787);\n    z = Zn * ((z * z * z > 0.008856) ? z * z * z : (z - (16 / 116)) / 7.787);\n\n    r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n    g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n    b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n    r = (r > 0.0031308) ? ((1.055 * (r ** (1 / 2.4))) - 0.055) : 12.92 * r;\n    g = (g > 0.0031308) ? ((1.055 * (g ** (1 / 2.4))) - 0.055) : 12.92 * g;\n    b = (b > 0.0031308) ? ((1.055 * (b ** (1 / 2.4))) - 0.055) : 12.92 * b;\n\n    rgbRaster[j] = Math.max(0, Math.min(1, r)) * 255;\n    rgbRaster[j + 1] = Math.max(0, Math.min(1, g)) * 255;\n    rgbRaster[j + 2] = Math.max(0, Math.min(1, b)) * 255;\n  }\n  return rgbRaster;\n}\n"]},"metadata":{},"sourceType":"module"}