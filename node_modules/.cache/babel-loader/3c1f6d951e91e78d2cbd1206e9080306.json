{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport BaseDecoder from './basedecoder.js';\nexport default class PackbitsDecoder extends BaseDecoder {\n  decodeBlock(buffer) {\n    const dataView = new DataView(buffer);\n    const out = [];\n\n    for (let i = 0; i < buffer.byteLength; ++i) {\n      let header = dataView.getInt8(i);\n\n      if (header < 0) {\n        const next = dataView.getUint8(i + 1);\n        header = -header;\n\n        for (let j = 0; j <= header; ++j) {\n          out.push(next);\n        }\n\n        i += 1;\n      } else {\n        for (let j = 0; j <= header; ++j) {\n          out.push(dataView.getUint8(i + j + 1));\n        }\n\n        i += header + 1;\n      }\n    }\n\n    return new Uint8Array(out).buffer;\n  }\n\n}","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/geotiff/dist-module/compression/packbits.js"],"names":["BaseDecoder","PackbitsDecoder","decodeBlock","buffer","dataView","DataView","out","i","byteLength","header","getInt8","next","getUint8","j","push","Uint8Array"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,kBAAxB;AAEA,eAAe,MAAMC,eAAN,SAA8BD,WAA9B,CAA0C;AACvDE,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,CAAaF,MAAb,CAAjB;AACA,UAAMG,GAAG,GAAG,EAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,UAA3B,EAAuC,EAAED,CAAzC,EAA4C;AAC1C,UAAIE,MAAM,GAAGL,QAAQ,CAACM,OAAT,CAAiBH,CAAjB,CAAb;;AACA,UAAIE,MAAM,GAAG,CAAb,EAAgB;AACd,cAAME,IAAI,GAAGP,QAAQ,CAACQ,QAAT,CAAkBL,CAAC,GAAG,CAAtB,CAAb;AACAE,QAAAA,MAAM,GAAG,CAACA,MAAV;;AACA,aAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,MAArB,EAA6B,EAAEI,CAA/B,EAAkC;AAChCP,UAAAA,GAAG,CAACQ,IAAJ,CAASH,IAAT;AACD;;AACDJ,QAAAA,CAAC,IAAI,CAAL;AACD,OAPD,MAOO;AACL,aAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,MAArB,EAA6B,EAAEI,CAA/B,EAAkC;AAChCP,UAAAA,GAAG,CAACQ,IAAJ,CAASV,QAAQ,CAACQ,QAAT,CAAkBL,CAAC,GAAGM,CAAJ,GAAQ,CAA1B,CAAT;AACD;;AACDN,QAAAA,CAAC,IAAIE,MAAM,GAAG,CAAd;AACD;AACF;;AACD,WAAO,IAAIM,UAAJ,CAAeT,GAAf,EAAoBH,MAA3B;AACD;;AAtBsD","sourcesContent":["import BaseDecoder from './basedecoder.js';\n\nexport default class PackbitsDecoder extends BaseDecoder {\n  decodeBlock(buffer) {\n    const dataView = new DataView(buffer);\n    const out = [];\n\n    for (let i = 0; i < buffer.byteLength; ++i) {\n      let header = dataView.getInt8(i);\n      if (header < 0) {\n        const next = dataView.getUint8(i + 1);\n        header = -header;\n        for (let j = 0; j <= header; ++j) {\n          out.push(next);\n        }\n        i += 1;\n      } else {\n        for (let j = 0; j <= header; ++j) {\n          out.push(dataView.getUint8(i + j + 1));\n        }\n        i += header + 1;\n      }\n    }\n    return new Uint8Array(out).buffer;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}