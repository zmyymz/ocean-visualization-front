{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/GeometryCollection\n */\n\n\nimport EventType from '../events/EventType.js';\nimport Geometry from './Geometry.js';\nimport GeometryType from './GeometryType.js';\nimport { closestSquaredDistanceXY, createOrUpdateEmpty, extend, getCenter } from '../extent.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */\n\nvar GeometryCollection =\n/** @class */\nfunction (_super) {\n  __extends(GeometryCollection, _super);\n  /**\n   * @param {Array<Geometry>} [opt_geometries] Geometries.\n   */\n\n\n  function GeometryCollection(opt_geometries) {\n    var _this = _super.call(this) || this;\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n\n\n    _this.geometries_ = opt_geometries ? opt_geometries : null;\n    /**\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n\n    _this.changeEventsKeys_ = [];\n\n    _this.listenGeometriesChange_();\n\n    return _this;\n  }\n  /**\n   * @private\n   */\n\n\n  GeometryCollection.prototype.unlistenGeometriesChange_ = function () {\n    this.changeEventsKeys_.forEach(unlistenByKey);\n    this.changeEventsKeys_.length = 0;\n  };\n  /**\n   * @private\n   */\n\n\n  GeometryCollection.prototype.listenGeometriesChange_ = function () {\n    if (!this.geometries_) {\n      return;\n    }\n\n    for (var i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      this.changeEventsKeys_.push(listen(this.geometries_[i], EventType.CHANGE, this.changed, this));\n    }\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.clone = function () {\n    var geometryCollection = new GeometryCollection(null);\n    geometryCollection.setGeometries(this.geometries_);\n    geometryCollection.applyProperties(this);\n    return geometryCollection;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  GeometryCollection.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);\n    }\n\n    return minSquaredDistance;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n\n\n  GeometryCollection.prototype.containsXY = function (x, y) {\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n\n\n  GeometryCollection.prototype.computeExtent = function (extent) {\n    createOrUpdateEmpty(extent);\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n\n    return extent;\n  };\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.getGeometries = function () {\n    return cloneGeometries(this.geometries_);\n  };\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n\n\n  GeometryCollection.prototype.getGeometriesArray = function () {\n    return this.geometries_;\n  };\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n\n\n  GeometryCollection.prototype.getGeometriesArrayRecursive = function () {\n    /** @type {Array<Geometry>} */\n    var geometriesArray = [];\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].getType() === this.getType()) {\n        geometriesArray = geometriesArray.concat(\n        /** @type {GeometryCollection} */\n        geometries[i].getGeometriesArrayRecursive());\n      } else {\n        geometriesArray.push(geometries[i]);\n      }\n    }\n\n    return geometriesArray;\n  };\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {GeometryCollection} Simplified GeometryCollection.\n   */\n\n\n  GeometryCollection.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n\n    if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance) {\n      return this;\n    }\n\n    var simplifiedGeometries = [];\n    var geometries = this.geometries_;\n    var simplified = false;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      var geometry = geometries[i];\n      var simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n      simplifiedGeometries.push(simplifiedGeometry);\n\n      if (simplifiedGeometry !== geometry) {\n        simplified = true;\n      }\n    }\n\n    if (simplified) {\n      var simplifiedGeometryCollection = new GeometryCollection(null);\n      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n      return simplifiedGeometryCollection;\n    } else {\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.getType = function () {\n    return GeometryType.GEOMETRY_COLLECTION;\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.intersectsExtent = function (extent) {\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n\n\n  GeometryCollection.prototype.isEmpty = function () {\n    return this.geometries_.length === 0;\n  };\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.rotate = function (angle, anchor) {\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n\n    this.changed();\n  };\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n\n\n  GeometryCollection.prototype.scale = function (sx, opt_sy, opt_anchor) {\n    var anchor = opt_anchor;\n\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, opt_sy, anchor);\n    }\n\n    this.changed();\n  };\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.setGeometries = function (geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  };\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n\n\n  GeometryCollection.prototype.setGeometriesArray = function (geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  };\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.applyTransform = function (transformFn) {\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n\n    this.changed();\n  };\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n\n\n  GeometryCollection.prototype.translate = function (deltaX, deltaY) {\n    var geometries = this.geometries_;\n\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n\n    this.changed();\n  };\n  /**\n   * Clean up.\n   */\n\n\n  GeometryCollection.prototype.disposeInternal = function () {\n    this.unlistenGeometriesChange_();\n\n    _super.prototype.disposeInternal.call(this);\n  };\n\n  return GeometryCollection;\n}(Geometry);\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\n\n\nfunction cloneGeometries(geometries) {\n  var clonedGeometries = [];\n\n  for (var i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n\n  return clonedGeometries;\n}\n\nexport default GeometryCollection;","map":{"version":3,"mappings":"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","names":["EventType","Geometry","GeometryType","closestSquaredDistanceXY","createOrUpdateEmpty","extend","getCenter","listen","unlistenByKey","__extends","opt_geometries","_super","_this","geometries_","changeEventsKeys_","listenGeometriesChange_","GeometryCollection","forEach","length","i","ii","push","CHANGE","changed","geometryCollection","setGeometries","applyProperties","x","y","closestPoint","minSquaredDistance","getExtent","geometries","closestPointXY","containsXY","extent","cloneGeometries","geometriesArray","getType","concat","getGeometriesArrayRecursive","squaredTolerance","simplifiedGeometryRevision","getRevision","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometries","simplified","geometry","simplifiedGeometry","getSimplifiedGeometry","simplifiedGeometryCollection","setGeometriesArray","GEOMETRY_COLLECTION","intersectsExtent","angle","anchor","rotate","sx","opt_sy","opt_anchor","scale","unlistenGeometriesChange_","transformFn","applyTransform","deltaX","deltaY","translate","disposeInternal","call","clonedGeometries","clone"],"sourceRoot":"","sources":["../src/geom/GeometryCollection.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}