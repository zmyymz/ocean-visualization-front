{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/KeyboardZoom\n */\n\n\nimport EventType from '../events/EventType.js';\nimport Interaction, { zoomByDelta } from './Interaction.js';\nimport { targetNotEditable } from '../events/condition.js';\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.targetNotEditable}.\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\n\nvar KeyboardZoom =\n/** @class */\nfunction (_super) {\n  __extends(KeyboardZoom, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function KeyboardZoom(opt_options) {\n    var _this = _super.call(this) || this;\n\n    var options = opt_options ? opt_options : {};\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.condition_ = options.condition ? options.condition : targetNotEditable;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.delta_ = options.delta ? options.delta : 1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.duration_ = options.duration !== undefined ? options.duration : 100;\n    return _this;\n  }\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n   * key pressed was '+' or '-').\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @this {KeyboardZoom}\n   */\n\n\n  KeyboardZoom.prototype.handleEvent = function (mapBrowserEvent) {\n    var stopEvent = false;\n\n    if (mapBrowserEvent.type == EventType.KEYDOWN || mapBrowserEvent.type == EventType.KEYPRESS) {\n      var keyEvent =\n      /** @type {KeyboardEvent} */\n      mapBrowserEvent.originalEvent;\n      var charCode = keyEvent.charCode;\n\n      if (this.condition_(mapBrowserEvent) && (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {\n        var map = mapBrowserEvent.map;\n        var delta = charCode == '+'.charCodeAt(0) ? this.delta_ : -this.delta_;\n        var view = map.getView();\n        zoomByDelta(view, delta, undefined, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n\n    return !stopEvent;\n  };\n\n  return KeyboardZoom;\n}(Interaction);\n\nexport default KeyboardZoom;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAGA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,OAAOC,WAAP,IAAqBC,WAArB,QAAuC,kBAAvC;AACA,SAAQC,iBAAR,QAAgC,wBAAhC;AAEA;;;;;;;;;;AAUA;;;;;;;;;;;;;;AAaA;AAAA;AAAA;AAA2BC;AACzB;;;;;AAGA,wBAAYC,WAAZ,EAAuB;AAAvB,gBACEC,qBAAO,IADT;;AAGE,QAAMC,OAAO,GAAGF,WAAW,GAAGA,WAAH,GAAiB,EAA5C;AAEA;;;;;AAIAG,SAAI,CAACC,UAAL,GAAkBF,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAA5B,GAAwCP,iBAA1D;AAEA;;;;;AAIAK,SAAI,CAACG,MAAL,GAAcJ,OAAO,CAACK,KAAR,GAAgBL,OAAO,CAACK,KAAxB,GAAgC,CAA9C;AAEA;;;;;AAIAJ,SAAI,CAACK,SAAL,GAAiBN,OAAO,CAACO,QAAR,KAAqBC,SAArB,GAAiCR,OAAO,CAACO,QAAzC,GAAoD,GAArE;;AACD;AAED;;;;;;;;;;AAQAE,iDAAYC,eAAZ,EAA2B;AACzB,QAAIC,SAAS,GAAG,KAAhB;;AACA,QACED,eAAe,CAACE,IAAhB,IAAwBnB,SAAS,CAACoB,OAAlC,IACAH,eAAe,CAACE,IAAhB,IAAwBnB,SAAS,CAACqB,QAFpC,EAGE;AACA,UAAMC,QAAQ;AAAG;AACfL,qBAAe,CAACM,aADlB;AAGA,UAAMC,QAAQ,GAAGF,QAAQ,CAACE,QAA1B;;AACA,UACE,KAAKf,UAAL,CAAgBQ,eAAhB,MACCO,QAAQ,IAAI,IAAIC,UAAJ,CAAe,CAAf,CAAZ,IAAiCD,QAAQ,IAAI,IAAIC,UAAJ,CAAe,CAAf,CAD9C,CADF,EAGE;AACA,YAAMC,GAAG,GAAGT,eAAe,CAACS,GAA5B;AACA,YAAMd,KAAK,GACTY,QAAQ,IAAI,IAAIC,UAAJ,CAAe,CAAf,CAAZ,GAAgC,KAAKd,MAArC,GAA8C,CAAC,KAAKA,MADtD;AAEA,YAAMgB,IAAI,GAAGD,GAAG,CAACE,OAAJ,EAAb;AACA1B,mBAAW,CAACyB,IAAD,EAAOf,KAAP,EAAcG,SAAd,EAAyB,KAAKF,SAA9B,CAAX;AACAS,gBAAQ,CAACO,cAAT;AACAX,iBAAS,GAAG,IAAZ;AACD;AACF;;AACD,WAAO,CAACA,SAAR;AACD,GAxBD;;AAyBF;AA7DA,EAA2BjB,WAA3B;;AA+DA,eAAee,YAAf","names":["EventType","Interaction","zoomByDelta","targetNotEditable","__extends","opt_options","_super","options","_this","condition_","condition","delta_","delta","duration_","duration","undefined","KeyboardZoom","mapBrowserEvent","stopEvent","type","KEYDOWN","KEYPRESS","keyEvent","originalEvent","charCode","charCodeAt","map","view","getView","preventDefault"],"sourceRoot":"","sources":["../src/interaction/KeyboardZoom.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}