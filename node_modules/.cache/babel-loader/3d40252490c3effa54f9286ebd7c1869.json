{"ast":null,"code":"import _toConsumableArray from \"D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { safeIfNeeded } from \"./_util/arrayIterator.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport { DataViewPrototypeGetUint16, DataViewPrototypeSetUint16 } from \"./_util/primordials.mjs\";\n/**\n * returns an unsigned 16-bit float at the specified byte offset from the start of the DataView\n *\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {[boolean]} opts\n * @returns {number}\n */\n\nexport function getFloat16(dataView, byteOffset) {\n  for (var _len = arguments.length, opts = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    opts[_key - 2] = arguments[_key];\n  }\n\n  return convertToNumber(DataViewPrototypeGetUint16.apply(void 0, [dataView, byteOffset].concat(_toConsumableArray(safeIfNeeded(opts)))));\n}\n/**\n * stores an unsigned 16-bit float value at the specified byte offset from the start of the DataView\n *\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {number} value\n * @param {[boolean]} opts\n */\n\nexport function setFloat16(dataView, byteOffset, value) {\n  for (var _len2 = arguments.length, opts = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n    opts[_key2 - 3] = arguments[_key2];\n  }\n\n  return DataViewPrototypeSetUint16.apply(void 0, [dataView, byteOffset, roundToFloat16Bits(value)].concat(_toConsumableArray(safeIfNeeded(opts))));\n}","map":{"version":3,"sources":["D:/Java/JavaEE/IdeaProjects/ocean-vis/node_modules/@petamoriken/float16/src/DataView.mjs"],"names":["safeIfNeeded","convertToNumber","roundToFloat16Bits","DataViewPrototypeGetUint16","DataViewPrototypeSetUint16","getFloat16","dataView","byteOffset","opts","setFloat16","value"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,2BAA7B;AACA,SAASC,eAAT,EAA0BC,kBAA1B,QAAoD,uBAApD;AACA,SACEC,0BADF,EAEEC,0BAFF,QAGO,yBAHP;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,UAA9B,EAAmD;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AACxD,SAAOP,eAAe,CACpBE,0BAA0B,MAA1B,UAA2BG,QAA3B,EAAqCC,UAArC,4BAAoDP,YAAY,CAACQ,IAAD,CAAhE,GADoB,CAAtB;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBH,QAApB,EAA8BC,UAA9B,EAA0CG,KAA1C,EAA0D;AAAA,qCAANF,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAC/D,SAAOJ,0BAA0B,MAA1B,UACLE,QADK,EAELC,UAFK,EAGLL,kBAAkB,CAACQ,KAAD,CAHb,4BAIFV,YAAY,CAACQ,IAAD,CAJV,GAAP;AAMD","sourcesContent":["import { safeIfNeeded } from \"./_util/arrayIterator.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport {\n  DataViewPrototypeGetUint16,\n  DataViewPrototypeSetUint16,\n} from \"./_util/primordials.mjs\";\n\n/**\n * returns an unsigned 16-bit float at the specified byte offset from the start of the DataView\n *\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {[boolean]} opts\n * @returns {number}\n */\nexport function getFloat16(dataView, byteOffset, ...opts) {\n  return convertToNumber(\n    DataViewPrototypeGetUint16(dataView, byteOffset, ...safeIfNeeded(opts))\n  );\n}\n\n/**\n * stores an unsigned 16-bit float value at the specified byte offset from the start of the DataView\n *\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {number} value\n * @param {[boolean]} opts\n */\nexport function setFloat16(dataView, byteOffset, value, ...opts) {\n  return DataViewPrototypeSetUint16(\n    dataView,\n    byteOffset,\n    roundToFloat16Bits(value),\n    ...safeIfNeeded(opts)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}