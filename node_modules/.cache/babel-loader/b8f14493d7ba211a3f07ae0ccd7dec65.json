{"ast":null,"code":"/**\n * @module ol/size\n */\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n\n  opt_size[0] = size[0] + 2 * num;\n  opt_size[1] = size[1] + 2 * num;\n  return opt_size;\n}\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\n\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} The scaled size.\n */\n\nexport function scale(size, ratio, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n\n  opt_size[0] = size[0] * ratio + 0.5 | 0;\n  opt_size[1] = size[1] * ratio + 0.5 | 0;\n  return opt_size;\n}\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\n\nexport function toSize(size, opt_size) {\n  if (Array.isArray(size)) {\n    return size;\n  } else {\n    if (opt_size === undefined) {\n      opt_size = [size, size];\n    } else {\n      opt_size[0] = size;\n      opt_size[1] = size;\n    }\n\n    return opt_size;\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;AAIA;;;;;;AAMA;;;;;;;AAOA,OAAM,SAAUA,MAAV,CAAiBC,IAAjB,EAAuBC,GAAvB,EAA4BC,QAA5B,EAAoC;AACxC,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1BD,YAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAX;AACD;;AACDA,UAAQ,CAAC,CAAD,CAAR,GAAcF,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAIC,GAA5B;AACAC,UAAQ,CAAC,CAAD,CAAR,GAAcF,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAIC,GAA5B;AACA,SAAOC,QAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAUE,OAAV,CAAkBJ,IAAlB,EAAsB;AAC1B,SAAOA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,IAAeA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAhC;AACD;AAED;;;;;;;;AAOA,OAAM,SAAUK,KAAV,CAAgBL,IAAhB,EAAsBM,KAAtB,EAA6BJ,QAA7B,EAAqC;AACzC,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1BD,YAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAX;AACD;;AACDA,UAAQ,CAAC,CAAD,CAAR,GAAeF,IAAI,CAAC,CAAD,CAAJ,GAAUM,KAAV,GAAkB,GAAnB,GAA0B,CAAxC;AACAJ,UAAQ,CAAC,CAAD,CAAR,GAAeF,IAAI,CAAC,CAAD,CAAJ,GAAUM,KAAV,GAAkB,GAAnB,GAA0B,CAAxC;AACA,SAAOJ,QAAP;AACD;AAED;;;;;;;;;;AASA,OAAM,SAAUK,MAAV,CAAiBP,IAAjB,EAAuBE,QAAvB,EAA+B;AACnC,MAAIM,KAAK,CAACC,OAAN,CAAcT,IAAd,CAAJ,EAAyB;AACvB,WAAOA,IAAP;AACD,GAFD,MAEO;AACL,QAAIE,QAAQ,KAAKC,SAAjB,EAA4B;AAC1BD,cAAQ,GAAG,CAACF,IAAD,EAAOA,IAAP,CAAX;AACD,KAFD,MAEO;AACLE,cAAQ,CAAC,CAAD,CAAR,GAAcF,IAAd;AACAE,cAAQ,CAAC,CAAD,CAAR,GAAcF,IAAd;AACD;;AACD,WAAOE,QAAP;AACD;AACF","names":["buffer","size","num","opt_size","undefined","hasArea","scale","ratio","toSize","Array","isArray"],"sourceRoot":"","sources":["src/size.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}