{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/Layer\n */\n\n\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport SourceState from '../source/State.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {function(import(\"../PluggableMap.js\").FrameState):HTMLElement} RenderFunction\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:source', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:source'|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../PluggableMap.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {import(\"../source/Source.js\").default|undefined} source Source being rendered (only for multi-source layers).\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link import(\"../PluggableMap.js\").default#addLayer map.addLayer()}. Components\n * like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * Please note that for performance reasons several layers might get rendered to\n * the same HTML element, which will cause {@link import(\"../PluggableMap.js\").default#forEachLayerAtPixel map.forEachLayerAtPixel()} to\n * give false positives. To avoid this, apply different `className` properties to the\n * layers at creation time.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */\n\nvar Layer =\n/** @class */\nfunction (_super) {\n  __extends(Layer, _super);\n  /**\n   * @param {Options<SourceType>} options Layer options.\n   */\n\n\n  function Layer(options) {\n    var _this = this;\n\n    var baseOptions = assign({}, options);\n    delete baseOptions.source;\n    _this = _super.call(this, baseOptions) || this;\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.on;\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {LayerOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    _this.mapPrecomposeKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    _this.mapRenderKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n\n    _this.sourceChangeKey_ = null;\n    /**\n     * @private\n     * @type {RendererType}\n     */\n\n    _this.renderer_ = null;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n\n    _this.rendered = false; // Overwrite default render method with a custom one\n\n    if (options.render) {\n      _this.render = options.render;\n    }\n\n    if (options.map) {\n      _this.setMap(options.map);\n    }\n\n    _this.addChangeListener(LayerProperty.SOURCE, _this.handleSourcePropertyChange_);\n\n    var source = options.source ?\n    /** @type {SourceType} */\n    options.source : null;\n\n    _this.setSource(source);\n\n    return _this;\n  }\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [opt_array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n\n\n  Layer.prototype.getLayersArray = function (opt_array) {\n    var array = opt_array ? opt_array : [];\n    array.push(this);\n    return array;\n  };\n  /**\n   * @param {Array<import(\"./Layer.js\").State>} [opt_states] Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n\n\n  Layer.prototype.getLayerStatesArray = function (opt_states) {\n    var states = opt_states ? opt_states : [];\n    states.push(this.getLayerState());\n    return states;\n  };\n  /**\n   * Get the layer source.\n   * @return {SourceType|null} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n\n\n  Layer.prototype.getSource = function () {\n    return (\n      /** @type {SourceType} */\n      this.get(LayerProperty.SOURCE) || null\n    );\n  };\n  /**\n   * @return {SourceType|null} The source being rendered.\n   */\n\n\n  Layer.prototype.getRenderSource = function () {\n    return this.getSource();\n  };\n  /**\n   * @return {import(\"../source/State.js\").default} Source state.\n   */\n\n\n  Layer.prototype.getSourceState = function () {\n    var source = this.getSource();\n    return !source ? SourceState.UNDEFINED : source.getState();\n  };\n  /**\n   * @private\n   */\n\n\n  Layer.prototype.handleSourceChange_ = function () {\n    this.changed();\n  };\n  /**\n   * @private\n   */\n\n\n  Layer.prototype.handleSourcePropertyChange_ = function () {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n\n    var source = this.getSource();\n\n    if (source) {\n      this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);\n    }\n\n    this.changed();\n  };\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with\n   * an array of features.\n   */\n\n\n  Layer.prototype.getFeatures = function (pixel) {\n    if (!this.renderer_) {\n      return new Promise(function (resolve) {\n        return resolve([]);\n      });\n    }\n\n    return this.renderer_.getFeatures(pixel);\n  };\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n\n\n  Layer.prototype.getData = function (pixel) {\n    if (!this.renderer_ || !this.rendered) {\n      return null;\n    }\n\n    return this.renderer_.getData(pixel);\n  };\n  /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   */\n\n\n  Layer.prototype.render = function (frameState, target) {\n    var layerRenderer = this.getRenderer();\n\n    if (layerRenderer.prepareFrame(frameState)) {\n      this.rendered = true;\n      return layerRenderer.renderFrame(frameState, target);\n    }\n  };\n  /**\n   * Called when a layer is not visible during a map render.\n   */\n\n\n  Layer.prototype.unrender = function () {\n    this.rendered = false;\n  };\n  /**\n   * For use inside the library only.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   */\n\n\n  Layer.prototype.setMapInternal = function (map) {\n    if (!map) {\n      this.unrender();\n    }\n\n    this.set(LayerProperty.MAP, map);\n  };\n  /**\n   * For use inside the library only.\n   * @return {import(\"../PluggableMap.js\").default|null} Map.\n   */\n\n\n  Layer.prototype.getMapInternal = function () {\n    return this.get(LayerProperty.MAP);\n  };\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection, and the callback in\n   * {@link module:ol/Map~Map#forEachLayerAtPixel} will receive `null` as layer. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map~Map#addLayer} instead.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n\n\n  Layer.prototype.setMap = function (map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n\n    if (!map) {\n      this.changed();\n    }\n\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n\n    if (map) {\n      this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {\n        var renderEvent =\n        /** @type {import(\"../render/Event.js\").default} */\n        evt;\n        var layerStatesArray = renderEvent.frameState.layerStatesArray;\n        var layerState = this.getLayerState(false); // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.\n\n        assert(!layerStatesArray.some(function (arrayLayerState) {\n          return arrayLayerState.layer === layerState.layer;\n        }), 67);\n        layerStatesArray.push(layerState);\n      }, this);\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  };\n  /**\n   * Set the layer source.\n   * @param {SourceType|null} source The layer source.\n   * @observable\n   * @api\n   */\n\n\n  Layer.prototype.setSource = function (source) {\n    this.set(LayerProperty.SOURCE, source);\n  };\n  /**\n   * Get the renderer for this layer.\n   * @return {RendererType} The layer renderer.\n   */\n\n\n  Layer.prototype.getRenderer = function () {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n\n    return this.renderer_;\n  };\n  /**\n   * @return {boolean} The layer has a renderer.\n   */\n\n\n  Layer.prototype.hasRenderer = function () {\n    return !!this.renderer_;\n  };\n  /**\n   * Create a renderer for this layer.\n   * @return {RendererType} A layer renderer.\n   * @protected\n   */\n\n\n  Layer.prototype.createRenderer = function () {\n    return null;\n  };\n  /**\n   * Clean up.\n   */\n\n\n  Layer.prototype.disposeInternal = function () {\n    if (this.renderer_) {\n      this.renderer_.dispose();\n      delete this.renderer_;\n    }\n\n    this.setSource(null);\n\n    _super.prototype.disposeInternal.call(this);\n  };\n\n  return Layer;\n}(BaseLayer);\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\n\n\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n\n  var resolution = viewState.resolution;\n\n  if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) {\n    return false;\n  }\n\n  var zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\nexport default Layer;","map":{"version":3,"mappings":"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","names":["BaseLayer","EventType","LayerProperty","RenderEventType","SourceState","assert","assign","listen","unlistenByKey","__extends","options","baseOptions","source","_super","_this","on","once","un","mapPrecomposeKey_","mapRenderKey_","sourceChangeKey_","renderer_","rendered","render","map","setMap","addChangeListener","SOURCE","handleSourcePropertyChange_","setSource","Layer","opt_array","array","push","opt_states","states","getLayerState","get","getSource","UNDEFINED","getState","changed","CHANGE","handleSourceChange_","pixel","Promise","resolve","getFeatures","getData","frameState","target","layerRenderer","getRenderer","prepareFrame","renderFrame","unrender","set","MAP","PRECOMPOSE","evt","renderEvent","layerStatesArray","layerState","some","arrayLayerState","layer","createRenderer","dispose","disposeInternal","call","inView","viewState","visible","resolution","minResolution","maxResolution","zoom","minZoom","maxZoom"],"sourceRoot":"","sources":["../src/layer/Layer.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}