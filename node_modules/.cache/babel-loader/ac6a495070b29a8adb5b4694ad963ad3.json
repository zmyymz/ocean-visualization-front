{"ast":null,"code":"/**\n * @module ol/geom/flat/simplify\n */\n// Based on simplify-js https://github.com/mourner/simplify-js\n// Copyright (c) 2012, Vladimir Agafonkin\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//    1. Redistributions of source code must retain the above copyright notice,\n//       this list of conditions and the following disclaimer.\n//\n//    2. Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\nimport { squaredDistance, squaredSegmentDistance } from '../../math.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {boolean} highQuality Highest quality.\n * @param {Array<number>} [opt_simplifiedFlatCoordinates] Simplified flat\n *     coordinates.\n * @return {Array<number>} Simplified line string.\n */\n\nexport function simplifyLineString(flatCoordinates, offset, end, stride, squaredTolerance, highQuality, opt_simplifiedFlatCoordinates) {\n  var simplifiedFlatCoordinates = opt_simplifiedFlatCoordinates !== undefined ? opt_simplifiedFlatCoordinates : [];\n\n  if (!highQuality) {\n    end = radialDistance(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    flatCoordinates = simplifiedFlatCoordinates;\n    offset = 0;\n    stride = 2;\n  }\n\n  simplifiedFlatCoordinates.length = douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n  return simplifiedFlatCoordinates;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\n\nexport function douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n  var n = (end - offset) / stride;\n\n  if (n < 3) {\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + 1];\n    }\n\n    return simplifiedOffset;\n  }\n  /** @type {Array<number>} */\n\n\n  var markers = new Array(n);\n  markers[0] = 1;\n  markers[n - 1] = 1;\n  /** @type {Array<number>} */\n\n  var stack = [offset, end - stride];\n  var index = 0;\n\n  while (stack.length > 0) {\n    var last = stack.pop();\n    var first = stack.pop();\n    var maxSquaredDistance = 0;\n    var x1 = flatCoordinates[first];\n    var y1 = flatCoordinates[first + 1];\n    var x2 = flatCoordinates[last];\n    var y2 = flatCoordinates[last + 1];\n\n    for (var i = first + stride; i < last; i += stride) {\n      var x = flatCoordinates[i];\n      var y = flatCoordinates[i + 1];\n      var squaredDistance_1 = squaredSegmentDistance(x, y, x1, y1, x2, y2);\n\n      if (squaredDistance_1 > maxSquaredDistance) {\n        index = i;\n        maxSquaredDistance = squaredDistance_1;\n      }\n    }\n\n    if (maxSquaredDistance > squaredTolerance) {\n      markers[(index - offset) / stride] = 1;\n\n      if (first + stride < index) {\n        stack.push(first, index);\n      }\n\n      if (index + stride < last) {\n        stack.push(index, last);\n      }\n    }\n  }\n\n  for (var i = 0; i < n; ++i) {\n    if (markers[i]) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + i * stride];\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + i * stride + 1];\n    }\n  }\n\n  return simplifiedOffset;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\n\nexport function douglasPeuckerArray(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    simplifiedOffset = douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset);\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n\n  return simplifiedOffset;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\n\nexport function douglasPeuckerMultiArray(flatCoordinates, offset, endss, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    var simplifiedEnds = [];\n    simplifiedOffset = douglasPeuckerArray(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n\n  return simplifiedOffset;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\n\nexport function radialDistance(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n  if (end <= offset + stride) {\n    // zero or one point, no simplification possible, so copy and return\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + 1];\n    }\n\n    return simplifiedOffset;\n  }\n\n  var x1 = flatCoordinates[offset];\n  var y1 = flatCoordinates[offset + 1]; // copy first point\n\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  var x2 = x1;\n  var y2 = y1;\n\n  for (offset += stride; offset < end; offset += stride) {\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n\n    if (squaredDistance(x1, y1, x2, y2) > squaredTolerance) {\n      // copy point at offset\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n\n  if (x2 != x1 || y2 != y1) {\n    // copy last point\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  }\n\n  return simplifiedOffset;\n}\n/**\n * @param {number} value Value.\n * @param {number} tolerance Tolerance.\n * @return {number} Rounded value.\n */\n\nexport function snap(value, tolerance) {\n  return tolerance * Math.round(value / tolerance);\n}\n/**\n * Simplifies a line string using an algorithm designed by Tim Schaub.\n * Coordinates are snapped to the nearest value in a virtual grid and\n * consecutive duplicate coordinates are discarded.  This effectively preserves\n * topology as the simplification of any subsection of a line string is\n * independent of the rest of the line string.  This means that, for examples,\n * the common edge between two polygons will be simplified to the same line\n * string independently in both polygons.  This implementation uses a single\n * pass over the coordinates and eliminates intermediate collinear points.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\n\nexport function quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n  // do nothing if the line is empty\n  if (offset == end) {\n    return simplifiedOffset;\n  } // snap the first coordinate (P1)\n\n\n  var x1 = snap(flatCoordinates[offset], tolerance);\n  var y1 = snap(flatCoordinates[offset + 1], tolerance);\n  offset += stride; // add the first coordinate to the output\n\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1; // find the next coordinate that does not snap to the same value as the first\n  // coordinate (P2)\n\n  var x2, y2;\n\n  do {\n    x2 = snap(flatCoordinates[offset], tolerance);\n    y2 = snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n\n    if (offset == end) {\n      // all coordinates snap to the same value, the line collapses to a point\n      // push the last snapped value anyway to ensure that the output contains\n      // at least two points\n      // FIXME should we really return at least two points anyway?\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      return simplifiedOffset;\n    }\n  } while (x2 == x1 && y2 == y1);\n\n  while (offset < end) {\n    // snap the next coordinate (P3)\n    var x3 = snap(flatCoordinates[offset], tolerance);\n    var y3 = snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride; // skip P3 if it is equal to P2\n\n    if (x3 == x2 && y3 == y2) {\n      continue;\n    } // calculate the delta between P1 and P2\n\n\n    var dx1 = x2 - x1;\n    var dy1 = y2 - y1; // calculate the delta between P3 and P1\n\n    var dx2 = x3 - x1;\n    var dy2 = y3 - y1; // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from\n    // P1 in the same direction then P2 is on the straight line between P1 and\n    // P3\n\n    if (dx1 * dy2 == dy1 * dx2 && (dx1 < 0 && dx2 < dx1 || dx1 == dx2 || dx1 > 0 && dx2 > dx1) && (dy1 < 0 && dy2 < dy1 || dy1 == dy2 || dy1 > 0 && dy2 > dy1)) {\n      // discard P2 and set P2 = P3\n      x2 = x3;\n      y2 = y3;\n      continue;\n    } // either P1, P2, and P3 are not colinear, or they are colinear but P3 is\n    // between P3 and P1 or on the opposite half of the line to P2.  add P2,\n    // and continue with P1 = P2 and P2 = P3\n\n\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    x1 = x2;\n    y1 = y2;\n    x2 = x3;\n    y2 = y3;\n  } // add the last point (P2)\n\n\n  simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  return simplifiedOffset;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\n\nexport function quantizeArray(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    simplifiedOffset = quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset);\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n\n  return simplifiedOffset;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\n\nexport function quantizeMultiArray(flatCoordinates, offset, endss, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    var simplifiedEnds = [];\n    simplifiedOffset = quantizeArray(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n\n  return simplifiedOffset;\n}","map":{"version":3,"mappings":"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","names":["squaredDistance","squaredSegmentDistance","simplifyLineString","flatCoordinates","offset","end","stride","squaredTolerance","highQuality","opt_simplifiedFlatCoordinates","simplifiedFlatCoordinates","undefined","radialDistance","length","douglasPeucker","simplifiedOffset","n","markers","Array","stack","index","last","pop","first","maxSquaredDistance","x1","y1","x2","y2","i","x","y","squaredDistance_1","push","douglasPeuckerArray","ends","simplifiedEnds","ii","douglasPeuckerMultiArray","endss","simplifiedEndss","snap","value","tolerance","Math","round","quantize","x3","y3","dx1","dy1","dx2","dy2","quantizeArray","quantizeMultiArray"],"sourceRoot":"","sources":["../../src/geom/flat/simplify.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}