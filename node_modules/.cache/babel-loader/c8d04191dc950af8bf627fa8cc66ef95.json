{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/MultiPolygon\n */\n\n\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport MultiPoint from './MultiPoint.js';\nimport Polygon from './Polygon.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestMultiArrayPoint, multiArrayMaxSquaredDelta } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateMultiCoordinatesArray } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { getInteriorPointsOfMultiArray } from './flat/interiorpoint.js';\nimport { inflateMultiCoordinatesArray } from './flat/inflate.js';\nimport { intersectsLinearRingMultiArray } from './flat/intersectsextent.js';\nimport { linearRingssAreOriented, orientLinearRingsArray } from './flat/orient.js';\nimport { linearRingss as linearRingssArea } from './flat/area.js';\nimport { linearRingss as linearRingssCenter } from './flat/center.js';\nimport { linearRingssContainsXY } from './flat/contains.js';\nimport { quantizeMultiArray } from './flat/simplify.js';\n/**\n * @classdesc\n * Multi-polygon geometry.\n *\n * @api\n */\n\nvar MultiPolygon =\n/** @class */\nfunction (_super) {\n  __extends(MultiPolygon, _super);\n  /**\n   * @param {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` and `opt_endss` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @param {Array<Array<number>>} [opt_endss] Array of ends for internal use with flat coordinates.\n   */\n\n\n  function MultiPolygon(coordinates, opt_layout, opt_endss) {\n    var _this = _super.call(this) || this;\n    /**\n     * @type {Array<Array<number>>}\n     * @private\n     */\n\n\n    _this.endss_ = [];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.flatInteriorPointsRevision_ = -1;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    _this.flatInteriorPoints_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.maxDeltaRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.orientedRevision_ = -1;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    _this.orientedFlatCoordinates_ = null;\n\n    if (!opt_endss && !Array.isArray(coordinates[0])) {\n      var layout = _this.getLayout();\n\n      var polygons =\n      /** @type {Array<Polygon>} */\n      coordinates;\n      var flatCoordinates = [];\n      var endss = [];\n\n      for (var i = 0, ii = polygons.length; i < ii; ++i) {\n        var polygon = polygons[i];\n\n        if (i === 0) {\n          layout = polygon.getLayout();\n        }\n\n        var offset = flatCoordinates.length;\n        var ends = polygon.getEnds();\n\n        for (var j = 0, jj = ends.length; j < jj; ++j) {\n          ends[j] += offset;\n        }\n\n        extend(flatCoordinates, polygon.getFlatCoordinates());\n        endss.push(ends);\n      }\n\n      opt_layout = layout;\n      coordinates = flatCoordinates;\n      opt_endss = endss;\n    }\n\n    if (opt_layout !== undefined && opt_endss) {\n      _this.setFlatCoordinates(opt_layout,\n      /** @type {Array<number>} */\n      coordinates);\n\n      _this.endss_ = opt_endss;\n    } else {\n      _this.setCoordinates(\n      /** @type {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} */\n      coordinates, opt_layout);\n    }\n\n    return _this;\n  }\n  /**\n   * Append the passed polygon to this multipolygon.\n   * @param {Polygon} polygon Polygon.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.appendPolygon = function (polygon) {\n    /** @type {Array<number>} */\n    var ends;\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = polygon.getFlatCoordinates().slice();\n      ends = polygon.getEnds().slice();\n      this.endss_.push();\n    } else {\n      var offset = this.flatCoordinates.length;\n      extend(this.flatCoordinates, polygon.getFlatCoordinates());\n      ends = polygon.getEnds().slice();\n\n      for (var i = 0, ii = ends.length; i < ii; ++i) {\n        ends[i] += offset;\n      }\n    }\n\n    this.endss_.push(ends);\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPolygon} Clone.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.clone = function () {\n    var len = this.endss_.length;\n    var newEndss = new Array(len);\n\n    for (var i = 0; i < len; ++i) {\n      newEndss[i] = this.endss_[i].slice();\n    }\n\n    var multiPolygon = new MultiPolygon(this.flatCoordinates.slice(), this.layout, newEndss);\n    multiPolygon.applyProperties(this);\n    return multiPolygon;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n\n\n  MultiPolygon.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(multiArrayMaxSquaredDelta(this.flatCoordinates, 0, this.endss_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n\n    return assignClosestMultiArrayPoint(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n\n\n  MultiPolygon.prototype.containsXY = function (x, y) {\n    return linearRingssContainsXY(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);\n  };\n  /**\n   * Return the area of the multipolygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getArea = function () {\n    return linearRingssArea(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);\n  };\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for multi-polygons.\n   *\n   * @param {boolean} [opt_right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} Coordinates.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getCoordinates = function (opt_right) {\n    var flatCoordinates;\n\n    if (opt_right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRingsArray(flatCoordinates, 0, this.endss_, this.stride, opt_right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateMultiCoordinatesArray(flatCoordinates, 0, this.endss_, this.stride);\n  };\n  /**\n   * @return {Array<Array<number>>} Endss.\n   */\n\n\n  MultiPolygon.prototype.getEndss = function () {\n    return this.endss_;\n  };\n  /**\n   * @return {Array<number>} Flat interior points.\n   */\n\n\n  MultiPolygon.prototype.getFlatInteriorPoints = function () {\n    if (this.flatInteriorPointsRevision_ != this.getRevision()) {\n      var flatCenters = linearRingssCenter(this.flatCoordinates, 0, this.endss_, this.stride);\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, flatCenters);\n      this.flatInteriorPointsRevision_ = this.getRevision();\n    }\n\n    return this.flatInteriorPoints_;\n  };\n  /**\n   * Return the interior points as {@link module:ol/geom/MultiPoint~MultiPoint multipoint}.\n   * @return {MultiPoint} Interior points as XYM coordinates, where M is\n   * the length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getInteriorPoints = function () {\n    return new MultiPoint(this.getFlatInteriorPoints().slice(), GeometryLayout.XYM);\n  };\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n\n\n  MultiPolygon.prototype.getOrientedFlatCoordinates = function () {\n    if (this.orientedRevision_ != this.getRevision()) {\n      var flatCoordinates = this.flatCoordinates;\n\n      if (linearRingssAreOriented(flatCoordinates, 0, this.endss_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRingsArray(this.orientedFlatCoordinates_, 0, this.endss_, this.stride);\n      }\n\n      this.orientedRevision_ = this.getRevision();\n    }\n\n    return this.orientedFlatCoordinates_;\n  };\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {MultiPolygon} Simplified MultiPolygon.\n   * @protected\n   */\n\n\n  MultiPolygon.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    var simplifiedEndss = [];\n    simplifiedFlatCoordinates.length = quantizeMultiArray(this.flatCoordinates, 0, this.endss_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEndss);\n    return new MultiPolygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEndss);\n  };\n  /**\n   * Return the polygon at the specified index.\n   * @param {number} index Index.\n   * @return {Polygon} Polygon.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getPolygon = function (index) {\n    if (index < 0 || this.endss_.length <= index) {\n      return null;\n    }\n\n    var offset;\n\n    if (index === 0) {\n      offset = 0;\n    } else {\n      var prevEnds = this.endss_[index - 1];\n      offset = prevEnds[prevEnds.length - 1];\n    }\n\n    var ends = this.endss_[index].slice();\n    var end = ends[ends.length - 1];\n\n    if (offset !== 0) {\n      for (var i = 0, ii = ends.length; i < ii; ++i) {\n        ends[i] -= offset;\n      }\n    }\n\n    return new Polygon(this.flatCoordinates.slice(offset, end), this.layout, ends);\n  };\n  /**\n   * Return the polygons of this multipolygon.\n   * @return {Array<Polygon>} Polygons.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getPolygons = function () {\n    var layout = this.layout;\n    var flatCoordinates = this.flatCoordinates;\n    var endss = this.endss_;\n    var polygons = [];\n    var offset = 0;\n\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n      var ends = endss[i].slice();\n      var end = ends[ends.length - 1];\n\n      if (offset !== 0) {\n        for (var j = 0, jj = ends.length; j < jj; ++j) {\n          ends[j] -= offset;\n        }\n      }\n\n      var polygon = new Polygon(flatCoordinates.slice(offset, end), layout, ends);\n      polygons.push(polygon);\n      offset = end;\n    }\n\n    return polygons;\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.getType = function () {\n    return GeometryType.MULTI_POLYGON;\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.intersectsExtent = function (extent) {\n    return intersectsLinearRingMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);\n  };\n  /**\n   * Set the coordinates of the multipolygon.\n   * @param {!Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n\n\n  MultiPolygon.prototype.setCoordinates = function (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 3);\n\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n\n    var endss = deflateMultiCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.endss_);\n\n    if (endss.length === 0) {\n      this.flatCoordinates.length = 0;\n    } else {\n      var lastEnds = endss[endss.length - 1];\n      this.flatCoordinates.length = lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];\n    }\n\n    this.changed();\n  };\n\n  return MultiPolygon;\n}(SimpleGeometry);\n\nexport default MultiPolygon;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAGA,OAAOA,cAAP,MAA2B,qBAA3B;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AACA,SACEC,4BADF,EAEEC,yBAFF,QAGO,mBAHP;AAIA,SAAQC,wBAAR,QAAuC,cAAvC;AACA,SAAQC,4BAAR,QAA2C,mBAA3C;AACA,SAAQC,MAAR,QAAqB,aAArB;AACA,SAAQC,6BAAR,QAA4C,yBAA5C;AACA,SAAQC,4BAAR,QAA2C,mBAA3C;AACA,SAAQC,8BAAR,QAA6C,4BAA7C;AACA,SACEC,uBADF,EAEEC,sBAFF,QAGO,kBAHP;AAIA,SAAQC,YAAY,IAAIC,gBAAxB,QAA+C,gBAA/C;AACA,SAAQD,YAAY,IAAIE,kBAAxB,QAAiD,kBAAjD;AACA,SAAQC,sBAAR,QAAqC,oBAArC;AACA,SAAQC,kBAAR,QAAiC,oBAAjC;AAEA;;;;;;;AAMA;AAAA;AAAA;AAA2BC;AACzB;;;;;;;;AAMA,wBAAYC,WAAZ,EAAyBC,UAAzB,EAAqCC,SAArC,EAA8C;AAA9C,gBACEC,qBAAO,IADT;AAGE;;;;;;AAIAC,SAAI,CAACC,MAAL,GAAc,EAAd;AAEA;;;;;AAIAD,SAAI,CAACE,2BAAL,GAAmC,CAAC,CAApC;AAEA;;;;;AAIAF,SAAI,CAACG,mBAAL,GAA2B,IAA3B;AAEA;;;;;AAIAH,SAAI,CAACI,SAAL,GAAiB,CAAC,CAAlB;AAEA;;;;;AAIAJ,SAAI,CAACK,iBAAL,GAAyB,CAAC,CAA1B;AAEA;;;;;AAIAL,SAAI,CAACM,iBAAL,GAAyB,CAAC,CAA1B;AAEA;;;;;AAIAN,SAAI,CAACO,wBAAL,GAAgC,IAAhC;;AAEA,QAAI,CAACT,SAAD,IAAc,CAACU,KAAK,CAACC,OAAN,CAAcb,WAAW,CAAC,CAAD,CAAzB,CAAnB,EAAkD;AAChD,UAAIc,MAAM,GAAGV,KAAI,CAACW,SAAL,EAAb;;AACA,UAAMC,QAAQ;AAAG;AAA+BhB,iBAAhD;AACA,UAAMiB,eAAe,GAAG,EAAxB;AACA,UAAMC,KAAK,GAAG,EAAd;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGJ,QAAQ,CAACK,MAA9B,EAAsCF,CAAC,GAAGC,EAA1C,EAA8C,EAAED,CAAhD,EAAmD;AACjD,YAAMG,OAAO,GAAGN,QAAQ,CAACG,CAAD,CAAxB;;AACA,YAAIA,CAAC,KAAK,CAAV,EAAa;AACXL,gBAAM,GAAGQ,OAAO,CAACP,SAAR,EAAT;AACD;;AACD,YAAMQ,MAAM,GAAGN,eAAe,CAACI,MAA/B;AACA,YAAMG,IAAI,GAAGF,OAAO,CAACG,OAAR,EAAb;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGH,IAAI,CAACH,MAA1B,EAAkCK,CAAC,GAAGC,EAAtC,EAA0C,EAAED,CAA5C,EAA+C;AAC7CF,cAAI,CAACE,CAAD,CAAJ,IAAWH,MAAX;AACD;;AACDnC,cAAM,CAAC6B,eAAD,EAAkBK,OAAO,CAACM,kBAAR,EAAlB,CAAN;AACAV,aAAK,CAACW,IAAN,CAAWL,IAAX;AACD;;AACDvB,gBAAU,GAAGa,MAAb;AACAd,iBAAW,GAAGiB,eAAd;AACAf,eAAS,GAAGgB,KAAZ;AACD;;AACD,QAAIjB,UAAU,KAAK6B,SAAf,IAA4B5B,SAAhC,EAA2C;AACzCE,WAAI,CAAC2B,kBAAL,CACE9B,UADF;AAEE;AAA8BD,iBAFhC;;AAIAI,WAAI,CAACC,MAAL,GAAcH,SAAd;AACD,KAND,MAMO;AACLE,WAAI,CAAC4B,cAAL;AACE;AACEhC,iBAFJ,EAIEC,UAJF;AAMD;;;AACF;AAED;;;;;;;AAKAgC,mDAAcX,OAAd,EAAqB;AACnB;AACA,QAAIE,IAAJ;;AACA,QAAI,CAAC,KAAKP,eAAV,EAA2B;AACzB,WAAKA,eAAL,GAAuBK,OAAO,CAACM,kBAAR,GAA6BM,KAA7B,EAAvB;AACAV,UAAI,GAAGF,OAAO,CAACG,OAAR,GAAkBS,KAAlB,EAAP;AACA,WAAK7B,MAAL,CAAYwB,IAAZ;AACD,KAJD,MAIO;AACL,UAAMN,MAAM,GAAG,KAAKN,eAAL,CAAqBI,MAApC;AACAjC,YAAM,CAAC,KAAK6B,eAAN,EAAuBK,OAAO,CAACM,kBAAR,EAAvB,CAAN;AACAJ,UAAI,GAAGF,OAAO,CAACG,OAAR,GAAkBS,KAAlB,EAAP;;AACA,WAAK,IAAIf,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGI,IAAI,CAACH,MAA1B,EAAkCF,CAAC,GAAGC,EAAtC,EAA0C,EAAED,CAA5C,EAA+C;AAC7CK,YAAI,CAACL,CAAD,CAAJ,IAAWI,MAAX;AACD;AACF;;AACD,SAAKlB,MAAL,CAAYwB,IAAZ,CAAiBL,IAAjB;AACA,SAAKW,OAAL;AACD,GAjBD;AAmBA;;;;;;;AAKAF;AACE,QAAMG,GAAG,GAAG,KAAK/B,MAAL,CAAYgB,MAAxB;AACA,QAAMgB,QAAQ,GAAG,IAAIzB,KAAJ,CAAUwB,GAAV,CAAjB;;AACA,SAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiB,GAApB,EAAyB,EAAEjB,CAA3B,EAA8B;AAC5BkB,cAAQ,CAAClB,CAAD,CAAR,GAAc,KAAKd,MAAL,CAAYc,CAAZ,EAAee,KAAf,EAAd;AACD;;AAED,QAAMI,YAAY,GAAG,IAAIL,YAAJ,CACnB,KAAKhB,eAAL,CAAqBiB,KAArB,EADmB,EAEnB,KAAKpB,MAFc,EAGnBuB,QAHmB,CAArB;AAKAC,gBAAY,CAACC,eAAb,CAA6B,IAA7B;AAEA,WAAOD,YAAP;AACD,GAfD;AAiBA;;;;;;;;;AAOAL,oDAAeO,CAAf,EAAkBC,CAAlB,EAAqBC,YAArB,EAAmCC,kBAAnC,EAAqD;AACnD,QAAIA,kBAAkB,GAAGzD,wBAAwB,CAAC,KAAK0D,SAAL,EAAD,EAAmBJ,CAAnB,EAAsBC,CAAtB,CAAjD,EAA2E;AACzE,aAAOE,kBAAP;AACD;;AACD,QAAI,KAAKlC,iBAAL,IAA0B,KAAKoC,WAAL,EAA9B,EAAkD;AAChD,WAAKrC,SAAL,GAAiBsC,IAAI,CAACC,IAAL,CACf9D,yBAAyB,CACvB,KAAKgC,eADkB,EAEvB,CAFuB,EAGvB,KAAKZ,MAHkB,EAIvB,KAAK2C,MAJkB,EAKvB,CALuB,CADV,CAAjB;AASA,WAAKvC,iBAAL,GAAyB,KAAKoC,WAAL,EAAzB;AACD;;AACD,WAAO7D,4BAA4B,CACjC,KAAKiE,0BAAL,EADiC,EAEjC,CAFiC,EAGjC,KAAK5C,MAH4B,EAIjC,KAAK2C,MAJ4B,EAKjC,KAAKxC,SAL4B,EAMjC,IANiC,EAOjCgC,CAPiC,EAQjCC,CARiC,EASjCC,YATiC,EAUjCC,kBAViC,CAAnC;AAYD,GA5BD;AA8BA;;;;;;;AAKAV,gDAAWO,CAAX,EAAcC,CAAd,EAAe;AACb,WAAO5C,sBAAsB,CAC3B,KAAKoD,0BAAL,EAD2B,EAE3B,CAF2B,EAG3B,KAAK5C,MAHsB,EAI3B,KAAK2C,MAJsB,EAK3BR,CAL2B,EAM3BC,CAN2B,CAA7B;AAQD,GATD;AAWA;;;;;;;AAKAR;AACE,WAAOtC,gBAAgB,CACrB,KAAKsD,0BAAL,EADqB,EAErB,CAFqB,EAGrB,KAAK5C,MAHgB,EAIrB,KAAK2C,MAJgB,CAAvB;AAMD,GAPD;AASA;;;;;;;;;;;;;;;AAaAf,oDAAeiB,SAAf,EAAwB;AACtB,QAAIjC,eAAJ;;AACA,QAAIiC,SAAS,KAAKpB,SAAlB,EAA6B;AAC3Bb,qBAAe,GAAG,KAAKgC,0BAAL,GAAkCf,KAAlC,EAAlB;AACAzC,4BAAsB,CACpBwB,eADoB,EAEpB,CAFoB,EAGpB,KAAKZ,MAHe,EAIpB,KAAK2C,MAJe,EAKpBE,SALoB,CAAtB;AAOD,KATD,MASO;AACLjC,qBAAe,GAAG,KAAKA,eAAvB;AACD;;AAED,WAAO3B,4BAA4B,CACjC2B,eADiC,EAEjC,CAFiC,EAGjC,KAAKZ,MAH4B,EAIjC,KAAK2C,MAJ4B,CAAnC;AAMD,GArBD;AAuBA;;;;;AAGAf;AACE,WAAO,KAAK5B,MAAZ;AACD,GAFD;AAIA;;;;;AAGA4B;AACE,QAAI,KAAK3B,2BAAL,IAAoC,KAAKuC,WAAL,EAAxC,EAA4D;AAC1D,UAAMM,WAAW,GAAGvD,kBAAkB,CACpC,KAAKqB,eAD+B,EAEpC,CAFoC,EAGpC,KAAKZ,MAH+B,EAIpC,KAAK2C,MAJ+B,CAAtC;AAMA,WAAKzC,mBAAL,GAA2BlB,6BAA6B,CACtD,KAAK4D,0BAAL,EADsD,EAEtD,CAFsD,EAGtD,KAAK5C,MAHiD,EAItD,KAAK2C,MAJiD,EAKtDG,WALsD,CAAxD;AAOA,WAAK7C,2BAAL,GAAmC,KAAKuC,WAAL,EAAnC;AACD;;AACD,WAAO,KAAKtC,mBAAZ;AACD,GAlBD;AAoBA;;;;;;;;AAMA0B;AACE,WAAO,IAAIpD,UAAJ,CACL,KAAKuE,qBAAL,GAA6BlB,KAA7B,EADK,EAELvD,cAAc,CAAC0E,GAFV,CAAP;AAID,GALD;AAOA;;;;;AAGApB;AACE,QAAI,KAAKvB,iBAAL,IAA0B,KAAKmC,WAAL,EAA9B,EAAkD;AAChD,UAAM5B,eAAe,GAAG,KAAKA,eAA7B;;AACA,UACEzB,uBAAuB,CAACyB,eAAD,EAAkB,CAAlB,EAAqB,KAAKZ,MAA1B,EAAkC,KAAK2C,MAAvC,CADzB,EAEE;AACA,aAAKrC,wBAAL,GAAgCM,eAAhC;AACD,OAJD,MAIO;AACL,aAAKN,wBAAL,GAAgCM,eAAe,CAACiB,KAAhB,EAAhC;AACA,aAAKvB,wBAAL,CAA8BU,MAA9B,GAAuC5B,sBAAsB,CAC3D,KAAKkB,wBADsD,EAE3D,CAF2D,EAG3D,KAAKN,MAHsD,EAI3D,KAAK2C,MAJsD,CAA7D;AAMD;;AACD,WAAKtC,iBAAL,GAAyB,KAAKmC,WAAL,EAAzB;AACD;;AACD,WAAO,KAAKlC,wBAAZ;AACD,GAnBD;AAqBA;;;;;;;AAKAsB,mEAA8BqB,gBAA9B,EAA8C;AAC5C,QAAMC,yBAAyB,GAAG,EAAlC;AACA,QAAMC,eAAe,GAAG,EAAxB;AACAD,6BAAyB,CAAClC,MAA1B,GAAmCvB,kBAAkB,CACnD,KAAKmB,eAD8C,EAEnD,CAFmD,EAGnD,KAAKZ,MAH8C,EAInD,KAAK2C,MAJ8C,EAKnDF,IAAI,CAACC,IAAL,CAAUO,gBAAV,CALmD,EAMnDC,yBANmD,EAOnD,CAPmD,EAQnDC,eARmD,CAArD;AAUA,WAAO,IAAIvB,YAAJ,CACLsB,yBADK,EAEL5E,cAAc,CAAC8E,EAFV,EAGLD,eAHK,CAAP;AAKD,GAlBD;AAoBA;;;;;;;;AAMAvB,gDAAWyB,KAAX,EAAgB;AACd,QAAIA,KAAK,GAAG,CAAR,IAAa,KAAKrD,MAAL,CAAYgB,MAAZ,IAAsBqC,KAAvC,EAA8C;AAC5C,aAAO,IAAP;AACD;;AACD,QAAInC,MAAJ;;AACA,QAAImC,KAAK,KAAK,CAAd,EAAiB;AACfnC,YAAM,GAAG,CAAT;AACD,KAFD,MAEO;AACL,UAAMoC,QAAQ,GAAG,KAAKtD,MAAL,CAAYqD,KAAK,GAAG,CAApB,CAAjB;AACAnC,YAAM,GAAGoC,QAAQ,CAACA,QAAQ,CAACtC,MAAT,GAAkB,CAAnB,CAAjB;AACD;;AACD,QAAMG,IAAI,GAAG,KAAKnB,MAAL,CAAYqD,KAAZ,EAAmBxB,KAAnB,EAAb;AACA,QAAM0B,GAAG,GAAGpC,IAAI,CAACA,IAAI,CAACH,MAAL,GAAc,CAAf,CAAhB;;AACA,QAAIE,MAAM,KAAK,CAAf,EAAkB;AAChB,WAAK,IAAIJ,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGI,IAAI,CAACH,MAA1B,EAAkCF,CAAC,GAAGC,EAAtC,EAA0C,EAAED,CAA5C,EAA+C;AAC7CK,YAAI,CAACL,CAAD,CAAJ,IAAWI,MAAX;AACD;AACF;;AACD,WAAO,IAAIzC,OAAJ,CACL,KAAKmC,eAAL,CAAqBiB,KAArB,CAA2BX,MAA3B,EAAmCqC,GAAnC,CADK,EAEL,KAAK9C,MAFA,EAGLU,IAHK,CAAP;AAKD,GAvBD;AAyBA;;;;;;;AAKAS;AACE,QAAMnB,MAAM,GAAG,KAAKA,MAApB;AACA,QAAMG,eAAe,GAAG,KAAKA,eAA7B;AACA,QAAMC,KAAK,GAAG,KAAKb,MAAnB;AACA,QAAMW,QAAQ,GAAG,EAAjB;AACA,QAAIO,MAAM,GAAG,CAAb;;AACA,SAAK,IAAIJ,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGF,KAAK,CAACG,MAA3B,EAAmCF,CAAC,GAAGC,EAAvC,EAA2C,EAAED,CAA7C,EAAgD;AAC9C,UAAMK,IAAI,GAAGN,KAAK,CAACC,CAAD,CAAL,CAASe,KAAT,EAAb;AACA,UAAM0B,GAAG,GAAGpC,IAAI,CAACA,IAAI,CAACH,MAAL,GAAc,CAAf,CAAhB;;AACA,UAAIE,MAAM,KAAK,CAAf,EAAkB;AAChB,aAAK,IAAIG,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGH,IAAI,CAACH,MAA1B,EAAkCK,CAAC,GAAGC,EAAtC,EAA0C,EAAED,CAA5C,EAA+C;AAC7CF,cAAI,CAACE,CAAD,CAAJ,IAAWH,MAAX;AACD;AACF;;AACD,UAAMD,OAAO,GAAG,IAAIxC,OAAJ,CACdmC,eAAe,CAACiB,KAAhB,CAAsBX,MAAtB,EAA8BqC,GAA9B,CADc,EAEd9C,MAFc,EAGdU,IAHc,CAAhB;AAKAR,cAAQ,CAACa,IAAT,CAAcP,OAAd;AACAC,YAAM,GAAGqC,GAAT;AACD;;AACD,WAAO5C,QAAP;AACD,GAvBD;AAyBA;;;;;;;AAKAiB;AACE,WAAOrD,YAAY,CAACiF,aAApB;AACD,GAFD;AAIA;;;;;;;;AAMA5B,sDAAiB6B,MAAjB,EAAuB;AACrB,WAAOvE,8BAA8B,CACnC,KAAK0D,0BAAL,EADmC,EAEnC,CAFmC,EAGnC,KAAK5C,MAH8B,EAInC,KAAK2C,MAJ8B,EAKnCc,MALmC,CAArC;AAOD,GARD;AAUA;;;;;;;;AAMA7B,oDAAejC,WAAf,EAA4BC,UAA5B,EAAsC;AACpC,SAAK8D,SAAL,CAAe9D,UAAf,EAA2BD,WAA3B,EAAwC,CAAxC;;AACA,QAAI,CAAC,KAAKiB,eAAV,EAA2B;AACzB,WAAKA,eAAL,GAAuB,EAAvB;AACD;;AACD,QAAMC,KAAK,GAAG/B,4BAA4B,CACxC,KAAK8B,eADmC,EAExC,CAFwC,EAGxCjB,WAHwC,EAIxC,KAAKgD,MAJmC,EAKxC,KAAK3C,MALmC,CAA1C;;AAOA,QAAIa,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAKJ,eAAL,CAAqBI,MAArB,GAA8B,CAA9B;AACD,KAFD,MAEO;AACL,UAAM2C,QAAQ,GAAG9C,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAAtB;AACA,WAAKJ,eAAL,CAAqBI,MAArB,GACE2C,QAAQ,CAAC3C,MAAT,KAAoB,CAApB,GAAwB,CAAxB,GAA4B2C,QAAQ,CAACA,QAAQ,CAAC3C,MAAT,GAAkB,CAAnB,CADtC;AAED;;AACD,SAAKc,OAAL;AACD,GApBD;;AAqBF;AA5bA,EAA2BpD,cAA3B;;AA8bA,eAAekD,YAAf","names":["GeometryLayout","GeometryType","MultiPoint","Polygon","SimpleGeometry","assignClosestMultiArrayPoint","multiArrayMaxSquaredDelta","closestSquaredDistanceXY","deflateMultiCoordinatesArray","extend","getInteriorPointsOfMultiArray","inflateMultiCoordinatesArray","intersectsLinearRingMultiArray","linearRingssAreOriented","orientLinearRingsArray","linearRingss","linearRingssArea","linearRingssCenter","linearRingssContainsXY","quantizeMultiArray","__extends","coordinates","opt_layout","opt_endss","_super","_this","endss_","flatInteriorPointsRevision_","flatInteriorPoints_","maxDelta_","maxDeltaRevision_","orientedRevision_","orientedFlatCoordinates_","Array","isArray","layout","getLayout","polygons","flatCoordinates","endss","i","ii","length","polygon","offset","ends","getEnds","j","jj","getFlatCoordinates","push","undefined","setFlatCoordinates","setCoordinates","MultiPolygon","slice","changed","len","newEndss","multiPolygon","applyProperties","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","stride","getOrientedFlatCoordinates","opt_right","flatCenters","getFlatInteriorPoints","XYM","squaredTolerance","simplifiedFlatCoordinates","simplifiedEndss","XY","index","prevEnds","end","MULTI_POLYGON","extent","setLayout","lastEnds"],"sourceRoot":"","sources":["../src/geom/MultiPolygon.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}