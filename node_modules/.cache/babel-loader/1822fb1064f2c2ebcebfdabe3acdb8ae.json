{"ast":null,"code":"/**\n * @module ol/reproj\n */\nimport { IMAGE_SMOOTHING_DISABLED } from './renderer/canvas/common.js';\nimport { assign } from './obj.js';\nimport { containsCoordinate, createEmpty, extend, forEachCorner, getCenter, getHeight, getTopLeft, getWidth } from './extent.js';\nimport { createCanvasContext2D } from './dom.js';\nimport { getPointResolution, transform } from './proj.js';\nimport { solveLinearSystem } from './math.js';\nvar brokenDiagonalRendering_;\n/**\n * This draws a small triangle into a canvas by setting the triangle as the clip region\n * and then drawing a (too large) rectangle\n *\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\n * @param {number} v1 The y-coordinate of the second point.\n * @param {number} u2 The x-coordinate of the third point.\n * @param {number} v2 The y-coordinate of the third point.\n */\n\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\n  ctx.beginPath();\n  ctx.moveTo(0, 0);\n  ctx.lineTo(u1, v1);\n  ctx.lineTo(u2, v2);\n  ctx.closePath();\n  ctx.save();\n  ctx.clip();\n  ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n  ctx.restore();\n}\n/**\n * Given the data from getImageData, see if the right values appear at the provided offset.\n * Returns true if either the color or transparency is off\n *\n * @param {Uint8ClampedArray} data The data returned from getImageData\n * @param {number} offset The pixel offset from the start of data.\n * @return {boolean} true if the diagonal rendering is broken\n */\n\n\nfunction verifyBrokenDiagonalRendering(data, offset) {\n  // the values ought to be close to the rgba(210, 0, 0, 0.75)\n  return Math.abs(data[offset * 4] - 210) > 2 || Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2;\n}\n/**\n * Determines if the current browser configuration can render triangular clip regions correctly.\n * This value is cached so the function is only expensive the first time called.\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\n * IE also doesn't. Chrome works, and everything seems to work on OSX and Android. This function caches the\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\n * running, but lets hope not.\n *\n * @return {boolean} true if the Diagonal Rendering is broken.\n */\n\n\nfunction isBrokenDiagonalRendering() {\n  if (brokenDiagonalRendering_ === undefined) {\n    var ctx = document.createElement('canvas').getContext('2d');\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\n    drawTestTriangle(ctx, 4, 5, 4, 0);\n    drawTestTriangle(ctx, 4, 5, 0, 5);\n    var data = ctx.getImageData(0, 0, 3, 3).data;\n    brokenDiagonalRendering_ = verifyBrokenDiagonalRendering(data, 0) || verifyBrokenDiagonalRendering(data, 4) || verifyBrokenDiagonalRendering(data, 8);\n  }\n\n  return brokenDiagonalRendering_;\n}\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\n\n\nexport function calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution) {\n  var sourceCenter = transform(targetCenter, targetProj, sourceProj); // calculate the ideal resolution of the source data\n\n  var sourceResolution = getPointResolution(targetProj, targetResolution, targetCenter);\n  var targetMetersPerUnit = targetProj.getMetersPerUnit();\n\n  if (targetMetersPerUnit !== undefined) {\n    sourceResolution *= targetMetersPerUnit;\n  }\n\n  var sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n\n  if (sourceMetersPerUnit !== undefined) {\n    sourceResolution /= sourceMetersPerUnit;\n  } // Based on the projection properties, the point resolution at the specified\n  // coordinates may be slightly different. We need to reverse-compensate this\n  // in order to achieve optimal results.\n\n\n  var sourceExtent = sourceProj.getExtent();\n\n  if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\n    var compensationFactor = getPointResolution(sourceProj, sourceResolution, sourceCenter) / sourceResolution;\n\n    if (isFinite(compensationFactor) && compensationFactor > 0) {\n      sourceResolution /= compensationFactor;\n    }\n  }\n\n  return sourceResolution;\n}\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\n\nexport function calculateSourceExtentResolution(sourceProj, targetProj, targetExtent, targetResolution) {\n  var targetCenter = getCenter(targetExtent);\n  var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);\n\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n    forEachCorner(targetExtent, function (corner) {\n      sourceResolution = calculateSourceResolution(sourceProj, targetProj, corner, targetResolution);\n      return isFinite(sourceResolution) && sourceResolution > 0;\n    });\n  }\n\n  return sourceResolution;\n}\n/**\n * @typedef {Object} ImageExtent\n * @property {import(\"./extent.js\").Extent} extent Extent.\n * @property {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n */\n\n/**\n * Renders the source data into new canvas based on the triangulation.\n *\n * @param {number} width Width of the canvas.\n * @param {number} height Height of the canvas.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} sourceResolution Source resolution.\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\n * @param {number} targetResolution Target resolution.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation Calculated triangulation.\n * @param {Array<ImageExtent>} sources Array of sources.\n * @param {number} gutter Gutter of the sources.\n * @param {boolean} [opt_renderEdges] Render reprojection edges.\n * @param {object} [opt_interpolate] Use linear interpolation when resampling.\n * @return {HTMLCanvasElement} Canvas with reprojected data.\n */\n\nexport function render(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, opt_renderEdges, opt_interpolate) {\n  var context = createCanvasContext2D(Math.round(pixelRatio * width), Math.round(pixelRatio * height));\n\n  if (!opt_interpolate) {\n    assign(context, IMAGE_SMOOTHING_DISABLED);\n  }\n\n  if (sources.length === 0) {\n    return context.canvas;\n  }\n\n  context.scale(pixelRatio, pixelRatio);\n\n  function pixelRound(value) {\n    return Math.round(value * pixelRatio) / pixelRatio;\n  }\n\n  context.globalCompositeOperation = 'lighter';\n  var sourceDataExtent = createEmpty();\n  sources.forEach(function (src, i, arr) {\n    extend(sourceDataExtent, src.extent);\n  });\n  var canvasWidthInUnits = getWidth(sourceDataExtent);\n  var canvasHeightInUnits = getHeight(sourceDataExtent);\n  var stitchContext = createCanvasContext2D(Math.round(pixelRatio * canvasWidthInUnits / sourceResolution), Math.round(pixelRatio * canvasHeightInUnits / sourceResolution));\n\n  if (!opt_interpolate) {\n    assign(stitchContext, IMAGE_SMOOTHING_DISABLED);\n  }\n\n  var stitchScale = pixelRatio / sourceResolution;\n  sources.forEach(function (src, i, arr) {\n    var xPos = src.extent[0] - sourceDataExtent[0];\n    var yPos = -(src.extent[3] - sourceDataExtent[3]);\n    var srcWidth = getWidth(src.extent);\n    var srcHeight = getHeight(src.extent); // This test should never fail -- but it does. Need to find a fix the upstream condition\n\n    if (src.image.width > 0 && src.image.height > 0) {\n      stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, xPos * stitchScale, yPos * stitchScale, srcWidth * stitchScale, srcHeight * stitchScale);\n    }\n  });\n  var targetTopLeft = getTopLeft(targetExtent);\n  triangulation.getTriangles().forEach(function (triangle, i, arr) {\n    /* Calculate affine transform (src -> dst)\n     * Resulting matrix can be used to transform coordinate\n     * from `sourceProjection` to destination pixels.\n     *\n     * To optimize number of context calls and increase numerical stability,\n     * we also do the following operations:\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\n     *\n     * Src points: xi, yi\n     * Dst points: ui, vi\n     * Affine coefficients: aij\n     *\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\n     */\n    var source = triangle.source;\n    var target = triangle.target;\n    var x0 = source[0][0],\n        y0 = source[0][1];\n    var x1 = source[1][0],\n        y1 = source[1][1];\n    var x2 = source[2][0],\n        y2 = source[2][1]; // Make sure that everything is on pixel boundaries\n\n    var u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n    var v0 = pixelRound(-(target[0][1] - targetTopLeft[1]) / targetResolution);\n    var u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n    var v1 = pixelRound(-(target[1][1] - targetTopLeft[1]) / targetResolution);\n    var u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n    var v2 = pixelRound(-(target[2][1] - targetTopLeft[1]) / targetResolution); // Shift all the source points to improve numerical stability\n    // of all the subsequent calculations. The [x0, y0] is used here.\n    // This is also used to simplify the linear system.\n\n    var sourceNumericalShiftX = x0;\n    var sourceNumericalShiftY = y0;\n    x0 = 0;\n    y0 = 0;\n    x1 -= sourceNumericalShiftX;\n    y1 -= sourceNumericalShiftY;\n    x2 -= sourceNumericalShiftX;\n    y2 -= sourceNumericalShiftY;\n    var augmentedMatrix = [[x1, y1, 0, 0, u1 - u0], [x2, y2, 0, 0, u2 - u0], [0, 0, x1, y1, v1 - v0], [0, 0, x2, y2, v2 - v0]];\n    var affineCoefs = solveLinearSystem(augmentedMatrix);\n\n    if (!affineCoefs) {\n      return;\n    }\n\n    context.save();\n    context.beginPath();\n\n    if (isBrokenDiagonalRendering() || !opt_interpolate) {\n      // Make sure that all lines are horizontal or vertical\n      context.moveTo(u1, v1); // This is the diagonal line. Do it in 4 steps\n\n      var steps = 4;\n      var ud = u0 - u1;\n      var vd = v0 - v1;\n\n      for (var step = 0; step < steps; step++) {\n        // Go horizontally\n        context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound(step * vd / (steps - 1))); // Go vertically\n\n        if (step != steps - 1) {\n          context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound((step + 1) * vd / (steps - 1)));\n        }\n      } // We are almost at u0r, v0r\n\n\n      context.lineTo(u2, v2);\n    } else {\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n    }\n\n    context.clip();\n    context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);\n    context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);\n    context.scale(sourceResolution / pixelRatio, -sourceResolution / pixelRatio);\n    context.drawImage(stitchContext.canvas, 0, 0);\n    context.restore();\n  });\n\n  if (opt_renderEdges) {\n    context.save();\n    context.globalCompositeOperation = 'source-over';\n    context.strokeStyle = 'black';\n    context.lineWidth = 1;\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\n      var target = triangle.target;\n      var u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n      var v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n      var u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n      var v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n      var u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n      var v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n      context.beginPath();\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n      context.closePath();\n      context.stroke();\n    });\n    context.restore();\n  }\n\n  return context.canvas;\n}","map":{"version":3,"mappings":"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","names":["IMAGE_SMOOTHING_DISABLED","assign","containsCoordinate","createEmpty","extend","forEachCorner","getCenter","getHeight","getTopLeft","getWidth","createCanvasContext2D","getPointResolution","transform","solveLinearSystem","brokenDiagonalRendering_","drawTestTriangle","ctx","u1","v1","u2","v2","beginPath","moveTo","lineTo","closePath","save","clip","fillRect","Math","max","restore","verifyBrokenDiagonalRendering","data","offset","abs","isBrokenDiagonalRendering","undefined","document","createElement","getContext","globalCompositeOperation","fillStyle","getImageData","calculateSourceResolution","sourceProj","targetProj","targetCenter","targetResolution","sourceCenter","sourceResolution","targetMetersPerUnit","getMetersPerUnit","sourceMetersPerUnit","sourceExtent","getExtent","compensationFactor","isFinite","calculateSourceExtentResolution","targetExtent","corner","render","width","height","pixelRatio","triangulation","sources","gutter","opt_renderEdges","opt_interpolate","context","round","length","canvas","scale","pixelRound","value","sourceDataExtent","forEach","src","i","arr","extent","canvasWidthInUnits","canvasHeightInUnits","stitchContext","stitchScale","xPos","yPos","srcWidth","srcHeight","image","drawImage","targetTopLeft","getTriangles","triangle","source","target","x0","y0","x1","y1","x2","y2","u0","v0","sourceNumericalShiftX","sourceNumericalShiftY","augmentedMatrix","affineCoefs","steps","ud","vd","step","translate","strokeStyle","lineWidth","stroke"],"sourceRoot":"","sources":["src/reproj.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}