{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\n * @module ol/tilegrid/WMTS\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport TileGrid from './TileGrid.js';\nimport { find } from '../array.js';\nimport { get as getProjection } from '../proj.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles\n * outside this extent will be requested by {@link module:ol/source/Tile~TileSource} sources.\n * When no `origin` or `origins` are configured, the `origin` will be set to the\n * top-left corner of the extent.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e.\n * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left\n * to right and downwards. If not specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins,\n * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If\n * given, the array length should match the length of the `resolutions` array, i.e.\n * each resolution can have a different origin. Tile coordinates increase left to\n * right and downwards. If not specified, `extent` or `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each\n * resolution needs to match the zoom level. This means that even if a `minZoom`\n * is configured, the resolutions array will have a length of `maxZoom + 1`\n * @property {!Array<string>} matrixIds matrix IDs. The length of this array needs\n * to match the length of the `resolutions` array.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. The values here are the `TileMatrixWidth` and\n * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent for\n * which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * @property {Array<import(\"../size.js\").Size>} [tileSizes] Tile sizes. The length of\n * this array needs to match the length of the `resolutions` array.\n */\n\n/**\n * @classdesc\n * Set the grid pattern for sources accessing WMTS tiled-image servers.\n * @api\n */\n\nvar WMTSTileGrid =\n/** @class */\nfunction (_super) {\n  __extends(WMTSTileGrid, _super);\n  /**\n   * @param {Options} options WMTS options.\n   */\n\n\n  function WMTSTileGrid(options) {\n    var _this = _super.call(this, {\n      extent: options.extent,\n      origin: options.origin,\n      origins: options.origins,\n      resolutions: options.resolutions,\n      tileSize: options.tileSize,\n      tileSizes: options.tileSizes,\n      sizes: options.sizes\n    }) || this;\n    /**\n     * @private\n     * @type {!Array<string>}\n     */\n\n\n    _this.matrixIds_ = options.matrixIds;\n    return _this;\n  }\n  /**\n   * @param {number} z Z.\n   * @return {string} MatrixId..\n   */\n\n\n  WMTSTileGrid.prototype.getMatrixId = function (z) {\n    return this.matrixIds_[z];\n  };\n  /**\n   * Get the list of matrix identifiers.\n   * @return {Array<string>} MatrixIds.\n   * @api\n   */\n\n\n  WMTSTileGrid.prototype.getMatrixIds = function () {\n    return this.matrixIds_;\n  };\n\n  return WMTSTileGrid;\n}(TileGrid);\n\nexport default WMTSTileGrid;\n/**\n * Create a tile grid from a WMTS capabilities matrix set and an\n * optional TileMatrixSetLimits.\n * @param {Object} matrixSet An object representing a matrixSet in the\n *     capabilities document.\n * @param {import(\"../extent.js\").Extent} [opt_extent] An optional extent to restrict the tile\n *     ranges the server provides.\n * @param {Array<Object>} [opt_matrixLimits] An optional object representing\n *     the available matrices for tileGrid.\n * @return {WMTSTileGrid} WMTS tileGrid instance.\n * @api\n */\n\nexport function createFromCapabilitiesMatrixSet(matrixSet, opt_extent, opt_matrixLimits) {\n  /** @type {!Array<number>} */\n  var resolutions = [];\n  /** @type {!Array<string>} */\n\n  var matrixIds = [];\n  /** @type {!Array<import(\"../coordinate.js\").Coordinate>} */\n\n  var origins = [];\n  /** @type {!Array<import(\"../size.js\").Size>} */\n\n  var tileSizes = [];\n  /** @type {!Array<import(\"../size.js\").Size>} */\n\n  var sizes = [];\n  var matrixLimits = opt_matrixLimits !== undefined ? opt_matrixLimits : [];\n  var supportedCRSPropName = 'SupportedCRS';\n  var matrixIdsPropName = 'TileMatrix';\n  var identifierPropName = 'Identifier';\n  var scaleDenominatorPropName = 'ScaleDenominator';\n  var topLeftCornerPropName = 'TopLeftCorner';\n  var tileWidthPropName = 'TileWidth';\n  var tileHeightPropName = 'TileHeight';\n  var code = matrixSet[supportedCRSPropName];\n  var projection = getProjection(code);\n  var metersPerUnit = projection.getMetersPerUnit(); // swap origin x and y coordinates if axis orientation is lat/long\n\n  var switchOriginXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n  matrixSet[matrixIdsPropName].sort(function (a, b) {\n    return b[scaleDenominatorPropName] - a[scaleDenominatorPropName];\n  });\n  matrixSet[matrixIdsPropName].forEach(function (elt) {\n    var matrixAvailable; // use of matrixLimits to filter TileMatrices from GetCapabilities\n    // TileMatrixSet from unavailable matrix levels.\n\n    if (matrixLimits.length > 0) {\n      matrixAvailable = find(matrixLimits, function (elt_ml) {\n        if (elt[identifierPropName] == elt_ml[matrixIdsPropName]) {\n          return true;\n        } // Fallback for tileMatrix identifiers that don't get prefixed\n        // by their tileMatrixSet identifiers.\n\n\n        if (elt[identifierPropName].indexOf(':') === -1) {\n          return matrixSet[identifierPropName] + ':' + elt[identifierPropName] === elt_ml[matrixIdsPropName];\n        }\n\n        return false;\n      });\n    } else {\n      matrixAvailable = true;\n    }\n\n    if (matrixAvailable) {\n      matrixIds.push(elt[identifierPropName]);\n      var resolution = elt[scaleDenominatorPropName] * 0.28e-3 / metersPerUnit;\n      var tileWidth = elt[tileWidthPropName];\n      var tileHeight = elt[tileHeightPropName];\n\n      if (switchOriginXY) {\n        origins.push([elt[topLeftCornerPropName][1], elt[topLeftCornerPropName][0]]);\n      } else {\n        origins.push(elt[topLeftCornerPropName]);\n      }\n\n      resolutions.push(resolution);\n      tileSizes.push(tileWidth == tileHeight ? tileWidth : [tileWidth, tileHeight]);\n      sizes.push([elt['MatrixWidth'], elt['MatrixHeight']]);\n    }\n  });\n  return new WMTSTileGrid({\n    extent: opt_extent,\n    origins: origins,\n    resolutions: resolutions,\n    matrixIds: matrixIds,\n    tileSizes: tileSizes,\n    sizes: sizes\n  });\n}","map":{"version":3,"mappings":"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","names":["TileGrid","find","get","getProjection","__extends","options","_super","extent","origin","origins","resolutions","tileSize","tileSizes","sizes","_this","matrixIds_","matrixIds","WMTSTileGrid","z","createFromCapabilitiesMatrixSet","matrixSet","opt_extent","opt_matrixLimits","matrixLimits","undefined","supportedCRSPropName","matrixIdsPropName","identifierPropName","scaleDenominatorPropName","topLeftCornerPropName","tileWidthPropName","tileHeightPropName","code","projection","metersPerUnit","getMetersPerUnit","switchOriginXY","getAxisOrientation","substr","sort","a","b","forEach","elt","matrixAvailable","length","elt_ml","indexOf","push","resolution","tileWidth","tileHeight"],"sourceRoot":"","sources":["../src/tilegrid/WMTS.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}