{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/View\n */\n\n\nimport BaseObject from './Object.js';\nimport GeometryType from './geom/GeometryType.js';\nimport Units from './proj/Units.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport { DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, createProjection, disableCoordinateWarning, fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent } from './proj.js';\nimport { VOID } from './functions.js';\nimport { add as addCoordinate, equals as coordinatesEqual, equals, rotate as rotateCoordinate } from './coordinate.js';\nimport { assert } from './asserts.js';\nimport { assign } from './obj.js';\nimport { none as centerNone, createExtent } from './centerconstraint.js';\nimport { clamp, modulo } from './math.js';\nimport { createMinMaxResolution, createSnapToPower, createSnapToResolutions } from './resolutionconstraint.js';\nimport { createSnapToN, createSnapToZero, disable, none as rotationNone } from './rotationconstraint.js';\nimport { easeOut, inAndOut } from './easing.js';\nimport { getCenter, getForViewAndSize, getHeight, getWidth, isEmpty } from './extent.js';\nimport { linearFindNearest } from './array.js';\nimport { fromExtent as polygonFromExtent } from './geom/Polygon.js';\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\n * @property {number} [sourceResolution] Source resolution.\n * @property {number} [targetResolution] Target resolution.\n * @property {number} [sourceRotation] Source rotation.\n * @property {number} [targetRotation] Target rotation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\n * @property {number} start Start.\n * @property {number} duration Duration.\n * @property {boolean} complete Complete.\n * @property {function(number):number} easing Easing.\n * @property {function(boolean):void} callback Callback.\n */\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center Center.\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\n */\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions that determine the\n * zoom levels if specified. The index in the array corresponds to the zoom level,\n * therefore the resolution values have to be in descending order. It also constrains\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\n * If the map viewport is partially covered with other content (overlays) along\n * its edges, this setting allows to shift the center of the viewport away from\n * that content. The order of the values is top, right, bottom, left.\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center Center.\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\n * @property {number} resolution Resolution.\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\n * @property {number} [nextResolution] The next resolution during an animation series.\n * @property {number} [nextRotation] The next rotation during an animation series.\n * @property {number} rotation Rotation.\n * @property {number} zoom Zoom.\n */\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\n\nvar DEFAULT_MIN_ZOOM = 0;\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\n */\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Web Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `opt_anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */\n\nvar View =\n/** @class */\nfunction (_super) {\n  __extends(View, _super);\n  /**\n   * @param {ViewOptions} [opt_options] View options.\n   */\n\n\n  function View(opt_options) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {ViewOnSignature<void>}\n     */\n\n    _this.un;\n    var options = assign({}, opt_options);\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    _this.hints_ = [0, 0];\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n\n    _this.animations_ = [];\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.updateAnimationKey_;\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n\n    _this.projection_ = createProjection(options.projection, 'EPSG:3857');\n    /**\n     * @private\n     * @type {import(\"./size.js\").Size}\n     */\n\n    _this.viewportSize_ = [100, 100];\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n\n    _this.targetCenter_ = null;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.targetResolution_;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.targetRotation_;\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */\n\n    _this.nextCenter_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.nextResolution_;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.nextRotation_;\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n\n    _this.cancelAnchor_ = undefined;\n\n    if (options.center) {\n      options.center = fromUserCoordinate(options.center, _this.projection_);\n    }\n\n    if (options.extent) {\n      options.extent = fromUserExtent(options.extent, _this.projection_);\n    }\n\n    if (options.projection) {\n      disableCoordinateWarning();\n    }\n\n    _this.applyOptions_(options);\n\n    return _this;\n  }\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n\n\n  View.prototype.applyOptions_ = function (options) {\n    var properties = assign({}, options);\n\n    for (var key in ViewProperty) {\n      delete properties[key];\n    }\n\n    this.setProperties(properties, true);\n    var resolutionConstraintInfo = createResolutionConstraint(options);\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n\n    this.resolutions_ = options.resolutions;\n    /**\n     * @type {Array<number>|undefined}\n     * @private\n     */\n\n    this.padding_ = options.padding;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n    var centerConstraint = createCenterConstraint(options);\n    var resolutionConstraint = resolutionConstraintInfo.constraint;\n    var rotationConstraint = createRotationConstraint(options);\n    /**\n     * @private\n     * @type {Constraints}\n     */\n\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint\n    };\n    this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n    this.setCenterInternal(options.center !== undefined ? options.center : null);\n\n    if (options.resolution !== undefined) {\n      this.setResolution(options.resolution);\n    } else if (options.zoom !== undefined) {\n      this.setZoom(options.zoom);\n    }\n  };\n\n  Object.defineProperty(View.prototype, \"padding\", {\n    /**\n     * Padding (in css pixels).\n     * If the map viewport is partially covered with other content (overlays) along\n     * its edges, this setting allows to shift the center of the viewport away from that\n     * content. The order of the values in the array is top, right, bottom, left.\n     * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\n     * @type {Array<number>|undefined}\n     * @api\n     */\n    get: function () {\n      return this.padding_;\n    },\n    set: function (padding) {\n      var oldPadding = this.padding_;\n      this.padding_ = padding;\n      var center = this.getCenter();\n\n      if (center) {\n        var newPadding = padding || [0, 0, 0, 0];\n        oldPadding = oldPadding || [0, 0, 0, 0];\n        var resolution = this.getResolution();\n        var offsetX = resolution / 2 * (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\n        var offsetY = resolution / 2 * (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\n        this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n\n  View.prototype.getUpdatedOptions_ = function (newOptions) {\n    var options = this.getProperties(); // preserve resolution (or zoom)\n\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    } // preserve center\n\n\n    options.center = this.getCenterInternal(); // preserve rotation\n\n    options.rotation = this.getRotation();\n    return assign({}, options, newOptions);\n  };\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n\n\n  View.prototype.animate = function (var_args) {\n    if (this.isDef() && !this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n\n    var args = new Array(arguments.length);\n\n    for (var i = 0; i < args.length; ++i) {\n      var options = arguments[i];\n\n      if (options.center) {\n        options = assign({}, options);\n        options.center = fromUserCoordinate(options.center, this.getProjection());\n      }\n\n      if (options.anchor) {\n        options = assign({}, options);\n        options.anchor = fromUserCoordinate(options.anchor, this.getProjection());\n      }\n\n      args[i] = options;\n    }\n\n    this.animateInternal.apply(this, args);\n  };\n  /**\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n   */\n\n\n  View.prototype.animateInternal = function (var_args) {\n    var animationCount = arguments.length;\n    var callback;\n\n    if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n\n    var i = 0;\n\n    for (; i < animationCount && !this.isDef(); ++i) {\n      // if view properties are not yet set, shortcut to the final state\n      var state = arguments[i];\n\n      if (state.center) {\n        this.setCenterInternal(state.center);\n      }\n\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      } else if (state.resolution) {\n        this.setResolution(state.resolution);\n      }\n\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n    }\n\n    if (i === animationCount) {\n      if (callback) {\n        animationCallback(callback, true);\n      }\n\n      return;\n    }\n\n    var start = Date.now();\n    var center = this.targetCenter_.slice();\n    var resolution = this.targetResolution_;\n    var rotation = this.targetRotation_;\n    var series = [];\n\n    for (; i < animationCount; ++i) {\n      var options =\n      /** @type {AnimationOptions} */\n      arguments[i];\n      var animation = {\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut,\n        callback: callback\n      };\n\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center.slice();\n        center = animation.targetCenter;\n      }\n\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.getResolutionForZoom(options.zoom);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        var delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      } // check if animation is a no-op\n\n\n      if (isNoopAnimation(animation)) {\n        animation.complete = true; // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n\n      series.push(animation);\n    }\n\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  };\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n\n\n  View.prototype.getAnimating = function () {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  };\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n\n\n  View.prototype.getInteracting = function () {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  };\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n\n\n  View.prototype.cancelAnimations = function () {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    var anchor;\n\n    for (var i = 0, ii = this.animations_.length; i < ii; ++i) {\n      var series = this.animations_[i];\n\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n\n      if (!anchor) {\n        for (var j = 0, jj = series.length; j < jj; ++j) {\n          var animation = series[j];\n\n          if (!animation.complete) {\n            anchor = animation.anchor;\n            break;\n          }\n        }\n      }\n    }\n\n    this.animations_.length = 0;\n    this.cancelAnchor_ = anchor;\n    this.nextCenter_ = null;\n    this.nextResolution_ = NaN;\n    this.nextRotation_ = NaN;\n  };\n  /**\n   * Update all animations.\n   */\n\n\n  View.prototype.updateAnimations_ = function () {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n\n    if (!this.getAnimating()) {\n      return;\n    }\n\n    var now = Date.now();\n    var more = false;\n\n    for (var i = this.animations_.length - 1; i >= 0; --i) {\n      var series = this.animations_[i];\n      var seriesComplete = true;\n\n      for (var j = 0, jj = series.length; j < jj; ++j) {\n        var animation = series[j];\n\n        if (animation.complete) {\n          continue;\n        }\n\n        var elapsed = now - animation.start;\n        var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n\n        var progress = animation.easing(fraction);\n\n        if (animation.sourceCenter) {\n          var x0 = animation.sourceCenter[0];\n          var y0 = animation.sourceCenter[1];\n          var x1 = animation.targetCenter[0];\n          var y1 = animation.targetCenter[1];\n          this.nextCenter_ = animation.targetCenter;\n          var x = x0 + progress * (x1 - x0);\n          var y = y0 + progress * (y1 - y0);\n          this.targetCenter_ = [x, y];\n        }\n\n        if (animation.sourceResolution && animation.targetResolution) {\n          var resolution = progress === 1 ? animation.targetResolution : animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n\n          if (animation.anchor) {\n            var size = this.getViewportSize_(this.getRotation());\n            var constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);\n            this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);\n          }\n\n          this.nextResolution_ = animation.targetResolution;\n          this.targetResolution_ = resolution;\n          this.applyTargetState_(true);\n        }\n\n        if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n          var rotation = progress === 1 ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI : animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n\n          if (animation.anchor) {\n            var constrainedRotation = this.constraints_.rotation(rotation, true);\n            this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);\n          }\n\n          this.nextRotation_ = animation.targetRotation;\n          this.targetRotation_ = rotation;\n        }\n\n        this.applyTargetState_(true);\n        more = true;\n\n        if (!animation.complete) {\n          break;\n        }\n      }\n\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        this.nextCenter_ = null;\n        this.nextResolution_ = NaN;\n        this.nextRotation_ = NaN;\n        var callback = series[0].callback;\n\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    } // prune completed series\n\n\n    this.animations_ = this.animations_.filter(Boolean);\n\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));\n    }\n  };\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n\n\n  View.prototype.calculateCenterRotate = function (rotation, anchor) {\n    var center;\n    var currentCenter = this.getCenterInternal();\n\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n\n    return center;\n  };\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n\n\n  View.prototype.calculateCenterZoom = function (resolution, anchor) {\n    var center;\n    var currentCenter = this.getCenterInternal();\n    var currentResolution = this.getResolution();\n\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      var x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n      var y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n      center = [x, y];\n    }\n\n    return center;\n  };\n  /**\n   * Returns the current viewport size.\n   * @private\n   * @param {number} [opt_rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n\n\n  View.prototype.getViewportSize_ = function (opt_rotation) {\n    var size = this.viewportSize_;\n\n    if (opt_rotation) {\n      var w = size[0];\n      var h = size[1];\n      return [Math.abs(w * Math.cos(opt_rotation)) + Math.abs(h * Math.sin(opt_rotation)), Math.abs(w * Math.sin(opt_rotation)) + Math.abs(h * Math.cos(opt_rotation))];\n    } else {\n      return size;\n    }\n  };\n  /**\n   * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n   * to avoid performance hit and layout reflow.\n   * This should be done on map size change.\n   * Note: the constraints are not resolved during an animation to avoid stopping it\n   * @param {import(\"./size.js\").Size} [opt_size] Viewport size; if undefined, [100, 100] is assumed\n   */\n\n\n  View.prototype.setViewportSize = function (opt_size) {\n    this.viewportSize_ = Array.isArray(opt_size) ? opt_size.slice() : [100, 100];\n\n    if (!this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n  };\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.getCenter = function () {\n    var center = this.getCenterInternal();\n\n    if (!center) {\n      return center;\n    }\n\n    return toUserCoordinate(center, this.getProjection());\n  };\n  /**\n   * Get the view center without transforming to user projection.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   */\n\n\n  View.prototype.getCenterInternal = function () {\n    return (\n      /** @type {import(\"./coordinate.js\").Coordinate|undefined} */\n      this.get(ViewProperty.CENTER)\n    );\n  };\n  /**\n   * @return {Constraints} Constraints.\n   */\n\n\n  View.prototype.getConstraints = function () {\n    return this.constraints_;\n  };\n  /**\n   * @return {boolean} Resolution constraint is set\n   */\n\n\n  View.prototype.getConstrainResolution = function () {\n    return this.get('constrainResolution');\n  };\n  /**\n   * @param {Array<number>} [opt_hints] Destination array.\n   * @return {Array<number>} Hint.\n   */\n\n\n  View.prototype.getHints = function (opt_hints) {\n    if (opt_hints !== undefined) {\n      opt_hints[0] = this.hints_[0];\n      opt_hints[1] = this.hints_[1];\n      return opt_hints;\n    } else {\n      return this.hints_.slice();\n    }\n  };\n  /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size} [opt_size] Box pixel size. If not provided, the size\n   * of the map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  View.prototype.calculateExtent = function (opt_size) {\n    var extent = this.calculateExtentInternal(opt_size);\n    return toUserExtent(extent, this.getProjection());\n  };\n  /**\n   * @param {import(\"./size.js\").Size} [opt_size] Box pixel size. If not provided,\n   * the map's last known viewport size will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n\n\n  View.prototype.calculateExtentInternal = function (opt_size) {\n    var size = opt_size || this.getViewportSizeMinusPadding_();\n    var center =\n    /** @type {!import(\"./coordinate.js\").Coordinate} */\n    this.getCenterInternal();\n    assert(center, 1); // The view center is not defined\n\n    var resolution =\n    /** @type {!number} */\n    this.getResolution();\n    assert(resolution !== undefined, 2); // The view resolution is not defined\n\n    var rotation =\n    /** @type {!number} */\n    this.getRotation();\n    assert(rotation !== undefined, 3); // The view rotation is not defined\n\n    return getForViewAndSize(center, resolution, rotation, size);\n  };\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n\n\n  View.prototype.getMaxResolution = function () {\n    return this.maxResolution_;\n  };\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n\n\n  View.prototype.getMinResolution = function () {\n    return this.minResolution_;\n  };\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n\n\n  View.prototype.getMaxZoom = function () {\n    return (\n      /** @type {number} */\n      this.getZoomForResolution(this.minResolution_)\n    );\n  };\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n\n\n  View.prototype.setMaxZoom = function (zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      maxZoom: zoom\n    }));\n  };\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n\n\n  View.prototype.getMinZoom = function () {\n    return (\n      /** @type {number} */\n      this.getZoomForResolution(this.maxResolution_)\n    );\n  };\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n\n\n  View.prototype.setMinZoom = function (zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      minZoom: zoom\n    }));\n  };\n  /**\n   * Set whether the view should allow intermediary zoom levels.\n   * @param {boolean} enabled Whether the resolution is constrained.\n   * @api\n   */\n\n\n  View.prototype.setConstrainResolution = function (enabled) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      constrainResolution: enabled\n    }));\n  };\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n\n\n  View.prototype.getProjection = function () {\n    return this.projection_;\n  };\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.getResolution = function () {\n    return (\n      /** @type {number|undefined} */\n      this.get(ViewProperty.RESOLUTION)\n    );\n  };\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n\n\n  View.prototype.getResolutions = function () {\n    return this.resolutions_;\n  };\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [opt_size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n\n\n  View.prototype.getResolutionForExtent = function (extent, opt_size) {\n    return this.getResolutionForExtentInternal(fromUserExtent(extent, this.getProjection()), opt_size);\n  };\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [opt_size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   */\n\n\n  View.prototype.getResolutionForExtentInternal = function (extent, opt_size) {\n    var size = opt_size || this.getViewportSizeMinusPadding_();\n    var xResolution = getWidth(extent) / size[0];\n    var yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  };\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number} [opt_power] Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n\n\n  View.prototype.getResolutionForValueFunction = function (opt_power) {\n    var power = opt_power || 2;\n    var maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    var minResolution = this.minResolution_;\n    var max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function (value) {\n        var resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      }\n    );\n  };\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.getRotation = function () {\n    return (\n      /** @type {number} */\n      this.get(ViewProperty.ROTATION)\n    );\n  };\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number} [opt_power] Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n\n\n  View.prototype.getValueForResolutionFunction = function (opt_power) {\n    var logPower = Math.log(opt_power || 2);\n    var maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    var minResolution = this.minResolution_;\n    var max = Math.log(maxResolution / minResolution) / logPower;\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function (resolution) {\n        var value = Math.log(maxResolution / resolution) / logPower / max;\n        return value;\n      }\n    );\n  };\n  /**\n   * Returns the size of the viewport minus padding.\n   * @private\n   * @param {number} [opt_rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\n   */\n\n\n  View.prototype.getViewportSizeMinusPadding_ = function (opt_rotation) {\n    var size = this.getViewportSize_(opt_rotation);\n    var padding = this.padding_;\n\n    if (padding) {\n      size = [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]];\n    }\n\n    return size;\n  };\n  /**\n   * @return {State} View state.\n   */\n\n\n  View.prototype.getState = function () {\n    var projection = this.getProjection();\n    var resolution = this.getResolution();\n    var rotation = this.getRotation();\n    var center =\n    /** @type {import(\"./coordinate.js\").Coordinate} */\n    this.getCenterInternal();\n    var padding = this.padding_;\n\n    if (padding) {\n      var reducedSize = this.getViewportSizeMinusPadding_();\n      center = calculateCenterOn(center, this.getViewportSize_(), [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]], resolution, rotation);\n    }\n\n    return {\n      center: center.slice(0),\n      projection: projection !== undefined ? projection : null,\n      resolution: resolution,\n      nextCenter: this.nextCenter_,\n      nextResolution: this.nextResolution_,\n      nextRotation: this.nextRotation_,\n      rotation: rotation,\n      zoom: this.getZoom()\n    };\n  };\n  /**\n   * Get the current zoom level. This method may return non-integer zoom levels\n   * if the view does not constrain the resolution, or if an interaction or\n   * animation is underway.\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n\n\n  View.prototype.getZoom = function () {\n    var zoom;\n    var resolution = this.getResolution();\n\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n\n    return zoom;\n  };\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n\n\n  View.prototype.getZoomForResolution = function (resolution) {\n    var offset = this.minZoom_ || 0;\n    var max, zoomFactor;\n\n    if (this.resolutions_) {\n      var nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  };\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n\n\n  View.prototype.getResolutionForZoom = function (zoom) {\n    if (this.resolutions_) {\n      if (this.resolutions_.length <= 1) {\n        return 0;\n      }\n\n      var baseLevel = clamp(Math.floor(zoom), 0, this.resolutions_.length - 2);\n      var zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n      return this.resolutions_[baseLevel] / Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1));\n    } else {\n      return this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_);\n    }\n  };\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions} [opt_options] Options.\n   * @api\n   */\n\n\n  View.prototype.fit = function (geometryOrExtent, opt_options) {\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    var geometry;\n    assert(Array.isArray(geometryOrExtent) || typeof\n    /** @type {?} */\n    geometryOrExtent.getSimplifiedGeometry === 'function', 24); // Invalid extent or geometry provided as `geometry`\n\n    if (Array.isArray(geometryOrExtent)) {\n      assert(!isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`\n\n      var extent = fromUserExtent(geometryOrExtent, this.getProjection());\n      geometry = polygonFromExtent(extent);\n    } else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {\n      var extent = fromUserExtent(geometryOrExtent.getExtent(), this.getProjection());\n      geometry = polygonFromExtent(extent);\n      geometry.rotate(this.getRotation(), getCenter(extent));\n    } else {\n      var userProjection = getUserProjection();\n\n      if (userProjection) {\n        geometry =\n        /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n        geometryOrExtent.clone().transform(userProjection, this.getProjection());\n      } else {\n        geometry = geometryOrExtent;\n      }\n    }\n\n    this.fitInternal(geometry, opt_options);\n  };\n  /**\n   * Calculate rotated extent\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\n   */\n\n\n  View.prototype.rotatedExtentForGeometry = function (geometry) {\n    var rotation = this.getRotation();\n    var cosAngle = Math.cos(rotation);\n    var sinAngle = Math.sin(-rotation);\n    var coords = geometry.getFlatCoordinates();\n    var stride = geometry.getStride();\n    var minRotX = +Infinity;\n    var minRotY = +Infinity;\n    var maxRotX = -Infinity;\n    var maxRotY = -Infinity;\n\n    for (var i = 0, ii = coords.length; i < ii; i += stride) {\n      var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n\n    return [minRotX, minRotY, maxRotX, maxRotY];\n  };\n  /**\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @param {FitOptions} [opt_options] Options.\n   */\n\n\n  View.prototype.fitInternal = function (geometry, opt_options) {\n    var options = opt_options || {};\n    var size = options.size;\n\n    if (!size) {\n      size = this.getViewportSizeMinusPadding_();\n    }\n\n    var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    var nearest = options.nearest !== undefined ? options.nearest : false;\n    var minResolution;\n\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.getResolutionForZoom(options.maxZoom);\n    } else {\n      minResolution = 0;\n    }\n\n    var rotatedExtent = this.rotatedExtentForGeometry(geometry); // calculate resolution\n\n    var resolution = this.getResolutionForExtentInternal(rotatedExtent, [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);\n    resolution = isNaN(resolution) ? minResolution : Math.max(resolution, minResolution);\n    resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1); // calculate center\n\n    var rotation = this.getRotation();\n    var sinAngle = Math.sin(rotation);\n    var cosAngle = Math.cos(rotation);\n    var centerRot = getCenter(rotatedExtent);\n    centerRot[0] += (padding[1] - padding[3]) / 2 * resolution;\n    centerRot[1] += (padding[0] - padding[2]) / 2 * resolution;\n    var centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\n    var centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\n    var center = this.getConstrainedCenter([centerX, centerY], resolution);\n    var callback = options.callback ? options.callback : VOID;\n\n    if (options.duration !== undefined) {\n      this.animateInternal({\n        resolution: resolution,\n        center: center,\n        duration: options.duration,\n        easing: options.easing\n      }, callback);\n    } else {\n      this.targetResolution_ = resolution;\n      this.targetCenter_ = center;\n      this.applyTargetState_(false, true);\n      animationCallback(callback, true);\n    }\n  };\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n\n\n  View.prototype.centerOn = function (coordinate, size, position) {\n    this.centerOnInternal(fromUserCoordinate(coordinate, this.getProjection()), size, position);\n  };\n  /**\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   */\n\n\n  View.prototype.centerOnInternal = function (coordinate, size, position) {\n    this.setCenterInternal(calculateCenterOn(coordinate, size, position, this.getResolution(), this.getRotation()));\n  };\n  /**\n   * Calculates the shift between map and viewport center.\n   * @param {import(\"./coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {import(\"./size.js\").Size} size Size.\n   * @return {Array<number>|undefined} Center shift.\n   */\n\n\n  View.prototype.calculateCenterShift = function (center, resolution, rotation, size) {\n    var centerShift;\n    var padding = this.padding_;\n\n    if (padding && center) {\n      var reducedSize = this.getViewportSizeMinusPadding_(-rotation);\n      var shiftedCenter = calculateCenterOn(center, size, [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]], resolution, rotation);\n      centerShift = [center[0] - shiftedCenter[0], center[1] - shiftedCenter[1]];\n    }\n\n    return centerShift;\n  };\n  /**\n   * @return {boolean} Is defined.\n   */\n\n\n  View.prototype.isDef = function () {\n    return !!this.getCenterInternal() && this.getResolution() !== undefined;\n  };\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   * @api\n   */\n\n\n  View.prototype.adjustCenter = function (deltaCoordinates) {\n    var center = toUserCoordinate(this.targetCenter_, this.getProjection());\n    this.setCenter([center[0] + deltaCoordinates[0], center[1] + deltaCoordinates[1]]);\n  };\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   */\n\n\n  View.prototype.adjustCenterInternal = function (deltaCoordinates) {\n    var center = this.targetCenter_;\n    this.setCenterInternal([center[0] + deltaCoordinates[0], center[1] + deltaCoordinates[1]]);\n  };\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   * @api\n   */\n\n\n  View.prototype.adjustResolution = function (ratio, opt_anchor) {\n    var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());\n    this.adjustResolutionInternal(ratio, anchor);\n  };\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   */\n\n\n  View.prototype.adjustResolutionInternal = function (ratio, opt_anchor) {\n    var isMoving = this.getAnimating() || this.getInteracting();\n    var size = this.getViewportSize_(this.getRotation());\n    var newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);\n\n    if (opt_anchor) {\n      this.targetCenter_ = this.calculateCenterZoom(newResolution, opt_anchor);\n    }\n\n    this.targetResolution_ *= ratio;\n    this.applyTargetState_();\n  };\n  /**\n   * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom level.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   * @api\n   */\n\n\n  View.prototype.adjustZoom = function (delta, opt_anchor) {\n    this.adjustResolution(Math.pow(this.zoomFactor_, -delta), opt_anchor);\n  };\n  /**\n   * Adds a value to the view rotation, optionally using an anchor. Any rotation\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The rotation center.\n   * @api\n   */\n\n\n  View.prototype.adjustRotation = function (delta, opt_anchor) {\n    if (opt_anchor) {\n      opt_anchor = fromUserCoordinate(opt_anchor, this.getProjection());\n    }\n\n    this.adjustRotationInternal(delta, opt_anchor);\n  };\n  /**\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The rotation center.\n   */\n\n\n  View.prototype.adjustRotationInternal = function (delta, opt_anchor) {\n    var isMoving = this.getAnimating() || this.getInteracting();\n    var newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);\n\n    if (opt_anchor) {\n      this.targetCenter_ = this.calculateCenterRotate(newRotation, opt_anchor);\n    }\n\n    this.targetRotation_ += delta;\n    this.applyTargetState_();\n  };\n  /**\n   * Set the center of the current view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.setCenter = function (center) {\n    this.setCenterInternal(center ? fromUserCoordinate(center, this.getProjection()) : center);\n  };\n  /**\n   * Set the center using the view projection (not the user projection).\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   */\n\n\n  View.prototype.setCenterInternal = function (center) {\n    this.targetCenter_ = center;\n    this.applyTargetState_();\n  };\n  /**\n   * @param {import(\"./ViewHint.js\").default} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n\n\n  View.prototype.setHint = function (hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  };\n  /**\n   * Set the resolution for this view. Any resolution constraint will apply.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.setResolution = function (resolution) {\n    this.targetResolution_ = resolution;\n    this.applyTargetState_();\n  };\n  /**\n   * Set the rotation for this view. Any rotation constraint will apply.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.setRotation = function (rotation) {\n    this.targetRotation_ = rotation;\n    this.applyTargetState_();\n  };\n  /**\n   * Zoom to a specific zoom level. Any resolution constrain will apply.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n\n\n  View.prototype.setZoom = function (zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  };\n  /**\n   * Recompute rotation/resolution/center based on target values.\n   * Note: we have to compute rotation first, then resolution and center considering that\n   * parameters can influence one another in case a view extent constraint is present.\n   * @param {boolean} [opt_doNotCancelAnims] Do not cancel animations.\n   * @param {boolean} [opt_forceMoving] Apply constraints as if the view is moving.\n   * @private\n   */\n\n\n  View.prototype.applyTargetState_ = function (opt_doNotCancelAnims, opt_forceMoving) {\n    var isMoving = this.getAnimating() || this.getInteracting() || opt_forceMoving; // compute rotation\n\n    var newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);\n    var size = this.getViewportSize_(newRotation);\n    var newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);\n    var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n\n    if (this.get(ViewProperty.ROTATION) !== newRotation) {\n      this.set(ViewProperty.ROTATION, newRotation);\n    }\n\n    if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\n      this.set(ViewProperty.RESOLUTION, newResolution);\n      this.set('zoom', this.getZoom(), true);\n    }\n\n    if (!newCenter || !this.get(ViewProperty.CENTER) || !equals(this.get(ViewProperty.CENTER), newCenter)) {\n      this.set(ViewProperty.CENTER, newCenter);\n    }\n\n    if (this.getAnimating() && !opt_doNotCancelAnims) {\n      this.cancelAnimations();\n    }\n\n    this.cancelAnchor_ = undefined;\n  };\n  /**\n   * If any constraints need to be applied, an animation will be triggered.\n   * This is typically done on interaction end.\n   * Note: calling this with a duration of 0 will apply the constrained values straight away,\n   * without animation.\n   * @param {number} [opt_duration] The animation duration in ms.\n   * @param {number} [opt_resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   */\n\n\n  View.prototype.resolveConstraints = function (opt_duration, opt_resolutionDirection, opt_anchor) {\n    var duration = opt_duration !== undefined ? opt_duration : 200;\n    var direction = opt_resolutionDirection || 0;\n    var newRotation = this.constraints_.rotation(this.targetRotation_);\n    var size = this.getViewportSize_(newRotation);\n    var newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);\n    var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, false, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n\n    if (duration === 0 && !this.cancelAnchor_) {\n      this.targetResolution_ = newResolution;\n      this.targetRotation_ = newRotation;\n      this.targetCenter_ = newCenter;\n      this.applyTargetState_();\n      return;\n    }\n\n    var anchor = opt_anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n    this.cancelAnchor_ = undefined;\n\n    if (this.getResolution() !== newResolution || this.getRotation() !== newRotation || !this.getCenterInternal() || !equals(this.getCenterInternal(), newCenter)) {\n      if (this.getAnimating()) {\n        this.cancelAnimations();\n      }\n\n      this.animateInternal({\n        rotation: newRotation,\n        center: newCenter,\n        resolution: newResolution,\n        duration: duration,\n        easing: easeOut,\n        anchor: anchor\n      });\n    }\n  };\n  /**\n   * Notify the View that an interaction has started.\n   * The view state will be resolved to a stable one if needed\n   * (depending on its constraints).\n   * @api\n   */\n\n\n  View.prototype.beginInteraction = function () {\n    this.resolveConstraints(0);\n    this.setHint(ViewHint.INTERACTING, 1);\n  };\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [opt_duration] Animation duration in ms.\n   * @param {number} [opt_resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   * @api\n   */\n\n\n  View.prototype.endInteraction = function (opt_duration, opt_resolutionDirection, opt_anchor) {\n    var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());\n    this.endInteractionInternal(opt_duration, opt_resolutionDirection, anchor);\n  };\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [opt_duration] Animation duration in ms.\n   * @param {number} [opt_resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   */\n\n\n  View.prototype.endInteractionInternal = function (opt_duration, opt_resolutionDirection, opt_anchor) {\n    this.setHint(ViewHint.INTERACTING, -1);\n    this.resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor);\n  };\n  /**\n   * Get a valid position for the view center according to the current constraints.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n   * @param {number} [opt_targetResolution] Target resolution. If not supplied, the current one will be used.\n   * This is useful to guess a valid center position at a different zoom level.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n   */\n\n\n  View.prototype.getConstrainedCenter = function (targetCenter, opt_targetResolution) {\n    var size = this.getViewportSize_(this.getRotation());\n    return this.constraints_.center(targetCenter, opt_targetResolution || this.getResolution(), size);\n  };\n  /**\n   * Get a valid zoom level according to the current view constraints.\n   * @param {number|undefined} targetZoom Target zoom.\n   * @param {number} [opt_direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid zoom level.\n   */\n\n\n  View.prototype.getConstrainedZoom = function (targetZoom, opt_direction) {\n    var targetRes = this.getResolutionForZoom(targetZoom);\n    return this.getZoomForResolution(this.getConstrainedResolution(targetRes, opt_direction));\n  };\n  /**\n   * Get a valid resolution according to the current view constraints.\n   * @param {number|undefined} targetResolution Target resolution.\n   * @param {number} [opt_direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid resolution.\n   */\n\n\n  View.prototype.getConstrainedResolution = function (targetResolution, opt_direction) {\n    var direction = opt_direction || 0;\n    var size = this.getViewportSize_(this.getRotation());\n    return this.constraints_.resolution(targetResolution, direction, size);\n  };\n\n  return View;\n}(BaseObject);\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\n\n\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function () {\n    callback(returnValue);\n  }, 0);\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\n\n\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    var smooth = options.smoothExtentConstraint !== undefined ? options.smoothExtentConstraint : true;\n    return createExtent(options.extent, options.constrainOnlyCenter, smooth);\n  }\n\n  var projection = createProjection(options.projection, 'EPSG:3857');\n\n  if (options.multiWorld !== true && projection.isGlobal()) {\n    var extent = projection.getExtent().slice();\n    extent[0] = -Infinity;\n    extent[2] = Infinity;\n    return createExtent(extent, false, false);\n  }\n\n  return centerNone;\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\n\nexport function createResolutionConstraint(options) {\n  var resolutionConstraint;\n  var maxResolution;\n  var minResolution; // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n\n  var defaultMaxZoom = 28;\n  var defaultZoomFactor = 2;\n  var minZoom = options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n  var maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n  var zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n  var multiWorld = options.multiWorld !== undefined ? options.multiWorld : false;\n  var smooth = options.smoothResolutionConstraint !== undefined ? options.smoothResolutionConstraint : true;\n  var showFullExtent = options.showFullExtent !== undefined ? options.showFullExtent : false;\n  var projection = createProjection(options.projection, 'EPSG:3857');\n  var projExtent = projection.getExtent();\n  var constrainOnlyCenter = options.constrainOnlyCenter;\n  var extent = options.extent;\n\n  if (!multiWorld && !extent && projection.isGlobal()) {\n    constrainOnlyCenter = false;\n    extent = projExtent;\n  }\n\n  if (options.resolutions !== undefined) {\n    var resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution = resolutions[maxZoom] !== undefined ? resolutions[maxZoom] : resolutions[resolutions.length - 1];\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToResolutions(resolutions, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    } else {\n      resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    }\n  } else {\n    // calculate the default min and max resolution\n    var size = !projExtent ? // use an extent that can fit the whole world if need be\n    360 * METERS_PER_UNIT[Units.DEGREES] / projection.getMetersPerUnit() : Math.max(getWidth(projExtent), getHeight(projExtent));\n    var defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n    var defaultMinResolution = defaultMaxResolution / Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM); // user provided maxResolution takes precedence\n\n    maxResolution = options.maxResolution;\n\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    } // user provided minResolution takes precedence\n\n\n    minResolution = options.minResolution;\n\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    } // given discrete zoom levels, minResolution may be different than provided\n\n\n    maxZoom = minZoom + Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToPower(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    } else {\n      resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    }\n  }\n\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor\n  };\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\n\nexport function createRotationConstraint(options) {\n  var enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;\n\n  if (enableRotation) {\n    var constrainRotation = options.constrainRotation;\n\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    } else if (constrainRotation === false) {\n      return rotationNone;\n    } else if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    } else {\n      return rotationNone;\n    }\n  } else {\n    return disable;\n  }\n}\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\n\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {import(\"./size.js\").Size} size Box pixel size.\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\n */\n\nfunction calculateCenterOn(coordinate, size, position, resolution, rotation) {\n  // calculate rotated position\n  var cosAngle = Math.cos(-rotation);\n  var sinAngle = Math.sin(-rotation);\n  var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  rotX += (size[0] / 2 - position[0]) * resolution;\n  rotY += (position[1] - size[1] / 2) * resolution; // go back to original angle\n\n  sinAngle = -sinAngle; // go back to original rotation\n\n  var centerX = rotX * cosAngle - rotY * sinAngle;\n  var centerY = rotY * cosAngle + rotX * sinAngle;\n  return [centerX, centerY];\n}\n\nexport default View;","map":{"version":3,"mappings":"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","names":["BaseObject","GeometryType","Units","ViewHint","ViewProperty","DEFAULT_TILE_SIZE","METERS_PER_UNIT","createProjection","disableCoordinateWarning","fromUserCoordinate","fromUserExtent","getUserProjection","toUserCoordinate","toUserExtent","VOID","add","addCoordinate","equals","coordinatesEqual","rotate","rotateCoordinate","assert","assign","none","centerNone","createExtent","clamp","modulo","createMinMaxResolution","createSnapToPower","createSnapToResolutions","createSnapToN","createSnapToZero","disable","rotationNone","easeOut","inAndOut","getCenter","getForViewAndSize","getHeight","getWidth","isEmpty","linearFindNearest","fromExtent","polygonFromExtent","DEFAULT_MIN_ZOOM","__extends","opt_options","_super","_this","on","once","un","options","hints_","animations_","updateAnimationKey_","projection_","projection","viewportSize_","targetCenter_","targetResolution_","targetRotation_","nextCenter_","nextResolution_","nextRotation_","cancelAnchor_","undefined","center","extent","applyOptions_","View","properties","key","setProperties","resolutionConstraintInfo","createResolutionConstraint","maxResolution_","maxResolution","minResolution_","minResolution","zoomFactor_","zoomFactor","resolutions_","resolutions","padding_","padding","minZoom_","minZoom","centerConstraint","createCenterConstraint","resolutionConstraint","constraint","rotationConstraint","createRotationConstraint","constraints_","resolution","rotation","setRotation","setCenterInternal","setResolution","zoom","setZoom","Object","oldPadding","newPadding","getResolution","offsetX","offsetY","newOptions","getProperties","getZoom","getCenterInternal","getRotation","var_args","isDef","getAnimating","resolveConstraints","args","Array","arguments","length","i","getProjection","anchor","animateInternal","apply","animationCount","callback","state","animationCallback","start","Date","now","slice","series","animation","complete","duration","easing","sourceCenter","targetCenter","sourceResolution","targetResolution","getResolutionForZoom","sourceRotation","delta","Math","PI","targetRotation","isNoopAnimation","push","setHint","ANIMATING","updateAnimations_","INTERACTING","ii","j","jj","NaN","cancelAnimationFrame","more","seriesComplete","elapsed","fraction","progress","x0","y0","x1","y1","x","y","size","getViewportSize_","constrainedResolution","calculateCenterZoom","applyTargetState_","constrainedRotation","calculateCenterRotate","filter","Boolean","requestAnimationFrame","bind","currentCenter","currentResolution","opt_rotation","w","h","abs","cos","sin","opt_size","isArray","get","CENTER","opt_hints","calculateExtentInternal","getViewportSizeMinusPadding_","getZoomForResolution","getUpdatedOptions_","maxZoom","enabled","constrainResolution","RESOLUTION","getResolutionForExtentInternal","xResolution","yResolution","max","opt_power","power","getConstrainedResolution","log","value","pow","ROTATION","logPower","reducedSize","calculateCenterOn","nextCenter","nextResolution","nextRotation","offset","nearest","baseLevel","floor","geometryOrExtent","geometry","getSimplifiedGeometry","getType","CIRCLE","getExtent","userProjection","clone","transform","fitInternal","cosAngle","sinAngle","coords","getFlatCoordinates","stride","getStride","minRotX","Infinity","minRotY","maxRotX","maxRotY","rotX","rotY","min","rotatedExtent","rotatedExtentForGeometry","isNaN","centerRot","centerX","centerY","getConstrainedCenter","coordinate","position","centerOnInternal","centerShift","shiftedCenter","deltaCoordinates","setCenter","ratio","opt_anchor","adjustResolutionInternal","isMoving","getInteracting","newResolution","adjustResolution","adjustRotationInternal","newRotation","hint","changed","opt_doNotCancelAnims","opt_forceMoving","newCenter","calculateCenterShift","set","cancelAnimations","opt_duration","opt_resolutionDirection","direction","endInteractionInternal","opt_targetResolution","targetZoom","opt_direction","targetRes","returnValue","setTimeout","smooth","smoothExtentConstraint","constrainOnlyCenter","multiWorld","isGlobal","defaultMaxZoom","defaultZoomFactor","smoothResolutionConstraint","showFullExtent","projExtent","DEGREES","getMetersPerUnit","defaultMaxResolution","defaultMinResolution","enableRotation","constrainRotation"],"sourceRoot":"","sources":["src/View.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}