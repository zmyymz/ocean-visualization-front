{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\n * @module ol/source/IIIF\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport { CustomTile } from './Zoomify.js';\nimport { DEFAULT_TILE_SIZE } from '../tilegrid/common.js';\nimport { Versions } from '../format/IIIFInfo.js';\nimport { assert } from '../asserts.js';\nimport { getTopLeft } from '../extent.js';\nimport { includes } from '../array.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Size of the cache.\n * @property {null|string} [crossOrigin] The value for the crossOrigin option of the request.\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]] The extent.\n * @property {string} [format='jpg'] Requested image format.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {Array<import(\"../size.js\").Size>} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./State.js\").default} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio] Tile pixel ratio.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition] Transition.\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image ID.\n * @property {import(\"../format/IIIFInfo.js\").Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\nfunction formatPercentage(percentage) {\n  return percentage.toLocaleString('en', {\n    maximumFractionDigits: 10\n  });\n}\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\n\n\nvar IIIF =\n/** @class */\nfunction (_super) {\n  __extends(IIIF, _super);\n  /**\n   * @param {Options} [opt_options] Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\n   * to parse Image API service information responses into constructor options.\n   * @api\n   */\n\n\n  function IIIF(opt_options) {\n    var _this = this;\n    /**\n     * @type {Partial<Options>}\n     */\n\n\n    var options = opt_options || {};\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    var baseUrl = options.url || '';\n    baseUrl = baseUrl + (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === '' ? '' : '/');\n    var version = options.version || Versions.VERSION2;\n    var sizes = options.sizes || [];\n    var size = options.size;\n    assert(size != undefined && Array.isArray(size) && size.length == 2 && !isNaN(size[0]) && size[0] > 0 && !isNaN(size[1]) && size[1] > 0, 60);\n    var width = size[0];\n    var height = size[1];\n    var tileSize = options.tileSize;\n    var tilePixelRatio = options.tilePixelRatio || 1;\n    var format = options.format || 'jpg';\n    var quality = options.quality || (options.version == Versions.VERSION1 ? 'native' : 'default');\n    var resolutions = options.resolutions || [];\n    var supports = options.supports || [];\n    var extent = options.extent || [0, -height, width, 0];\n    var supportsListedSizes = sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n    var supportsListedTiles = tileSize !== undefined && (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0 || Array.isArray(tileSize) && tileSize.length > 0);\n    var supportsArbitraryTiling = supports != undefined && Array.isArray(supports) && (includes(supports, 'regionByPx') || includes(supports, 'regionByPct')) && (includes(supports, 'sizeByWh') || includes(supports, 'sizeByH') || includes(supports, 'sizeByW') || includes(supports, 'sizeByPct'));\n    var tileWidth, tileHeight, maxZoom;\n    resolutions.sort(function (a, b) {\n      return b - a;\n    });\n\n    if (supportsListedTiles || supportsArbitraryTiling) {\n      if (tileSize != undefined) {\n        if (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0) {\n          tileWidth = tileSize;\n          tileHeight = tileSize;\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\n          if (tileSize.length == 1 || tileSize[1] == undefined && Number.isInteger(tileSize[0])) {\n            tileWidth = tileSize[0];\n            tileHeight = tileSize[0];\n          }\n\n          if (tileSize.length == 2) {\n            if (Number.isInteger(tileSize[0]) && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[0];\n              tileHeight = tileSize[1];\n            } else if (tileSize[0] == undefined && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[1];\n              tileHeight = tileSize[1];\n            }\n          }\n        }\n      }\n\n      if (tileWidth === undefined || tileHeight === undefined) {\n        tileWidth = DEFAULT_TILE_SIZE;\n        tileHeight = DEFAULT_TILE_SIZE;\n      }\n\n      if (resolutions.length == 0) {\n        maxZoom = Math.max(Math.ceil(Math.log(width / tileWidth) / Math.LN2), Math.ceil(Math.log(height / tileHeight) / Math.LN2));\n\n        for (var i = maxZoom; i >= 0; i--) {\n          resolutions.push(Math.pow(2, i));\n        }\n      } else {\n        var maxScaleFactor = Math.max.apply(Math, resolutions); // TODO maxScaleFactor might not be a power to 2\n\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n      }\n    } else {\n      // No tile support.\n      tileWidth = width;\n      tileHeight = height;\n      resolutions = [];\n\n      if (supportsListedSizes) {\n        /*\n         * 'sizes' provided. Use full region in different resolutions. Every\n         * resolution has only one tile.\n         */\n        sizes.sort(function (a, b) {\n          return a[0] - b[0];\n        });\n        maxZoom = -1;\n        var ignoredSizesIndex = [];\n\n        for (var i = 0; i < sizes.length; i++) {\n          var resolution = width / sizes[i][0];\n\n          if (resolutions.length > 0 && resolutions[resolutions.length - 1] == resolution) {\n            ignoredSizesIndex.push(i);\n            continue;\n          }\n\n          resolutions.push(resolution);\n          maxZoom++;\n        }\n\n        if (ignoredSizesIndex.length > 0) {\n          for (var i = 0; i < ignoredSizesIndex.length; i++) {\n            sizes.splice(ignoredSizesIndex[i] - i, 1);\n          }\n        }\n      } else {\n        // No useful image information at all. Try pseudo tile with full image.\n        resolutions.push(1);\n        sizes.push([width, height]);\n        maxZoom = 0;\n      }\n    }\n\n    var tileGrid = new TileGrid({\n      tileSize: [tileWidth, tileHeight],\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions\n    });\n\n    var tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      var regionParam, sizeParam;\n      var zoom = tileCoord[0];\n\n      if (zoom > maxZoom) {\n        return;\n      }\n\n      var tileX = tileCoord[1],\n          tileY = tileCoord[2],\n          scale = resolutions[zoom];\n\n      if (tileX === undefined || tileY === undefined || scale === undefined || tileX < 0 || Math.ceil(width / scale / tileWidth) <= tileX || tileY < 0 || Math.ceil(height / scale / tileHeight) <= tileY) {\n        return;\n      }\n\n      if (supportsArbitraryTiling || supportsListedTiles) {\n        var regionX = tileX * tileWidth * scale,\n            regionY = tileY * tileHeight * scale;\n        var regionW = tileWidth * scale,\n            regionH = tileHeight * scale,\n            sizeW = tileWidth,\n            sizeH = tileHeight;\n\n        if (regionX + regionW > width) {\n          regionW = width - regionX;\n        }\n\n        if (regionY + regionH > height) {\n          regionH = height - regionY;\n        }\n\n        if (regionX + tileWidth * scale > width) {\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\n        }\n\n        if (regionY + tileHeight * scale > height) {\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\n        }\n\n        if (regionX == 0 && regionW == width && regionY == 0 && regionH == height) {\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\n          regionParam = 'full';\n        } else if (!supportsArbitraryTiling || includes(supports, 'regionByPx')) {\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n        } else if (includes(supports, 'regionByPct')) {\n          var pctX = formatPercentage(regionX / width * 100),\n              pctY = formatPercentage(regionY / height * 100),\n              pctW = formatPercentage(regionW / width * 100),\n              pctH = formatPercentage(regionH / height * 100);\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n        }\n\n        if (version == Versions.VERSION3 && (!supportsArbitraryTiling || includes(supports, 'sizeByWh'))) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (!supportsArbitraryTiling || includes(supports, 'sizeByW')) {\n          sizeParam = sizeW + ',';\n        } else if (includes(supports, 'sizeByH')) {\n          sizeParam = ',' + sizeH;\n        } else if (includes(supports, 'sizeByWh')) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (includes(supports, 'sizeByPct')) {\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\n        }\n      } else {\n        regionParam = 'full';\n\n        if (supportsListedSizes) {\n          var regionWidth = sizes[zoom][0],\n              regionHeight = sizes[zoom][1];\n\n          if (version == Versions.VERSION3) {\n            if (regionWidth == width && regionHeight == height) {\n              sizeParam = 'max';\n            } else {\n              sizeParam = regionWidth + ',' + regionHeight;\n            }\n          } else {\n            if (regionWidth == width) {\n              sizeParam = 'full';\n            } else {\n              sizeParam = regionWidth + ',';\n            }\n          }\n        } else {\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n        }\n      }\n\n      return baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format;\n    };\n\n    var IiifTileClass = CustomTile.bind(null, toSize(tileSize || 256).map(function (size) {\n      return size * tilePixelRatio;\n    }));\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: options.state,\n      tileClass: IiifTileClass,\n      tileGrid: tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition\n    }) || this;\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n\n    _this.zDirection = options.zDirection;\n    return _this;\n  }\n\n  return IIIF;\n}(TileImage);\n\nexport default IIIF;","map":{"version":3,"mappings":"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","names":["TileGrid","TileImage","CustomTile","DEFAULT_TILE_SIZE","Versions","assert","getTopLeft","includes","toSize","formatPercentage","percentage","toLocaleString","maximumFractionDigits","__extends","opt_options","options","interpolate","imageSmoothing","undefined","baseUrl","url","lastIndexOf","length","version","VERSION2","sizes","size","Array","isArray","isNaN","width","height","tileSize","tilePixelRatio","format","quality","VERSION1","resolutions","supports","extent","supportsListedSizes","supportsListedTiles","Number","isInteger","supportsArbitraryTiling","tileWidth","tileHeight","maxZoom","sort","a","b","Math","max","ceil","log","LN2","i","push","pow","maxScaleFactor","apply","round","ignoredSizesIndex","resolution","splice","tileGrid","origin","tileUrlFunction","tileCoord","pixelRatio","projection","regionParam","sizeParam","zoom","tileX","tileY","scale","regionX","regionY","regionW","regionH","sizeW","sizeH","floor","pctX","pctY","pctW","pctH","VERSION3","regionWidth","regionHeight","IiifTileClass","bind","map","_super","attributions","attributionsCollapsible","cacheSize","crossOrigin","reprojectionErrorThreshold","state","tileClass","transition","_this","zDirection","IIIF"],"sourceRoot":"","sources":["../src/source/IIIF.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}