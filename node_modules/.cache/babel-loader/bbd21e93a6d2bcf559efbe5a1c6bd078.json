{"ast":null,"code":"/**\n * @module ol/proj/transforms\n */\nimport { isEmpty } from '../obj.js';\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\n\nvar transforms = {};\n/**\n * Clear the transform cache.\n */\n\nexport function clear() {\n  transforms = {};\n}\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\n\nexport function add(source, destination, transformFn) {\n  var sourceCode = source.getCode();\n  var destinationCode = destination.getCode();\n\n  if (!(sourceCode in transforms)) {\n    transforms[sourceCode] = {};\n  }\n\n  transforms[sourceCode][destinationCode] = transformFn;\n}\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\n\nexport function remove(source, destination) {\n  var sourceCode = source.getCode();\n  var destinationCode = destination.getCode();\n  var transform = transforms[sourceCode][destinationCode];\n  delete transforms[sourceCode][destinationCode];\n\n  if (isEmpty(transforms[sourceCode])) {\n    delete transforms[sourceCode];\n  }\n\n  return transform;\n}\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\n */\n\nexport function get(sourceCode, destinationCode) {\n  var transform;\n\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n    transform = transforms[sourceCode][destinationCode];\n  }\n\n  return transform;\n}","map":{"version":3,"mappings":"AAAA;;;AAGA,SAAQA,OAAR,QAAsB,WAAtB;AAEA;;;;;AAIA,IAAIC,UAAU,GAAG,EAAjB;AAEA;;;;AAGA,OAAM,SAAUC,KAAV,GAAe;AACnBD,YAAU,GAAG,EAAb;AACD;AAED;;;;;;;;;AAQA,OAAM,SAAUE,GAAV,CAAcC,MAAd,EAAsBC,WAAtB,EAAmCC,WAAnC,EAA8C;AAClD,MAAMC,UAAU,GAAGH,MAAM,CAACI,OAAP,EAAnB;AACA,MAAMC,eAAe,GAAGJ,WAAW,CAACG,OAAZ,EAAxB;;AACA,MAAI,EAAED,UAAU,IAAIN,UAAhB,CAAJ,EAAiC;AAC/BA,cAAU,CAACM,UAAD,CAAV,GAAyB,EAAzB;AACD;;AACDN,YAAU,CAACM,UAAD,CAAV,CAAuBE,eAAvB,IAA0CH,WAA1C;AACD;AAED;;;;;;;;;;AASA,OAAM,SAAUI,MAAV,CAAiBN,MAAjB,EAAyBC,WAAzB,EAAoC;AACxC,MAAME,UAAU,GAAGH,MAAM,CAACI,OAAP,EAAnB;AACA,MAAMC,eAAe,GAAGJ,WAAW,CAACG,OAAZ,EAAxB;AACA,MAAMG,SAAS,GAAGV,UAAU,CAACM,UAAD,CAAV,CAAuBE,eAAvB,CAAlB;AACA,SAAOR,UAAU,CAACM,UAAD,CAAV,CAAuBE,eAAvB,CAAP;;AACA,MAAIT,OAAO,CAACC,UAAU,CAACM,UAAD,CAAX,CAAX,EAAqC;AACnC,WAAON,UAAU,CAACM,UAAD,CAAjB;AACD;;AACD,SAAOI,SAAP;AACD;AAED;;;;;;;AAMA,OAAM,SAAUC,GAAV,CAAcL,UAAd,EAA0BE,eAA1B,EAAyC;AAC7C,MAAIE,SAAJ;;AACA,MAAIJ,UAAU,IAAIN,UAAd,IAA4BQ,eAAe,IAAIR,UAAU,CAACM,UAAD,CAA7D,EAA2E;AACzEI,aAAS,GAAGV,UAAU,CAACM,UAAD,CAAV,CAAuBE,eAAvB,CAAZ;AACD;;AACD,SAAOE,SAAP;AACD","names":["isEmpty","transforms","clear","add","source","destination","transformFn","sourceCode","getCode","destinationCode","remove","transform","get"],"sourceRoot":"","sources":["../src/proj/transforms.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}