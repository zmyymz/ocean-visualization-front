{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n\n/**\n * @module ol/webgl/Buffer\n */\nimport { ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER, STATIC_DRAW, STREAM_DRAW } from '../webgl.js';\nimport { assert } from '../asserts.js';\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\n\nexport var BufferUsage = {\n  STATIC_DRAW: STATIC_DRAW,\n  STREAM_DRAW: STREAM_DRAW,\n  DYNAMIC_DRAW: DYNAMIC_DRAW\n};\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * * A size using `#ofSize(buffer)`\n * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n * @api\n */\n\nvar WebGLArrayBuffer =\n/** @class */\nfunction () {\n  /**\n   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n   * @param {number} [opt_usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n   * Default is `DYNAMIC_DRAW`.\n   */\n  function WebGLArrayBuffer(type, opt_usage) {\n    /**\n     * @private\n     * @type {Float32Array|Uint32Array}\n     */\n    this.array = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.type = type;\n    assert(type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER, 62);\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.usage = opt_usage !== undefined ? opt_usage : BufferUsage.STATIC_DRAW;\n  }\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {number} size Array size\n   */\n\n\n  WebGLArrayBuffer.prototype.ofSize = function (size) {\n    this.array = new (getArrayClassForType(this.type))(size);\n  };\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {Array<number>} array Numerical array\n   */\n\n\n  WebGLArrayBuffer.prototype.fromArray = function (array) {\n    var arrayClass = getArrayClassForType(this.type);\n    this.array = arrayClass.from ? arrayClass.from(array) : new arrayClass(array);\n  };\n  /**\n   * Populates the buffer with a raw binary array buffer.\n   * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n   * initialized for the same typed array class.\n   */\n\n\n  WebGLArrayBuffer.prototype.fromArrayBuffer = function (buffer) {\n    this.array = new (getArrayClassForType(this.type))(buffer);\n  };\n  /**\n   * @return {number} Buffer type.\n   */\n\n\n  WebGLArrayBuffer.prototype.getType = function () {\n    return this.type;\n  };\n  /**\n   * Will return null if the buffer was not initialized\n   * @return {Float32Array|Uint32Array} Array.\n   */\n\n\n  WebGLArrayBuffer.prototype.getArray = function () {\n    return this.array;\n  };\n  /**\n   * @return {number} Usage.\n   */\n\n\n  WebGLArrayBuffer.prototype.getUsage = function () {\n    return this.usage;\n  };\n  /**\n   * Will return 0 if the buffer is not initialized\n   * @return {number} Array size\n   */\n\n\n  WebGLArrayBuffer.prototype.getSize = function () {\n    return this.array ? this.array.length : 0;\n  };\n\n  return WebGLArrayBuffer;\n}();\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\n\n\nexport function getArrayClassForType(type) {\n  switch (type) {\n    case ARRAY_BUFFER:\n      return Float32Array;\n\n    case ELEMENT_ARRAY_BUFFER:\n      return Uint32Array;\n\n    default:\n      return Float32Array;\n  }\n}\nexport default WebGLArrayBuffer;","map":{"version":3,"mappings":";;;AAAA;;;AAGA,SACEA,YADF,EAEEC,YAFF,EAGEC,oBAHF,EAIEC,WAJF,EAKEC,WALF,QAMO,aANP;AAOA,SAAQC,MAAR,QAAqB,eAArB;AAEA;;;;;;AAKA,OAAO,IAAMC,WAAW,GAAG;AACzBH,aAAW,EAAEA,WADY;AAEzBC,aAAW,EAAEA,WAFY;AAGzBH,cAAY,EAAEA;AAHW,CAApB;AAMP;;;;;;;;;;;;;;;;;AAgBA;AAAA;AAAA;AACE;;;;;AAKA,4BAAYM,IAAZ,EAAkBC,SAAlB,EAA2B;AACzB;;;;AAIA,SAAKC,KAAL,GAAa,IAAb;AAEA;;;;;AAIA,SAAKF,IAAL,GAAYA,IAAZ;AAEAF,UAAM,CAACE,IAAI,KAAKP,YAAT,IAAyBO,IAAI,KAAKL,oBAAnC,EAAyD,EAAzD,CAAN;AAEA;;;;;AAIA,SAAKQ,KAAL,GAAaF,SAAS,KAAKG,SAAd,GAA0BH,SAA1B,GAAsCF,WAAW,CAACH,WAA/D;AACD;AAED;;;;;;AAIAS,gDAAOC,IAAP,EAAW;AACT,SAAKJ,KAAL,GAAa,KAAKK,oBAAoB,CAAC,KAAKP,IAAN,CAAzB,EAAsCM,IAAtC,CAAb;AACD,GAFD;AAIA;;;;;;AAIAD,mDAAUH,KAAV,EAAe;AACb,QAAMM,UAAU,GAAGD,oBAAoB,CAAC,KAAKP,IAAN,CAAvC;AACA,SAAKE,KAAL,GAAaM,UAAU,CAACC,IAAX,GACTD,UAAU,CAACC,IAAX,CAAgBP,KAAhB,CADS,GAET,IAAIM,UAAJ,CAAeN,KAAf,CAFJ;AAGD,GALD;AAOA;;;;;;;AAKAG,yDAAgBK,MAAhB,EAAsB;AACpB,SAAKR,KAAL,GAAa,KAAKK,oBAAoB,CAAC,KAAKP,IAAN,CAAzB,EAAsCU,MAAtC,CAAb;AACD,GAFD;AAIA;;;;;AAGAL;AACE,WAAO,KAAKL,IAAZ;AACD,GAFD;AAIA;;;;;;AAIAK;AACE,WAAO,KAAKH,KAAZ;AACD,GAFD;AAIA;;;;;AAGAG;AACE,WAAO,KAAKF,KAAZ;AACD,GAFD;AAIA;;;;;;AAIAE;AACE,WAAO,KAAKH,KAAL,GAAa,KAAKA,KAAL,CAAWS,MAAxB,GAAiC,CAAxC;AACD,GAFD;;AAGF;AAAC,CArFD;AAuFA;;;;;;;AAKA,OAAM,SAAUJ,oBAAV,CAA+BP,IAA/B,EAAmC;AACvC,UAAQA,IAAR;AACE,SAAKP,YAAL;AACE,aAAOmB,YAAP;;AACF,SAAKjB,oBAAL;AACE,aAAOkB,WAAP;;AACF;AACE,aAAOD,YAAP;AANJ;AAQD;AAED,eAAeP,gBAAf","names":["ARRAY_BUFFER","DYNAMIC_DRAW","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","STREAM_DRAW","assert","BufferUsage","type","opt_usage","array","usage","undefined","WebGLArrayBuffer","size","getArrayClassForType","arrayClass","from","buffer","length","Float32Array","Uint32Array"],"sourceRoot":"","sources":["../src/webgl/Buffer.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}