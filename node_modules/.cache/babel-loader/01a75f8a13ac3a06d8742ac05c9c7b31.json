{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/DataTile\n */\n\n\nimport DataTile from '../DataTile.js';\nimport EventType from '../events/EventType.js';\nimport TileEventType from './TileEventType.js';\nimport TileSource, { TileSourceEvent } from './Tile.js';\nimport TileState from '../TileState.js';\nimport { assign } from '../obj.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { getKeyZXY } from '../tilecoord.js';\nimport { getUid } from '../util.js';\nimport { toPromise } from '../functions.js';\n/**\n * Data tile loading function.  The function is called with z, x, and y tile coordinates and\n * returns {@link import(\"../DataTile.js\").Data data} for a tile or a promise for the same.\n * @typedef {function(number, number, number) : (import(\"../DataTile.js\").Data|Promise<import(\"../DataTile.js\").Data>)} Loader\n */\n\n/**\n * @typedef {Object} Options\n * @property {Loader} [loader] Data loader.  Called with z, x, and y tile coordinates.\n * Returns {@link import(\"../DataTile.js\").Data data} for a tile or a promise for the same.\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The pixel width and height of the tiles.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Tile projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"./State.js\").default} [state] The source state.\n * @property {number} [tilePixelRatio] Tile pixel ratio.\n * @property {boolean} [wrapX=false] Render tiles beyond the antimeridian.\n * @property {number} [transition] Transition time when fading in new tiles (in miliseconds).\n * @property {number} [bandCount=4] Number of bands represented in the data.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * A source for typed array data tiles.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\n\nvar DataTileSource =\n/** @class */\nfunction (_super) {\n  __extends(DataTileSource, _super);\n  /**\n   * @param {Options} options Image tile options.\n   */\n\n\n  function DataTileSource(options) {\n    var _this = this;\n\n    var projection = options.projection === undefined ? 'EPSG:3857' : options.projection;\n    var tileGrid = options.tileGrid;\n\n    if (tileGrid === undefined && projection) {\n      tileGrid = createXYZ({\n        extent: extentFromProjection(projection),\n        maxResolution: options.maxResolution,\n        maxZoom: options.maxZoom,\n        minZoom: options.minZoom,\n        tileSize: options.tileSize\n      });\n    }\n\n    _this = _super.call(this, {\n      cacheSize: 0.1,\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: projection,\n      tileGrid: tileGrid,\n      opaque: options.opaque,\n      state: options.state,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate\n    }) || this;\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n\n    _this.tileLoadingKeys_ = {};\n    /**\n     * @private\n     */\n\n    _this.loader_ = options.loader;\n    _this.handleTileChange_ = _this.handleTileChange_.bind(_this);\n    /**\n     * @type {number}\n     */\n\n    _this.bandCount = options.bandCount === undefined ? 4 : options.bandCount; // assume RGBA if undefined\n\n    return _this;\n  }\n  /**\n   * @param {Loader} loader The data loader.\n   * @protected\n   */\n\n\n  DataTileSource.prototype.setLoader = function (loader) {\n    this.loader_ = loader;\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!DataTile} Tile.\n   */\n\n\n  DataTileSource.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n    var tileCoordKey = getKeyZXY(z, x, y);\n\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return this.tileCache.get(tileCoordKey);\n    }\n\n    var sourceLoader = this.loader_;\n\n    function loader() {\n      return toPromise(function () {\n        return sourceLoader(z, x, y);\n      });\n    }\n\n    var tile = new DataTile(assign({\n      tileCoord: [z, x, y],\n      loader: loader\n    }, this.tileOptions));\n    tile.key = this.getKey();\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n    this.tileCache.set(tileCoordKey, tile);\n    return tile;\n  };\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   */\n\n\n  DataTileSource.prototype.handleTileChange_ = function (event) {\n    var tile =\n    /** @type {import(\"../Tile.js\").default} */\n    event.target;\n    var uid = getUid(tile);\n    var tileState = tile.getState();\n    var type;\n\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR : tileState == TileState.LOADED ? TileEventType.TILELOADEND : undefined;\n    }\n\n    if (type) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  };\n\n  return DataTileSource;\n}(TileSource);\n\nexport default DataTileSource;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAGA,OAAOA,QAAP,MAAqB,gBAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,UAAP,IAAoBC,eAApB,QAA0C,WAA1C;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAAQC,MAAR,QAAqB,WAArB;AACA,SAAQC,SAAR,EAAmBC,oBAAnB,QAA8C,gBAA9C;AACA,SAAQC,SAAR,QAAwB,iBAAxB;AACA,SAAQC,MAAR,QAAqB,YAArB;AACA,SAAQC,SAAR,QAAwB,iBAAxB;AAEA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;AAOA;AAAA;AAAA;AAA6BC;AAC3B;;;;;AAGA,0BAAYC,OAAZ,EAAmB;AAAnB;;AACE,QAAMC,UAAU,GACdD,OAAO,CAACC,UAAR,KAAuBC,SAAvB,GAAmC,WAAnC,GAAiDF,OAAO,CAACC,UAD3D;AAGA,QAAIE,QAAQ,GAAGH,OAAO,CAACG,QAAvB;;AACA,QAAIA,QAAQ,KAAKD,SAAb,IAA0BD,UAA9B,EAA0C;AACxCE,cAAQ,GAAGT,SAAS,CAAC;AACnBU,cAAM,EAAET,oBAAoB,CAACM,UAAD,CADT;AAEnBI,qBAAa,EAAEL,OAAO,CAACK,aAFJ;AAGnBC,eAAO,EAAEN,OAAO,CAACM,OAHE;AAInBC,eAAO,EAAEP,OAAO,CAACO,OAJE;AAKnBC,gBAAQ,EAAER,OAAO,CAACQ;AALC,OAAD,CAApB;AAOD;;YAEDC,kBAAM;AACJC,eAAS,EAAE,GADP;AAEJC,kBAAY,EAAEX,OAAO,CAACW,YAFlB;AAGJC,6BAAuB,EAAEZ,OAAO,CAACY,uBAH7B;AAIJX,gBAAU,EAAEA,UAJR;AAKJE,cAAQ,EAAEA,QALN;AAMJU,YAAM,EAAEb,OAAO,CAACa,MANZ;AAOJC,WAAK,EAAEd,OAAO,CAACc,KAPX;AAQJC,oBAAc,EAAEf,OAAO,CAACe,cARpB;AASJC,WAAK,EAAEhB,OAAO,CAACgB,KATX;AAUJC,gBAAU,EAAEjB,OAAO,CAACiB,UAVhB;AAWJC,iBAAW,EAAElB,OAAO,CAACkB;AAXjB,KAAN,KAYE;AAEF;;;;;AAIAC,SAAI,CAACC,gBAAL,GAAwB,EAAxB;AAEA;;;;AAGAD,SAAI,CAACE,OAAL,GAAerB,OAAO,CAACsB,MAAvB;AAEAH,SAAI,CAACI,iBAAL,GAAyBJ,KAAI,CAACI,iBAAL,CAAuBC,IAAvB,CAA4BL,KAA5B,CAAzB;AAEA;;;;AAGAA,SAAI,CAACM,SAAL,GAAiBzB,OAAO,CAACyB,SAAR,KAAsBvB,SAAtB,GAAkC,CAAlC,GAAsCF,OAAO,CAACyB,SAA/D,CA7CiB,CA6CyD;;;AAC3E;AAED;;;;;;AAIAC,iDAAUJ,MAAV,EAAgB;AACd,SAAKD,OAAL,GAAeC,MAAf;AACD,GAFD;AAIA;;;;;;;;;;AAQAI,+CAAQC,CAAR,EAAWC,CAAX,EAAcC,CAAd,EAAiBC,UAAjB,EAA6B7B,UAA7B,EAAuC;AACrC,QAAM8B,YAAY,GAAGnC,SAAS,CAAC+B,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAA9B;;AACA,QAAI,KAAKG,SAAL,CAAeC,WAAf,CAA2BF,YAA3B,CAAJ,EAA8C;AAC5C,aAAO,KAAKC,SAAL,CAAeE,GAAf,CAAmBH,YAAnB,CAAP;AACD;;AAED,QAAMI,YAAY,GAAG,KAAKd,OAA1B;;AAEA,aAASC,MAAT,GAAe;AACb,aAAOxB,SAAS,CAAC;AACf,eAAOqC,YAAY,CAACR,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAnB;AACD,OAFe,CAAhB;AAGD;;AAED,QAAMO,IAAI,GAAG,IAAIjD,QAAJ,CACXM,MAAM,CAAC;AAAC4C,eAAS,EAAE,CAACV,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAZ;AAAuBP,YAAM,EAAEA;AAA/B,KAAD,EAAyC,KAAKgB,WAA9C,CADK,CAAb;AAGAF,QAAI,CAACG,GAAL,GAAW,KAAKC,MAAL,EAAX;AACAJ,QAAI,CAACK,gBAAL,CAAsBrD,SAAS,CAACsD,MAAhC,EAAwC,KAAKnB,iBAA7C;AAEA,SAAKS,SAAL,CAAeW,GAAf,CAAmBZ,YAAnB,EAAiCK,IAAjC;AACA,WAAOA,IAAP;AACD,GAtBD;AAwBA;;;;;;AAIAV,yDAAkBkB,KAAlB,EAAuB;AACrB,QAAMR,IAAI;AAAG;AAA6CQ,SAAK,CAACC,MAAhE;AACA,QAAMC,GAAG,GAAGjD,MAAM,CAACuC,IAAD,CAAlB;AACA,QAAMW,SAAS,GAAGX,IAAI,CAACY,QAAL,EAAlB;AACA,QAAIC,IAAJ;;AACA,QAAIF,SAAS,IAAIvD,SAAS,CAAC0D,OAA3B,EAAoC;AAClC,WAAK9B,gBAAL,CAAsB0B,GAAtB,IAA6B,IAA7B;AACAG,UAAI,GAAG5D,aAAa,CAAC8D,aAArB;AACD,KAHD,MAGO,IAAIL,GAAG,IAAI,KAAK1B,gBAAhB,EAAkC;AACvC,aAAO,KAAKA,gBAAL,CAAsB0B,GAAtB,CAAP;AACAG,UAAI,GACFF,SAAS,IAAIvD,SAAS,CAAC4D,KAAvB,GACI/D,aAAa,CAACgE,aADlB,GAEIN,SAAS,IAAIvD,SAAS,CAAC8D,MAAvB,GACAjE,aAAa,CAACkE,WADd,GAEArD,SALN;AAMD;;AACD,QAAI+C,IAAJ,EAAU;AACR,WAAKO,aAAL,CAAmB,IAAIjE,eAAJ,CAAoB0D,IAApB,EAA0Bb,IAA1B,CAAnB;AACD;AACF,GApBD;;AAqBF;AArHA,EAA6B9C,UAA7B;;AAuHA,eAAeoC,cAAf","names":["DataTile","EventType","TileEventType","TileSource","TileSourceEvent","TileState","assign","createXYZ","extentFromProjection","getKeyZXY","getUid","toPromise","__extends","options","projection","undefined","tileGrid","extent","maxResolution","maxZoom","minZoom","tileSize","_super","cacheSize","attributions","attributionsCollapsible","opaque","state","tilePixelRatio","wrapX","transition","interpolate","_this","tileLoadingKeys_","loader_","loader","handleTileChange_","bind","bandCount","DataTileSource","z","x","y","pixelRatio","tileCoordKey","tileCache","containsKey","get","sourceLoader","tile","tileCoord","tileOptions","key","getKey","addEventListener","CHANGE","set","event","target","uid","tileState","getState","type","LOADING","TILELOADSTART","ERROR","TILELOADERROR","LOADED","TILELOADEND","dispatchEvent"],"sourceRoot":"","sources":["../src/source/DataTile.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}