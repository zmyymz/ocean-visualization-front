{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.map.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/DragRotate\n */\n\n\nimport PointerInteraction from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { altShiftKeysOnly, mouseActionButton, mouseOnly } from '../events/condition.js';\nimport { disable } from '../rotationconstraint.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */\n\nvar DragRotate =\n/** @class */\nfunction (_super) {\n  __extends(DragRotate, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function DragRotate(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      stopDown: FALSE\n    }) || this;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.condition_ = options.condition ? options.condition : altShiftKeysOnly;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.lastAngle_ = undefined;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.duration_ = options.duration !== undefined ? options.duration : 250;\n    return _this;\n  }\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n\n\n  DragRotate.prototype.handleDragEvent = function (mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return;\n    }\n\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n\n    var size = map.getSize();\n    var offset = mapBrowserEvent.pixel;\n    var theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n\n    if (this.lastAngle_ !== undefined) {\n      var delta = theta - this.lastAngle_;\n      view.adjustRotationInternal(-delta);\n    }\n\n    this.lastAngle_ = theta;\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  DragRotate.prototype.handleUpEvent = function (mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return true;\n    }\n\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    view.endInteraction(this.duration_);\n    return false;\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  DragRotate.prototype.handleDownEvent = function (mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return false;\n    }\n\n    if (mouseActionButton(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {\n      var map = mapBrowserEvent.map;\n      map.getView().beginInteraction();\n      this.lastAngle_ = undefined;\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return DragRotate;\n}(PointerInteraction);\n\nexport default DragRotate;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAGA,OAAOA,kBAAP,MAA+B,cAA/B;AACA,SAAQC,KAAR,QAAoB,iBAApB;AACA,SACEC,gBADF,EAEEC,iBAFF,EAGEC,SAHF,QAIO,wBAJP;AAKA,SAAQC,OAAR,QAAsB,0BAAtB;AAEA;;;;;;;;;AASA;;;;;;;;;;AASA;AAAA;AAAA;AAAyBC;AACvB;;;;;AAGA,sBAAYC,WAAZ,EAAuB;AAAvB;;AACE,QAAMC,OAAO,GAAGD,WAAW,GAAGA,WAAH,GAAiB,EAA5C;YAEAE,kBAAM;AACJC,cAAQ,EAAET;AADN,KAAN,KAEE;AAEF;;;;;AAIAU,SAAI,CAACC,UAAL,GAAkBJ,OAAO,CAACK,SAAR,GAAoBL,OAAO,CAACK,SAA5B,GAAwCX,gBAA1D;AAEA;;;;;AAIAS,SAAI,CAACG,UAAL,GAAkBC,SAAlB;AAEA;;;;;AAIAJ,SAAI,CAACK,SAAL,GAAiBR,OAAO,CAACS,QAAR,KAAqBF,SAArB,GAAiCP,OAAO,CAACS,QAAzC,GAAoD,GAArE;;AACD;AAED;;;;;;AAIAC,mDAAgBC,eAAhB,EAA+B;AAC7B,QAAI,CAACf,SAAS,CAACe,eAAD,CAAd,EAAiC;AAC/B;AACD;;AAED,QAAMC,GAAG,GAAGD,eAAe,CAACC,GAA5B;AACA,QAAMC,IAAI,GAAGD,GAAG,CAACE,OAAJ,EAAb;;AACA,QAAID,IAAI,CAACE,cAAL,GAAsBC,QAAtB,KAAmCnB,OAAvC,EAAgD;AAC9C;AACD;;AACD,QAAMoB,IAAI,GAAGL,GAAG,CAACM,OAAJ,EAAb;AACA,QAAMC,MAAM,GAAGR,eAAe,CAACS,KAA/B;AACA,QAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWN,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,GAAcE,MAAM,CAAC,CAAD,CAA/B,EAAoCA,MAAM,CAAC,CAAD,CAAN,GAAYF,IAAI,CAAC,CAAD,CAAJ,GAAU,CAA1D,CAAd;;AACA,QAAI,KAAKX,UAAL,KAAoBC,SAAxB,EAAmC;AACjC,UAAMiB,KAAK,GAAGH,KAAK,GAAG,KAAKf,UAA3B;AACAO,UAAI,CAACY,sBAAL,CAA4B,CAACD,KAA7B;AACD;;AACD,SAAKlB,UAAL,GAAkBe,KAAlB;AACD,GAlBD;AAoBA;;;;;;;AAKAX,iDAAcC,eAAd,EAA6B;AAC3B,QAAI,CAACf,SAAS,CAACe,eAAD,CAAd,EAAiC;AAC/B,aAAO,IAAP;AACD;;AAED,QAAMC,GAAG,GAAGD,eAAe,CAACC,GAA5B;AACA,QAAMC,IAAI,GAAGD,GAAG,CAACE,OAAJ,EAAb;AACAD,QAAI,CAACa,cAAL,CAAoB,KAAKlB,SAAzB;AACA,WAAO,KAAP;AACD,GATD;AAWA;;;;;;;AAKAE,mDAAgBC,eAAhB,EAA+B;AAC7B,QAAI,CAACf,SAAS,CAACe,eAAD,CAAd,EAAiC;AAC/B,aAAO,KAAP;AACD;;AAED,QACEhB,iBAAiB,CAACgB,eAAD,CAAjB,IACA,KAAKP,UAAL,CAAgBO,eAAhB,CAFF,EAGE;AACA,UAAMC,GAAG,GAAGD,eAAe,CAACC,GAA5B;AACAA,SAAG,CAACE,OAAJ,GAAca,gBAAd;AACA,WAAKrB,UAAL,GAAkBC,SAAlB;AACA,aAAO,IAAP;AACD,KARD,MAQO;AACL,aAAO,KAAP;AACD;AACF,GAhBD;;AAiBF;AA5FA,EAAyBf,kBAAzB;;AA8FA,eAAekB,UAAf","names":["PointerInteraction","FALSE","altShiftKeysOnly","mouseActionButton","mouseOnly","disable","__extends","opt_options","options","_super","stopDown","_this","condition_","condition","lastAngle_","undefined","duration_","duration","DragRotate","mapBrowserEvent","map","view","getView","getConstraints","rotation","size","getSize","offset","pixel","theta","Math","atan2","delta","adjustRotationInternal","endInteraction","beginInteraction"],"sourceRoot":"","sources":["../src/interaction/DragRotate.js"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}